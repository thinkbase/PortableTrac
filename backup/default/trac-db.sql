PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE system (
    name text PRIMARY KEY,
    value text
);
INSERT INTO "system" VALUES('database_version','29');
INSERT INTO "system" VALUES('initial_database_version','26');
INSERT INTO "system" VALUES('tractweakui_version','1');
INSERT INTO "system" VALUES('fullblog_version','2');
INSERT INTO "system" VALUES('fullblog_infotext','');
INSERT INTO "system" VALUES('visitcounter_version','1');
INSERT INTO "system" VALUES('TimingAndEstimationPlugin_Db_Version','6');
INSERT INTO "system" VALUES('custom_report_manager_version','1');
INSERT INTO "system" VALUES('T&E-statuses','assigned,accepted,closed,new,reopened');
INSERT INTO "system" VALUES('EstimatorPluginDbVersion','4');
INSERT INTO "system" VALUES('subtickets','2');
INSERT INTO "system" VALUES('mastertickets','2');
CREATE TABLE permission (
    username text,
    action text,
    UNIQUE (username,action)
);
INSERT INTO "permission" VALUES('anonymous','LOG_VIEW');
INSERT INTO "permission" VALUES('anonymous','FILE_VIEW');
INSERT INTO "permission" VALUES('anonymous','WIKI_VIEW');
INSERT INTO "permission" VALUES('authenticated','WIKI_CREATE');
INSERT INTO "permission" VALUES('authenticated','WIKI_MODIFY');
INSERT INTO "permission" VALUES('anonymous','SEARCH_VIEW');
INSERT INTO "permission" VALUES('anonymous','REPORT_VIEW');
INSERT INTO "permission" VALUES('anonymous','REPORT_SQL_VIEW');
INSERT INTO "permission" VALUES('anonymous','TICKET_VIEW');
INSERT INTO "permission" VALUES('authenticated','TICKET_CREATE');
INSERT INTO "permission" VALUES('authenticated','TICKET_MODIFY');
INSERT INTO "permission" VALUES('anonymous','BROWSER_VIEW');
INSERT INTO "permission" VALUES('anonymous','TIMELINE_VIEW');
INSERT INTO "permission" VALUES('anonymous','CHANGESET_VIEW');
INSERT INTO "permission" VALUES('anonymous','ROADMAP_VIEW');
INSERT INTO "permission" VALUES('anonymous','MILESTONE_VIEW');
INSERT INTO "permission" VALUES('admin','TRAC_ADMIN');
INSERT INTO "permission" VALUES('anonymous','TAGS_VIEW');
INSERT INTO "permission" VALUES('authenticated','TAGS_MODIFY');
INSERT INTO "permission" VALUES('anonymous','BLOG_VIEW');
INSERT INTO "permission" VALUES('authenticated','BLOG_COMMENT');
INSERT INTO "permission" VALUES('authenticated','BLOG_CREATE');
INSERT INTO "permission" VALUES('authenticated','BLOG_MODIFY_OWN');
INSERT INTO "permission" VALUES('anonymous','VOTE_VIEW');
INSERT INTO "permission" VALUES('authenticated','VOTE_MODIFY');
INSERT INTO "permission" VALUES('authenticated','TICKET_GRID_MODIFY');
CREATE TABLE auth_cookie (
    cookie text,
    name text,
    ipnr text,
    time integer,
    UNIQUE (cookie,ipnr,name)
);
CREATE TABLE session (
    sid text,
    authenticated integer,
    last_visit integer,
    UNIQUE (sid,authenticated)
);
INSERT INTO "session" VALUES('admin',1,1354553040);
CREATE TABLE session_attribute (
    sid text,
    authenticated integer,
    name text,
    value text,
    UNIQUE (sid,authenticated,name)
);
INSERT INTO "session_attribute" VALUES('admin',1,'plantuml','');
INSERT INTO "session_attribute" VALUES('admin',1,'visited-pages','WikiStart|SandBox');
INSERT INTO "session_attribute" VALUES('admin',1,'timeline.nextlastvisit','0');
INSERT INTO "session_attribute" VALUES('admin',1,'shown_vote_message','1');
INSERT INTO "session_attribute" VALUES('admin',1,'wiki_editrows','8');
INSERT INTO "session_attribute" VALUES('admin',1,'query_href','/default/report/6?asc=1&USER=admin&page=1');
INSERT INTO "session_attribute" VALUES('admin',1,'query_tickets','');
INSERT INTO "session_attribute" VALUES('admin',1,'timeline.lastvisit','1352317660617000');
CREATE TABLE attachment (
    type text,
    id text,
    filename text,
    size integer,
    time integer,
    description text,
    author text,
    ipnr text,
    UNIQUE (type,id,filename)
);
INSERT INTO "attachment" VALUES('wiki','SandBox','TracDragDropPlugin.png',73584,1354553673981000,'','admin','127.0.0.1');
INSERT INTO "attachment" VALUES('wiki','SandBox','TracDragDropPlugin2.png',67546,1354553717805000,'','admin','127.0.0.1');
CREATE TABLE wiki (
    name text,
    version integer,
    time integer,
    author text,
    ipnr text,
    text text,
    comment text,
    readonly integer,
    UNIQUE (name,version)
);
INSERT INTO "wiki" VALUES('CamelCase',1,1293789825784000,'trac','127.0.0.1','= !CamelCase =
New words created by smashing together capitalized words.

CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter; hence “AlabamA” and “ABc” will not be links.

== Customizing the Wiki behavior ==

Some people dislike linking by CamelCase.  While Trac remains faithful to the original Wiki style, it provides a number of ways to accomodate users with different preferences:
 * There''s an option (`ignore_missing_pages` in the [wiki:TracIni#wiki-section "[wiki]"] section of TracIni) to simply ignore links to missing pages when the link is written using the CamelCase style, instead of that word being replaced by a gray link followed by a question mark.[[BR]]
   That can be useful when CamelCase style is used to name code artifacts like class names and there''s no corresponding page for them.
 * There''s an option (`split_page_names` in the  [wiki:TracIni#wiki-section "[wiki]"] section of TracIni) to automatically insert space characters between the words of a CamelCase link when rendering the link.
 * Creation of explicit Wiki links is also easy, see WikiPageNames for details.
 * In addition, Wiki formatting can be disabled completely in some places (e.g. when rendering commit log messages). See `wiki_format_messages` in the [wiki:TracIni#changeset-section "[changeset]"] section of TracIni.

See TracIni for more information on the available options.

== More information on !CamelCase ==

 * http://c2.com/cgi/wiki?WikiCase
 * http://en.wikipedia.org/wiki/CamelCase

----
See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki',NULL,NULL);
INSERT INTO "wiki" VALUES('InterMapTxt',1,1293789825784000,'trac','127.0.0.1','= InterMapTxt =

== This is the place for defining InterWiki prefixes ==

This page was modelled after the MeatBall:InterMapTxt page.
In addition, an optional comment is allowed after the mapping.


This page is interpreted in a special way by Trac, in order to support
!InterWiki links in a flexible and dynamic way.

The code block after the first line separator in this page
will be interpreted as a list of !InterWiki specifications:
{{{
prefix <space> URL [<space> # comment]
}}}

By using `$1`, `$2`, etc. within the URL, it is possible to create 
InterWiki links which support multiple arguments, e.g. Trac:ticket:40.
The URL itself can be optionally followed by a comment, 
which will subsequently be used for decorating the links 
using that prefix.

New !InterWiki links can be created by adding to that list, in real time.
Note however that ''''deletions'''' are also taken into account immediately,
so it may be better to use comments for disabling prefixes.

Also note that !InterWiki prefixes are case insensitive.


== List of Active Prefixes ==

[[InterWiki]]


----

== Prefix Definitions ==

{{{
PEP     http://www.python.org/peps/pep-$1.html    # Python Enhancement Proposal 
PythonBug    http://bugs.python.org/issue$1       # Python Issue #$1
Python-issue http://bugs.python.org/issue$1       # Python Issue #$1

Trac-ML  http://thread.gmane.org/gmane.comp.version-control.subversion.trac.general/ # Message $1 in Trac Mailing List
trac-dev http://thread.gmane.org/gmane.comp.version-control.subversion.trac.devel/   # Message $1 in Trac Development Mailing List

Mercurial http://www.selenic.com/mercurial/wiki/index.cgi/ # the wiki for the Mercurial distributed SCM

RFC       http://tools.ietf.org/html/rfc$1          # IETF''s RFC $1
ISO       http://en.wikipedia.org/wiki/ISO_         # ISO Standard $1 in Wikipedia
kb        http://support.microsoft.com/kb/$1/en-us/ # Article $1 in Microsoft''s Knowledge Base

chromium-issue  http://code.google.com/p/chromium/issues/detail?id=

Django      http://code.djangoproject.com/intertrac/ # Django''s Trac

CreoleWiki   http://wikicreole.org/wiki/
Creole1Wiki  http://wikicreole.org/wiki/
Creole2Wiki  http://wiki.wikicreole.org/

MediaWiki    http://www.mediawiki.org/wiki/

#
# A arbitrary pick of InterWiki prefixes...
#
Acronym          http://www.acronymfinder.com/af-query.asp?String=exact&Acronym=
C2find           http://c2.com/cgi/wiki?FindPage&value=
Cache            http://www.google.com/search?q=cache:
CPAN             http://search.cpan.org/perldoc?
DebianBug        http://bugs.debian.org/
DebianPackage    http://packages.debian.org/
Dictionary       http://www.dict.org/bin/Dict?Database=*&Form=Dict1&Strategy=*&Query=
Google           http://www.google.com/search?q=
GoogleGroups     http://groups.google.com/group/$1/msg/$2        # Message $2 in $1 Google Group
JargonFile       http://downlode.org/perl/jargon-redirect.cgi?term=
MeatBall         http://www.usemod.com/cgi-bin/mb.pl?
MetaWiki         http://sunir.org/apps/meta.pl?
MetaWikiPedia    http://meta.wikipedia.org/wiki/
MoinMoin         http://moinmo.in/
WhoIs            http://www.whois.sc/
Why              http://clublet.com/c/c/why?
c2Wiki           http://c2.com/cgi/wiki?
WikiPedia        http://en.wikipedia.org/wiki/
}}}
',NULL,NULL);
INSERT INTO "wiki" VALUES('InterTrac',1,1293789825794000,'trac','127.0.0.1','= InterTrac Links  =

Trac supports a convenient way to refer to resources of other Trac servers, from within the Wiki markup, since version 0.10.

== Definitions ==

An InterTrac link can be seen as a scoped TracLinks.
It is used for referring to a Trac resource 
(Wiki page, changeset, ticket, ...) located in another
Trac environment.

== List of Active InterTrac Prefixes ==

[[InterTrac]]

== Link Syntax ==

Simply use the name of the other Trac environment as a prefix, 
followed by a colon, ending with the resource located in the other environment.

{{{
<target_environment>:<TracLinks>
}}}

The other resource is specified using a regular TracLinks, of any flavor.

That target environment name is either the real name of the 
environment, or an alias for it. 
The aliases are defined in `trac.ini` (see below).
The prefix is case insensitive.

If the InterTrac link is enclosed in square brackets (like `[th:WikiGoodiesPlugin]`), the InterTrac prefix is removed in the displayed link, like a normal link resolver would be (i.e. the above would be displayed as `WikiGoodiesPlugin`).

For convenience, there''s also some alternative short-hand form, 
where one can use an alias as an immediate prefix 
for the identifier of a ticket, changeset or report:
(e.g. `#T234`, `[T1508]`, `[trac 1508]`, ...)

== Examples ==

It is necessary to setup a configuration for the InterTrac facility.
This configuration has to be done in the TracIni file, `[intertrac]` section.

Example configuration:
{{{
...
[intertrac]
# -- Example of setting up an alias:
t = trac

# -- Link to an external Trac:
trac.title = Edgewall''s Trac for Trac
trac.url = http://trac.edgewall.org
}}}

The `.url` is mandatory and is used for locating the other Trac.
This can be a relative URL in case that Trac environment is located 
on the same server.

The `.title` information will be used for providing an useful tooltip
when moving the cursor over an InterTrac links.

Finally, the `.compat` option can be used to activate or disable
a ''''compatibility'''' mode:
 * If the targeted Trac is running a version below [trac:milestone:0.10 0.10] 
   ([trac:r3526 r3526] to be precise), then it doesn''t know how to dispatch an InterTrac 
   link, and it''s up to the local Trac to prepare the correct link. 
   Not all links will work that way, but the most common do. 
   This is called the compatibility mode, and is `true` by default. 
 * If you know that the remote Trac knows how to dispatch InterTrac links, 
   you can explicitly disable this compatibility mode and then ''''any'''' 
   TracLinks can become an InterTrac link.

Now, given the above configuration, one could create the following links:
 * to this InterTrac page:
   * `trac:wiki:InterTrac` trac:wiki:InterTrac
   * `t:wiki:InterTrac` t:wiki:InterTrac
   * Keys are case insensitive: `T:wiki:InterTrac` T:wiki:InterTrac
 * to the ticket #234:
   * `trac:ticket:234` trac:ticket:234
   * `trac:#234` trac:#234 
   * `#T234` #T234
 * to the changeset [1912]:
   * `trac:changeset:1912` trac:changeset:1912
   * `[T1912]` [T1912]
 * to the log range [3300:3330]: ''''''(Note: the following ones need `trac.compat=false`)''''''
   * `trac:log:@3300:3330` trac:log:@3300:3330  
   * `[trac 3300:3330]` [trac 3300:3330] 
 * finally, to link to the start page of a remote trac, simply use its prefix followed by '':'', inside an explicit link. Example: `[th: Trac Hacks]` (''''since 0.11; note that the ''''remote'''' Trac has to run 0.11 for this to work'''')

The generic form `intertrac_prefix:module:id` is translated
to the corresponding URL `<remote>/module/id`, shorthand links
are specific to some modules (e.g. !#T234 is processed by the
ticket module) and for the rest (`intertrac_prefix:something`),
we rely on the TracSearch#quickjump facility of the remote Trac.

----
See also: TracLinks, InterWiki
',NULL,NULL);
INSERT INTO "wiki" VALUES('InterWiki',1,1293789825794000,'trac','127.0.0.1','= Support for InterWiki links =

''''(since [trac:milestone:0.10 0.10])''''

== Definition ==

An InterWiki link can be used for referring to a Wiki page
located in another Wiki system, and by extension, to any object
located in any other Web application, provided a simple URL 
mapping can be done.

At the extreme, InterWiki prefixes can even be used to simply introduce
links to new protocols, such as `tsvn:` used by [trac:TortoiseSvn TortoiseSvn].

== Link Syntax ==

{{{
<target_wiki>(:<identifier>)+
}}}

The link is composed by the targeted Wiki (or system) name,
followed by a colon (e.g. `MeatBall:`),
followed by a page specification in the target.
Note that, as for InterTrac prefixes, ''''''InterWiki prefixes are case insensitive''''''.

The target Wiki URL is looked up in the InterMapTxt wiki page, 
modelled after MeatBall:InterMapTxt.

In addition to traditional InterWiki links, where the target
is simply ''''appended'''' to the URL, 
Trac supports parametric InterWiki URLs:
identifiers `$1`, `$2`, ... in the URL
will be replaced by corresponding arguments.
The argument list is formed by splitting the page identifier
using the ":" separator.

== Examples ==

If the following is an excerpt of the InterMapTxt page:

{{{
= InterMapTxt =
== This is the place for defining InterWiki prefixes ==

Currently active prefixes: [[InterWiki]]

This page is modelled after the MeatBall:InterMapTxt page.
In addition, an optional comment is allowed after the mapping.
----
{{{
PEP      http://www.python.org/peps/pep-$1.html           # Python Enhancement Proposal $1 
Trac-ML  http://thread.gmane.org/gmane.comp.version-control.subversion.trac.general/$1  # Message $1 in Trac Mailing List

tsvn     tsvn:                                            # Interact with TortoiseSvn
...
MeatBall http://www.usemod.com/cgi-bin/mb.pl?
MetaWiki http://sunir.org/apps/meta.pl?
MetaWikiPedia http://meta.wikipedia.org/wiki/
MoinMoin http://moinmoin.wikiwikiweb.de/
...
}}}
}}}

Then, 
 * `MoinMoin:InterWikiMap` should be rendered as MoinMoin:InterWikiMap
   and the ''''title'''' for that link would be "!InterWikiMap in !MoinMoin"
 * `Trac-ML:4346` should be rendered as Trac-ML:4346
   and the ''''title'''' for that link would be "Message 4346 in Trac Mailing List"

----
See also: InterTrac, InterMapTxt',NULL,NULL);
INSERT INTO "wiki" VALUES('PageTemplates',1,1293789825804000,'trac','127.0.0.1','= Wiki Page Templates = 

  ''''(since [http://trac.edgewall.org/milestone/0.11 0.11])''''

The default content for a new wiki page can be chosen from a list of page templates. 

That list is made up from all the existing wiki pages having a name starting with ''''PageTemplates/''''.
The initial content of a new page will simply be the content of the chosen template page, or a blank page if the special ''''(blank page)'''' entry is selected. When there''s actually no wiki pages matching that prefix, the initial content will always be the blank page and the list selector will not be shown (i.e. this matches the behavior we had up to now).

To create a new template, simply create a new page having a name starting with ''''PageTemplates/''''.

(Hint: one could even create a ''''!PageTemplates/Template'''' for facilitating the creation of new templates!)

After you have created your new template, a drop-down selection box will automatically appear on any new wiki pages that are created.  By default it is located on the right side of the ''Create this page'' button.

Available templates: 
[[TitleIndex(PageTemplates/)]]
----
See also: TracWiki',NULL,NULL);
INSERT INTO "wiki" VALUES('RecentChanges',1,1293789825804000,'trac','127.0.0.1',''''''' [TitleIndex Index by Title] '''''' | '''''' Index by Date ''''''

[[RecentChanges]]',NULL,NULL);
INSERT INTO "wiki" VALUES('TitleIndex',1,1293789825814000,'trac','127.0.0.1',''''''' Index by Title '''''' | '''''' [RecentChanges Index by Date] ''''''

[[TitleIndex(format=group,min=4)]]',NULL,NULL);
INSERT INTO "wiki" VALUES('TracAccessibility',1,1293789825814000,'trac','127.0.0.1','= Accessibility Support in Trac =

Not every user has a graphic environment with a mouse or other pointing device. Some users rely on keyboard, alternative keyboard or voice input to navigate links, activate form controls, etc. In Trac, we work to assure users may interact with devices other than a pointing device.

Trac supports accessibility keys for the most common operations. On Windows and Linux platforms, press any of the keys listed below in combination with the `<Alt>` key; on a Mac, use the `<ctrl>` key instead.

''''Note that when using Internet Explorer on Windows, you need to hit `<Enter>` after having used the access key.''''[[BR]]
''''Note that when using Firefox 2.0 on Windows, you need to hit `<Shift> + <Alt> + <Key>`.''''

== Global Access Keys ==

 * `1` - WikiStart
 * `2` - [wiki:TracTimeline Timeline]
 * `3` - [wiki:TracRoadmap Roadmap]
 * `4` - [wiki:TracSearch Search]
 * `6` - [wiki:TracGuide Trac Guide / Documentation]
 * `7` - [wiki:TracTickets New Ticket]
 * `9` - [/about About Trac]
 * `0` - This page
 * `e` - Edit this page
 * `f` - Search


----
See also: TracGuide',NULL,NULL);
INSERT INTO "wiki" VALUES('TracAdmin',1,1293789825824000,'trac','127.0.0.1','= TracAdmin =
[[TracGuideToc]]

Trac is distributed with a powerful command-line configuration tool. This tool can be used  to configure and customize your Trac-installation to better fit your needs.

Some of those operations can also be performed via the ''''Admin'''' web interface, an updated version of the [trac:WebAdmin] plugin now integrated within Trac (since version 0.11).

== Usage ==

For nearly every `trac-admin` command, you''ll need to specify the path to the TracEnvironment that you want to administer as the first argument, for example:
{{{
trac-admin /path/to/projenv wiki list
}}}

The only exception is for the `help` command, but even in this case if you omit the environment, you''ll only get a very succinct list of commands (`help` and `initenv`), the same list you''d get when invoking `trac-admin` alone.
Also, `trac-admin --version` will tell you about the Trac version (e.g. 0.12) corresponding to the program.

If you want to get a comprehensive list of the available commands and sub-commands, you need to specify an existing environment:
{{{
trac-admin /path/to/projenv help
}}}

Some commands have a more detailed help, which you can access by specifying the command''s name as a subcommand for `help`:

{{{
trac-admin /path/to/projenv help <command>
}}}

=== `trac-admin <targetdir> initenv` === #initenv

This subcommand is very important as it''s the one used to create a TracEnvironment in the specified `<targetdir>`. That directory must not exists prior to the call.

[[TracAdminHelp(initenv)]]

It supports an extra `--inherit` option, which can be used to specify a global configuration file which can be used share settings between several environments. You can also inherit from a shared configuration afterwards, by setting the `[inherit] file` option in the `conf/trac.ini` file in your newly created environment, but the advantage of specifying the inherited configuration file at environment creation time is that only the options ''''not'''' already specified in the global configuration file will be written in the created environment''s `conf/trac.ini` file.
See TracIni#GlobalConfiguration.

Note that in version 0.11 of Trac, `initenv` lost an extra last argument `<templatepath>`, which was used in previous versions to point to the `templates` folder. If you are using the one-liner ''`trac-admin /path/to/trac/ initenv <projectname> <db> <repostype> <repospath>`'' in the above and getting an error that reads ''''''''`Wrong number of arguments to initenv: 4`'''''''', then this is because you''re using a `trac-admin` script from an ''''''older'''''' version of Trac.

== Interactive Mode ==

When passing the environment path as the only argument, `trac-admin` starts in interactive mode.
Commands can then be executed on the selected environment using the prompt, which offers tab-completion
(on non-Windows environments, and when the Python `readline` module is available) and automatic repetition of the last command issued.

Once you''re in interactive mode, you can also get help on specific commands or subsets of commands:

For example, to get an explanation of the `resync` command, run:
{{{
> help resync
}}}

To get help on all the Wiki-related commands, run:
{{{
> help wiki
}}}

== Full Command Reference ==

You''ll find below the detailed help for all the commands available by default in `trac-admin`. Note that this may not match the list given by `trac-admin <yourenv> help`, as the commands  pertaining to components disabled in that environment won''t be available and conversely some plugins activated in the environment can add their own commands.

[[TracAdminHelp()]]

----
See also: TracGuide, TracBackup, TracPermissions, TracEnvironment, TracIni, [trac:TracMigrate TracMigrate]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracBackup',1,1293789825824000,'trac','127.0.0.1','= Trac Backup =
[[TracGuideToc]]

Since Trac uses a database backend, some extra care is required to safely create a backup of a [wiki:TracEnvironment project environment]. Luckily, [wiki:TracAdmin trac-admin] has a command to make backups easier: `hotcopy`.

  ''''Note: Trac uses the `hotcopy` nomenclature to match that of [http://subversion.tigris.org/ Subversion], to make it easier to remember when managing both Trac and Subversion servers.''''

== Creating a Backup ==

To create a backup of a live TracEnvironment, simply run:
{{{

  $ trac-admin /path/to/projenv hotcopy /path/to/backupdir

}}}

[wiki:TracAdmin trac-admin] will lock the database while copying.''''

The resulting backup directory is safe to handle using standard file-based backup tools like `tar` or `dump`/`restore`.

Please, note, that hotcopy command does not overwrite target directory and when such exists, hotcopy ends with error: `Command failed: [Errno 17] File exists:` This is discussed in [trac:ticket:3198 #3198].

=== Restoring a Backup ===

Backups are simply a copied snapshot of the entire [wiki:TracEnvironment project environment] directory, including the SQLite database. 

To restore an environment from a backup, stop the process running Trac (i.e. the Web server or [wiki:TracStandalone tracd]), restore the contents of your backup (path/to/backupdir) to your [wiki:TracEnvironment project environment] directory and restart the service.

  ''''Note: Automatic backup of environments that don''t use SQLite as database backend is not supported at this time. As a workaround, we recommend that you stop the server, copy the environment directory, and make a backup of the database using whatever mechanism is provided by the database system.''''

----
See also: TracAdmin, TracEnvironment, TracGuide, [trac:TracMigrate TracMigrate]',NULL,NULL);
INSERT INTO "wiki" VALUES('TracBrowser',1,1293789825834000,'trac','127.0.0.1','= The Trac Repository Browser =
[[TracGuideToc]]

The Trac repository browser can be used to browse specific revisions of directories 
and files stored in the repositories associated with the Trac environment.

''''(since 0.12)'''': 
At the top-level of the repository browser is the ''''''Repository Index'''''', 
listing all the configured repositories. 
Each repository has a name which is used as a path prefix in a 
"virtual" file hierarchy encompassing all the available repositories.
If a default repository has been configured, its top-level files and directories 
are also listed, in a ''''''Default Repository'''''' section placed before the 
repository index. If the default repository is the only repository associated 
with the Trac environment the ''''''Repository Index'''''' will be omitted ^[#note-multirepos (1)]^.

Directory entries are displayed in a list with sortable columns. The list 
entries can be sorted by ''''Name'''', ''''Size'''', ''''Age'''' or ''''Author'''' by clicking on the column
headers. The sort order can be reversed by clicking on a given column
header again.

The browser can be used to navigate through the directory structure 
by clicking on the directory names. 
Clicking on a file name will show the contents of the file. 
Clicking on the revision number of a file or directory will take 
you to the TracRevisionLog for that file.
Note that there''s also a ''''Revision Log'''' navigation link that will do the 
same for the path currently being examined.
Clicking on the ''''diff'''' icon after revision number will display the changes made 
to the files modified in that revision.
Clicking on the ''''Age'''' of the file - will take you to that changeset in the timeline.

It''s also possible to browse directories or files as they were in history,
at any given repository revision. The default behavior is to display the
latest revision but another revision number can easily be selected using
the ''''View revision'''' input field at the top of the page.

The color bar next to the ''''Age'''' column gives a visual indication of the age
of the last change to a file or directory, following the convention that
''''''[[span(style=color:#88f,blue)]]'''''' is oldest and ''''''[[span(style=color:#f88,red)]]''''''
is newest, but this can be [TracIni#browser-section configured].

At the top of the browser page, there''s a ''''Visit'''' drop-down menu which you can use 
to select some interesting places in the repository, for example branches or tags. 
This is sometimes referred to as the ''''browser quickjump'''' facility.
The precise meaning and content of this menu depends on your repository backend.
For Subversion, this list contains by default the top-level trunk directory 
and sub-directories of the top-level branches and tags directories 
(`/trunk`, `/branches/*`, and `/tags/*`).  This can be [TracIni#svn-section configured] 
for more advanced cases.

If you''re using a Javascript enabled browser, you''ll be able to expand and 
collapse directories in-place by clicking on the arrow head at the right side of a 
directory. Alternatively, the [trac:TracKeys keyboard] can also be used for this: 
 - use `''j''` and `''k''` to select the next or previous entry, starting with the first
 - `''o''` (open) to toggle between expanded and collapsed state of the selected 
   directory or for visiting the selected file 
 - `''v''` (view, visit) and `''<Enter>''`, same as above
 - `''r''` can be used to force the reload of an already expanded directory
 - `''A''` can be used to directly visit a file in annotate (blame) mode
 - `''L''` to view the log for the selected entry
If no row has been selected using `''j''` or `''k''` these keys will operate on the entry under the mouse .

{{{#!comment
MMM: I guess that some keys are upper case and some lower to avoid conflicts with browser defined keys.
I find for example in Firefox and IE on windows that ''a'' works as well as ''A'' but ''l'' does not work for ''L''.
 cboos: ''l'' is reserved for Vim like behavior, see #7867
}}}

For the Subversion backend, some advanced additional features are available:
 - The `svn:needs-lock` property will be displayed
 - Support for the `svn:mergeinfo` property showing the merged and eligible information
 - Support for browsing the `svn:externals` property 
   (which can be [TracIni#svn:externals-section configured])
 - The `svn:mime-type` property is used to select the syntax highlighter for rendering 
   the file. For example, setting `svn:mime-type` to `text/html` will ensure the file is 
   highlighted as HTML, regardless of the file extension. It also allows selecting the character 
   encoding used in the file content. For example, if the file content is encoded in UTF-8, 
   set `svn:mime-type` to `text/html;charset=utf-8`. The `charset=` specification overrides the 
   default encoding defined in the `default_charset` option of the `[trac]` section 
   of [TracIni#trac-section trac.ini].
{{{#!comment
MMM: I found this section a bit hard to understand. I changed the first item as I understood that well.
but I think the other items could be changed also
 cboos: in the meantime, I''ve added the ''''advanced'''' word as a hint this can be a bit complex...
}}}


----
{{{#!div style="font-size:85%"
[=#note-multirepos (1)] -  This means that after upgrading a single-repository Trac of version 
0.11 (or below) to a multi-repository Trac (0.12), the repository browser will look and feel 
the same, that single repository becoming automatically the "default" repository.
}}}

See also: TracGuide, TracChangeset, TracFineGrainedPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracCgi',1,1293789825844000,'trac','127.0.0.1','= Installing Trac as CGI =

{{{
#!div class=important
  ''''Please note that using Trac via CGI is the slowest deployment method available. It is slower than [TracModPython mod_python], [TracFastCgi FastCGI] and even [trac:TracOnWindowsIisAjp IIS/AJP] on Windows.''''
}}}

CGI script is the entrypoint that web-server calls when a web-request to an application is made. To generate the `trac.cgi` script run:
{{{
trac-admin /path/to/env deploy /path/to/www/trac
}}}
`trac.cgi` will be in the `cgi-bin` folder inside the given path. Make sure it is executable by your web server. This command also copies `static resource` files to a `htdocs` directory of a given destination.

== Apache web-server configuration ==

In [http://httpd.apache.org/ Apache] there are two ways to run Trac as CGI:

 1. Use a `ScriptAlias` directive that maps an URL to the `trac.cgi` script (recommended)
 2. Copy the `trac.cgi` file into the directory for CGI executables used by your web server (commonly named `cgi-bin`). You can also create a symbolic link, but in that case make sure that the `FollowSymLinks` option is enabled for the `cgi-bin` directory.

To make Trac available at `http://yourhost.example.org/trac` add `ScriptAlias` directive to Apache configuration file, changing `trac.cgi` path to match your installation:
{{{
ScriptAlias /trac /path/to/www/trac/cgi-bin/trac.cgi
}}}

 ''''Note that this directive requires enabled `mod_alias` module.''''

If you''re using Trac with a single project you need to set its location using the `TRAC_ENV` environment variable:
{{{
<Location "/trac">
  SetEnv TRAC_ENV "/path/to/projectenv"
</Location>
}}}

Or to use multiple projects you can specify their common parent directory using the `TRAC_ENV_PARENT_DIR` variable:
{{{
<Location "/trac">
  SetEnv TRAC_ENV_PARENT_DIR "/path/to/project/parent/dir"
</Location>
}}}

 ''''Note that the `SetEnv` directive requires enabled `mod_env` module. It is also possible to set TRAC_ENV in trac.cgi. Just add the following code between "try:" and "from trac.web ...":''''

{{{
    import os
    os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}

 '''' Or for TRAC_ENV_PARENT_DIR: ''''

{{{
    import os
    os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

If you are using the [http://httpd.apache.org/docs/suexec.html Apache suEXEC] feature please see [http://trac.edgewall.org/wiki/ApacheSuexec].

On some systems, you ''''may'''' need to edit the shebang line in the `trac.cgi` file to point to your real Python installation path. On a Windows system you may need to configure Windows to know how to execute a .cgi file (Explorer -> Tools -> Folder Options -> File Types -> CGI).

== Mapping Static Resources ==

Out of the box, Trac will pass static resources such as style sheets or images through itself. For a CGI setup this is ''''''highly undesirable'''''', because this way CGI script is invoked for documents that could be much more efficiently served directly by web server.

Web servers such as [http://httpd.apache.org/ Apache] allow you to create “Aliases” to resources, giving them a virtual URL that doesn''t necessarily reflect the layout of the servers file system. We already used this capability by defining a `ScriptAlias` for the CGI script. We also can map requests for static resources directly to the directory on the file system, avoiding processing these requests by CGI script.

There are two primary URL paths for static resources - `/chrome/common` and `/chrome/site`. Plugins can add their own resources usually accessible by `/chrome/plugin` path, so its important to override only known paths and not try to make universal `/chrome` alias for everything.

Add the following snippet to Apache configuration ''''''before'''''' the `ScriptAlias` for the CGI script, changing paths to match your deployment:
{{{
Alias /trac/chrome/common /path/to/trac/htdocs/common
Alias /trac/chrome/site /path/to/trac/htdocs/site
<Directory "/path/to/www/trac/htdocs">
  Order allow,deny
  Allow from all
</Directory>
}}}

If using mod_python, you might want to add this too (otherwise, the alias will be ignored):
{{{
<Location "/trac/chrome/common/">
  SetHandler None
</Location>
}}}

Note that we mapped `/trac` part of the URL to the `trac.cgi` script, and the path `/chrome/common` is the path you have to append to that location to intercept requests to the static resources. 

For example, if Trac is mapped to `/cgi-bin/trac.cgi` on your server, the URL of the Alias should be `/cgi-bin/trac.cgi/chrome/common`.

Similarly, if you have static resources in a project''s htdocs directory (which is referenced by /chrome/site URL in themes), you can configure Apache to serve those resources (again, put this ''''''before'''''' the `ScriptAlias` for the CGI script, and adjust names and locations to match your installation):

{{{
Alias /trac/chrome/site /path/to/projectenv/htdocs
<Directory "/path/to/projectenv/htdocs">
  Order allow,deny
  Allow from all
</Directory>
}}}

Alternatively to hacking `/trac/chrome/site`, you can directly specify path to static resources using `htdocs_location` configuration option in [wiki:TracIni trac.ini]:
{{{
[trac]
htdocs_location = http://yourhost.example.org/trac-htdocs
}}}

Trac will then use this URL when embedding static resources into HTML pages. Of course, you still need to make the Trac `htdocs` directory available through the web server at the specified URL, for example by copying (or linking) the directory into the document root of the web server:
{{{
$ ln -s /path/to/www/trac/htdocs /var/www/yourhost.example.org/trac-htdocs
}}}

Note that in order to get this `htdocs` directory, you need first to extract the relevant Trac resources using the `deploy` command of TracAdmin:
[[TracAdminHelp(deploy)]]


== Adding Authentication ==

The simplest way to enable authentication with Apache is to create a password file. Use the `htpasswd` program to create the password file:
{{{
$ htpasswd -c /somewhere/trac.htpasswd admin
New password: <type password>
Re-type new password: <type password again>
Adding password for user admin
}}}

After the first user, you dont need the "-c" option anymore:
{{{
$ htpasswd /somewhere/trac.htpasswd john
New password: <type password>
Re-type new password: <type password again>
Adding password for user john
}}}

  ''''See the man page for `htpasswd` for full documentation.''''

After you''ve created the users, you can set their permissions using TracPermissions.

Now, you''ll need to enable authentication against the password file in the Apache configuration:
{{{
<Location "/trac/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</Location>
}}}

If you''re hosting multiple projects you can use the same password file for all of them:
{{{
<LocationMatch "/trac/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</LocationMatch>
}}}

For better security, it is recommended that you either enable SSL or at least use the “digest” authentication scheme instead of “Basic”. Please read the [http://httpd.apache.org/docs/2.0/ Apache HTTPD documentation] to find out more. For example, on a Debian 4.0r1 (etch) system the relevant section  in apache configuration can look like this:
{{{
<Location "/trac/login">
    LoadModule auth_digest_module /usr/lib/apache2/modules/mod_auth_digest.so
    AuthType Digest
    AuthName "trac"
    AuthDigestDomain /trac
    AuthUserFile /somewhere/trac.htpasswd
    Require valid-user
</Location>
}}}
and you''ll have to create your .htpasswd file with htdigest instead of htpasswd as follows:
{{{
# htdigest /somewhere/trac.htpasswd trac admin
}}}
where the "trac" parameter above is the same as !AuthName above  ("Realm" in apache-docs). 

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI], TracFastCgi, TracModPython',NULL,NULL);
INSERT INTO "wiki" VALUES('TracChangeset',1,1293789825844000,'trac','127.0.0.1','= Trac Changeset Module =
[[TracGuideToc]]

Trac has a built-in functionality for visualizing “diffs” - changes to files.

There are different kinds of ''''change sets''''. 
Some can correspond to revisions made in the repositories,
others can aggregate changes made in several revisions, 
but in the end, any kind of differences can be shown.

The changeset view consists of two parts, the ''''header'''' 
and the ''''diff views''''.

== Changeset Header ==

The header shows an overview of the whole changeset.
Here you will find information such as:

 * Timestamp — When the changeset was commited
 * Author — Who commited the changeset
 * Message — A brief description from the author (the commit log message)
 * Location — Parent directory of all files affected by this changeset
 * Files — A list of files affected by this changeset

If more than one revision is involved in the set of changes being
displayed, the ''''Timestamp'''', ''''Author'''' and ''''Message'''' fields 
won''t be shown.

In front of each listed file, you''ll find  a colored rectangle. The color
indicates how the file is affected by the changeset.
 
 * Green: Added
 * Red: Removed
 * Yellow: Modified
 * Blue: Copied
 * Gray: Moved

The color legend is located below the header as a reminder.

== Diff Views ==

Below the header is the main part of the changeset, the diff view. Each file is shown in a separate section, each of which will contain only the regions of the file that are affected by the changeset. There are two different styles of displaying the diffs: ''''inline'''' or ''''side-by-side'''' (you can switch between those styles using the preferences form):

 * The ''''inline'''' style shows the changed regions of a file underneath each other. A region removed from the file will be colored red, an added region will be colored green. If a region was modified, the old version is displayed above the new version. Line numbers on the left side indicate the exact position of the change in both the old and the new version of the file.
 * The ''''side-by-side'''' style shows the old version on the left and the new version on the right (this will typically require more screen width than the inline style.) Added and removed regions will be colored in the same way as with the inline style (green and red, respectively), but modified regions will have a yellow background.

In addition, various advanced options are available in the preferences form for adjusting the display of the diffs:
 * You can set how many lines are displayed before and after every change
   (if the value ''''all'''' is used, then the full file will be shown)
 * You can toggle whether blank lines, case changes and white space changes are ignored, thereby letting you find the functional changes more quickly


== The Different Ways to Get a Diff ==

=== Examining a Changeset ===

When viewing a repository check-in, such as when following a
changeset [wiki:TracLinks link] or a changeset event in the 
[wiki:TracTimeline timeline], Trac will display the exact changes
made by the check-in.

There will be also navigation links to the ''''Previous Changeset''''
to and ''''Next Changeset''''.

=== Examining Differences Between Revisions ===

Often you''ll want to look at changes made on a file 
or on a directory spanning multiple revisions. The easiest way
to get there is from the TracRevisionLog, where you can select
the ''''old'''' and the ''''new'''' revisions of the file or directory, and
then click the ''''View changes'''' button.

=== Examining Differences Between Branches ===

One of the core features of version control systems is the possibility
to work simultaneously on different ''''Lines of Developments'''', commonly
called “branches”. Trac enables you to examine the exact differences
between such branches.

Using the ''''''View changes ...'''''' button in the TracBrowser allows you to enter
''''From:'''' and ''''To:'''' path/revision pairs. The resulting set of differences consist
of the changes that should be applied to the ''''From:'''' content in order
to get to the ''''To:'''' content.

For convenience, it is possible to invert the roles of the ''''old'''' and the ''''new''''
path/revision pairs by clicking the ''''Reverse Diff'''' link on the changeset page.

=== Checking the Last Change ===

The last possibility for examining changes is to use the ''''Last Change''''
link provided by the TracBrowser.

This link will take you to the last change that was made on that path.
From there, you can use the ''''Previous Change'''' and ''''Next Change'''' links
to traverse the change history of the file or directory.

----
See also: TracGuide, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracEnvironment',1,1293789825844000,'trac','127.0.0.1','= The Trac Environment =

Trac uses a directory structure and a database for storing project data. The directory is referred to as the “environment”.

== Creating an Environment ==

A new Trac environment is created using  [TracAdmin#initenv trac-admin''s initenv]:
{{{
$ trac-admin /path/to/myproject initenv
}}}

`trac-admin` will ask you for the name of the project and the
database connection string (explained below).

=== Some Useful Tips
 - The user under which the web server runs will require file system write permission to 
 the environment directory and all the files inside. Please remember to set
 the appropriate permissions. The same applies to the source code repository, 
 although the user under which Trac runs will only require write access to a Subversion repository created with the BDB file system; for other repository types, check the corresponding plugin''s documentation. 
 
 - `initenv`, when using an svn repository, does not imply that trac-admin will perform `svnadmin create` for the specified repository path. You need to perform the `svnadmin create` prior to `trac-admin initenv` if you''re creating a new svn repository altogether with a new trac environment, otherwise you will see a message "Warning: couldn''t index the repository" when initializing the environment.

 - Non-ascii environment paths are not supported
 
 - Also, it seems that project names with spaces can be problematic for authentication (see [trac:#7163]).

 - TracPlugins located in a [TracIni#inherit-section shared plugins folder] that is defined in an [TracIni#GlobalConfiguration inherited configuration] are currently not loaded during creation, and hence, if they need to create extra tables for example, you''ll need to [TracUpgrade#UpgradetheTracEnvironment upgrade the environment] before being able to use it.

== Database Connection Strings ==

Since version 0.9, Trac supports both [http://sqlite.org/ SQLite] and
[http://www.postgresql.org/ PostgreSQL] database backends.  Preliminary
support for [http://mysql.com/ MySQL] was added in 0.10.  The default is
to use SQLite, which is probably sufficient for most projects. The database
file is then stored in the environment directory, and can easily be 
[wiki:TracBackup backed up] together with the rest of the environment.

=== SQLite Connection String ===
The connection string for an SQLite database is:
{{{
sqlite:db/trac.db
}}}
where `db/trac.db` is the path to the database file within the Trac environment.

=== PostgreSQL Connection String ===
If you want to use PostgreSQL or MySQL instead, you''ll have to use a
different connection string. For example, to connect to a PostgreSQL
database on the same machine called `trac`, that allows access to the
user `johndoe` with the password `letmein`, use:
{{{
postgres://johndoe:letmein@localhost/trac
}}}
''''Note that due to the way the above string is parsed, the "/" and "@" characters cannot be part of the password.''''

If PostgreSQL is running on a non-standard port (for example 9342), use:
{{{
postgres://johndoe:letmein@localhost:9342/trac
}}}

On UNIX, you might want to select a UNIX socket for the transport,
either the default socket as defined by the PGHOST environment variable:
{{{
postgres://user:password@/database
}}}
or a specific one:
{{{
postgres://user:password@/database?host=/path/to/socket/dir
}}}

Note that with PostgreSQL you will have to create the database before running
`trac-admin initenv`.

See the [http://www.postgresql.org/docs/ PostgreSQL documentation] for detailed instructions on how to administer [http://postgresql.org PostgreSQL].
Generally, the following is sufficient to create a database user named `tracuser`, and a database named `trac`.
{{{
createuser -U postgres -E -P tracuser
createdb -U postgres -O tracuser -E UTF8 trac
}}}
When running `createuser` you will be prompted for the password for the user ''tracuser''. This new user will not be a superuser, will not be allowed to create other databases and will not be allowed to create other roles. These privileges are not needed to run a trac instance. If no password is desired for the user, simply remove the `-P` and `-E` options from the `createuser` command.  Also note that the database should be created as UTF8. LATIN1 encoding causes errors trac''s use of unicode in trac.  SQL_ASCII also seems to work.

Under some default configurations (debian) one will have run the `createuser` and `createdb` scripts as the `postgres` user.  For example:
{{{
sudo su - postgres -c ''createuser -U postgres -S -D -R -E -P tracuser''
sudo su - postgres -c ''createdb -U postgres -O tracuser -E UTF8 trac''
}}}

Trac uses the `public` schema by default but you can specify a different schema in the connection string:
{{{
postgres://user:pass@server/database?schema=yourschemaname
}}}

=== MySQL Connection String ===

If you want to use MySQL instead, you''ll have to use a
different connection string. For example, to connect to a MySQL
database on the same machine called `trac`, that allows access to the
user `johndoe` with the password `letmein`, the mysql connection string is:
{{{
mysql://johndoe:letmein@localhost:3306/trac
}}}

== Source Code Repository ==

Since version 0.12, a single Trac environment can be connected to more than one repository. There are many different ways to connect repositories to an environment, see TracRepositoryAdmin. This page also details the various attributes that can be set for a repository (like `type`, `url`, `description`).

In Trac 0.12 `trac-admin` no longer asks questions related to repositories. Therefore, by default Trac is not connected to any source code repository, and the ''''Browse Source'''' toolbar item will not be displayed.
You can also explicitly disable the `trac.versioncontrol.*` components (which are otherwise still loaded)
{{{
[components]
trac.versioncontrol.* = disabled
}}}

For some version control systems, it is possible to specify not only the path to the repository,
but also a ''''scope'''' within the repository. Trac will then only show information
related to the files and changesets below that scope. The Subversion backend for
Trac supports this; for other types, check the corresponding plugin''s documentation.

Example of a configuration for a Subversion repository used as the default repository:
{{{
[trac]
repository_type = svn
repository_dir = /path/to/your/repository
}}}

The configuration for a scoped Subversion repository would be:
{{{
[trac]
repository_type = svn
repository_dir = /path/to/your/repository/scope/within/repos
}}}

== Directory Structure ==

An environment directory will usually consist of the following files and directories:

 * `README` - Brief description of the environment.
 * `VERSION` - Contains the environment version identifier.
 * `attachments` - Attachments to wiki pages and tickets are stored here.
 * `conf`
   * `trac.ini` - Main configuration file. See TracIni.
 * `db`
   * `trac.db` - The SQLite database (if you''re using SQLite).
 * `htdocs` - directory containing web resources, which can be referenced in Genshi templates using `/htdocs/site/...` URLs. ''''(since 0.11)''''
 * `log` - default directory for log files, if logging is turned on and a relative path is given.
 * `plugins` - Environment-specific [wiki:TracPlugins plugins] (Python eggs or single file plugins, since [trac:milestone:0.10 0.10])
 * `templates` - Custom Genshi environment-specific templates. ''''(since 0.11)''''
   * `site.html` - method to customize header, footer, and style, described in TracInterfaceCustomization#SiteAppearance

''''''Caveat:'''''' ''''don''t confuse a Trac environment directory with the source code repository directory.'''' 

This is a common beginners'' mistake.
It happens that the structure for a Trac environment is loosely modelled after the Subversion repository directory 
structure, but those are two disjoint entities and they are not and ''''must not'''' be located at the same place.

----
See also: TracAdmin, TracBackup, TracIni, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracFastCgi',1,1293789825844000,'trac','127.0.0.1','= Trac with FastCGI =

[http://www.fastcgi.com/ FastCGI] interface allows Trac to remain resident much like with [wiki:TracModPython mod_python]. It is faster than external CGI interfaces which must start a new process for each request. However, unlike mod_python, FastCGI supports [http://httpd.apache.org/docs/suexec.html Apache SuEXEC], i.e. run with different permissions than web server. Additionally, it is supported by much wider variety of web servers.

''''''Note for Windows:'''''' Trac''s FastCGI does not run under Windows, as Windows does not implement `Socket.fromfd`, which is used by `_fcgi.py`. If you want to connect to IIS, you may want to try [trac:TracOnWindowsIisAjp AJP].

== Simple Apache configuration ==

There are two FastCGI modules commonly available for Apache: `mod_fastcgi` and
`mod_fcgid` (preferred). The latter is more up-to-date.

==== setup with `mod_fastcgi` ====
`mod_fastcgi` uses `FastCgiIpcDir` and `FastCgiConfig` directives that should be added to an appropriate Apache configuration file:
{{{
# Enable fastcgi for .fcgi files
# (If you''re using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}
Setting `FastCgiIpcDir` is optional if the default is suitable. Note that the `LoadModule` line must be after the `IfModule` group.

Configure `ScriptAlias` or similar options as described in TracCgi, but
calling `trac.fcgi` instead of `trac.cgi`.

You can set up the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Or you can serve multiple Trac projects in a directory like:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

==== setup with `mod_fcgid` ====
Configure `ScriptAlias` (see TracCgi for details), but call `trac.fcgi`
instead of `trac.cgi`. Note that slash at the end - it is important.
{{{
ScriptAlias /trac /path/to/www/trac/cgi-bin/trac.fcgi/
}}}

To setup Trac environment for `mod_fcgid` it is necessary to use
`DefaultInitEnv` directive. It cannot be used in `Directory` or
`Location` context, so if you need to support multiple projects, try
alternative environment setup below.

{{{
DefaultInitEnv TRAC_ENV /path/to/env/trac/
}}}

==== alternative environment setup ====
A better method to specify path to Trac environment it to embed the path
into `trac.fcgi` script itself. That doesn''t require configuration of server
environment variables, works for both FastCgi modules
(and for [http://www.lighttpd.net/ lighttpd] and CGI as well):
{{{
import os
os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}
or
{{{
import os
os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

With this method different projects can be supported by using different
`.fcgi` scripts with different `ScriptAliases`.

See [https://coderanger.net/~coderanger/httpd/fcgi_example.conf this fcgid example config] which uses a !ScriptAlias directive with trac.fcgi with a trailing / like this:
{{{
ScriptAlias / /srv/tracsite/cgi-bin/trac.fcgi/
}}}

== Simple Cherokee Configuration ==

The configuration on Cherokee''s side is quite simple. You will only need to know that you can spawn Trac as an SCGI process.
You can either start it manually, or better yet, automatically by letting Cherokee spawn the server whenever it is down.
First set up an information source in cherokee-admin with a local interpreter.

{{{
Host:
localhost:4433

Interpreter:
/usr/bin/tracd —single-env —daemonize —protocol=scgi —hostname=localhost —port=4433 /path/to/project/
}}}

If the port was not reachable, the interpreter command would be launched. Note that, in the definition of the information source, you will have to manually launch the spawner if you use a ''''Remote host'''' as ''''Information source'''' instead of a ''''Local interpreter''''.

After doing this, we will just have to create a new rule managed by the SCGI handler to access Trac. It can be created in a new virtual server, trac.example.net for instance, and will only need two rules. The ''''''default'''''' one will use the SCGI handler associated to the previously created information source.
The second rule will be there to serve the few static files needed to correctly display the Trac interface. Create it as ''''Directory rule'''' for ''''/chrome/common'''' and just set it to the ''''Static files'''' handler and with a ''''Document root'''' that points to the appropriate files: ''''/usr/share/trac/htdocs/''''

== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd is a secure, fast, compliant and very flexible web-server that has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi`(prior to 0.11) / fcgi_frontend.py (0.11) with lighttpd add the following to your lighttpd.conf:
{{{
#var.fcgi_binary="/usr/bin/python /path/to/fcgi_frontend.py" # 0.11 if installed with easy_setup, it is inside the egg directory
var.fcgi_binary="/path/to/cgi-bin/trac.fcgi" # 0.10 name of prior fcgi executable
fastcgi.server = ("/trac" =>
   
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described above,
and you may set one of the two in `trac.fcgi` instead of in `lighttpd.conf`
using `bin-environment` (as in the section above on Apache configuration).

Note that lighttpd has a bug related to ''SCRIPT_NAME'' and ''PATH_INFO'' when the uri of fastcgi.server is ''/'' instead of ''/trac'' in this example, see #Trac2418. This should be fixed since lighttpd 1.4.23, and you may need to add `"fix-root-scriptname" => "enable"` as parameter of fastcgi.server.

For using two projects with lighttpd add the following to your `lighttpd.conf`:
{{{
fastcgi.server = ("/first" =>
                   ("first" =>
                    ("socket" => "/tmp/trac-fastcgi-first.sock",
                     "bin-path" => fcgi_binary,
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-first")
                    )
                  ),
                  "/second" =>
                    ("second" =>
                    ("socket" => "/tmp/trac-fastcgi-second.sock",
                     "bin-path" => fcgi_binary,
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-second")
                    )
                  )
                )
}}}
Note that field values are different.  If you prefer setting the environment
variables in the `.fcgi` scripts, then copy/rename `trac.fcgi`, e.g., to
`first.fcgi` and `second.fcgi`, and reference them in the above settings.
Note that the above will result in different processes in any event, even
if both are running from the same `trac.fcgi` script.
{{{
#!div class=important
''''''Note'''''' It''s very important the order on which server.modules are loaded, if mod_auth is not loaded ''''''BEFORE'''''' mod_fastcgi, then the server will fail to authenticate the user.
}}}
For authentication you should enable mod_auth in lighttpd.conf ''server.modules'', select auth.backend and auth rules:
{{{
server.modules              = (
...
  "mod_auth",
...
)

auth.backend               = "htpasswd"

# Separated password files for each project
# See "Conditional Configuration" in
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/configuration.txt

$HTTP["url"] =~ "^/first/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-first/htpasswd.htaccess"
}
$HTTP["url"] =~ "^/second/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-second/htpasswd.htaccess"
}

# Enable auth on trac URLs, see
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/authentication.txt

auth.require = ("/first/login" =>
                ("method"  => "basic",
                 "realm"   => "First project",
                 "require" => "valid-user"
                ),
                "/second/login" =>
                ("method"  => "basic",
                 "realm"   => "Second project",
                 "require" => "valid-user"
                )
               )


}}}
Note that lighttpd (I use version 1.4.3) stopped if password file doesn''t exist.

Note that lighttpd doesn''t support ''valid-user'' in versions prior to 1.3.16.

Conditional configuration is also useful for mapping static resources, i.e. serving out images and CSS directly instead of through FastCGI:
{{{
# Aliasing functionality is needed
server.modules += ("mod_alias")

# Setup an alias for the static resources
alias.url = ("/trac/chrome/common" => "/usr/share/trac/htdocs")

# Use negative lookahead, matching all requests that ask for any resource under /trac, EXCEPT in
# /trac/chrome/common, and use FastCGI for those
$HTTP["url"] =~ "^/trac(?!/chrome/common)" {
# Even if you have other fastcgi.server declarations for applications other than Trac, do NOT use += here
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}
}}}
The technique can be easily adapted for use with multiple projects by creating aliases for each of them, and wrapping the fastcgi.server declarations inside conditional configuration blocks.
Also there is another way to handle multiple projects and it''s to use TRAC_ENV_PARENT_DIR instead of TRAC_ENV and use global auth, let''s see an example:
{{{
#  This is for handling multiple projects
  alias.url       = ( "/trac/" => "/path/to/trac/htdocs/" )

  fastcgi.server += ("/projects"  =>
                      ("trac" =>
                        (
                          "socket" => "/tmp/trac.sock",
                          "bin-path" => fcgi_binary,
                          "check-local" => "disable",
                          "bin-environment" =>
                            ("TRAC_ENV_PARENT_DIR" => "/path/to/parent/dir/of/projects/" )
                        )
                      )
                    )
#And here starts the global auth configuration
  auth.backend = "htpasswd"
  auth.backend.htpasswd.userfile = "/path/to/unique/htpassword/file/trac.htpasswd"
  $HTTP["url"] =~ "^/projects/.*/login$" {
    auth.require = ("/" =>
                     (
                       "method"  => "basic",
                       "realm"   => "trac",
                       "require" => "valid-user"
                     )
                   )
  }
}}}

Changing date/time format also supported by lighttpd over environment variable LC_TIME
{{{
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv",
                        "LC_TIME" => "ru_RU")
                     )
                   )
                 )
}}}
For details about languages specification see [trac:TracFaq TracFaq] question 2.13.

Other important information like [http://trac.lighttpd.net/trac/wiki/TracInstall this updated TracInstall page], [wiki:TracCgi#MappingStaticResources and this] are useful for non-fastcgi specific installation aspects.

If you use trac-0.9, read [http://lists.edgewall.com/archive/trac/2005-November/005311.html about small bug]

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

Note about running lighttpd with reduced permissions:

  If nothing else helps and trac.fcgi doesn''t start with lighttpd settings `server.username = "www-data"`, `server.groupname = "www-data"`, then in the `bin-environment` section set `PYTHON_EGG_CACHE` to the home directory of `www-data` or some other directory accessible to this account for writing.


== Simple !LiteSpeed Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.litespeedtech.com/ LiteSpeed].

!LiteSpeed web server is an event-driven asynchronous Apache replacement designed from the ground-up to be secure, scalable, and operate with minimal resources. !LiteSpeed can operate directly from an Apache config file and is targeted for business-critical environments.

=== Setup ===

 1. Please make sure you have first have a working install of a Trac project. Test install with “tracd” first.

 2. Create a Virtual Host for this setup. From now on we will refer to this vhost as !TracVhost. For this tutorial we will be assuming that your trac project will be accessible via:

{{{
http://yourdomain.com/trac/
}}}

 3. Go “!TracVhost → External Apps” tab and create a new “External Application”.

{{{
Name: MyTracFCGI	
Address: uds://tmp/lshttpd/mytracfcgi.sock
Max Connections: 10
Environment: TRAC_ENV=/fullpathto/mytracproject/ <--- path to root folder of trac project
Initial Request Timeout (secs): 30
Retry Timeout (secs): 0
Persistent Connection	Yes
Connection Keepalive Timeout: 30
Response Bufferring: No	
Auto Start: Yes
Command: /usr/share/trac/cgi-bin/trac.fcgi  <--- path to trac.fcgi
Back Log: 50
Instances: 10
}}}

 4. Optional. If you need to use htpasswd based authentication. Go to “!TracVhost → Security” tab and create a new security “Realm”.

{{{
DB Type: Password File
Realm Name: MyTracUserDB               <--- any name you wish and referenced later
User DB Location: /fullpathto/htpasswd <--- path to your htpasswd file
}}}

If you don’t have a htpasswd file or don’t know how to create the entries within one, go to http://sherylcanter.com/encrypt.php, to generate the user:password combos.

 5. Go to “!PythonVhost → Contexts” and create a new “FCGI Context”.

{{{
URI: /trac/                              <--- URI path to bind to python fcgi app we created	
Fast CGI App: [VHost Level] MyTractFCGI  <--- select the trac fcgi extapp we just created
Realm: TracUserDB                        <--- only if (4) is set. select realm created in (4)
}}}

 6. Modify `/fullpathto/mytracproject/conf/trac.ini`

{{{
#find/set base_rul, url, and link variables
base_url = http://yourdomain.com/trac/ <--- base url to generate correct links to
url = http://yourdomain.com/trac/      <--- link of project
link = http://yourdomain.com/trac/     <--- link of graphic logo
}}}

 7. Restart !LiteSpeed, “lswsctrl restart”, and access your new Trac project at: 

{{{
http://yourdomain.com/trac/
}}}

== Simple Nginx Configuration ==

 1. Nginx configuration snippet - confirmed to work on 0.6.32
{{{
    server {
        listen       10.9.8.7:443;
        server_name  trac.example;

        ssl                  on;
        ssl_certificate      /etc/ssl/trac.example.crt;
        ssl_certificate_key  /etc/ssl/trac.example.key;

        ssl_session_timeout  5m;

        ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers   on;

        # (Or ``^/some/prefix/(.*)``.
        if ($uri ~ ^/(.*)) {
             set $path_info /$1;
        }

        # You can copy this whole location to ``location [/some/prefix]/login``
        # and remove the auth entries below if you want Trac to enforce
        # authorization where appropriate instead of needing to authenticate
        # for accessing the whole site.
        # (Or ``location /some/prefix``.)
        location / {
            auth_basic            "trac realm";
            auth_basic_user_file /home/trac/htpasswd;

            # socket address
            fastcgi_pass   unix:/home/trac/run/instance.sock;

            # python - wsgi specific
            fastcgi_param HTTPS on;

            ## WSGI REQUIRED VARIABLES
            # WSGI application name - trac instance prefix.
	    # (Or ``fastcgi_param  SCRIPT_NAME  /some/prefix``.)
            fastcgi_param  SCRIPT_NAME        "";
            fastcgi_param  PATH_INFO          $path_info;

            ## WSGI NEEDED VARIABLES - trac warns about them
            fastcgi_param  REQUEST_METHOD     $request_method;
            fastcgi_param  SERVER_NAME        $server_name;
            fastcgi_param  SERVER_PORT        $server_port;
            fastcgi_param  SERVER_PROTOCOL    $server_protocol;
            fastcgi_param  QUERY_STRING     $query_string;

            # for authentication to work
            fastcgi_param  AUTH_USER          $remote_user;
            fastcgi_param  REMOTE_USER        $remote_user;
        }
    }
}}}

 2. Modified trac.fcgi:

{{{
#!/usr/bin/env python
import os
sockaddr = ''/home/trac/run/instance.sock''
os.environ[''TRAC_ENV''] = ''/home/trac/instance''

try:
     from trac.web.main import dispatch_request
     import trac.web._fcgi

     fcgiserv = trac.web._fcgi.WSGIServer(dispatch_request, 
          bindAddress = sockaddr, umask = 7)
     fcgiserv.run()

except SystemExit:
    raise
except Exception, e:
    print ''Content-Type: text/plain\r\n\r\n'',
    print ''Oops...''
    print
    print ''Trac detected an internal error:''
    print
    print e
    print
    import traceback
    import StringIO
    tb = StringIO.StringIO()
    traceback.print_exc(file=tb)
    print tb.getvalue()

}}}

 3. reload nginx and launch trac.fcgi like that:

{{{
trac@trac.example ~ $ ./trac-standalone-fcgi.py 
}}}

The above assumes that:
 * There is a user named ''trac'' for running trac instances and keeping trac environments in its home directory.
 * `/home/trac/instance` contains a trac environment
 * `/home/trac/htpasswd` contains authentication information
 * `/home/trac/run` is owned by the same group the nginx runs under
  * and if your system is Linux the `/home/trac/run` has setgid bit set (`chmod g+s run`)
  * and patch from ticket #T7239 is applied, or you''ll have to fix the socket file permissions every time

Unfortunately nginx does not support variable expansion in fastcgi_pass directive. 
Thus it is not possible to serve multiple trac instances from one server block. 

If you worry enough about security, run trac instances under separate users. 

Another way to run trac as a FCGI external application is offered in ticket #T6224

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI ModWSGI], [wiki:TracCgi CGI], [wiki:TracModPython ModPython], [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracFineGrainedPermissions',1,1293789825854000,'trac','127.0.0.1','= Fine grained permissions =

Before Trac 0.11, it was only possible to define fine-grained permissions checks on the repository browser sub-system.

Since 0.11, there''s a general mechanism in place that allows custom **permission policy plugins** to grant or deny any action on any kind of Trac resources, even at the level of specific versions of such resources.

Note that for Trac 0.12, `authz_policy` has been integrated as an optional module (in `tracopt.perm.authz_policy.*`), so it''s installed by default and can simply be activated via the //Plugins// panel in the Trac administration module.


== Permission Policies ==

A great diversity of permission policies can be implemented, and Trac comes with a few examples. 

Which policies are currently active is determined by a configuration setting in TracIni:
e.g.
{{{
[trac]
permission_policies = AuthzSourcePolicy, DefaultPermissionPolicy, LegacyAttachmentPolicy
}}}
This lists the [#AuthzSourcePolicy] described below as the first policy, followed by the !DefaultPermissionPolicy which checks for the traditional coarse grained style permissions described in TracPermissions, and the !LegacyAttachmentPolicy which knows how to use the coarse grained permissions for checking the permissions available on attachments.

Among the possible optional choices, there is [#AuthzPolicy], a very generic permission policy, based on an Authz-style system. See
[trac:source:branches/0.12-stable/tracopt/perm/authz_policy.py authz_policy.py] for details. 

Another popular permission policy [#AuthzSourcePolicy], re-implements the pre-0.12 support for checking fine-grained permissions limited to Subversion repositories in terms of the new system.

See also [trac:source:branches/0.12-stable/sample-plugins/permissions sample-plugins/permissions] for more examples.


=== !AuthzPolicy === 

 - Install [http://www.voidspace.org.uk/python/configobj.html ConfigObj] (required).
 - Copy authz_policy.py into your plugins directory.
 - Put a [http://swapoff.org/files/authzpolicy.conf authzpolicy.conf] file somewhere, preferably on a secured location on the server, not readable for others than the webuser. If the  file contains non-ASCII characters, the UTF-8 encoding should be used.
 - Update your `trac.ini`:
   1. modify the [TracIni#trac-section permission_policies] entry in the `[trac]` section
{{{
[trac]
...
permission_policies = AuthzPolicy, DefaultPermissionPolicy, LegacyAttachmentPolicy
}}}
   2. add a new `[authz_policy]` section
{{{
[authz_policy]
authz_file = /some/trac/env/conf/authzpolicy.conf
}}}
   3. enable the single file plugin
{{{
[components]
...
# Trac 0.12
tracopt.perm.authz_policy.* = enabled
# for Trac 0.11 use this
#authz_policy.* = enabled 
}}}

Note that the order in which permission policies are specified is quite critical, 
as policies will be examined in the sequence provided.

A policy will return either `True`, `False` or `None` for a given permission check.
Only if the return value is `None` will the ''''next'''' permission policy be consulted.
If no policy explicitly grants the permission, the final result will be `False` 
(i.e. no permission).

For example, if the `authz_file` contains:
{{{
[wiki:WikiStart@*]
* = WIKI_VIEW

[wiki:PrivatePage@*]
john = WIKI_VIEW
* =
}}}
and the default permissions are set like this:
{{{
john           WIKI_VIEW
jack           WIKI_VIEW
# anonymous has no WIKI_VIEW
}}}

Then: 
 - All versions of WikiStart will be viewable by everybody (including anonymous)
 - !PrivatePage will be viewable only by john
 - other pages will be viewable only by john and jack


=== !AuthzSourcePolicy  (mod_authz_svn-like permission policy) === #AuthzSourcePolicy

At the time of this writing, the old fine grained permissions system from Trac 0.11 and before used for restricting access to the repository has  been converted to a permission policy component, but from the user point of view, this makes little if no difference.

That kind of fine-grained permission control needs a definition file, which is the one used by Subversion''s mod_authz_svn. 
More information about this file format and about its usage in Subversion is available in the  [http://svnbook.red-bean.com/en/1.5/svn.serverconfig.pathbasedauthz.html Path-Based Authorization] section in the Server Configuration chapter of the svn book.

Example:
{{{
[/]
* = r

[/branches/calc/bug-142]
harry = rw
sally = r

[/branches/calc/bug-142/secret]
harry =
}}}

 * ''''''/'''''' = ''''Everyone has read access by default''''
 * ''''''/branches/calc/bug-142'''''' = ''''harry has read/write access, sally read only''''
 * ''''''/branches/calc/bug-142/secret'''''' = ''''harry has no access, sally has read access (inherited as a sub folder permission)''''

==== Trac Configuration ====

To activate fine grained permissions you __must__ specify the {{{authz_file}}} option in the {{{[trac]}}} section of trac.ini. If this option is set to null or not specified the permissions will not be used.

{{{
[trac]
authz_file = /path/to/svnaccessfile
}}}

If you want to support the use of the `[`''''modulename''''`:/`''''some''''`/`''''path''''`]` syntax within the `authz_file`, add 

{{{
authz_module_name = modulename
}}}

where ''''modulename'''' refers to the same repository indicated by the `repository_dir` entry in the `[trac]` section. As an example, if the `repository_dir` entry in the `[trac]` section is {{{/srv/active/svn/blahblah}}}, that would yield the following:

{{{ 
[trac]
authz_file = /path/to/svnaccessfile
authz_module_name = blahblah
...
repository_dir = /srv/active/svn/blahblah 
}}}

where the svn access file, {{{/path/to/svnaccessfile}}}, contains entries such as {{{[blahblah:/some/path]}}}.

''''''Note:'''''' Usernames inside the Authz file __must__ be the same as those used inside trac. 

As of version 0.12, make sure you have ''''!AuthzSourcePolicy'''' included in the permission_policies list in trac.ini, otherwise the authz permissions file will be ignored.

{{{ 
[trac]
permission_policies = AuthzSourcePolicy, DefaultPermissionPolicy, LegacyAttachmentPolicy
}}}

==== Subversion Configuration ====

The same access file is typically applied to the corresponding Subversion repository using an Apache directive like this:
{{{
<Location /repos>
  DAV svn
  SVNParentPath /usr/local/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/svnaccessfile
</Location>
}}}

For information about how to restrict access to entire projects in a multiple project environment see [trac:wiki:TracMultipleProjectsSVNAccess]

== Debugging permissions
In trac.ini set:
{{{
[logging]
log_file = trac.log
log_level = DEBUG
log_type = file
}}}

And watch:
{{{
tail -n 0 -f log/trac.log | egrep ''\[perm\]|\[authz_policy\]''
}}}

to understand what checks are being performed. See the sourced documentation of the plugin for more info.


----
See also: TracPermissions,
[http://trac-hacks.org/wiki/FineGrainedPageAuthzEditorPlugin TracHacks:FineGrainedPageAuthzEditorPlugin] for a simple editor plugin.',NULL,NULL);
INSERT INTO "wiki" VALUES('TracGuide',1,1293789825864000,'trac','127.0.0.1','= The Trac User and Administration Guide =
[[TracGuideToc]]

The TracGuide is meant to serve as a starting point for all documentation regarding Trac usage and development. The guide is a free document, a collaborative effort, and a part of the [http://trac.edgewall.org Trac Project] itself.

== Table of Contents ==

Currently available documentation:
 * ''''''User Guide''''''
   * TracWiki — How to use the built-in Wiki.
   * TracTimeline — The timeline provides a historic perspective on a project.
   * TracRss — RSS content syndication in Trac.
   * ''''The Version Control Subsystem''''
     * TracBrowser — Browsing source code with Trac.
     * TracChangeset — Viewing changes to source code.
     * TracRevisionLog — Viewing change history.
   * ''''The Ticket Subsystem''''
     * TracTickets — Using the issue tracker.
     * TracReports — Writing and using reports.
     * TracQuery — Executing custom ticket queries.
     * TracRoadmap — The roadmap helps tracking project progress.
 * ''''''Administrator Guide''''''
   * TracInstall — How to install and run Trac.
   * TracUpgrade — How to upgrade existing installations.
   * TracAdmin — Administering a Trac project.
   * TracImport — Importing tickets from other bug databases.
   * TracIni — Trac configuration file reference. 
   * TracPermissions — Access control and permissions.
   * TracInterfaceCustomization — Customizing the Trac interface.
   * TracPlugins — Installing and managing Trac extensions.
   * TracLogging — The Trac logging facility.
   * TracNotification — Email notification.
   * TracWorkflow — Configurable Ticket Workflow.
   * TracRepositoryAdmin — Management of Source Code Repositories.
 * [trac:TracFaq Trac FAQ] — A collection of Frequently Asked Questions (on the project website).

== Support and Other Sources of Information ==
If you are looking for a good place to ask a question about Trac, look no further than the [http://trac.edgewall.org/wiki/MailingList MailingList]. It provides a friendly environment to discuss openly among Trac users and developers.

See also the TracSupport page for more information resources.

Finally, developer documentation can be found in [trac:TracDev TracDev] and its sub-pages.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracImport',1,1293789825864000,'trac','127.0.0.1','= Importing ticket data =

== Bugzilla ==

Ticket data can be imported from Bugzilla using the [http://trac.edgewall.org/browser/trunk/contrib/bugzilla2trac.py bugzilla2trac.py] script, available in the contrib/ directory of the Trac distribution.

{{{
$ bugzilla2trac.py
bugzilla2trac - Imports a bug database from Bugzilla into Trac.

Usage: bugzilla2trac.py [options]

Available Options:
  --db <MySQL dbname>              - Bugzilla''s database
  --tracenv /path/to/trac/env      - full path to Trac db environment
  -h | --host <MySQL hostname>     - Bugzilla''s DNS host name
  -u | --user <MySQL username>     - effective Bugzilla''s database user
  -p | --passwd <MySQL password>   - Bugzilla''s user password
  -c | --clean                     - remove current Trac tickets before importing
  --help | help                    - this help info

Additional configuration options can be defined directly in the script.
}}}

Currently, the following data is imported from Bugzilla:

  * bugs
  * bug activity (field changes)
  * bug attachments
  * user names and passwords (put into a htpasswd file)

The script provides a number of features to ease the conversion, such as:

  * PRODUCT_KEYWORDS:  Trac doesn''t have the concept of products, so the script provides the ability to attach a ticket keyword instead.

  * IGNORE_COMMENTS:  Don''t import Bugzilla comments that match a certain regexp.

  * STATUS_KEYWORDS:  Attach ticket keywords for the Bugzilla statuses not available in Trac.  By default, the ''VERIFIED'' and ''RELEASED'' Bugzilla statuses are translated into Trac keywords.

For more details on the available options, see the configuration section at the top of the script.

== Sourceforge ==

Ticket data can be imported from Sourceforge using the [http://trac.edgewall.org/browser/trunk/contrib/sourceforge2trac.py sourceforge2trac.py] script, available in the contrib/ directory of the Trac distribution.

See #Trac3521 for an updated sourceforge2trac script.

== Mantis ==

The mantis2trac script now lives at http://trac-hacks.org/wiki/MantisImportScript. You can always get the latest version from http://trac-hacks.org/changeset/latest/mantisimportscript?old_path=/&filename=mantisimportscript&format=zip

Mantis bugs can be imported using the attached script.

Currently, the following data is imported from Mantis:
  * bugs
  * bug comments
  * bug activity (field changes)
  * attachments (as long as the files live in the mantis db, not on the filesystem) 

If you use the script, please read the NOTES section (at the top of the file) and make sure you adjust the config parameters for your environment.

mantis2trac.py has the same parameters as the bugzilla2trac.py script:
{{{
mantis2trac - Imports a bug database from Mantis into Trac.

Usage: mantis2trac.py [options] 

Available Options:
  --db <MySQL dbname>              - Mantis database
  --tracenv /path/to/trac/env      - Full path to Trac db environment
  -h | --host <MySQL hostname>     - Mantis DNS host name
  -u | --user <MySQL username>     - Effective Mantis database user
  -p | --passwd <MySQL password>   - Mantis database user password
  -c | --clean                     - Remove current Trac tickets before importing
  --help | help                    - This help info

Additional configuration options can be defined directly in the script.
}}} 

== Jira ==

The [http://trac-hacks.org/wiki/JiraToTracIntegration Jira2Trac plugin] provides you with tools to import Atlassian Jira backup files into Trac.

The plugin consists of a Python 3.1 commandline tool that:

 - Parses the Jira backup XML file
 - Sends the imported Jira data and attachments to Trac using the [http://trac-hacks.org/wiki/XmlRpcPlugin XmlRpcPlugin]
 - Generates a htpasswd file containing the imported Jira users and their SHA-512 base64 encoded passwords

== Other ==

Since trac uses a SQL database to store the data, you can import from other systems by examining the database tables. Just go into [http://www.sqlite.org/sqlite.html sqlite] command line to look at the tables and import into them from your application.

=== Using a comma delimited file - CSV ===
See [http://trac.edgewall.org/attachment/wiki/TracSynchronize/csv2trac.2.py] for details.  This approach is particularly useful if one needs to enter a large number of tickets by hand. (note that the ticket type type field, (task etc...) is also needed for this script to work with more recent Trac releases)
Comments on script: The script has an error on line 168, (''Ticket'' needs to be ''ticket'').  Also, the listed values for severity and priority are swapped. 

=== Using an Excel (.xls) or comma delimited file (.csv) ===
This plugin http://trac-hacks.org/wiki/TicketImportPlugin lets you import into Trac a series of tickets from a CSV file or (if the xlrd library is installed) from an Excel file.

You can also use it to modify tickets in batch, by saving a report as CSV, editing the CSV file, and re-importing the tickets.

This plugin is very useful when starting a new project: you can import a list of requirements that may have come from meeting notes, list of features, other ticketing systems... It''s also great to review the tickets off-line, or to do massive changes to tickets.

Based on the ticket id (or, if no id exists, on the summary) in the imported file, tickets are either created or updated. 


',NULL,NULL);
INSERT INTO "wiki" VALUES('TracIni',1,1293789825874000,'trac','127.0.0.1','= The Trac Configuration File =

[[TracGuideToc]]

Trac configuration is done by editing the ''''''`trac.ini`'''''' config file, located in `<projectenv>/conf/trac.ini`.  Changes to the configuration are usually reflected immediately, though changes to the `[components]` or `[logging]` sections will require restarting the web server. You may also need to restart the web server after creating a global configuration file when none was previously present.

The `trac.ini` configuration file should be writable by the web server, as Trac currently relies on the possibility to trigger a complete environment reload to flush its caches.

== Global Configuration ==

In versions prior to 0.11, the global configuration was by default located in `$prefix/share/trac/conf/trac.ini` or /etc/trac/trac.ini, depending on the distribution. If you''re upgrading, you may want to specify that file to inherit from.  Literally, when you''re upgrading to 0.11, you have to add an `[inherit]` section to your project''s `trac.ini` file. Additionally, you have to move your customized templates and common images from `$prefix/share/trac/...` to the new location.

Global options will be merged with the environment-specific options, where local options override global options. The options file is specified as follows:
{{{
[inherit]
file = /path/to/global/trac.ini
}}}
Multiple files can be specified using a comma-separated list.

Note that you can also specify a global option file when creating a new project,  by adding the option `--inherit=/path/to/global/trac.ini` to [TracAdmin#initenv trac-admin]''s `initenv` command.  If you do not do this but nevertheless intend to use a global option file with your new environment, you will have to go through the newly generated `conf/trac.ini` file and delete the entries that will otherwise override those set in the global file.

There are two more entries in the [[#inherit-section| [inherit] ]] section, `templates_dir` for sharing global templates and `plugins_dir`, for sharing plugins. Those entries can themselves be specified in the shared configuration file, and in fact, configuration files can even be chained if you specify another `[inherit] file` there.

== Reference for settings

This is a brief reference of available configuration options.

 ''''Note that the [bitten], [spam-filter] and [vote] sections below are added by plugins enabled on this Trac, and therefore won''t be part of a default installation.''''

[[TracIni]]

== Reference for special sections
[[PageOutline(3,,inline)]]

=== [components] === #components-section
This section is used to enable or disable components provided by plugins, as well as by Trac itself. The component to enable/disable is specified via the name of the option. Whether its enabled is determined by the option value; setting the value to `enabled` or `on` will enable the component, any other value (typically `disabled` or `off`) will disable the component.

The option name is either the fully qualified name of the components or the module/package prefix of the component. The former enables/disables a specific component, while the latter enables/disables any component in the specified package/module.

Consider the following configuration snippet:
{{{
[components]
trac.ticket.report.ReportModule = disabled
webadmin.* = enabled
}}}

The first option tells Trac to disable the [wiki:TracReports report module]. The second option instructs Trac to enable all components in the `webadmin` package. Note that the trailing wildcard is required for module/package matching.

See the ''''Plugins'''' page on ''''About Trac'''' to get the list of active components (requires `CONFIG_VIEW` [wiki:TracPermissions permissions].)

See also: TracPlugins

=== [milestone-groups] === #milestone-groups-section
''''(since 0.11)''''

As the workflow for tickets is now configurable, there can be many ticket states,
and simply displaying closed tickets vs. all the others is maybe not appropriate 
in all cases. This section enables one to easily create ''''groups'''' of states 
that will be shown in different colors in the milestone progress bar.

Example configuration (the default only has closed and active):
{{{
closed = closed
# sequence number in the progress bar
closed.order = 0
# optional extra param for the query (two additional columns: created and modified and sort on created)
closed.query_args = group=resolution,order=time,col=id,col=summary,col=owner,col=type,col=priority,col=component,col=severity,col=time,col=changetime
# indicates groups that count for overall completion 
closed.overall_completion = truepercentage

new = new
new.order = 1
new.css_class = new
new.label = new

# one catch-all group is allowed
active = *
active.order = 2
# CSS class for this interval
active.css_class = open
# Displayed label for this group
active.label = in progress
}}}

The definition consists in a comma-separated list of accepted status.
Also, ''*'' means any status and could be used to associate all remaining
states to one catch-all group.

The CSS class can be one of: new (yellow), open (no color) or
closed (green). New styles can easily be added using the following
selector:  `table.progress td.<class>`

=== [repositories] === #repositories-section

(''''since 0.12'''' multirepos)

One of the alternatives for registering new repositories is to populate the `[repositories]` section of the trac.ini.

This is especially suited for setting up convenience aliases, short-lived repositories, or during the initial phases of an installation.

See [TracRepositoryAdmin#Intrac.ini TracRepositoryAdmin] for details about the format adopted for this section and the rest of that page for the other alternatives.

=== [svn:externals] === #svn:externals-section
''''(since 0.11)''''

The TracBrowser for Subversion can interpret the `svn:externals` property of folders.
By default, it only turns the URLs into links as Trac can''t browse remote repositories.

However, if you have another Trac instance (or an other repository browser like [http://www.viewvc.org/ ViewVC]) configured to browse the target repository, then you can instruct Trac which other repository browser to use for which external URL.

This mapping is done in the `[svn:externals]` section of the TracIni

Example:
{{{
[svn:externals]
1 = svn://server/repos1                       http://trac/proj1/browser/$path?rev=$rev
2 = svn://server/repos2                       http://trac/proj2/browser/$path?rev=$rev
3 = http://theirserver.org/svn/eng-soft       http://ourserver/viewvc/svn/$path/?pathrev=25914
4 = svn://anotherserver.com/tools_repository  http://ourserver/tracs/tools/browser/$path?rev=$rev
}}}
With the above, the `svn://anotherserver.com/tools_repository/tags/1.1/tools` external will be mapped to `http://ourserver/tracs/tools/browser/tags/1.1/tools?rev=` (and `rev` will be set to the appropriate revision number if the external additionally specifies a revision, see the [http://svnbook.red-bean.com/en/1.4/svn.advanced.externals.html SVN Book on externals] for more details).

Note that the number used as a key in the above section is purely used as a place holder, as the URLs themselves can''t be used as a key due to various limitations in the configuration file parser.

Finally, the relative URLs introduced in [http://subversion.tigris.org/svn_1.5_releasenotes.html#externals Subversion 1.5] are not yet supported.

=== [ticket-custom] === #ticket-custom-section

In this section, you can define additional fields for tickets. See TracTicketsCustomFields for more details.

=== [ticket-workflow] === #ticket-workflow-section
''''(since 0.11)''''

The workflow for tickets is controlled by plugins. 
By default, there''s only a `ConfigurableTicketWorkflow` component in charge. 
That component allows the workflow to be configured via this section in the trac.ini file.
See TracWorkflow for more details.

----
See also: TracGuide, TracAdmin, TracEnvironment
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracInstall',1,1293789825874000,'trac','127.0.0.1','= Trac Installation Guide for 0.12 = 
[[TracGuideToc]]

Trac is written in the Python programming language and needs a database, [http://sqlite.org/ SQLite], [http://www.postgresql.org/ PostgreSQL], or [http://mysql.com/ MySQL]. For HTML rendering, Trac uses the [http://genshi.edgewall.org Genshi] templating system.

Since version 0.12, Trac can also be localized, and there''s probably a translation available for your language. If you want to be able to use the Trac interface in other languages, then make sure you **first** have installed the optional package [#OtherPythonPackages Babel]. Lacking Babel, you will only get the default english version, as usual. If you install Babel later on, you will need to re-install Trac.

If you''re interested in contributing new translations for other languages or enhance the existing translations, then please have a look at [trac:wiki:TracL10N TracL10N].

What follows are generic instructions for installing and setting up Trac and its requirements. While you may find instructions for installing Trac on specific systems at TracInstallPlatforms on the main Trac site, please be sure to ''''''first read through these general instructions'''''' to get a good understanding of the tasks involved.

[[PageOutline(2-3,Installation Steps,inline)]]

== Dependencies ==
=== Mandatory Dependencies
To install Trac, the following software packages must be installed:

 * [http://www.python.org/ Python], version >= 2.4 and < 3.0
   (note that we dropped the support for Python 2.3 in this release)
 * [http://peak.telecommunity.com/DevCenter/setuptools setuptools], version >= 0.6
 * [http://genshi.edgewall.org/wiki/Download Genshi], version >= 0.6

You also need a database system and the corresponding python bindings.
The database can be either SQLite, PostgreSQL or MySQL.

==== For the SQLite database #ForSQLite

If you''re using Python 2.5 or 2.6, you already have everything you need.

If you''re using Python 2.4 and need pysqlite, you can download from 
[http://code.google.com/p/pysqlite/downloads/list google code] the Windows installers or the tar.gz archive for building from source: 
{{{
$ tar xvfz <version>.tar.gz 
$ cd <version> 
$ python setup.py build_static install 
}}}
 
This will extract the SQLite code and build the bindings. 

To install SQLite, your system may require the development headers. Without these you will get various GCC related errors when attempting to build:

{{{
$ apt-get install libsqlite3-dev
}}}

SQLite 2.x is no longer supported, and neither is !PySqlite 1.1.x.

A known bug !PySqlite versions 2.5.2-4 prohibits upgrade of trac databases
from 0.11.x to 0.12. Please use versions 2.5.5 and newer or 2.5.1 and
older. See [trac:#9434] for more detail.

See additional information in [trac:PySqlite].

==== For the PostgreSQL database #ForPostgreSQL

You need to install the database and its Python bindings:
 * [http://www.postgresql.org/ PostgreSQL]
 * [http://pypi.python.org/pypi/psycopg2 psycopg2]

See [trac:DatabaseBackend#Postgresql DatabaseBackend] for details.


==== For the MySQL database #ForMySQL

Trac can now work quite well with MySQL, provided you follow the guidelines.

 * [http://mysql.com/ MySQL], version 5.0 or later
 * [http://sf.net/projects/mysql-python MySQLdb], version 1.2.2 or later

It is ''''''very'''''' important to read carefully the  [trac:MySqlDb] page before creating the database.

=== Optional Dependencies

==== Version Control System ====

===== Subversion =====
 * [http://subversion.apache.org/ Subversion], 1.5.x or 1.6.x and the ''''''''''corresponding'''''''''' Python bindings. Older versions starting from 1.0, like 1.2.4, 1.3.2 or 1.4.2, etc. should still work. For troubleshooting information, check the [trac:TracSubversion#Troubleshooting TracSubversion] page.

There are [http://subversion.apache.org/packages.html pre-compiled SWIG bindings] available for various platforms. (Good luck finding precompiled SWIG bindings for any Windows package at that listing. TracSubversion points you to [http://alagazam.net Algazam], which works for me under Python 2.6.)

Note that Trac ''''''doesn''t'''''' use [http://pysvn.tigris.org/ PySVN], neither does it work yet with the newer `ctype`-style bindings. [Is there a ticket for implementing ctype bindings?]


''''''Please note:'''''' if using Subversion, Trac must be installed on the ''''''same machine''''''. Remote repositories are currently [trac:ticket:493 not supported].


===== Others =====

Support for other version control systems is provided via third-parties. See [trac:PluginList] and [trac:VersioningSystemBackend].

==== Web Server ====
A web server is optional because Trac is shipped with a server included, see the [#RunningtheStandaloneServer Running the Standalone Server ] section below.

Alternatively you configure Trac to run in any of the following environments.
 * [http://httpd.apache.org/ Apache] with 
   - [http://code.google.com/p/modwsgi/ mod_wsgi], see [wiki:TracModWSGI] and 
     http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac
   - [http://modpython.org/ mod_python 3.3.1], deprecated: see TracModPython)
 * a [http://www.fastcgi.com/ FastCGI]-capable web server (see TracFastCgi)
 * an [http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html AJP]-capable web
   server (see [trac:TracOnWindowsIisAjp])
 * a CGI-capable web server (see TracCgi), ''''''but usage of Trac as a cgi script 
   is highly discouraged'''''', better use one of the previous options. 
   

==== Other Python Packages ====

 * [http://babel.edgewall.org Babel], version >= 0.9.5, 
   needed for localization support[[BR]]
   ''''Note: '''' If you want to be able to use the Trac interface in other languages, then make sure you first have installed the optional package Babel. Lacking Babel, you will only get the default english version, as usual. If you install Babel later on, you will need to re-install Trac. 
 * [http://docutils.sourceforge.net/ docutils], version >= 0.3.9 
   for WikiRestructuredText.
 * [http://pygments.pocoo.org Pygments] for 
   [wiki:TracSyntaxColoring syntax highlighting].
   [http://silvercity.sourceforge.net/ SilverCity] and/or 
   [http://gnu.org/software/enscript/enscript.html Enscript] may still be used
   but are deprecated and you really should be using Pygments.
 * [http://pytz.sf.net pytz] to get a complete list of time zones,
   otherwise Trac will fall back on a shorter list from 
   an internal time zone implementation.

''''''Attention'''''': The various available versions of these dependencies are not necessarily interchangable, so please pay attention to the version numbers above. If you are having trouble getting Trac to work please double-check all the dependencies before asking for help on the [trac:MailingList] or [trac:IrcChannel].

Please refer to the documentation of these packages to find out how they are best installed. In addition, most of the [trac:TracInstallPlatforms platform-specific instructions] also describe the installation of the dependencies. Keep in mind however that the information there ''''probably concern older versions of Trac than the one you''re installing'''' (there are even some pages that are still talking about Trac 0.8!).


== Installing Trac ==
=== Using `easy_install`
One way to install Trac is using [http://pypi.python.org/pypi/setuptools setuptools].
With setuptools you can install Trac from the subversion repository; 

A few examples:

 - install Trac 0.12:
   {{{
   easy_install Trac==0.12
   }}}

 - install latest development version 0.12dev:
   {{{
   easy_install Trac==dev
   }}}
   Note that in this case you won''t have the possibility to run a localized version of Trac;
   either use a released version or install from source 

=== Using `pip`
''pip'' is an easy_install replacement that is very useful to quickly install python packages.
To get a trac installation up and running in less than 5 minutes:

Assuming you want to have your entire pip installation in /opt/user/trac

 - 
{{{
pip -E /opt/user/trac install trac psycopg2 
}}}
or
 - 
{{{
pip -E /opt/user/trac install trac mysql-python 
}}}

Make sure your OS specific headers are available for pip to automatically build PostgreSQL (libpq-dev) or MySQL (libmysqlclient-dev) bindings.

pip will automatically resolve all dependencies (like Genshi, pygments, etc.) and download the latest packages on pypi.python.org and create a self contained installation in /opt/user/trac 

All commands (tracd, trac-admin) are available in /opt/user/trac/bin . This can also be leveraged for mod_python (using PythonHandler directive) and mod_wsgi (using WSGIDaemonProcess directive)

Additionally, you can install several trac plugins (listed [http://pypi.python.org/pypi?:action=search&term=trac&submit=search here]) through pip.



=== From source
Of course, using the python-typical setup at the top of the source directory also works.

You can obtain the source for a .tar.gz or .zip file corresponding to a release (e.g. Trac-0.12.tar.gz), or you can get the source directly from the repository (see [trac:SubversionRepository] for details).

{{{
$ python ./setup.py install
}}}

''''You''ll need root permissions or equivalent for this step.''''

This will byte-compile the python source code and install it as an .egg file or folder in the `site-packages` directory
of your Python installation. The .egg will also contain all other resources needed by standard Trac, such as htdocs and templates.

The script will also install the [wiki:TracAdmin trac-admin] command-line tool, used to create and maintain [wiki:TracEnvironment project environments], as well as the [wiki:TracStandalone tracd] standalone server.

If you install from source and want to make Trac available in other languages, make sure  Babel is installed. Only then, perform the `install` (or simply redo the `install` once again afterwards if you realize Babel was not yet installed):
{{{
$ python ./setup.py install
}}}
Alternatively, you can do a `bdist_egg` and copy the .egg from dist/ to the place of your choice, or you can create a Windows installer (`bdist_wininst`).

=== Advanced Options ===

To install Trac to a custom location, or find out about other advanced installation options, run:
{{{
easy_install --help
}}}

Also see [http://docs.python.org/inst/inst.html Installing Python Modules] for detailed information.

Specifically, you might be interested in:
{{{
easy_install --prefix=/path/to/installdir
}}}
or, if installing Trac to a Mac OS X system:
{{{
easy_install --prefix=/usr/local --install-dir=/Library/Python/2.5/site-packages
}}}
Note: If installing on Mac OS X 10.6 running {{{ easy_install http://svn.edgewall.org/repos/trac/trunk }}} will install into {{{ /usr/local }}} and {{{ /Library/Python/2.6/site-packages }}} by default

The above will place your `tracd` and `trac-admin` commands into `/usr/local/bin` and will install the Trac libraries and dependencies into `/Library/Python/2.5/site-packages`, which is Apple''s preferred location for third-party Python application installations.


== Creating a Project Environment ==

A [TracEnvironment Trac environment] is the backend storage where Trac stores information like wiki pages, tickets, reports, settings, etc. An environment is basically a directory that contains a human-readable [TracIni configuration file], and various other files and directories.

A new environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ trac-admin /path/to/myproject initenv
}}}

[TracAdmin trac-admin] will prompt you for the information it needs to create the environment, such as the name of the project and the [TracEnvironment#DatabaseConnectionStrings database connection string]. If you''re not sure what to specify for one of these options, just press `<Enter>` to use the default value. 

Using the default database connection string in particular will always work as long as you have SQLite installed.
For the other [DatabaseBackend database backends] you should plan ahead and already have a database ready to use at this point.

Since 0.12, Trac doesn''t ask for a [TracEnvironment#SourceCodeRepository source code repository] anymore when creating an environment. Repositories can be [TracRepositoryAdmin added] afterward, or the version control support can be disabled completely if you don''t need it.

Also note that the values you specify here can be changed later by directly editing the [TracIni conf/trac.ini] configuration file.

Finally, make sure the user account under which the web front-end runs will have ''''''write permissions'''''' to the environment directory and all the files inside. This will be the case if you run `trac-admin ... initenv` as this user. If not, you should set the correct user afterwards. For example on Linux, with the web server running as user `apache` and group `apache`, enter:
{{{
# chown -R apache.apache /path/to/myproject
}}}

== Running the Standalone Server ==

After having created a Trac environment, you can easily try the web interface by running the standalone server [wiki:TracStandalone tracd]:
{{{
$ tracd --port 8000 /path/to/myproject
}}}

Then, fire up a browser and visit `http://localhost:8000/`. You should get a simple listing of all environments that `tracd` knows about. Follow the link to the environment you just created, and you should see Trac in action. If you only plan on managing a single project with Trac you can have the standalone server skip the environment list by starting it like this:
{{{
$ tracd -s --port 8000 /path/to/myproject
}}}

== Running Trac on a Web Server ==

Trac provides various options for connecting to a "real" web server: [wiki:TracCgi CGI], [wiki:TracFastCgi FastCGI], [wiki:TracModWSGI mod_wsgi] and [wiki:TracModPython mod_python]. For decent performance, it is recommended that you use either FastCGI or mod_wsgi.

Trac also supports [trac:TracOnWindowsIisAjp AJP] which may be your choice if you want to connect to IIS.

==== Generating the Trac cgi-bin directory ====

In order for Trac to function properly with FastCGI you need to have a `trac.fcgi` file and for mod_wsgi a `trac.wsgi` file. These are Python scripts which load the appropriate Python code. They can be generated using the `deploy` option of [wiki:TracAdmin trac-admin].

There is, however, a bit of a chicken-and-egg problem. The [wiki:TracAdmin trac-admin] command requires an existing environment to function, but complains if the deploy directory already exists. This is a problem, because environments are often stored in a subdirectory of the deploy. The solution is to do something like this:
{{{
mkdir -p /usr/share/trac/projects/my-project
trac-admin /usr/share/trac/projects/my-project initenv
trac-admin /usr/share/trac/projects/my-project deploy /tmp/deploy
mv /tmp/deploy/* /usr/share/trac
}}}

==== Setting up the Plugin Cache ====

Some Python plugins need to be extracted to a cache directory. By default the cache resides in the home directory of the current user. When running Trac on a Web Server as a dedicated user (which is highly recommended) who has no home directory, this might prevent the plugins from starting. To override the cache location you can set the PYTHON_EGG_CACHE environment variable. Refer to your server documentation for detailed instructions on how to set environment variables.

== Configuring Authentication ==

The process of adding, removing, and configuring user accounts for authentication depends on the specific way you run Trac. The basic procedure is described in the [wiki:TracCgi#AddingAuthentication "Adding Authentication"] section on the TracCgi page. To learn how to setup authentication for the frontend you''re using, please refer to one of the following pages:

 * TracStandalone if you use the standalone server, `tracd`.
 * TracCgi if you use the CGI or FastCGI web front ends.
 * [wiki:TracModWSGI] if you use the Apache mod_wsgi web front end.
 * TracModPython if you use the Apache mod_python web front end.


== Automatic reference to the SVN changesets in Trac tickets ==

You can configure SVN to automatically add a reference to the changeset into the ticket comments, whenever changes are committed to the repository. The description of the commit needs to contain one of the following formulas:
 * ''''''`Refs #123`'''''' - to reference this changeset in `#123` ticket
 * ''''''`Fixes #123`'''''' - to reference this changeset and close `#123` ticket with the default status ''''fixed''''

This functionality requires a post-commit hook to be installed as described in [wiki:TracRepositoryAdmin#ExplicitSync TracRepositoryAdmin], and enabling the optional commit updater components by adding the following line to the `[components]` section of your [wiki:TracIni#components-section trac.ini], or enabling the components in the "Plugins" admin panel.
{{{
tracopt.ticket.commit_updater.* = enabled
}}}
For more information, see the documentation of the `CommitTicketUpdater` component in the "Plugins" admin panel.

== Using Trac ==

Once you have your Trac site up and running, you should be able to create tickets, view the timeline, browse your version control repository if configured, etc.

Keep in mind that anonymous (not logged in) users can by default access most but not all of the features. You will need to configure authentication and grant additional [wiki:TracPermissions permissions] to authenticated users to see the full set of features.

'''' Enjoy! ''''

[trac:TracTeam The Trac Team]

----
See also: [trac:TracInstallPlatforms TracInstallPlatforms], TracGuide, TracCgi, TracFastCgi, TracModPython, [wiki:TracModWSGI], TracUpgrade, TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracInterfaceCustomization',1,1293789825884000,'trac','127.0.0.1','= Customizing the Trac Interface =
[[TracGuideToc]]

== Introduction ==
This page is meant to give users suggestions on how they can customize the look of Trac.  Topics on this page cover editing the HTML templates and CSS files, but not the program code itself.  The topics are intended to show users how they can modify the look of Trac to meet their specific needs.  Suggestions for changes to Trac''s interface applicable to all users should be filed as tickets, not listed on this page.

== Project Logo and Icon ==
The easiest parts of the Trac interface to customize are the logo and the site icon.  Both of these can be configured with settings in [wiki:TracIni trac.ini].

The logo or icon image should be put in a folder named "htdocs" in your project''s environment folder.  (''''Note: in projects created with a Trac version prior to 0.9 you will need to create this folder'''')

 ''''Note: you can actually put the logo and icon anywhere on your server (as long as it''s accessible through the web server), and use their absolute or server-relative URLs in the configuration.''''

Now configure the appropriate section of your [wiki:TracIni trac.ini]:

=== Logo ===
Change the `src` setting to `site/` followed by the name of your image file.  The `width` and `height` settings should be modified to match your image''s dimensions (the Trac chrome handler uses "`site/`" for files within the project directory `htdocs` and "`common/`" for the common ones).

{{{
[header_logo]
src = site/my_logo.gif
alt = My Project
width = 300
height = 100
}}}

=== Icon ===
Icons should be a 16x16 image in `.gif` or `.ico` format.  Change the `icon` setting to `site/` followed by the name of your icon file.  Icons will typically be displayed by your web browser next to the site''s URL and in the `Bookmarks` menu.

{{{
[project]
icon = site/my_icon.ico
}}}

Note though that this icon is ignored by Internet Explorer, which only accepts a file named ``favicon.ico`` at the root of the host. To make the project icon work in both IE and other browsers, you can store the icon in the document root of the host, and reference it from ``trac.ini`` as follows:

{{{
[project]
icon = /favicon.ico
}}}

Should your browser have issues with your favicon showing up in the address bar, you may put a "?" (less the quotation marks) after your favicon file extension. 

{{{
[project]
icon = /favicon.ico?
}}}

== Custom Navigation Entries ==
The new [mainnav] and [metanav] can now be used to customize the text and link used for the navigation items, or even to disable them (but not for adding new ones).

In the following example, we rename the link to the Wiki start "Home", and hide the "Help/Guide". We also make the "View Tickets" entry link to a specific report .
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24

[metanav]
help = disabled
}}}

See also TracNavigation for a more detailed explanation of the mainnav and metanav terms.

== Site Appearance == #SiteAppearance

Trac is using [http://genshi.edgewall.org Genshi] as the templating engine. Documentation is yet to be written, in the meantime the following tip should work.

Say you want to add a link to a custom stylesheet, and then your own
header and footer. Save the following content as ''site.html'' inside your projects templates directory (each Trac project can have their own site.html), e.g. {{{/path/to/env/templates/site.html}}}:

{{{
#!xml
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      py:strip="">

  <!--! Add site-specific style sheet -->
  <head py:match="head" py:attrs="select(''@*'')">
    ${select(''*|comment()|text()'')}
    <link rel="stylesheet" type="text/css"
          href="${href.chrome(''site/style.css'')}" />
  </head>

  <body py:match="body" py:attrs="select(''@*'')">
    <!--! Add site-specific header -->
    <div id="siteheader">
      <!--! Place your header content here... -->
    </div>

    ${select(''*|text()'')}

    <!--! Add site-specific footer -->
    <div id="sitefooter">
      <!--! Place your footer content here... -->
    </div>
  </body>
</html>
}}}

Those who are familiar with XSLT may notice that Genshi templates bear some similarities. However, there are some Trac specific features - for example ''''''${href.chrome(''site/style.css'')}'''''' attribute references template placed into environment''s ''''htdocs/''''  In a similar fashion ''''''${chrome.htdocs_location}'''''' is used to specify common ''''htdocs/'''' directory from Trac installation.

`site.html` is one file to contain all your modifications. It usually works by the py:match (element or attribute), and it allows you to modify the page as it renders - the matches hook onto specific sections depending on what it tries to find
and modify them.
See [http://groups.google.com/group/trac-users/browse_thread/thread/70487fb2c406c937/ this thread] for a detailed explanation of the above example `site.html`.
A site.html can contain any number of such py:match sections for whatever you need to modify. This is all [http://genshi.edgewall.org/ Genshi], so the docs on the exact syntax can be found there.


Example snippet of adding introduction text to the new ticket form (hide when preview):

{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)">
    <p>Please make sure to search for existing tickets before reporting a new one!</p>
  </py:if>
  ${select(''*'')} 
</form>
}}}

This example illustrates a technique of using ''''''`req.environ[''PATH_INFO'']`'''''' to limit scope of changes to one view only. For instance, to make changes in site.html only for timeline and avoid modifying other sections - use  ''''`req.environ[''PATH_INFO''] == ''/timeline''`'''' condition in <py:if> test.

More examples snippets for `site.html` can be found at [trac:wiki:CookBook/SiteHtml CookBook/SiteHtml].

Example snippets for `style.css` can be found at [trac:wiki:CookBook/SiteStyleCss CookBook/SiteStyleCss].

If the environment is upgraded from 0.10 and a `site_newticket.cs` file already exists, it can actually be loaded by using a workaround - providing it contains no ClearSilver processing. In addition, as only one element can be imported, the content needs some sort of wrapper such as a `<div>` block or other similar parent container. The XInclude namespace must be specified to allow includes, but that can be moved to document root along with the others:
{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')"
        xmlns:xi="http://www.w3.org/2001/XInclude">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)"> 
    <xi:include href="site_newticket.cs"><xi:fallback /></xi:include>
  </py:if>
  ${select(''*'')} 
</form>
}}}

Also note that the `site.html` (despite its name) can be put in a common templates directory - see the `[inherit] templates_dir` option. This could provide easier maintainence (and a migration path from 0.10 for larger installations) as one new global `site.html` file can be made to include any existing header, footer and newticket snippets.

== Project List == #ProjectList

You can use a custom Genshi template to display the list of projects if you are using Trac with multiple projects.  

The following is the basic template used by Trac to display a list of links to the projects.  For projects that could not be loaded it displays an error message. You can use this as a starting point for your own index template.

{{{
#!text/html
<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <head>
    <title>Available Projects</title>
  </head>
  <body>
    <h1>Available Projects</h1>
    <ul>
      <li py:for="project in projects" py:choose="">
        <a py:when="project.href" href="$project.href"
           title="$project.description">$project.name</a>
        <py:otherwise>
          <small>$project.name: <em>Error</em> <br /> ($project.description)</small>
        </py:otherwise>
      </li>
    </ul>
  </body>
</html>
}}}

Once you''ve created your custom template you will need to configure the webserver to tell Trac where the template is located (pls verify ... not yet changed to 0.11):

For [wiki:TracModWSGI mod_wsgi]:
{{{
os.environ[''TRAC_ENV_INDEX_TEMPLATE''] = ''/path/to/template''
}}}

For [wiki:TracFastCgi FastCGI]:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects \
              -initial-env TRAC_ENV_INDEX_TEMPLATE=/path/to/template
}}}

For [wiki:TracModPython mod_python]:
{{{
PythonOption TracEnvParentDir /parent/dir/of/projects
PythonOption TracEnvIndexTemplate /path/to/template
}}}

For [wiki:TracCgi CGI]:
{{{
SetEnv TRAC_ENV_INDEX_TEMPLATE /path/to/template
}}}

For [wiki:TracStandalone], you''ll need to set up the `TRAC_ENV_INDEX_TEMPLATE` environment variable in the shell used to launch tracd:
 - Unix
   {{{
#!sh
$ export TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}
 - Windows
   {{{
#!sh
$ set TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}

== Project Templates ==

The appearance of each individual Trac environment (that is, instance of a project) can be customized independently of other projects, even those hosted by the same server. The recommended way is to use a `site.html` template (see [#SiteAppearance]) whenever possible. Using `site.html` means changes are made to the original templates as they are rendered, and you should not normally need to redo modifications whenever Trac is upgraded. If you do make a copy of `theme.html` or any other Trac template, you need to migrate your modifiations to the newer version - if not, new Trac features or bug fixes may not work as expected.

With that word of caution, any Trac template may be copied and customized. The default Trac templates are located inside the installed Trac egg (`/usr/lib/pythonVERSION/site-packages/Trac-VERSION.egg/trac/templates, .../trac/ticket/templates, .../trac/wiki/templates, ++`). The [#ProjectList] template file is called `index.html`, while the template responsible for main layout is called `theme.html`. Page assets such as images and CSS style sheets are located in the egg''s `trac/htdocs` directory.

However, do not edit templates or site resources inside the Trac egg - installing Trac again can completely delete your modifications. Instead use one of two alternatives:
 * For a modification to one project only, copy the template to project `templates` directory.
 * For a modification shared by several projects, copy the template to a shared location and have each project point to this location using the `[inherit] templates_dir =` trac.ini option.

Trac resolves requests for a template by first looking inside the project, then in any inherited templates location, and finally inside the Trac egg.

Trac caches templates in memory by default to improve performance. To apply a template you need to restart the server.
----
See also TracGuide, TracIni
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracLinks',1,1293789825884000,'trac','127.0.0.1','= Trac Links =
[[TracGuideToc]]

TracLinks are a fundamental feature of Trac, because they allow easy hyperlinking between the various entities in the system—such as tickets, reports, changesets, Wiki pages, milestones, and source files—from anywhere WikiFormatting is used.

TracLinks are generally of the form ''''''type:id'''''' (where ''''id'''' represents the
number, name or path of the item) though some frequently used kinds of items
also have short-hand notations.

== Where to use TracLinks ==
You can use TracLinks in:

 * Source code (Subversion) commit messages
 * Wiki pages
 * Full descriptions for tickets, reports and milestones

and any other text fields explicitly marked as supporting WikiFormatting.

== Overview ==

||= Wiki Markup =||= Display =||
{{{#!td
 Wiki pages :: `CamelCase` or `wiki:CamelCase`
 Parent page :: `[..]`
 Tickets :: `#1` or `ticket:1`
 Ticket comments :: `comment:1:ticket:2`
 Reports :: `{1}` or `report:1`
 Milestones :: `milestone:1.0`
 Attachment :: `attachment:example.tgz` (for current page attachment), `attachment:attachment.1073.diff:ticket:944` (absolute path)
 Changesets :: `r1`, `[1]`, `changeset:1` or (restricted) `[1/trunk]`, `changeset:1/trunk`
 Revision log :: `r1:3`, `[1:3]` or `log:@1:3`, `log:trunk@1:3`, `[2:5/trunk]`
 Diffs :: `diff:@1:3`, `diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` 
          or `diff:trunk/trac@3538//sandbox/vc-refactoring@3539`
 Files :: `source:trunk/COPYING`, `source:/trunk/COPYING@200` (at version 200), `source:/trunk/COPYING@200#L25` (at version 200, line 25)
}}}
{{{#!td
 Wiki pages :: CamelCase or wiki:CamelCase
 Parent page :: [..]
 Tickets :: #1 or ticket:1
 Ticket comments :: comment:1:ticket:2 
 Reports :: {1} or report:1
 Milestones :: milestone:1.0
 Attachment :: attachment:example.tgz (for current page attachment), attachment:attachment.1073.diff:ticket:944 (absolute path)
 Changesets :: r1, [1], changeset:1 or (restricted) [1/trunk], changeset:1/trunk
 Revision log :: r1:3, [1:3] or log:@1:3, log:trunk@1:3, [2:5/trunk]
 Diffs :: diff:@1:3, diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default 
          or diff:trunk/trac@3538//sandbox/vc-refactoring@3539
 Files :: source:trunk/COPYING, source:/trunk/COPYING@200 (at version 200), source:/trunk/COPYING@200#L25 (at version 200, line 25)
}}}

''''''Note:'''''' The wiki:CamelCase form is rarely used, but it can be convenient to refer to
pages whose names do not follow WikiPageNames rules, i.e., single words,
non-alphabetic characters, etc. See WikiPageNames for more about features specific
to links to Wiki page names.


{{{#!table class=""
|||| Trac links using the full (non-shorthand) notation can also be given a custom link title like this: ||
{{{#!td
{{{
[ticket:1 This is a link to ticket number one] or
[[ticket:1|This is another link to ticket number one]].
}}}
}}}
{{{#!td
[ticket:1 This is a link to ticket number one] or
[[ticket:1|This is another link to ticket number one]].
}}}
|--------------------------------------------------------------------------------------
|||| If the title is omitted, only the id (the part after the colon) is displayed:  ||
{{{#!td
{{{
[ticket:1] or [[ticket:2]]
}}}
}}}
{{{#!td
[ticket:1] or [[ticket:2]]
}}}
|--------------------------------------------------------------------------------------
|||| `wiki` is the default if the namespace part of a full link is omitted:  || 
{{{#!td
{{{
[SandBox the sandbox] or
[[SandBox|the sandbox]]
}}}
}}}
{{{#!td
[SandBox the sandbox] or
[[SandBox|the sandbox]]
}}}
|--------------------------------------------------------------------------------------
|||| The short form ''''realm:target'''' can also be wrapped within a <...> pair, [[br]] which allow for arbitrary characters (i.e. anything but >)  ||
{{{#!td
{{{
<wiki:Strange(page@!)>
}}}
}}}
{{{#!td
<wiki:Strange(page@!)>
}}}
}}}

TracLinks are a very simple idea, but actually allow quite a complex network of information. In practice, it''s very intuitive and simple to use, and we''ve found the "link trail" extremely helpful to better understand what''s happening in a project or why a particular change was made.


== Advanced use of TracLinks ==

=== Relative links ===

To create a link to a specific anchor in a page, use ''#'':
{{{
 [#Relativelinks relative links] or [[#Relativelinks|relative links]]
}}}
Displays:
  [#Relativelinks relative links] or [[#Relativelinks|relative links]]

Hint: when you move your mouse over the title of a section, a ''¶'' character will be displayed. This is a link to that specific section and you can use this to copy the `#...` part inside a relative link to an anchor.

To create a link to a [trac:SubWiki SubWiki]-page just use a ''/'':
{{{
 WikiPage/SubWikiPage or ./SubWikiPage
}}}

To link from a [trac:SubWiki SubWiki] page to a parent, simply use a ''..'':
{{{
  [..] or [[..]]
}}}
  [..] or [[..]]

To link from a [trac:SubWiki SubWiki] page to a [=#sibling sibling] page, use a ''../'':
{{{
  [../Sibling see next sibling] or [[../Sibling|see next sibling]]
}}}
  [../Sibling see next sibling] or [[../Sibling|see next sibling]]

But in practice you often won''t need to add the `../` prefix to link to a sibling page.
For resolving the location of a wiki link, it''s the target page closest in the hierarchy
to the page where the link is written which will be selected. So for example, within 
a sub-hierarchy, a sibling page will be targeted in preference to a toplevel page.
This makes it easy to copy or move pages to a sub-hierarchy by [[WikiNewPage#renaming|renaming]] without having to adapt the links.

In order to link explicitly to a [=#toplevel toplevel] Wiki page,
use the `wiki:/` prefix.
Be careful **not** to use the `/` prefix alone, as this corresponds to the
[#Server-relativelinks] syntax and with such a link you will lack the `/wiki/` 
part in the resulting URL.

''''(Changed in 0.11)'''' Note that in Trac 0.10, using e.g. `[../newticket]`  may have worked for linking to the `/newticket` top-level URL, but since 0.11, such a link will stay in the wiki namespace and therefore link to a sibling page. 
See [#Server-relativelinks] for the new syntax.

=== InterWiki links ===

Other prefixes can be defined freely and made to point to resources in other Web applications. The definition of those prefixes as well as the URLs of the corresponding Web applications is defined in a special Wiki page, the InterMapTxt page. Note that while this could be used to create links to other Trac environments, there''s a more specialized way to register other Trac environments which offers greater flexibility.

=== InterTrac links ===

This can be seen as a kind of InterWiki link specialized for targeting other Trac projects.

Any type of Trac link can be written in one Trac environment and actually refer to resources in another Trac environment. All that is required is to prefix the Trac link with the name of the other Trac environment followed by a colon. The other Trac environment must be registered on the InterTrac page. 

A distinctive advantage of InterTrac links over InterWiki links is that the shorthand form of Trac links (e.g. `{}`, `r`, `#`) can also be used. For example if T was set as an alias for Trac, links to Trac tickets can be written #T234, links to Trac changesets can be written [trac 1508].
See InterTrac for the complete details. 

=== Server-relative links ===

It is often useful to be able to link to objects in your project that
have no built-in Trac linking mechanism, such as static resources, `newticket`,
a shared `/register` page on the server, etc.

To link to resources inside the project, use either an absolute path from the project root, 
or a relative link from the URL of the current page (''''Changed in 0.11''''):

{{{
[/newticket Create a new ticket] or [[//newticket|Create a new ticket]]
[/ home] or [[/|home]]
}}}

Display: [/newticket Create a new ticket] or [[//newticket|Create a new ticket]]
[/ home] or [[/|home]]

To link to another location on the server (possibly outside the project but on the same host), use the `//` prefix (''''Changed in 0.11''''):

{{{
[//register Register Here] or [[//register|Register Here]]
}}}

Display: [//register Register Here] or [[//register|Register Here]]

=== Quoting space in TracLinks ===

Immediately after a TracLinks prefix, targets containing space characters should
be enclosed in a pair of quotes or double quotes.
Examples:
 * !wiki:"The whitespace convention"
 * !attachment:''the file.txt'' or
 * !attachment:"the file.txt" 
 * !attachment:"the file.txt:ticket:123" 

Note that by using [trac:WikiCreole] style links, it''s quite natural to write links containing spaces:
 * ![[The whitespace convention]]
 * ![[attachment:the file.txt]]

=== Escaping Links ===

To prevent parsing of a !TracLink, you can escape it by preceding it with a ''!'' (exclamation mark).
{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

Display:
 !NoLinkHere.
 ![42] is not a link either.


=== Parameterized Trac links ===

Many Trac resources have more than one way to be rendered, depending on some extra parameters. For example, a Wiki page can accept a `version` or a `format` parameter, a report can make use of dynamic variables, etc.

Trac links can support an arbitrary set of parameters, written in the same way as they would be for the corresponding URL. Some examples:
 - `wiki:WikiStart?format=txt`
 - `ticket:1?version=1`
 - `[/newticket?component=module1 create a ticket for module1]`
 - `[/newticket?summary=Add+short+description+here create a ticket with URL with spaces]`


== TracLinks Reference ==
The following sections describe the individual link types in detail, as well as notes on advanced usage of links.

=== attachment: links ===

The link syntax for attachments is as follows:
 * !attachment:the_file.txt creates a link to the attachment the_file.txt of the current object
 * !attachment:the_file.txt:wiki:MyPage creates a link to the attachment the_file.txt of the !MyPage wiki page
 * !attachment:the_file.txt:ticket:753 creates a link to the attachment the_file.txt of the ticket 753

Note that the older way, putting the filename at the end, is still supported: !attachment:ticket:753:the_file.txt.

If you''d like to create a direct link to the content of the attached file instead of a link to the attachment page, simply use `raw-attachment:` instead of `attachment:`.

This can be useful for pointing directly to an HTML document, for example. Note that for this use case, you''d have to allow the web browser to render the content by setting `[attachment] render_unsafe_content = yes` (see TracIni#attachment-section). Caveat: only do that in environments for which you''re 100% confident you can trust the people who are able to attach files, as otherwise this would open up your site to [wikipedia:Cross-site_scripting cross-site scripting] attacks.

See also [#export:links].

=== comment: links ===

When you''re inside a given ticket, you can simply write e.g. !comment:3 to link to the third change comment.
It is possible to link to a comment of a specific ticket from anywhere using one of the following syntax:
 - `comment:3:ticket:123` 
 - `ticket:123#comment:3` (note that you can''t write `#123#!comment:3`!)
It is also possible to link to the ticket''s description using one of the following syntax:
 - `comment:description` (within the ticket)
 - `comment:description:ticket:123`
 - `ticket:123#comment:description`

=== query: links ===

See TracQuery#UsingTracLinks and [#ticket:links].

=== search: links ===

See TracSearch#SearchLinks 

=== ticket: links ===
 ''''alias:'''' `bug:`

Besides the obvious `ticket:id` form, it is also possible to specify a list of tickets or even a range of tickets instead of the `id`. This generates a link to a custom query view containing this fixed set of tickets.

Example: 
 - `ticket:5000-6000`
 - `ticket:1,150`

''''(since Trac 0.11)''''

=== timeline: links ===

Links to the timeline can be created by specifying a date in the ISO:8601 format. The date can be optionally followed by a time specification. The time is interpreted as being UTC time, but alternatively you can specify your local time, followed by your timezone if you don''t want to compute the UTC time.

Examples:
 - `timeline:2008-01-29`
 - `timeline:2008-01-29T15:48`
 - `timeline:2008-01-29T15:48Z`
 - `timeline:2008-01-29T16:48+01`

''''(since Trac 0.11)''''

=== wiki: links ===

See WikiPageNames and [#QuotingspaceinTracLinks quoting space in TracLinks] above.

=== Version Control related links ===

It should be noted that multiple repository support works by creating a kind of virtual namespace for versioned files in which the toplevel folders correspond to the repository names. Therefore, in presence of multiple repositories, a ''''/path'''' specification in the syntax of links detailed below should start with the name of the repository. If omitted, the default repository is used. In case a toplevel folder of the default repository has the same name as a repository, the latter "wins". One can always access such folder by fully qualifying it (the default repository can be an alias of a named repository, or conversely, it is always possible to create an alias for the default repository, ask your Trac administrator).

For example, `source:/trunk/COPYING` targets the path `/trunk/COPYING` in the default repository, whereas `source:/projectA/trunk/COPYING` targets the path `/trunk/COPYING` in the repository named `projectA`. This can be the same file if `''projectA''` is an alias to the default repository or if `''''` (the default repository) is an alias to `''projectA''`.

==== source: links ====
 ''''aliases:'''' `browser:`, `repos:`

The default behavior for a source:/some/path link is to open the browser in that directory directory 
if the path points to a directory or to show the latest content of the file.

It''s also possible to link directly to a specific revision of a file like this:
 - `source:/some/file@123` - link to the file''s revision 123
 - `source:/some/file@head` - link explicitly to the latest revision of the file

If the revision is specified, one can even link to a specific line number:
 - `source:/some/file@123#L10`
 - `source:/tag/0.10@head#L10`

Finally, one can also highlight an arbitrary set of lines:
 - `source:/some/file@123:10-20,100,103#L99` - highlight lines 10 to 20, and lines 100 and 103.
   ''''(since 0.11)''''

Note that in presence of multiple repositories, the name of the repository is simply integrated in the path you specify for `source:` (e.g. `source:reponame/trunk/README`). ''''(since 0.12)''''

==== export: links ====

To force the download of a file in the repository, as opposed to displaying it in the browser, use the `export` link.  Several forms are available:
 * `export:/some/file` - get the HEAD revision of the specified file
 * `export:123:/some/file` - get revision 123 of the specified file
 * `export:/some/file@123` - get revision 123 of the specified file

This can be very useful for displaying XML or HTML documentation with correct stylesheets and images, in case that has been checked in into the repository. Note that for this use case, you''d have to allow the web browser to render the content by setting `[browser] render_unsafe_content = yes` (see TracIni#browser-section), otherwise Trac will force the files to be downloaded as attachments for security concerns. 

If the path is to a directory in the repository instead of a specific file, the source browser will be used to display the directory (identical to the result of `source:/some/dir`).

==== log: links ====

The `log:` links are used to display revision ranges. In its simplest form, it can link to the latest revisions of the specified path, but it can also support displaying an arbitrary set of revisions.
 - `log:/` - the latest revisions starting at the root of the repository
 - `log:/trunk/tools` - the latest revisions in `trunk/tools`
 - `log:/trunk/tools@10000` - the revisions in `trunk/tools` starting from  revision 10000
 - `log:@20788,20791:20795` - list revision 20788 and the revisions from 20791 to 20795 
 - `log:/trunk/tools@20788,20791:20795` - list revision 20788 and the revisions from 20791 to 20795 which affect the given path

There are short forms for revision ranges as well:
 - `[20788,20791:20795]`
 - `[20788,20791:20795/trunk/tools]`
 - `r20791:20795` (but not `r20788,20791:20795` nor `r20791:20795/trunk`)

Finally, note that in all of the above, a revision range can be written either as `x:y` or `x-y`.

In the presence of multiple repositories, the name of the repository should be specified as the first part of the path, e.g. `log:repos/branches` or `[20-40/repos]`.

----
See also: WikiFormatting, TracWiki, WikiPageNames, InterTrac, InterWiki
 
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracLogging',1,1293789825894000,'trac','127.0.0.1','= Trac Logging =
[[TracGuideToc]]

Trac supports logging of system messages using the standard [http://docs.python.org/lib/module-logging.html logging module] that comes with Python.

Logging is configured in the `[logging]` section in [wiki:TracIni#logging-section trac.ini].

== Supported Logging Methods ==

The log method is set using the `log_type` option in [wiki:TracIni#logging-section trac.ini], which takes any of the following values:

 ''''''none'''':: Suppress all log messages.
 ''''''file'''''':: Log messages to a file, specified with the `log_file` option in [wiki:TracIni#logging-section trac.ini]. Relative paths in `log_file` are resolved relative to the `log` directory of the environment.
 ''''''stderr'''''':: Output all log entries to console ([wiki:TracStandalone tracd] only).
 ''''''syslog'''''':: (UNIX) Send all log messages to the local syslogd via named pipe `/dev/log`. By default, syslog will write them to the file /var/log/messages.
 ''''''eventlog'''''':: (Windows) Use the system''s NT Event Log for Trac logging.

== Log Levels ==

The verbosity level of logged messages can be set using the `log_level` option in [wiki:TracIni#logging-section trac.ini]. The log level defines the minimum level of urgency required for a message to be logged, and those levels are:

 ''''''CRITICAL'''''':: Log only the most critical (typically fatal) errors.
 ''''''ERROR'''''':: Log failures, bugs and errors. 
 ''''''WARN'''''':: Log warnings, non-interrupting events.
 ''''''INFO'''''':: Diagnostic information, log information about all processing.
 ''''''DEBUG'''''':: Trace messages, profiling, etc.

Note that starting with Trac 0.11.5 you can in addition enable logging of SQL statements, at debug level. This is turned off by default, as it''s very verbose (set `[trac] debug_sql = yes` in TracIni to activate).

== Log Format ==

Starting with Trac 0.10.4 (see [trac:#2844 #2844]), it is possible to set the output format for log entries. This can be done through the `log_format` option in [wiki:TracIni#logging-section trac.ini]. The format is a string which can contain any of the [http://docs.python.org/lib/node422.html Python logging Formatter variables]. Additonally, the following Trac-specific variables can be used:
 ''''''$(basename)s'''''':: The last path component of the current environment.
 ''''''$(path)s'''''':: The absolute path for the current environment.
 ''''''$(project)s'''''':: The originating project''s name.

Note that variables are identified using a dollar sign (`$(...)s`) instead of percent sign (`%(...)s`).

The default format is:
{{{
log_format = Trac[$(module)s] $(levelname)s: $(message)s
}}}

In a multi-project environment where all logs are sent to the same place (e.g. `syslog`), it makes sense to add the project name. In this example we use `basename` since that can generally be used to identify a project:
{{{
log_format = Trac[$(basename)s:$(module)s] $(levelname)s: $(message)s
}}}

----
See also: TracIni, TracGuide, TracEnvironment
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracModPython',1,1293789825894000,'trac','127.0.0.1','= Trac and mod_python =
[[TracGuideToc]]

Trac supports [http://www.modpython.org/ mod_python], which speeds up Trac''s response times considerably, especially compared to [TracCgi CGI], and permits use of many Apache features not possible with [wiki:TracStandalone tracd]/mod_proxy.

These instructions are for Apache 2; if you are still using Apache 1.3, you may have some luck with [trac:wiki:TracModPython2.7 TracModPython2.7].

== A Word of Warning ==

As of 16^th^ June 2010, the mod_python project is officially dead.  If you are considering using mod_python for a new installation, ''''''please don''t''''''!  There are known issues which will not be fixed and there are now better alternatives.  Check out the main TracInstall pages for your target version for more information.

== Simple configuration ==

If you just installed mod_python, you may have to add a line to load the module in the Apache configuration:
{{{
LoadModule python_module modules/mod_python.so
}}}

''''Note: The exact path to the module depends on how the HTTPD installation is laid out.''''

On Debian using apt-get
{{{
apt-get install libapache2-mod-python libapache2-mod-python-doc
}}}
(Still on Debian) after you have installed mod_python, you must enable the modules in apache2 (equivalent of the above Load Module directive):
{{{
a2enmod python
}}}
On Fedora use, using yum:
{{{
yum install mod_python
}}}
You can test your mod_python installation by adding the following to your httpd.conf.  You should remove this when you are done testing for security reasons. Note: mod_python.testhandler is only available in mod_python 3.2+.
{{{
#!xml
<Location /mpinfo>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler mod_python.testhandler
</Location>
}}}

A simple setup of Trac on mod_python looks like this:
{{{
#!xml
<Location /projects/myproject>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler trac.web.modpython_frontend 
   PythonOption TracEnv /var/trac/myproject
   PythonOption TracUriRoot /projects/myproject
</Location>
}}}

The option ''''''`TracUriRoot`'''''' may or may not be necessary in your setup. Try your configuration without it; if the URLs produced by Trac look wrong, if Trac does not seem to recognize URLs correctly, or you get an odd "No handler matched request to..." error, add the ''''''`TracUriRoot`'''''' option.  You will notice that the `Location` and ''''''`TracUriRoot`'''''' have the same path.

The options available are
{{{
    # For a single project
    PythonOption TracEnv /var/trac/myproject
    # For multiple projects
    PythonOption TracEnvParentDir /var/trac/myprojects
    # For the index of multiple projects
    PythonOption TracEnvIndexTemplate /srv/www/htdocs/trac/project_list_template.html
    # A space delimitted list, with a "," between key and value pairs.
    PythonOption TracTemplateVars key1,val1 key2,val2
    # Useful to get the date in the wanted order
    PythonOption TracLocale en_GB.UTF8
    # See description above        
    PythonOption TracUriRoot /projects/myproject
}}}

=== Python Egg Cache ===

Compressed python eggs like Genshi are normally extracted into a directory named `.python-eggs` in the users home directory. Since apache''s home usually is not writable an alternate egg cache directory can be specified like this:
{{{
PythonOption PYTHON_EGG_CACHE /var/trac/myprojects/egg-cache
}}}

or you can uncompress the Genshi egg to resolve problems extracting from it.
=== Configuring Authentication ===

Creating password files and configuring authentication works similar to the process for [wiki:TracCgi#AddingAuthentication CGI]:
{{{
#!xml
<Location /projects/myproject/login>
  AuthType Basic
  AuthName "myproject"
  AuthUserFile /var/trac/myproject/.htpasswd
  Require valid-user
</Location>
}}}

Configuration for mod_ldap authentication in Apache is a bit tricky (httpd 2.2.x and OpenLDAP: slapd 2.3.19)

1. You need to load the following modules in Apache httpd.conf
{{{
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
}}}

2. Your httpd.conf also needs to look something like:

{{{
#!xml
<Location /trac/>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend
  PythonOption TracEnv /home/trac/
  PythonOption TracUriRoot /trac/
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://127.0.0.1/dc=example,dc=co,dc=ke?uid?sub?(objectClass=inetOrgPerson)"
  authzldapauthoritative Off
  require valid-user
</Location>
}}}

Or the LDAP interface to a Microsoft Active Directory:

{{{
#!xml
<Location /trac/>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend
  PythonOption TracEnv /home/trac/
  PythonOption TracUriRoot /trac/
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://adserver.company.com:3268/DC=company,DC=com?sAMAccountName?sub?(objectClass=user)"
  AuthLDAPBindDN       ldap-auth-user@company.com
  AuthLDAPBindPassword "the_password"
  authzldapauthoritative Off
  # require valid-user
  require ldap-group CN=Trac Users,CN=Users,DC=company,DC=com
</Location>
}}}

Note 1: This is the case where the LDAP search will get around the multiple OUs, conecting to Global Catalog Server portion of AD (Notice the port is 3268, not the normal LDAP 389). The GCS is basically a "flattened" tree which allows searching for a user without knowing to which OU they belong.

Note 2: Active Directory requires an authenticating user/password to access records (AuthLDAPBindDN and AuthLDAPBindPassword).

Note 3: The directive "require ldap-group ..."  specifies an AD group whose members are allowed access.


=== Setting the Python Egg Cache ===

If the Egg Cache isn''t writeable by your Web server, you''ll either have to change the permissions, or point Python to a location where Apache can write. This can manifest itself as a ''''500 internal server error'''' and/or a complaint in the syslog. 

{{{
#!xml
<Location /projects/myproject>
  ...
  PythonOption PYTHON_EGG_CACHE /tmp 
  ...
</Location>
}}}


=== Setting the !PythonPath ===

If the Trac installation isn''t installed in your Python path, you''ll have to tell Apache where to find the Trac mod_python handler  using the `PythonPath` directive:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonPath "sys.path + [''/path/to/trac'']"
  ...
</Location>
}}}

Be careful about using the !PythonPath directive, and ''''not'''' `SetEnv PYTHONPATH`, as the latter won''t work.

== Setting up multiple projects ==

The Trac mod_python handler supports a configuration option similar to Subversion''s `SvnParentPath`, called `TracEnvParentDir`:
{{{
#!xml
<Location /projects>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend 
  PythonOption TracEnvParentDir /var/trac
  PythonOption TracUriRoot /projects
</Location>
}}}

When you request the `/projects` URL, you will get a listing of all subdirectories of the directory you set as `TracEnvParentDir` that look like Trac environment directories. Selecting any project in the list will bring you to the corresponding Trac environment.

If you don''t want to have the subdirectory listing as your projects home page you can use a
{{{
#!xml
<LocationMatch "/.+/">
}}}

This will instruct Apache to use mod_python for all locations different from root while having the possibility of placing a custom home page for root in your !DocumentRoot folder.

You can also use the same authentication realm for all of the projects using a `<LocationMatch>` directive:
{{{
#!xml
<LocationMatch "/projects/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /var/trac/.htpasswd
  Require valid-user
</LocationMatch>
}}}

== Virtual Host Configuration ==

Below is the sample configuration required to set up your trac as a virtual server (i.e. when you access it at the URLs like
!http://trac.mycompany.com):

{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    <Location />
        SetHandler mod_python
        PythonInterpreter main_interpreter
        PythonHandler trac.web.modpython_frontend
        PythonOption TracEnv /var/trac/myproject
        PythonOption TracUriRoot /
    </Location>
    <Location /login>
        AuthType Basic
        AuthName "MyCompany Trac Server"
        AuthUserFile /var/trac/myproject/.htpasswd
        Require valid-user
    </Location>
</VirtualHost>
}}}

This does not seem to work in all cases. What you can do if it does not:
 * Try using `<LocationMatch>` instead of `<Location>`
 * <Location /> may, in your server setup, refer to the complete host instead of simple the root of the server. This means that everything (including the login directory referenced below) will be sent to python and authentication does not work (i.e. you get the infamous Authentication information missing error). If this applies to you, try using a sub-directory for trac instead of the root (i.e. /web/ and /web/login instead of / and /login).
 * Depending on apache''s `NameVirtualHost` configuration, you may need to use `<VirtualHost *:80>` instead of `<VirtualHost *>`.

For a virtual host that supports multiple projects replace "`TracEnv`" /var/trac/myproject with "`TracEnvParentDir`" /var/trac/

Note: !DocumentRoot should not point to your Trac project env. As Asmodai wrote on #trac: "suppose there''s a webserver bug that allows disclosure of !DocumentRoot they could then leech the entire Trac environment".

== Troubleshooting ==

In general, if you get server error pages, you can either check the Apache error log, or enable the `PythonDebug` option:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonDebug on
</Location>
}}}

For multiple projects, try restarting the server as well.

=== Expat-related segmentation faults === #expat

This problem will most certainly hit you on Unix when using Python 2.4.
In Python 2.4, some version of Expat (an XML parser library written in C) is used, 
and if Apache is using another version, this results in segmentation faults.
As Trac 0.11 is using Genshi, which will indirectly use Expat, that problem
can now hit you even if everything was working fine before with Trac 0.10.

See Graham Dumpleton''s detailed [http://www.dscpl.com.au/wiki/ModPython/Articles/ExpatCausingApacheCrash explanation and workarounds] for the issue.

=== Form submission problems ===

If you''re experiencing problems submitting some of the forms in Trac (a common problem is that you get redirected to the start page after submission), check whether your {{{DocumentRoot}}} contains a folder or file with the same path that you mapped the mod_python handler to. For some reason, mod_python gets confused when it is mapped to a location that also matches a static resource.

=== Problem with virtual host configuration ===

If the <Location /> directive is used, setting the `DocumentRoot` may result in a ''''403 (Forbidden)'''' error. Either remove the `DocumentRoot` directive, or make sure that accessing the directory it points is allowed (in a corresponding `<Directory>` block).

Using <Location /> together with `SetHandler` resulted in having everything handled by mod_python, which leads to not being able download any CSS or images/icons. I used <Location /trac> `SetHandler None` </Location> to circumvent the problem, though I do not know if this is the most elegant solution.

=== Problem with zipped egg ===

It''s possible that your version of mod_python will not import modules from zipped eggs. If you encounter an `ImportError: No module named trac` in your Apache logs but you think everything is where it should be, this might be your problem. Look in your site-packages directory; if the Trac module appears as a ''''file'''' rather than a ''''directory'''', then this might be your problem. To rectify, try installing Trac using the `--always-unzip` option, like this:

{{{
easy_install --always-unzip Trac-0.12b1.zip
}}}

=== Using .htaccess ===

Although it may seem trivial to rewrite the above configuration as a directory in your document root with a `.htaccess` file, this does not work. Apache will append a "/" to any Trac URLs, which interferes with its correct operation.

It may be possible to work around this with mod_rewrite, but I failed to get this working. In all, it is more hassle than it is worth. Stick to the provided instructions. :)

A success story: For me it worked out-of-box, with following trivial config:
{{{
SetHandler mod_python
PythonInterpreter main_interpreter
PythonHandler trac.web.modpython_frontend 
PythonOption TracEnv /system/path/to/this/directory
PythonOption TracUriRoot /path/on/apache

AuthType Basic
AuthName "ProjectName"
AuthUserFile /path/to/.htpasswd
Require valid-user
}}}

The `TracUriRoot` is obviously the path you need to enter to the browser to get to the trac (e.g. domain.tld/projects/trac)

=== Additional .htaccess help ===

If you are using the .htaccess method you may have additional problems if your trac directory is inheriting .htaccess directives from another.  This may also help to add to your .htaccess file:

{{{
<IfModule mod_rewrite.c>
  RewriteEngine Off
</IfModule>
}}}


=== Win32 Issues ===
If you run trac with mod_python < 3.2 on Windows, uploading attachments will ''''''not'''''' work. This problem is resolved in mod_python 3.1.4 or later, so please upgrade mod_python to fix this.


=== OS X issues ===

When using mod_python on OS X you will not be able to restart Apache using `apachectl restart`. This is apparently fixed in mod_python 3.2, but there''s also a patch available for earlier versions [http://www.dscpl.com.au/projects/vampire/patches.html here].

=== SELinux issues ===

If Trac reports something like: ''''Cannot get shared lock on db.lock''''
The security context on the repository may need to be set:

{{{
chcon -R -h -t httpd_sys_content_t PATH_TO_REPOSITORY
}}}

See also [http://subversion.tigris.org/faq.html#reposperms]

=== FreeBSD issues ===
Pay attention to the version of the installed mod_python and sqlite packages. Ports have both the new and old ones, but earlier versions of pysqlite and mod_python won''t integrate as the former requires threaded support in python, and the latter requires a threadless install.

If you compiled and installed apache2, apache wouldn´t support threads (cause it doesn´t work very well on FreeBSD). You could force thread support when running ./configure for apache, using --enable-threads, but this isn´t recommendable.
The best option [http://modpython.org/pipermail/mod_python/2006-September/021983.html seems to be] adding to /usr/local/apache2/bin/ennvars the line 

{{{
export LD_PRELOAD=/usr/lib/libc_r.so
}}}

=== Subversion issues ===

If you get the following Trac Error `Unsupported version control system "svn"` only under mod_python, though it works well on the command-line and even with TracStandalone, chances are that you forgot to add the path to the Python bindings with the [TracModPython#ConfiguringPythonPath PythonPath] directive. (The better way is to add a link to the bindings in the Python `site-packages` directory, or create a `.pth` file in that directory.)

If this is not the case, it''s possible that you''re using Subversion libraries that are binary incompatible with the apache ones (an incompatibility of the `apr` libraries is usually the cause). In that case, you also won''t be able to use the svn modules for Apache (`mod_dav_svn`).

You also need a recent version of `mod_python` in order to avoid a runtime error ({{{argument number 2: a ''apr_pool_t *'' is expected}}}) due to the default usage of multiple sub-interpreters. 3.2.8 ''''should'''' work, though it''s probably better to use the workaround described in [trac:#3371 #3371], in order to force the use of the main interpreter:
{{{
PythonInterpreter main_interpreter
}}}
This is anyway the recommended workaround for other well-known issues seen when using the Python bindings for Subversion within mod_python ([trac:#2611 #2611], [trac:#3455 #3455]). See in particular Graham Dumpleton''s comment in [trac:comment:9:ticket:3455 #3455] explaining the issue.

=== Page layout issues ===

If the formatting of the Trac pages look weird chances are that the style sheets governing the page layout are not handled properly by the web server. Try adding the following lines to your apache configuration:
{{{
#!xml
Alias /myproject/css "/usr/share/trac/htdocs/css"
<Location /myproject/css>
    SetHandler None
</Location>
}}}

Note: For the above configuration to have any effect it must be put after the configuration of your project root location, i.e. {{{<Location /myproject />}}}.

Also, setting `PythonOptimize On` seems to mess up the page headers and footers, in addition to hiding the documentation for macros and plugins (see #Trac8956). Considering how little effect the option has, it is probably a good idea to leave it `Off`.

=== HTTPS issues ===

If you want to run Trac fully under https you might find that it tries to redirect to plain http. In this case just add the following line to your apache configuration:
{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    SetEnv HTTPS 1
    ....
</VirtualHost>
}}}

=== Fedora 7 Issues ===
Make sure you install the ''python-sqlite2'' package as it seems to be required for TracModPython but not for tracd


=== Segmentation fault with php5-mhash or other php5 modules ===
You may encounter segfaults (reported on debian etch) if php5-mhash module is installed. Try to remove it to see if this solves the problem. See debian bug report [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=411487]

Some people also have troubles when using php5 compiled with its own 3rd party libraries instead of system libraries. Check here [http://www.djangoproject.com/documentation/modpython/#if-you-get-a-segmentation-fault]

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI ModWSGI], [wiki:TracFastCgi FastCGI],  [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracModWSGI',1,1293789825904000,'trac','127.0.0.1','= Trac and mod_wsgi =

''''''Important note:'''''' ''''Please use either version 1.6, 2.4 or later of `mod_wsgi`. Versions prior to 2.4 in the 2.X branch have problems with some Apache configurations that use WSGI file wrapper extension. This extension is used in Trac to serve up attachments and static media files such as style sheets. If you are affected by this problem attachments will appear to be empty and formatting of HTML pages will appear not to work due to style sheet files not loading properly. See mod_wsgi tickets [http://code.google.com/p/modwsgi/issues/detail?id=100 #100] and [http://code.google.com/p/modwsgi/issues/detail?id=132 #132].''''

[http://code.google.com/p/modwsgi/ mod_wsgi] is an Apache module for running WSGI-compatible Python applications directly on top of Apache. The mod_wsgi adapter is written completely in C and provides significantly better performance than using existing WSGI adapters for mod_python or CGI.

Trac can be run on top of mod_wsgi with the help of the following application script, which is just a Python file, though usually saved with a .wsgi extension). This file can be created using ''''''trac-admin <env> deploy <dir>'''''' command which automatically substitutes required paths.

{{{
#!python
import os

os.environ[''TRAC_ENV''] = ''/usr/local/trac/mysite''
os.environ[''PYTHON_EGG_CACHE''] = ''/usr/local/trac/mysite/eggs''

import trac.web.main
application = trac.web.main.dispatch_request
}}}

The `TRAC_ENV` variable should naturally be the directory for your Trac environment (if you have several Trac environments in a directory, you can also use `TRAC_ENV_PARENT_DIR` instead), while the `PYTHON_EGG_CACHE` should be a directory where Python can temporarily extract Python eggs.

''''''Important note:'''''' If you''re using multiple `.wsgi` files (for example one per Trac environment) you must ''''not'''' use `os.environ[''TRAC_ENV'']` to set the path to the Trac environment. Using this method may lead to Trac delivering the content of another Trac environment. (The variable may be filled with the path of a previously viewed Trac environment.) To solve this problem, use the following `.wsgi` file instead:

{{{
#!python
import os

os.environ[''PYTHON_EGG_CACHE''] = ''/usr/local/trac/mysite/eggs''

import trac.web.main
def application(environ, start_response):
  environ[''trac.env_path''] = ''/usr/local/trac/mysite'' 
  return trac.web.main.dispatch_request(environ, start_response)
}}}

For clarity, you should give this file a `.wsgi` extension. You should probably put the file in it''s own directory, since you will open up its directory to Apache. You can create a .wsgi files which handles all this for you by running the TracAdmin command `deploy`.

If you have installed trac and eggs in a path different from the standard one you should add that path by adding the following code on top of the wsgi script:

{{{
#!python
import site
site.addsitedir(''/usr/local/trac/lib/python2.4/site-packages'')
}}}

Change it according to the path you installed the trac libs at.

After you''ve done preparing your wsgi-script, add the following to your httpd.conf.

{{{
WSGIScriptAlias /trac /usr/local/trac/mysite/apache/mysite.wsgi

<Directory /usr/local/trac/mysite/apache>
    WSGIApplicationGroup %{GLOBAL}
    Order deny,allow
    Allow from all
</Directory>
}}}

Here, the script is in a subdirectory of the Trac environment. In order to let Apache run the script, access to the directory in which the script resides is opened up to all of Apache. Additionally, the {{{WSGIApplicationGroup}}} directive ensures that Trac is always run in the first Python interpreter created by mod_wsgi; this is necessary because the Subversion Python bindings, which are used by Trac, don''t always work in other subinterpreters and may cause requests to hang or cause Apache to crash as a result. After adding this configuration, restart Apache, and then it should work.

To test the setup of Apache, mod_wsgi and Python itself (ie. without involving Trac and dependencies), this simple wsgi application can be used to make sure that requests gets served (use as only content in your .wsgi script):

{{{
def application(environ, start_response):
        start_response(''200 OK'',[(''Content-type'',''text/html'')])
        return [''<html><body>Hello World!</body></html>'']
}}}

See also the mod_wsgi [http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac installation instructions] for Trac.

For troubleshooting tips, see the [TracModPython#Troubleshooting mod_python troubleshooting] section, as most Apache-related issues are quite similar, plus discussion of potential [http://code.google.com/p/modwsgi/wiki/ApplicationIssues application issues] when using mod_wsgi.

''''Note: using mod_wsgi 2.5 and Python 2.6.1 gave an Internal Server Error on my system (Apache 2.2.11 and Trac 0.11.2.1). Upgrading to Python 2.6.2 (as suggested [http://www.mail-archive.com/modwsgi@googlegroups.com/msg01917.html here]) solved this for me[[BR]]-- Graham Shanks''''

== Apache Basic Authentication for Trac thru mod_wsgi ==

Per the mod_wsgi documentation linked to above, here is an example Apache configuration that a) serves the trac from a virtualhost subdomain and b) uses Apache basic authentication for Trac authentication.


If you want your trac to be served from e.g. !http://trac.my-proj.my-site.org, then from the folder e.g. {{{/home/trac-for-my-proj}}}, if you used the command {{{trac-admin the-env initenv}}} to create a folder {{{the-env}}}, and you used {{{trac-admin the-env deploy the-deploy}}} to create a folder {{{the-deploy}}}, then:

create the htpasswd file:
{{{
cd /home/trac-for-my-proj/the-env
htpasswd -c htpasswd firstuser
### and add more users to it as needed:
htpasswd htpasswd seconduser
}}}
(for security keep the file above your document root)

create this file e.g. (ubuntu) {{{/etc/apache2/sites-enabled/trac.my-proj.my-site.org.conf}}} with these contents:

{{{
<Directory /home/trac-for-my-proj/the-deploy/cgi-bin/trac.wsgi>
  WSGIApplicationGroup %{GLOBAL}
  Order deny,allow
  Allow from all
</Directory>

<VirtualHost *:80>
  ServerName trac.my-proj.my-site.org
  DocumentRoot /home/trac-for-my-proj/the-env/htdocs/
  WSGIScriptAlias / /home/trac-for-my-proj/the-deploy/cgi-bin/trac.wsgi
  <Location ''/''>
    AuthType Basic
    AuthName "Trac"
    AuthUserFile /home/trac-for-my-proj/the-env/htpasswd
    Require valid-user
  </Location>
</VirtualHost>

}}}


(for subdomains to work you would probably also need to alter /etc/hosts and add A-Records to your host''s DNS.)

== Trac with PostgreSQL ==

When using the mod_wsgi adapter with multiple Trac instances and PostgreSQL (or MySQL?) as a database back-end the server can get a lot of open database connections. (and thus PostgreSQL processes)

A workable solution is to disabled connection pooling in Trac. This is done by setting poolable = False in trac.db.postgres_backend on the PostgreSQLConnection class.

But it''s not necessary to edit the source of trac, the following lines in trac.wsgi will also work:

{{{
import trac.db.postgres_backend
trac.db.postgres_backend.PostgreSQLConnection.poolable = False
}}}

Now Trac drops the connection after serving a page and the connection count on the database will be kept minimal.

== Getting Trac to work nicely with SSPI and ''Require Group'' ==
If like me you''ve set Trac up on Apache, Win32 and configured SSPI, but added a ''Require group'' option to your apache configuration, then the SSPIOmitDomain option is probably not working.  If its not working your usernames in trac are probably looking like ''DOMAIN\user'' rather than ''user''.

This WSGI script ''fixes'' things, hope it helps:
{{{
import os
import trac.web.main

os.environ[''TRAC_ENV''] = ''/usr/local/trac/mysite''
os.environ[''PYTHON_EGG_CACHE''] = ''/usr/local/trac/mysite/eggs''

def application(environ, start_response):
    if "\\" in environ[''REMOTE_USER'']:
        environ[''REMOTE_USER''] = environ[''REMOTE_USER''].split("\\", 1)[1]
    return trac.web.main.dispatch_request(environ, start_response)
}}}
----
See also:  TracGuide, TracInstall, [wiki:TracFastCgi FastCGI], [wiki:TracModPython ModPython], [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracNavigation',1,1293789825904000,'trac','127.0.0.1','= Trac Navigation =

Starting with Trac 0.11, it is now possible to customize the main and meta navigation entries in some basic ways.

The new `[mainnav]` and `[metanav]` configuration sections can now be used to customize the text and link used for the navigation items, or even to disable them.

`[mainnav]` corresponds to the ''''''main navigation bar'''''', the one containing entries such as ''''Wiki'''', ''''Timeline'''', ''''Roadmap'''', ''''Browse Source'''' and so on. This navigation bar is meant to access the default page of the main modules enabled in Trac and accessible for the current user.

`[metanav]` corresponds to the ''''''meta navigation bar'''''', by default positioned above the main navigation bar and below the ''''Search'''' box. It contains the ''''Log in'''', ''''Logout'''', ''''!Help/Guide'''' etc. entries. This navigation bar is meant to access some global information about the Trac project and the current user.

There is one special entry in the  `[metanav]` section: `logout.redirect` is the page the user sees after hitting the logout button. 

Possible URL formats:
|| ''''''config'''''' || ''''''redirect to'''''' ||
|| `wiki/Logout` || `/projects/env/wiki/Logout` ||
|| `http://hostname/` || `http://hostname/` ||
|| `/projects` || `/projects` ||
[[comment(see also #Trac3808)]]

Note that it is still not possible to customize the ''''''contextual navigation bar'''''', i.e. the one usually placed below the main navigation bar.

=== Example ===

In the following example, we rename the link to the Wiki start "Home", and hide the "!Help/Guide" link. 
We also make the "View Tickets" entry link to a specific report.

Relevant excerpt from the TracIni:
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24

[metanav]
help = disabled
logout.redirect = wiki/Logout
}}}

----
See also: TracInterfaceCustomization, and the [http://trac-hacks.org/wiki/NavAddPlugin TracHacks:NavAddPlugin] or [http://trac-hacks.org/wiki/MenusPlugin TracHacks:MenusPlugin] (still needed for adding entries)
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracNotification',1,1293789825914000,'trac','127.0.0.1','= Email Notification of Ticket Changes =
[[TracGuideToc]]

Trac supports notification of ticket changes via email. 

Email notification is useful to keep users up-to-date on tickets/issues of interest, and also provides a convenient way to post all ticket changes to a dedicated mailing list. For example, this is how the [http://lists.edgewall.com/archive/trac-tickets/ Trac-tickets] mailing list is set up.

Disabled by default, notification can be activated and configured in [wiki:TracIni trac.ini].

== Receiving Notification Mails ==
When reporting a new ticket or adding a comment, enter a valid email address or your username in the ''''reporter'''', ''''assigned to/owner'''' or ''''cc'''' field. Trac will automatically send you an email when changes are made to the ticket (depending on how notification is configured).

This is useful to keep up-to-date on an issue or enhancement request that interests you.

=== How to use your username to receive notification mails ===

To receive notification mails, you can either enter a full email address or your username. To get notified with a simple username or login, you need to specify a valid email address in the ''''Preferences'''' page. 

Alternatively, a default domain name (''''''`smtp_default_domain`'''''') can be set in the TracIni file (see [#ConfigurationOptions Configuration Options] below). In this case, the default domain will be appended to the username, which can be useful for an "Intranet" kind of installation.

== Configuring SMTP Notification ==

''''''Important:'''''' For TracNotification to work correctly, the `[trac] base_url` option must be set in [wiki:TracIni trac.ini]. 

=== Configuration Options ===
These are the available options for the `[notification]` section in trac.ini.

 * ''''''`smtp_enabled`'''''': Enable email notification.
 * ''''''`smtp_from`'''''': Email address to use for ''''Sender''''-headers in notification emails.
 * ''''''`smtp_from_name`'''''': Sender name to use for ''''Sender''''-headers in notification emails.
 * ''''''`smtp_replyto`'''''': Email address to use for ''''Reply-To''''-headers in notification emails.
 * ''''''`smtp_default_domain`'''''': (''''since 0.10'''') Append the specified domain to addresses that do not contain one. Fully qualified addresses are not modified. The default domain is appended to all username/login for which an email address cannot be found from the user settings.
 * ''''''`smtp_always_cc`'''''': List of email addresses to always send notifications to. ''''Typically used to post ticket changes to a dedicated mailing list.''''
 * ''''''`smtp_always_bcc`'''''': (''''since 0.10'''') List of email addresses to always send notifications to, but keeps addresses not visible from other recipients of the notification email 
 * ''''''`smtp_subject_prefix`'''''': (''''since 0.10.1'''') Text that is inserted before the subject of the email. Set to "!__default!__" by default.
 * ''''''`always_notify_reporter`'''''':  Always send notifications to any address in the reporter field (default: false).
 * ''''''`always_notify_owner`'''''': (''''since 0.9'''') Always send notifications to the address in the owner field (default: false).
 * ''''''`always_notify_updater`'''''': (''''since 0.10'''') Always send a notification to the updater of a ticket (default: true).
 * ''''''`use_public_cc`'''''': (''''since 0.10'''') Addresses in To: (owner, reporter) and Cc: lists are visible by all recipients (default is ''''Bcc:'''' - hidden copy).
 * ''''''`use_short_addr`'''''': (''''since 0.10'''') Enable delivery of notifications to addresses that do not contain a domain (i.e. do not end with ''''@<domain.com>'''').This option is useful for intranets, where the SMTP server can handle local addresses and map the username/login to a local mailbox. See also `smtp_default_domain`. Do not use this option with a public SMTP server. 
 * ''''''`mime_encoding`'''''': (''''since 0.10'''') This option allows selecting the MIME encoding scheme. Supported values:
   * `none`: default value, uses 7bit encoding if the text is plain ASCII, or 8bit otherwise. 
   * `base64`: works with any kind of content. May cause some issues with touchy anti-spam/anti-virus engines.
   * `qp` or `quoted-printable`: best for european languages (more compact than base64) if 8bit encoding cannot be used.
 * ''''''`ticket_subject_template`'''''': (''''since 0.11'''') A [http://genshi.edgewall.org/wiki/Documentation/text-templates.html Genshi text template] snippet used to get the notification subject.
 * ''''''`email_sender`'''''': (''''since 0.12'''') Name of the component implementing `IEmailSender`. This component is used by the notification system to send emails. Trac currently provides the following components:
   * `SmtpEmailSender`: connects to an SMTP server (default).
   * `SendmailEmailSender`: runs a `sendmail`-compatible executable.

Either ''''''`smtp_from`'''''' or ''''''`smtp_replyto`'''''' (or both) ''''must'''' be set, otherwise Trac refuses to send notification mails.

The following options are specific to email delivery through SMTP.
 * ''''''`smtp_server`'''''': SMTP server used for notification messages.
 * ''''''`smtp_port`'''''': (''''since 0.9'''') Port used to contact the SMTP server.
 * ''''''`smtp_user`'''''': (''''since 0.9'''') User name for authentication SMTP account.
 * ''''''`smtp_password`'''''': (''''since 0.9'''') Password for authentication SMTP account.
 * ''''''`use_tls`'''''': (''''since 0.10'''') Toggle to send notifications via a SMTP server using [http://en.wikipedia.org/wiki/Transport_Layer_Security TLS], such as GMail.

The following option is specific to email delivery through a `sendmail`-compatible executable.
 * ''''''`sendmail_path`'''''': (''''since 0.12'''') Path to the sendmail executable. The sendmail program must accept the `-i` and `-f` options.

=== Example Configuration (SMTP) ===
{{{
[notification]
smtp_enabled = true
smtp_server = mail.example.com
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

=== Example Configuration (`sendmail`) ===
{{{
[notification]
smtp_enabled = true
email_sender = SendmailEmailSender
sendmail_path = /usr/sbin/sendmail
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

=== Customizing the e-mail subject ===
The e-mail subject can be customized with the `ticket_subject_template` option, which contains a [http://genshi.edgewall.org/wiki/Documentation/text-templates.html Genshi text template] snippet. The default value is:
{{{
$prefix #$ticket.id: $summary
}}}
The following variables are available in the template:

 * `env`: The project environment (see [trac:source:/trunk/trac/env.py env.py]).
 * `prefix`: The prefix defined in `smtp_subject_prefix`.
 * `summary`: The ticket summary, with the old value if the summary was edited.
 * `ticket`: The ticket model object (see [trac:source:/trunk/trac/ticket/model.py model.py]). Individual ticket fields can be addressed by appending the field name separated by a dot, e.g. `$ticket.milestone`.

=== Customizing the e-mail content ===

The notification e-mail content is generated based on `ticket_notify_email.txt` in `trac/ticket/templates`.  You can add your own version of this template by adding a `ticket_notify_email.txt` to the templates directory of your environment. The default looks like this:

{{{
$ticket_body_hdr
$ticket_props
#choose ticket.new
  #when True
$ticket.description
  #end
  #otherwise
    #if changes_body
Changes (by $change.author):

$changes_body
    #end
    #if changes_descr
      #if not changes_body and not change.comment and change.author
Description changed by $change.author:
      #end
$changes_descr
--
    #end
    #if change.comment

Comment${not changes_body and ''(by %s)'' % change.author or ''''}:

$change.comment
    #end
  #end
#end

-- 
Ticket URL: <$ticket.link>
$project.name <${project.url or abs_href()}>
$project.descr
}}}
== Sample Email ==
{{{
#42: testing
---------------------------+------------------------------------------------
       Id:  42             |      Status:  assigned                
Component:  report system  |    Modified:  Fri Apr  9 00:04:31 2004
 Severity:  major          |   Milestone:  0.9                     
 Priority:  lowest         |     Version:  0.6                     
    Owner:  anonymous      |    Reporter:  jonas@example.com               
---------------------------+------------------------------------------------
Changes:
  * component:  changset view => search system
  * priority:  low => highest
  * owner:  jonas => anonymous
  * cc:  daniel@example.com =>
         daniel@example.com, jonas@example.com
  * status:  new => assigned

Comment:
I''m interested too!

--
Ticket URL: <http://example.com/trac/ticket/42>
My Project <http://myproj.example.com/>
}}}

== Using GMail as the SMTP relay host ==

Use the following configuration snippet
{{{
[notification]
smtp_enabled = true
use_tls = true
mime_encoding = base64
smtp_server = smtp.gmail.com
smtp_port = 587
smtp_user = user
smtp_password = password
}}}

where ''''user'''' and ''''password'''' match an existing GMail account, ''''i.e.'''' the ones you use to log in on [http://gmail.com]

Alternatively, you can use `smtp_port = 25`.[[br]]
You should not use `smtp_port = 465`. It will not work and your ticket submission may deadlock. Port 465 is reserved for the SMTPS protocol, which is not supported by Trac. See [comment:ticket:7107:2 #7107] for details.
 
== Filtering notifications for one''s own changes ==
In Gmail, use the filter:

{{{
from:(<smtp_from>) (("Reporter: <username>" -Changes) OR "Changes (by <username>)")
}}}

For Trac .10, use the filter:
{{{
from:(<smtp_from>) (("Reporter: <username>" -Changes -Comment) OR "Changes (by <username>)" OR "Comment (by <username>)")
}}}

to delete these notifications.

In Thunderbird, there is no such solution if you use IMAP
(see http://kb.mozillazine.org/Filters_(Thunderbird)#Filtering_the_message_body).

The best you can do is to set "always_notify_updater" in conf/trac.ini to false.
You will however still get an email if you comment a ticket that you own or have reported.

You can also add this plugin:
http://trac-hacks.org/wiki/NeverNotifyUpdaterPlugin

== Troubleshooting ==

If you cannot get the notification working, first make sure the log is activated and have a look at the log to find if an error message has been logged. See TracLogging for help about the log feature.

Notification errors are not reported through the web interface, so the user who submit a change or a new ticket never gets notified about a notification failure. The Trac administrator needs to look at the log to find the error trace.

=== ''''Permission denied'''' error ===

Typical error message:
{{{
  ...
  File ".../smtplib.py", line 303, in connect
    raise socket.error, msg
  error: (13, ''Permission denied'')
}}}

This error usually comes from a security settings on the server: many Linux distributions do not let the web server (Apache, ...) to post email message to the local SMTP server.

Many users get confused when their manual attempts to contact the SMTP server succeed:
{{{
telnet localhost 25
}}}
The trouble is that a regular user may connect to the SMTP server, but the web server cannot:
{{{
sudo -u www-data telnet localhost 25
}}}

In such a case, you need to configure your server so that the web server is authorized to post to the SMTP server. The actual settings depend on your Linux distribution and current security policy. You may find help browsing the Trac [trac:MailingList MailingList] archive.

Relevant ML threads:
 * SELinux: http://article.gmane.org/gmane.comp.version-control.subversion.trac.general/7518

For SELinux in Fedora 10:
{{{
$ setsebool -P httpd_can_sendmail 1
}}}
=== ''''Suspected spam'''' error ===

Some SMTP servers may reject the notification email sent by Trac.

The default Trac configuration uses Base64 encoding to send emails to the recipients. The whole body of the email is encoded, which sometimes trigger ''''false positive'''' SPAM detection on sensitive email servers. In such an event, it is recommended to change the default encoding to "quoted-printable" using the `mime_encoding` option.

Quoted printable encoding works better with languages that use one of the Latin charsets. For Asian charsets, it is recommended to stick with the Base64 encoding.

=== ''''501, 5.5.4 Invalid Address'''' error ===

On IIS 6.0 you could get a 
{{{
Failure sending notification on change to ticket #1: SMTPHeloError: (501, ''5.5.4 Invalid Address'')
}}}
in the trac log. Have a look [http://support.microsoft.com/kb/291828 here] for instructions on resolving it.


----
See also: TracTickets, TracIni, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracPermissions',1,1293789825924000,'trac','127.0.0.1','= Trac Permissions =
[[TracGuideToc]]

Trac uses a simple, case sensitive, permission system to control what users can and can''t access.

Permission privileges are managed using the [TracAdmin trac-admin] tool or (new in version 0.11) the ''''General / Permissions'''' panel in the ''''Admin'''' tab of the web interface.

In addition to the default permission policy described in this page, it is possible to activate additional permission policies by enabling plugins and listing them in the `[trac] permission_policies` configuration entry in the TracIni. See TracFineGrainedPermissions for more details.

Non-authenticated users accessing the system are assigned the name "anonymous". Assign permissions to the "anonymous" user to set privileges for anonymous/guest users. The parts of Trac that a user does not have the privileges for will not be displayed in the navigation.
In addition to these privileges, users can be granted additional individual rights in effect when authenticated and logged into the system. All logged in users belong to the virtual group "authenticated", which inherits permissions from "anonymous".

== Graphical Admin Tab ==
''''This feature is new in version 0.11.''''

To access this tab, a user must have `TRAC_ADMIN privileges`. This can be performed as follows (more on the trac-admin script below):
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

Then, the user `bob` will be able to see the Admin tab, and can then access the permissions menu. This menu will allow you to perform all the following actions, but from the browser without requiring root access to the server (just the correct permissions for your user account).

 1. [[Image(htdocs:../common/guide/admin.png)]]
 1. [[Image(htdocs:../common/guide/admin-permissions.png)]]
 1. [[Image(htdocs:../common/guide/admin-permissions-TICKET_ADMIN.png)]]

An easy way to quickly secure a new Trac install is to run the above command on the anonymous user, install the [http://trac-hacks.org/wiki/AccountManagerPlugin AccountManagerPlugin], create a new admin account graphically and then remove the TRAC_ADMIN permission from the anonymous user.

== Available Privileges ==

To enable all privileges for a user, use the `TRAC_ADMIN` permission. Having `TRAC_ADMIN` is like being `root` on a *NIX system: it will allow you to perform any operation.

Otherwise, individual privileges can be assigned to users for the various different functional areas of Trac (''''''note that the privilege names are case-sensitive''''''):

=== Repository Browser ===

|| `BROWSER_VIEW` || View directory listings in the [wiki:TracBrowser repository browser] ||
|| `LOG_VIEW` || View revision logs of files and directories in the [wiki:TracBrowser repository browser] ||
|| `FILE_VIEW` || View files in the [wiki:TracBrowser repository browser] ||
|| `CHANGESET_VIEW` || View [wiki:TracChangeset repository check-ins] ||

=== Ticket System ===

|| `TICKET_VIEW` || View existing [wiki:TracTickets tickets] and perform [wiki:TracQuery ticket queries] ||
|| `TICKET_CREATE` || Create new [wiki:TracTickets tickets] ||
|| `TICKET_APPEND` || Add comments or attachments to [wiki:TracTickets tickets] ||
|| `TICKET_CHGPROP` || Modify [wiki:TracTickets ticket] properties (priority, assignment, keywords, etc.) with the following exceptions: edit description field, add/remove other users from cc field when logged in, and set email to pref ||
|| `TICKET_MODIFY` || Includes both `TICKET_APPEND` and `TICKET_CHGPROP`, and in addition allows resolving [wiki:TracTickets tickets]. Tickets can be assigned to users through a [TracTickets#Assign-toasDrop-DownList drop-down list] when the list of possible owners has been restricted. ||
|| `TICKET_EDIT_CC` || Full modify cc field ||
|| `TICKET_EDIT_DESCRIPTION` || Modify description field ||
|| `TICKET_EDIT_COMMENT` || Modify comments ||
|| `TICKET_ADMIN` || All `TICKET_*` permissions, plus the deletion of ticket attachments and modification of the reporter and description fields. It also allows managing ticket properties in the WebAdmin panel. ||

Attention: the "view tickets" button appears with the `REPORT_VIEW` permission.

=== Roadmap ===

|| `MILESTONE_VIEW` || View milestones and assign tickets to milestones. ||
|| `MILESTONE_CREATE` || Create a new milestone ||
|| `MILESTONE_MODIFY` || Modify existing milestones ||
|| `MILESTONE_DELETE` || Delete milestones ||
|| `MILESTONE_ADMIN` || All `MILESTONE_*` permissions ||
|| `ROADMAP_VIEW` || View the [wiki:TracRoadmap roadmap] page, is not (yet) the same as MILESTONE_VIEW, see [trac:#4292 #4292] ||
|| `ROADMAP_ADMIN` || to be removed with [trac:#3022 #3022], replaced by MILESTONE_ADMIN ||

=== Reports ===

|| `REPORT_VIEW` || View [wiki:TracReports reports], i.e. the "view tickets" link. ||
|| `REPORT_SQL_VIEW` || View the underlying SQL query of a [wiki:TracReports report] ||
|| `REPORT_CREATE` || Create new [wiki:TracReports reports] ||
|| `REPORT_MODIFY` || Modify existing [wiki:TracReports reports] ||
|| `REPORT_DELETE` || Delete [wiki:TracReports reports] ||
|| `REPORT_ADMIN` || All `REPORT_*` permissions ||

=== Wiki System ===

|| `WIKI_VIEW` || View existing [wiki:TracWiki wiki] pages ||
|| `WIKI_CREATE` || Create new [wiki:TracWiki wiki] pages ||
|| `WIKI_MODIFY` || Change [wiki:TracWiki wiki] pages ||
|| `WIKI_RENAME` || Rename [wiki:TracWiki wiki] pages ||
|| `WIKI_DELETE` || Delete [wiki:TracWiki wiki] pages and attachments ||
|| `WIKI_ADMIN` || All `WIKI_*` permissions, plus the management of ''''readonly'''' pages. ||

=== Permissions ===

|| `PERMISSION_GRANT` || add/grant a permission ||
|| `PERMISSION_REVOKE` || remove/revoke a permission ||
|| `PERMISSION_ADMIN` || All `PERMISSION_*` permissions ||


=== Others ===

|| `TIMELINE_VIEW` || View the [wiki:TracTimeline timeline] page ||
|| `SEARCH_VIEW` || View and execute [wiki:TracSearch search] queries ||
|| `CONFIG_VIEW` || Enables additional pages on ''''About Trac'''' that show the current configuration or the list of installed plugins ||
|| `EMAIL_VIEW` || Shows email addresses even if [trac:wiki:0.11/TracIni trac show_email_addresses configuration option is false] ||

== Granting Privileges ==

You grant privileges to users using [wiki:TracAdmin trac-admin]. The current set of privileges can be listed with the following command:
{{{
  $ trac-admin /path/to/projenv permission list
}}}

This command will allow the user ''''bob'''' to delete reports:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

The `permission add` command also accepts multiple privilege names:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE WIKI_CREATE
}}}

Or add all privileges:
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

== Permission Groups ==

There are two built-in groups, "authenticated" and "anonymous".
Any user who has not logged in is automatically in the "anonymous" group.
Any user who has logged in is also in the "authenticated" group.
The "authenticated" group inherits permissions from the "anonymous" group.
For example, if the "anonymous" group has permission WIKI_MODIFY, 
it is not necessary to add the WIKI_MODIFY permission to the "authenticated" group as well.

Custom groups may be defined that inherit permissions from the two built-in groups.

Permissions can be grouped together to form roles such as ''''developer'''', ''''admin'''', etc.
{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

Group membership can be checked by doing a {{{permission list}}} with no further arguments; the resulting output will include group memberships. ''''''Use at least one lowercase character in group names, as all-uppercase names are reserved for permissions''''''.

== Adding a New Group and Permissions ==
Permission groups can be created by assigning a user to a group you wish to create, then assign permissions to that group.

The following will add ''''bob'''' to the new group called ''''beta_testers'''' and then will assign WIKI_ADMIN permissions to that group. (Thus, ''''bob'''' will inherit the WIKI_ADMIN permission)
{{{ 
   $ trac-admin /path/to/projenv permission add bob beta_testers
   $ trac-admin /path/to/projenv permission add beta_testers WIKI_ADMIN

}}}

== Removing Permissions ==

Permissions can be removed using the ''remove'' command. For example:

This command will prevent the user ''''bob'''' from deleting reports:
{{{
  $ trac-admin /path/to/projenv permission remove bob REPORT_DELETE
}}}

Just like `permission add`, this command accepts multiple privilege names.

You can also remove all privileges for a specific user:
{{{
  $ trac-admin /path/to/projenv permission remove bob ''*''
}}}

Or one privilege for all users:
{{{
  $ trac-admin /path/to/projenv permission remove ''*'' REPORT_ADMIN
}}}

== Default Permissions ==

By default on a new Trac installation, the `anonymous` user will have ''''view'''' access to everything in Trac, but will not be able to create or modify anything.
On the other hand, the `authenticated` users will have the permissions to ''''create and modify tickets and wiki pages''''.

''''''anonymous''''''
{{{
 BROWSER_VIEW 
 CHANGESET_VIEW 
 FILE_VIEW 
 LOG_VIEW 
 MILESTONE_VIEW 
 REPORT_SQL_VIEW 
 REPORT_VIEW 
 ROADMAP_VIEW 
 SEARCH_VIEW 
 TICKET_VIEW 
 TIMELINE_VIEW
 WIKI_VIEW
}}}

''''''authenticated''''''
{{{
 TICKET_CREATE 
 TICKET_MODIFY 
 WIKI_CREATE 
 WIKI_MODIFY  
}}}
----
See also: TracAdmin, TracGuide and TracFineGrainedPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracPlugins',1,1293789825924000,'trac','127.0.0.1','= Trac Plugins =
[[TracGuideToc]]

Trac is extensible with [trac:PluginList plugins] since version 0.9. The plugin functionality is based on the [trac:TracDev/ComponentArchitecture component architecture] with peculiarities described at [TracDev/PluginDevelopment plugin development] page.

== Plugin discovery ==

From the user point of view a Plugin is either standalone .py file or an .egg package. Trac looks for Plugins in a global shared plugins directory (see [TracIni#GlobalConfiguration Global Configuration]), or in a local TracEnvironment, in its `plugins` directory.
Except for the later case, the components defined in a plugin should be explicitly enabled in the [[TracIni#components-section| [components] ]] section of the trac.ini file.

== Requirements for Trac eggs  ==

To use egg based plugins in Trac, you need to have [http://peak.telecommunity.com/DevCenter/setuptools setuptools] (version 0.6) installed.

To install `setuptools`, download the bootstrap module [http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py] and execute it as follows:
{{{
$ python ez_setup.py
}}}

If the `ez_setup.py` script fails to install the setuptools release, you can download it from [http://www.python.org/pypi/setuptools PyPI] and install it manually.

Plugins can also consist of a single `.py` file dropped into either the environment or the shared plugins directory.

== Installing a Trac Plugin ==

=== For a Single Project ===

Plugins are packaged as [http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. That means they are ZIP archives with the file extension `.egg`. 

If you have downloaded a source distribution of a plugin, and want to build the `.egg` file, follow this instruction:
 * Unpack the source. It should provide a setup.py. 
 * Run:
{{{
$ python setup.py bdist_egg
}}}

Then you will have a *.egg file. Examine the output of running python to find where this was created.

Once you have the plugin archive, you need to copy it into the `plugins` directory of the [wiki:TracEnvironment project environment]. Also, make sure that the web server has sufficient permissions to read the plugin egg. Then, restart the web server (this requirement was not previously mentioned in this document, but in my tests it began working only after I did so).

To uninstall a plugin installed this way, remove the egg from `plugins` directory and restart web server.

Note that the Python version that the egg is built with must
match the Python version with which Trac is run.  If for
instance you are running Trac under Python 2.5, but have
upgraded your standalone Python to 2.6, the eggs won''t be
recognized.

Note also that in a multi-project setup, a pool of Python interpreter instances will be dynamically allocated to projects based on need, and since plugins occupy a place in Python''s module system, the first version of any given plugin to be loaded will be used for all the projects. In other words, you cannot use different versions of a single plugin in two projects of a multi-project setup. It may be safer to install plugins for all projects (see below) and then enable them selectively on a project-by-project basis.

=== For All Projects ===

==== With an .egg file ====

Some plugins (such as [trac:SpamFilter SpamFilter]) are downloadable as a `.egg` file which can be installed with the `easy_install` program:
{{{
easy_install TracSpamFilter
}}}

If `easy_install` is not on your system see the Requirements section above to install it.  Windows users will need to add the `Scripts` directory of their Python installation (for example, `C:\Python24\Scripts`) to their `PATH` environment variable (see [http://peak.telecommunity.com/DevCenter/EasyInstall#windows-notes easy_install Windows notes] for more information).

If Trac reports permission errors after installing a zipped egg and you would rather not bother providing a egg cache directory writable by the web server, you can get around it by simply unzipping the egg. Just pass `--always-unzip` to `easy_install`:
{{{
easy_install --always-unzip TracSpamFilter-0.4.1_r10106-py2.6.egg
}}}
You should end up with a directory having the same name as the zipped egg (complete with `.egg` extension) and containing its uncompressed contents.

Trac also searches for plugins installed in the shared plugins directory ''''(since 0.10)'''', see TracIni#GlobalConfiguration. This is a convenient way to share the installation of plugins across several but not all environments.

==== From source ====

`easy_install` makes installing from source a snap. Just give it the URL to either a Subversion repository or a tarball/zip of the source:
{{{
easy_install http://svn.edgewall.com/repos/trac/plugins/0.12/spam-filter-captcha
}}}

==== Enabling the plugin ====
Unlike plugins installed per-environment, you''ll have to explicitly enable globally installed plugins via [wiki:TracIni trac.ini]. This also applies to plugins installed in shared plugins directory, i.e. the path specified in the `[inherit] plugins_dir` configuration option. 

This is done in the `[components]` section of the configuration file, for example:
{{{
[components]
tracspamfilter.* = enabled
}}}

The name of the option is the Python package of the plugin. This should be specified in the documentation of the plugin, but can also be easily discovered by looking at the source (look for a top-level directory that contains a file named `__init__.py`.)

Note: After installing the plugin, you need to restart your web server.

==== Uninstalling ====

`easy_install` or `python setup.py` does not have an uninstall feature. Hower, it is usually quite trivial to remove a globally installed egg and reference:
 1. Do `easy_install -m [plugin name]` to remove references from `$PYTHONLIB/site-packages/easy-install.pth` when the plugin installed by setuptools.
 1. Delete executables from `/usr/bin`, `/usr/local/bin` or `C:\\Python*\Scripts`. For search what executables are there, you may refer to `[console-script]` section of `setup.py`.
 1. Delete the .egg file or folder from where it is installed, usually inside `$PYTHONLIB/site-packages/`.
 1. Restart web server.

If you are uncertain about the location of the egg, here is a small tip to help locate an egg (or any package) - replace `myplugin` with whatever namespace the plugin uses (as used when enabling the plugin):
{{{
>>> import myplugin
>>> print myplugin.__file__
/opt/local/python24/lib/site-packages/myplugin-0.4.2-py2.4.egg/myplugin/__init__.pyc
}}}

== Setting up the Plugin Cache ==

Some plugins will need to be extracted by the Python eggs runtime (`pkg_resources`), so that their contents are actual files on the file system. The directory in which they are extracted defaults to ''.python-eggs'' in the home directory of the current user, which may or may not be a problem. You can however override the default location using the `PYTHON_EGG_CACHE` environment variable.

To do this from the Apache configuration, use the `SetEnv` directive as follows:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

This works whether you are using the [wiki:TracCgi CGI] or the [wiki:TracModPython mod_python] front-end. Put this directive next to where you set the path to the [wiki:TracEnvironment Trac environment], i.e. in the same `<Location>` block.

For example (for CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

or (for mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

 ''''Note: !SetEnv requires the `mod_env` module which needs to be activated for Apache. In this case the !SetEnv directive can also be used in the `mod_python` Location block.''''

For [wiki:TracFastCgi FastCGI], you''ll need to `-initial-env` option, or whatever is provided by your web server for setting environment variables. 

 ''''Note: that if you already use -initial-env to set the project directory for either a single project or parent you will need to add an additional -initial-env directive to the !FastCgiConfig directive. I.e.

{{{
FastCgiConfig -initial-env TRAC_ENV=/var/lib/trac -initial-env PYTHON_EGG_CACHE=/var/lib/trac/plugin-cache
}}}

=== About hook scripts ===

If you have set up some subversion hook scripts that call the Trac engine - such as the post-commit hook script provided in the `/contrib` directory - make sure you define the `PYTHON_EGG_CACHE` environment variable within these scripts as well.

== Troubleshooting ==

=== Is setuptools properly installed? ===

Try this from the command line:
{{{
$ python -c "import pkg_resources"
}}}

If you get ''''''no output'''''', setuptools ''''''is'''''' installed. Otherwise, you''ll need to install it before plugins will work in Trac.

=== Did you get the correct version of the Python egg? ===

Python eggs have the Python version encoded in their filename. For example, `MyPlugin-1.0-py2.5.egg` is an egg for Python 2.5, and will ''''''not'''''' be loaded if you''re running a different Python version (such as 2.4 or 2.6).

Also, verify that the egg file you downloaded is indeed a ZIP archive. If you downloaded it from a Trac site, chances are you downloaded the HTML preview page instead.

=== Is the plugin enabled? ===


If you install a plugin globally (i.e. ''''not'''' inside the `plugins` directory of the Trac project environment) you will have to explicitly enable it in [TracIni trac.ini]. Make sure that:
 * you actually added the necessary line(s) to the `[components]` section
 * the package/module names are correct
 * the value is “enabled", not e.g. “enable”

=== Check the permissions on the egg file ===

Trac must be able to read the file. 

=== Check the log files ===

Enable [wiki:TracLogging logging] and set the log level to `DEBUG`, then watch the log file for messages about loading plugins.

=== Verify you have proper permissions ===

Some plugins require you have special permissions in order to use them. [trac:WebAdmin WebAdmin], for example, requires the user to have TRAC_ADMIN permissions for it to show up on the navigation bar.

=== Is the wrong version of the plugin loading? ===

If you put your plugins inside plugins directories, and certainly if you have more than one project, you need to make sure that the correct version of the plugin is loading. Here are some basic rules:
 * Only one version of the plugin can be loaded for each running Trac server (ie. each Python process). The Python namespaces and module list will be shared, and it cannot handle duplicates. Whether a plugin is `enabled` or `disabled` makes no difference.
 * A globally installed plugin (typically `setup.py install`) will override any version in global or project plugins directories. A plugin from the global plugins directory will be located before any project plugins directory.
 * If your Trac server hosts more than one project (as with `TRAC_ENV_PARENT_DIR` setups), then having two versions of a plugin in two different projects will give uncertain results. Only one of them will load, and the one loaded will be shared by both projects. Trac will load the first found - basically from the project that receives the first request.
 * Having more than one version listed inside Python site-packages is fine (ie. installed with `setup.py install`) - setuptools will make sure you get the version installed most recently. However, don''t store more than one version inside a global or project plugins directory - neither version number nor installed date will matter at all. There is no way to determine which one will be located first when Trac searches the directory for plugins.

=== If all of the above failed ===

OK, so the logs don''t mention plugins, the egg is readable, the python version is correct ''''and'''' the egg has been installed globally (and is enabled in the trac.ini) and it still doesn''t work or give any error messages or any other indication as to why? Hop on the [trac:IrcChannel IrcChannel] and ask away.

----
See also TracGuide, [trac:PluginList plugin list], [trac:TracDev/ComponentArchitecture component architecture]',NULL,NULL);
INSERT INTO "wiki" VALUES('TracQuery',1,1293789825924000,'trac','127.0.0.1','= Trac Ticket Queries =
[[TracGuideToc]]

In addition to [wiki:TracReports reports], Trac provides support for ''''custom ticket queries'''', used to display lists of tickets meeting a specified set of criteria. 

To configure and execute a custom query, switch to the ''''View Tickets'''' module from the navigation bar, and select the ''''Custom Query'''' link.

== Filters ==

When you first go to the query page the default filter will display tickets relevant to you:
 * If logged in then all open tickets it will display open tickets assigned to you.
 * If not logged in but you have specified a name or email address in the preferences then it will display all open tickets where your email (or name if email not defined) is in the CC list.
 * If not logged and no name/email defined in the preferences then all open issues are displayed.

Current filters can be removed by clicking the button to the right with the minus sign on the label.  New filters are added from the pulldown lists at the bottom corners of the filters box (''And'' conditions on the left, ''Or'' conditions on the right).  Filters with either a text box or a pulldown menu of options can be added multiple times to perform an ''''or'''' of the criteria.

You can use the fields just below the filters box to group the results based on a field, or display the full description for each ticket.

Once you''ve edited your filters click the ''''Update'''' button to refresh your results.

== Navigating Tickets ==
Clicking on one of the query results will take you to that ticket.  You can navigate through the results by clicking the ''''Next Ticket'''' or ''''Previous Ticket'''' links just below the main menu bar, or click the ''''Back to Query'''' link to return to the query page.  

You can safely edit any of the tickets and continue to navigate through the results using the ''''!Next/Previous/Back to Query'''' links after saving your results.  When you return to the query ''''any tickets which were edited'''' will be displayed with italicized text.  If one of the tickets was edited such that [[html(<span style="color: grey">it no longer matches the query criteria </span>)]] the text will also be greyed. Lastly, if ''''''a new ticket matching the query criteria has been created'''''', it will be shown in bold. 

The query results can be refreshed and cleared of these status indicators by clicking the ''''Update'''' button again.

== Saving Queries ==

Trac allows you to save the query as a named query accessible from the reports module. To save a query ensure that you have ''''Updated'''' the view and then click the ''''Save query'''' button displayed beneath the results.
You can also save references to queries in Wiki content, as described below.

''''Note:'''' one way to easily build queries like the ones below, you can build and test the queries in the Custom report module and when ready - click ''''Save query''''. This will build the query string for you. All you need to do is remove the extra line breaks.

=== Using TracLinks ===

You may want to save some queries so that you can come back to them later.  You can do this by making a link to the query from any Wiki page.
{{{
[query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]
}}}

Which is displayed as:
  [query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]

This uses a very simple query language to specify the criteria (see [wiki:TracQuery#QueryLanguage Query Language]).

Alternatively, you can copy the query string of a query and paste that into the Wiki link, including the leading `?` character:
{{{
[query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]
}}}

Which is displayed as:
  [query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]

=== Using the `[[TicketQuery]]` Macro ===

The [trac:TicketQuery TicketQuery] macro lets you display lists of tickets matching certain criteria anywhere you can use WikiFormatting.

Example:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate)]]

Just like the [wiki:TracQuery#UsingTracLinks query: wiki links], the parameter of this macro expects a query string formatted according to the rules of the simple [wiki:TracQuery#QueryLanguage ticket query language].

A more compact representation without the ticket summaries is also available:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]

Finally if you wish to receive only the number of defects that match the query using the ``count`` parameter.

{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]

=== Customizing the ''''table'''' format ===
You can also customize the columns displayed in the table format (''''format=table'''') by using ''''col=<field>'''' - you can specify multiple fields and what order they are displayed by placing pipes (`|`) between the columns like below:

{{{
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter)]]
}}}

This is displayed as:
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter)]]

==== Full rows ====
In ''''table'''' format you can also have full rows by using ''''rows=<field>'''' like below:

{{{
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter,rows=description)]]
}}}

This is displayed as:
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter,rows=description)]]


=== Query Language ===

`query:` TracLinks and the `[[TicketQuery]]` macro both use a mini “query language” for specifying query filters. Basically, the filters are separated by ampersands (`&`). Each filter then consists of the ticket field name, an operator, and one or more values. More than one value are separated by a pipe (`|`), meaning that the filter matches any of the values. To include a litteral `&` or `|` in a value, escape the character with a backslash (`\`).

The available operators are:
|| ''''''`=`'''''' || the field content exactly matches the one of the values ||
|| ''''''`~=`'''''' || the field content contains one or more of the values ||
|| ''''''`^=`'''''' || the field content starts with one of the values ||
|| ''''''`$=`'''''' || the field content ends with one of the values ||

All of these operators can also be negated:
|| ''''''`!=`'''''' || the field content matches none of the values ||
|| ''''''`!~=`'''''' || the field content does not contain any of the values ||
|| ''''''`!^=`'''''' || the field content does not start with any of the values ||
|| ''''''`!$=`'''''' || the field content does not end with any of the values ||

The date fields `created` and `modified` can be constrained by using the `=` operator and specifying a value containing two dates separated by two dots (`..`). Either end of the date range can be left empty, meaning that the corresponding end of the range is open. The date parser understands a few natural date specifications like "3 weeks ago", "last month" and "now", as well as Bugzilla-style date specifications like "1d", "2w", "3m" or "4y" for 1 day, 2 weeks, 3 months and 4 years, respectively. Spaces in date specifications can be left out to avoid having to quote the query string. 
|| ''''''`created=2007-01-01..2008-01-01`'''''' || query tickets created in 2007 ||
|| ''''''`created=lastmonth..thismonth`'''''' || query tickets created during the previous month ||
|| ''''''`modified=1weekago..`'''''' || query tickets that have been modified in the last week ||
|| ''''''`modified=..30daysago`'''''' || query tickets that have been inactive for the last 30 days ||

----
See also: TracTickets, TracReports, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracReports',1,1293789825934000,'trac','127.0.0.1','= Trac Reports =
[[TracGuideToc]]

The Trac reports module provides a simple, yet powerful reporting facility
to present information about tickets in the Trac database.

Rather than have its own report definition format, TracReports relies on standard SQL
`SELECT` statements for custom report definition. 

  ''''''Note:'''''' ''''The report module is being phased out in its current form because it seriously limits the ability of the Trac team to make adjustments to the underlying database schema. We believe that the [wiki:TracQuery query module] is a good replacement that provides more flexibility and better usability. While there are certain reports that cannot yet be handled by the query module, we intend to further enhance it so that at some point the reports module can be completely removed. This also means that there will be no major enhancements to the report module anymore.''''

  ''''You can already completely replace the reports module by the query module simply by disabling the former in [wiki:TracIni trac.ini]:''''
  {{{
  [components]
  trac.ticket.report.* = disabled
  }}}
  ''''This will make the query module the default handler for the “View Tickets” navigation item. We encourage you to try this configuration and report back what kind of features of reports you are missing, if any.''''


A report consists of these basic parts:
 * ''''''ID'''''' — Unique (sequential) identifier 
 * ''''''Title'''''' — Descriptive title
 * ''''''Description'''''' — A brief description of the report, in WikiFormatting text.
 * ''''''Report Body'''''' — List of results from report query, formatted according to the methods described below.
 * ''''''Footer'''''' — Links to alternative download formats for this report.

== Changing Sort Order ==
Simple reports - ungrouped reports to be specific - can be changed to be sorted by any column simply by clicking the column header. 

If a column header is a hyperlink (red), click the column you would like to sort by. Clicking the same header again reverses the order.

== Changing Report Numbering ==
There may be instances where you need to change the ID of the report, perhaps to organize the reports better. At present this requires changes to the trac database. The ''''report'''' table has the following schema ''''(since 0.10)'''':
 * id integer PRIMARY KEY
 * author text
 * title text
 * query text
 * description text
Changing the ID changes the shown order and number in the ''''Available Reports'''' list and the report''s perma-link. This is done by running something like:
{{{
update report set id=5 where id=3;
}}}
Keep in mind that the integrity has to be maintained (i.e., ID has to be unique, and you don''t want to exceed the max, since that''s managed by SQLite someplace).

You may also need to update or remove the report number stored in the report or query.

== Navigating Tickets ==
Clicking on one of the report results will take you to that ticket. You can navigate through the results by clicking the ''''Next Ticket'''' or ''''Previous Ticket'''' links just below the main menu bar, or click the ''''Back to Report'''' link to return to the report page.

You can safely edit any of the tickets and continue to navigate through the results using the ''''!Next/Previous/Back to Report'''' links after saving your results, but when you return to the report, there will be no hint about what has changed, as would happen if you were navigating a list of tickets obtained from a query (see TracQuery#NavigatingTickets). ''''(since 0.11)''''

== Alternative Download Formats ==
Aside from the default HTML view, reports can also be exported in a number of alternative formats.
At the bottom of the report page, you will find a list of available data formats. Click the desired link to 
download the alternative report format.

=== Comma-delimited - CSV (Comma Separated Values) ===
Export the report as plain text, each row on its own line, columns separated by a single comma ('','').
''''''Note:'''''' The output is fully escaped so carriage returns, line feeds, and commas will be preserved in the output.

=== Tab-delimited ===
Like above, but uses tabs (\t) instead of comma.

=== RSS - XML Content Syndication ===
All reports support syndication using XML/RSS 2.0. To subscribe to an RSS feed, click the orange ''XML'' icon at the bottom of the page. See TracRss for general information on RSS support in Trac.

----

== Creating Custom Reports ==

''''Creating a custom report requires a comfortable knowledge of SQL.''''

A report is basically a single named SQL query, executed and presented by
Trac.  Reports can be viewed and created from a custom SQL expression directly
in the web interface.

Typically, a report consists of a SELECT-expression from the ''ticket'' table,
using the available columns and sorting the way you want it.

== Ticket columns ==
The ''''ticket'''' table has the following columns:
 * id
 * type
 * time
 * changetime
 * component
 * severity  
 * priority 
 * owner
 * reporter
 * cc
 * version
 * milestone
 * status
 * resolution
 * summary
 * description
 * keywords

See TracTickets for a detailed description of the column fields.

Example: ''''''All active tickets, sorted by priority and time''''''
{{{
SELECT id AS ticket, status, severity, priority, owner, 
       time AS created, summary FROM ticket 
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY priority, time
}}}

---

== Advanced Reports: Dynamic Variables ==
For more flexible reports, Trac supports the use of ''''dynamic variables'''' in report SQL statements. 
In short, dynamic variables are ''''special'''' strings that are replaced by custom data before query execution.

=== Using Variables in a Query ===
The syntax for dynamic variables is simple, any upper case word beginning with ''$'' is considered a variable.

Example:
{{{
SELECT id AS ticket,summary FROM ticket WHERE priority=$PRIORITY
}}}

To assign a value to $PRIORITY when viewing the report, you must define it as an argument in the report URL, leaving out the leading ''$''.

Example:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high
}}}

To use multiple variables, separate them with an ''&''.

Example:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high&SEVERITY=critical
}}}


=== !Special/Constant Variables ===
There is one dynamic variable whose value is set automatically (the URL does not have to be changed) to allow practical reports. 

 * $USER — Username of logged in user.

Example (''''List all tickets assigned to me''''):
{{{
SELECT id AS ticket,summary FROM ticket WHERE owner=$USER
}}}


----


== Advanced Reports: Custom Formatting ==
Trac is also capable of more advanced reports, including custom layouts,
result grouping and user-defined CSS styles. To create such reports, we''ll use
specialized SQL statements to control the output of the Trac report engine.

== Special Columns ==
To format reports, TracReports looks for ''magic'' column names in the query
result. These ''magic'' names are processed and affect the layout and style of the 
final report.

=== Automatically formatted columns ===
 * ''''''ticket'''''' — Ticket ID number. Becomes a hyperlink to that ticket. 
 * ''''''id'''''' — same as ''''''ticket'''''' above when ''''''realm'''''' is not set
 * ''''''realm'''''' — together with ''''''id'''''', can be used to create links to other resources than tickets (e.g. a realm of ''''wiki'''' and an ''''id'''' to a page name will create a link to that wiki page)
 * ''''''created, modified, date, time'''''' — Format cell as a date and/or time.
 * ''''''description'''''' — Ticket description field, parsed through the wiki engine.

''''''Example:''''''
{{{
SELECT id AS ticket, created, status, summary FROM ticket 
}}}

Those columns can also be defined but marked as hidden, see [#column-syntax below].

See trac:wiki/CookBook/Configuration/Reports for some example of creating reports for realms other than ''''ticket''''.

=== Custom formatting columns ===
Columns whose names begin and end with 2 underscores (Example: ''''''`__color__`'''''') are
assumed to be ''''formatting hints'''', affecting the appearance of the row.
 
 * ''''''`__group__`'''''' — Group results based on values in this column. Each group will have its own header and table.
 * ''''''`__grouplink__`'''''' — Make the header of each group a link to the specified URL. The URL is taken from the first row of each group.
 * ''''''`__color__`'''''' — Should be a numeric value ranging from 1 to 5 to select a pre-defined row color. Typically used to color rows by issue priority.
{{{
#!html
<div style="margin-left:7.5em">Defaults: 
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fdc; border-color: #e88; color: #a22">Color 1</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #ffb; border-color: #eea; color: #880">Color 2</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fbfbfb; border-color: #ddd; color: #444">Color 3</span>
<span style="border: none; color: #333; background: transparent; font-size: 85%; background: #e7ffff; border-color: #cee; color: #099">Color 4</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #e7eeff; border-color: #cde; color: #469">Color 5</span>
</div>
}}}
 * ''''''`__style__`'''''' — A custom CSS style expression to use for the current row. 

''''''Example:'''''' ''''List active tickets, grouped by milestone, group header linked to milestone page, colored by priority''''
{{{
SELECT p.value AS __color__,
     t.milestone AS __group__,
     ''../milestone/'' || t.milestone AS __grouplink__,
     (CASE owner WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' ELSE '''' END) AS __style__,
       t.id AS ticket, summary
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

''''''Note:'''''' A table join is used to match ''''ticket'''' priorities with their
numeric representation from the ''''enum'''' table.

=== Changing layout of report rows === #column-syntax
By default, all columns on each row are display on a single row in the HTML
report, possibly formatted according to the descriptions above. However, it''s
also possible to create multi-line report entries.

 * ''''''`column_`'''''' — ''''Break row after this''''. By appending an underscore (''_'') to the column name, the remaining columns will be be continued on a second line.

 * ''''''`_column_`'''''' — ''''Full row''''. By adding an underscore (''_'') both at the beginning and the end of a column name, the data will be shown on a separate row.

 * ''''''`_column`'''''' — ''''Hide data''''. Prepending an underscore (''_'') to a column name instructs Trac to hide the contents from the HTML output. This is useful for information to be visible only if downloaded in other formats (like CSV or RSS/XML).
   This can be used to hide any kind of column, even important ones required for identifying the resource, e.g. `id as _id` will hide the ''''''Id'''''' column but the link to the ticket will be present.

''''''Example:'''''' ''''List active tickets, grouped by milestone, colored by priority, with  description and multi-line layout''''

{{{
SELECT p.value AS __color__,
       t.milestone AS __group__,
       (CASE owner 
          WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' 
          ELSE '''' END) AS __style__,
       t.id AS ticket, summary AS summary_,             -- ## Break line here
       component,version, severity, milestone, status, owner,
       time AS created, changetime AS modified,         -- ## Dates are formatted
       description AS _description_,                    -- ## Uses a full row
       changetime AS _changetime, reporter AS _reporter -- ## Hidden from HTML output
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

=== Reporting on custom fields ===

If you have added custom fields to your tickets (a feature since v0.8, see TracTicketsCustomFields), you can write a SQL query to cover them. You''ll need to make a join on the ticket_custom table, but this isn''t especially easy.

If you have tickets in the database ''''before'''' you declare the extra fields in trac.ini, there will be no associated data in the ticket_custom table. To get around this, use SQL''s "LEFT OUTER JOIN" clauses. See [trac:TracIniReportCustomFieldSample TracIniReportCustomFieldSample] for some examples.

''''''Note that you need to set up permissions in order to see the buttons for adding or editing reports.''''''

----
See also: TracTickets, TracQuery, TracGuide, [http://www.sqlite.org/lang_expr.html Query Language Understood by SQLite]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRepositoryAdmin',1,1293789825944000,'trac','127.0.0.1','= Repository Administration =
[[PageOutline(2-3)]]

== Quick start == #QuickStart

 * Manage repositories in the "Repository" admin panel, with `trac-admin` or in the `[repositories]` section of [wiki:TracIni#repositories-section trac.ini].
 * Set up a call to `trac-admin $ENV changeset added $REPO $REV` in the post-commit hook of each repository. Additionally, add a call to `trac-admin $ENV changeset modified $REPO $REV` in the post-revprop-change hook of repositories allowing revision property changes.
 * Set the `[trac] repository_sync_per_request` option to an empty value to disable per-request syncing.


== Specifying repositories == #Repositories
Starting with 0.12, Trac can handle more than one repository per environment. The pre-0.12 way of specifying the repository with the `repository_dir` and `repository_type` options in the `[trac]` section of [wiki:TracIni trac.ini] is still supported, but two new mechanisms allow including additional repositories into an environment.

It is also possible to define aliases of repositories, that act as "pointers" to real repositories. This can be useful when renaming a repository, to avoid breaking all the links to the old name.

A number of attributes can be associated with each repository, which define the repository''s location, type, name and how it is displayed in the source browser. The following attributes are supported:

||=''''''Attribute'''''' =||=''''''Description'''''' =||
||`alias` ||\
||A repository having an `alias` attribute is an alias to a real repository. All TracLinks referencing the alias resolve to the aliased repository. Note that multiple indirection is not supported, so an alias must always point to a real repository. The `alias` and `dir` attributes are mutually exclusive. ||
||`description` ||\
||The text specified in the `description` attribute is displayed below the top-level entry for the repository in the source browser. It supports WikiFormatting. ||
||`dir` ||\
||The `dir` attribute specifies the location of the repository in the filesystem. It corresponds to the value previously specified in the option `[trac] repository_dir`. The `alias` and `dir` attributes are mutually exclusive. ||
||`hidden` ||When set to `true`, the repository is hidden from the repository index page in the source browser. Browsing the repository is still possible, and links referencing the repository remain valid. ||
||`name` ||The `name` attribute specifies the leading path element to the repository. ||
||`type` ||The `type` attribute sets the type of version control system used by the repository. Trac supports Subversion out-of-the-box, and plugins add support for many other systems. If `type` is not specified, it defaults to the value of the `[trac] repository_type` option. ||
||`url` ||The `url` attribute specifies the root URL to be used for checking out from the repository. When specified, a "Repository URL" link is added to the context navigation links in the source browser, that can be copied into the tool used for creating the working copy. ||

The `name` attribute and one of `alias` or `dir` are mandatory. All others are optional.

After adding a repository, the cache for that repository must be re-synchronized once with the `trac-admin $ENV repository resync` command.

 `repository resync <repos>`::
   Re-synchronize Trac with a repository.


=== In `trac.ini` === #ReposTracIni
Repositories and repository attributes can be specified in the `[repositories]` section of [wiki:TracIni#repositories-section trac.ini]. Every attribute consists of a key structured as `{name}.{attribute}` and the corresponding value separated with an equal sign (`=`). The name of the default repository is empty.

The main advantage of specifying repositories in `trac.ini` is that they can be inherited from a global configuration (see the [wiki:TracIni#GlobalConfiguration global configuration] section of TracIni). One drawback is that, due to limitations in the `ConfigParser` class used to parse `trac.ini`, the repository name is always all-lowercase.

The following example defines two Subversion repositories named `project` and `lib`, and a hidden alias to `project` as the default repository. This is a typical use case where a Trac environment previously had a single repository (the `project` repository), and was converted to multiple repositories. The alias ensures that links predating the change continue to resolve to the `project` repository.
{{{
#!ini
[repositories]
project.dir = /var/repos/project
project.description = This is the ''''main'''' project repository.
project.type = svn
project.url = http://example.com/svn/project
lib.dir = /var/repos/lib
lib.description = This is the secondary library code.
lib.type = svn
lib.url = http://example.com/svn/lib
.alias = project
.hidden = true
}}}
Note that `name.alias = target` makes `name` an alias for the `target` repo, not the other way around.

=== In the database === #ReposDatabase
Repositories can also be specified in the database, using either the "Repositories" admin panel under "Version Control", or the `trac-admin $ENV repository` commands.

The admin panel shows the list of all repositories defined in the Trac environment. It allows adding repositories and aliases, editing repository attributes and removing repositories. Note that repositories defined in `trac.ini` are displayed but cannot be edited.

The following [wiki:TracAdmin trac-admin] commands can be used to perform repository operations from the command line.

 `repository add <repos> <dir> [type]`::
   Add a repository `<repos>` located at `<dir>`, and optionally specify its type.

 `repository alias <name> <target>`::
   Create an alias `<name>` for the repository `<target>`.

 `repository remove <repos>`::
   Remove the repository `<repos>`.

 `repository set <repos> <key> <value>`::
   Set the attribute `<key>` to `<value>` for the repository `<repos>`. 

Note that the default repository has an empty name, so it will likely need to be quoted when running `trac-admin` from a shell. Alternatively, the name "`(default)`" can be used instead, for example when running `trac-admin` in interactive mode.


== Repository synchronization == #Synchronization
Prior to 0.12, Trac synchronized its cache with the repository on every HTTP request. This approach is not very efficient and not practical anymore with multiple repositories. For this reason, explicit synchronization through post-commit hooks was added. 

There is also new functionality in the form of a repository listener extension point ''''(IRepositoryChangeListener)'''' that is triggered by the post-commit hook when a changeset is added or modified, and can be used by plugins to perform actions on commit.

=== Mercurial Repositories ===
Please note that at the time of writing, no initial resynchronization or any hooks are necessary for Mercurial repositories - see [trac:#9485] for more information. 

=== Explicit synchronization === #ExplicitSync
This is the preferred method of repository synchronization. It requires setting the `[trac]  repository_sync_per_request` option in [wiki:TracIni#trac-section trac.ini] to an empty value, and adding a call to `trac-admin` in the post-commit hook of each repository. Additionally, if a repository allows changing revision metadata, a call to `trac-admin` must be added to the post-revprop-change hook as well.

 `changeset added <repos> <rev> [...]`::
   Notify Trac that one or more changesets have been added to a repository.

 `changeset modified <repos> <rev> [...]`::
   Notify Trac that metadata on one or more changesets in a repository has been modified.

The `<repos>` argument can be either a repository name (use "`(default)`" for the default repository) or the path to the repository.

Note that you may have to set the environment variable PYTHON_EGG_CACHE to the same value as was used for the web server configuration before calling trac-admin, if you changed it from its default location. See [wiki:TracPlugins Trac Plugins] for more information.

The following examples are complete post-commit and post-revprop-change scripts for Subversion. They should be edited for the specific environment, marked executable (where applicable) and placed in the `hooks` directory of each repository. On Unix (`post-commit`):
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
/usr/bin/trac-admin /path/to/env changeset added "$1" "$2"
}}}
On Windows (`post-commit.cmd`):
{{{#!application/x-dos-batch
@C:\Python26\Scripts\trac-admin.exe C:\path\to\env changeset added "%1" "%2"
}}}

The post-revprop-change hook for Subversion is very similar. On Unix (`post-revprop-change`):
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
/usr/bin/trac-admin /path/to/env changeset modified "$1" "$2"
}}}
On Windows (`post-revprop-change.cmd`):
{{{#!application/x-dos-batch
@C:\Python26\Scripts\trac-admin.exe C:\path\to\env changeset modified "%1" "%2"
}}}

The Unix variants above assume that the user running the Subversion commit has write access to the Trac environment, which is the case in the standard configuration where both the repository and Trac are served by the web server. If you access the repository through another means, for example `svn+ssh://`, you may have to run `trac-admin` with different privileges, for example by using `sudo`.

Note that calling `trac-admin` in your Subversion hooks can slow down the commit and log editing operations on the client side. You might want to use the [trac:source:trunk/contrib/trac-svn-hook contrib/trac-svn-hook] script which starts `trac-admin` in an asynchronous way. The script also comes with a number of safety checks and usage advices which should make it easier to set up and test your hooks. There''s no equivalent `trac-svn-hook.bat` for Windows yet, but the script can be run by Cygwin''s bash.

See the [http://svnbook.red-bean.com/en/1.5/svn.reposadmin.create.html#svn.reposadmin.create.hooks section about hooks] in the Subversion book for more information. Other repository types will require different hook setups. Please see the plugin documentation for specific instructions.

=== Per-request synchronization === #PerRequestSync
If the post-commit hooks are not available, the environment can be set up for per-request synchronization. In that case, the `[trac] repository_sync_per_request` option in [wiki:TracIni#trac-section trac.ini] must be set to a comma-separated list of repository names to be synchronized.

Note that in this case, the changeset listener extension point is not called, and therefore plugins using it will not work correctly.


== Migration from a single-repository setup (Subversion) == #Migration
The following procedure illustrates a typical migration from a Subversion single-repository setup to multiple repositories.

 1. Remove the default repository specification from the `[trac] repository_dir` option.
 1. Add the "main" repository as a named repository.
 1. Re-synchronize the main repository.
 1. Set up post-commit and post-revprop-change hooks on the main repository, and set `[trac] repository_sync_per_request` to an empty value.
 1. Add a hidden alias to the main repository as the default repository. This ensures that all links predating the migration still resolve to the main repository.
 1. Repeat steps 2, 3 and 4 to add other (named) repositories as needed.

== Migration from a single-repository setup (Mercurial) == #MigrationMercurial
The following procedure illustrates a typical migration from a Mercurial single-repository setup to multiple repositories. Please note that at the time of writing, no initial resynchronization or any hooks are necessary for Mercurial repositories - see #9485 for more information.

 1. Upgrade to the latest version of the TracMercurial plugin.
 1. Remove the default repository specification from the `[trac] repository_dir` option.
 1. Add the "main" repository as a named repository.
 1. Add a hidden alias to the main repository as the default repository. This ensures that all links predating the migration still resolve to the main repository.
 1. Repeat step 3 to add other (named) repositories as needed.

== Troubleshooting ==

=== My trac-post-commit-hook doesn''t work anymore === #trac-post-commit-hook

You must now use the optional components from `tracopt.ticket.commit_updater.*`, which you can activate through the Plugins panel in the Administrative part of the web interface, or by directly modifying the [TracIni#components-section "[components]"] section in the trac.ini. Be sure to use [#ExplicitSync explicit synchronization] as explained above.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRevisionLog',1,1293789825944000,'trac','127.0.0.1','= Viewing Revision Logs =
[[TracGuideToc]]

When you browse the repository, it''s always possible to query the 
''''Revision Log'''' view corresponding to the path you''re currently seeing.
This will display a list of the most recent changesets in which the 
current path or any other path below it has been modified.

== The Revision Log Form ==

It''s possible to set the revision at which the revision log should
start, using the ''''View log starting at'''' field. An empty value
or a value of ''''head'''' is taken to be the newest changeset. 

It''s also possible to specify the revision at which the log should
stop, using the ''''back to'''' field. By default, it''s left empty, 
which means the revision log will stop as soon as 100 revisions have 
been listed.

Also, there are three modes of operation of the revision log.

By default, the revision log ''''stops on copy'''', which means that 
whenever an ''''Add'''', ''''Copy'''' or ''''Rename'''' operation is detected, 
no older revision will be shown. That''s very convenient when working
with branches, as one only sees the history corresponding to what
has been done on the branch.

It''s also possible to indicate that one wants to see what happened
before a ''''Copy'''' or ''''Rename'''' change, by selecting the 
''''Follow copies'''' mode. This will cross all copies or renames changes.
Each time the name of the path changes, there will be an additional
indentation level. That way, the changes on the different paths
are easily grouped together visually.

It''s even possible to go past an ''''Add'''' change, in order to see 
if there has been a ''''Delete'''' change on that path, before 
that ''''Add''''. This mode corresponds to the mode called 
''''Show only adds, moves and deletes''''. 
While quite useful at times, be aware that this operation is quite 
resource intensive.

Finally, there''s also a checkbox ''''Show full log messages'''',
which controls whether the full content of the commit log message
should be displayed for each change, or only a shortened version of it.

== The Revision Log Information ==

For each revision log entry, there are 7 columns:
 1. The first column contains a pair of radio buttons and should be used 
    for selecting the ''''old'''' and the ''''new'''' revisions that will be 
    used for [wiki:TracRevisionLog#viewingtheactualchanges viewing the actual changes].
 1. A color code (similar to the one used for the
    [wiki:TracChangeset#ChangesetHeader changesets]) indicating kind of change.
    Clicking on this column refreshes the revision log so that it restarts
    with this change.
 1. The ''''''Revision'''''' number, displayed as `@xyz`.
    This is a link to the TracBrowser, using the displayed revision as the base line.
 1. The ''''''Changeset'''''' number, displayed as `[xyz]`.
    This is a link to the TracChangeset view.
 1. The ''''''Date'''''' at which the change was made.
    The date is displayed as the time elapsed from the date of the revision. The time
    elapsed is displayed as the number of hours, days, weeks, months, or years.
 1. The ''''''Author'''''' of the change.
 1. The ''''''Log Message'''''', which contains either the truncated or full commit 
    log message, depending on the value of the ''''Show full log messages'''' 
    checkbox in the form above.
    

== Inspecting Changes Between Revisions ==

The ''''View changes...'''' buttons (placed above and below the list
of changes, on the left side) will show the set of differences
corresponding to the aggregated changes starting from the ''''old''''
revision (first radio-button) to the ''''new'''' revision (second
radio-button), in the TracChangeset view.

Note that the ''''old'''' revision doesn''t need to be actually 
''''older'''' than the ''''new'''' revision: it simply gives a base
for the diff. It''s therefore entirely possible to easily 
generate a ''''reverse diff'''', for reverting what has been done
in the given range of revisions.

Finally, if the two revisions are identical, the corresponding
changeset will be shown (same effect as clicking on the !ChangeSet number).

== Alternative Formats ==

=== The !ChangeLog Text ===

At the bottom of the page, there''s a ''''!ChangeLog'''' link
that will show the range of revisions as currently shown,
but as a simple text, matching the usual conventions for
!ChangeLog files.

=== RSS Support ===

The revision log also provides a RSS feed to monitor the changes.
To subscribe to a RSS feed for a file or directory, open its
revision log in the browser and click the orange ''XML'' icon at the bottom
of the page. For more information on RSS support in Trac, see TracRss.

----
See also: TracBrowser, TracChangeset, TracGuide',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRoadmap',1,1293789825954000,'trac','127.0.0.1','= The Trac Roadmap =
[[TracGuideToc]]

The roadmap provides a view on the [wiki:TracTickets ticket system] that helps planning and managing the future development of a project.

== The Roadmap View ==

Basically, the roadmap is just a list of future milestones. You can add a description to milestones (using WikiFormatting) describing main objectives, for example. In addition, tickets targeted for a milestone are aggregated, and the ratio between active and resolved tickets is displayed as a milestone progress bar.  It is possible to further [trac:TracRoadmapCustomGroups customise the ticket grouping] and have multiple ticket statuses shown on the progress bar.

The roadmap can be filtered to show or hide ''''completed milestones'''' and ''''milestones with no due date''''. In the case that both ''''show completed milestones'''' and ''''hide milestones with no due date'''' are selected, ''''completed'''' milestones with no due date __will__ be shown.

== The Milestone View ==

You can add a description for each milestone (using WikiFormatting) describing main objectives, for example. In addition, tickets targeted for a milestone are aggregated, and the ratio between active and resolved tickets is displayed as a milestone progress bar.  It is possible to further [trac:TracRoadmapCustomGroups customise the ticket grouping] and have multiple ticket statuses shown on the progress bar.

It is possible to drill down into this simple statistic by viewing the individual milestone pages. By default, the active/resolved ratio will be grouped and displayed by component. You can also regroup the status by other criteria, such as ticket owner or severity. Ticket numbers are linked to [wiki:TracQuery custom queries] listing corresponding tickets.

== Roadmap Administration ==

With appropriate permissions it is possible to add, modify and remove milestones using either the web interface (roadmap and milestone pages), web administration interface or by using `trac-admin`. 

''''''Note:'''''' Milestone descriptions can not currently be edited using ''trac-admin''.

== iCalendar Support ==

The Roadmap supports the [http://www.ietf.org/rfc/rfc2445.txt iCalendar] format to keep track of planned milestones and related tickets from your favorite calendar software. Many calendar applications support the iCalendar specification including
 * [http://www.apple.com/ical/ Apple iCal] for Mac OS X
 * the cross-platform [http://www.mozilla.org/projects/calendar/ Mozilla Calendar]
 * [http://chandlerproject.org Chandler]
 * [http://kontact.kde.org/korganizer/ Korganizer] (the calendar application of the [http://www.kde.org/ KDE] project)
 * [http://www.novell.com/de-de/products/desktop/features/evolution.html Evolution] also support iCalendar
 * [http://office.microsoft.com/en-us/outlook/ Microsoft Outlook] can also read iCalendar files (it appears as a new static calendar in Outlook)

To subscribe to the roadmap, copy the iCalendar link from the roadmap (found at the bottom of the page) and choose the "Subscribe to remote calendar" action (or similar) of your calendar application, and insert the URL just copied.

''''''Note:'''''' For tickets to be included in the calendar as tasks, you need to be logged in when copying the link. You will only see tickets assigned to yourself, and associated with a milestone.

More information about iCalendar can be found at [http://en.wikipedia.org/wiki/ICalendar Wikipedia].
----
See also: TracTickets, TracReports, TracQuery, [trac:TracRoadmapCustomGroups TracRoadmapCustomGroups]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRss',1,1293789825954000,'trac','127.0.0.1','= Using RSS with Trac =
[[TracGuideToc]]

Several of the Trac modules support content syndication using the RSS (Really Simple Syndication) XML format.
Using the RSS subscription feature in Trac, you can easily monitor progress of the project, a set of issues or even changes to a single file.

Trac supports RSS feeds in:

 * TracTimeline —  Use the RSS feed to ''''''subscribe to project events''''''.[[br]]Monitor overall project progress in your favorite RSS reader.
 * TracTickets, TracReports, and TracQuery — Allows syndication of report and ticket query results.[[br]]Be notified about important and relevant issue tickets.
 * TracBrowser and TracRevisionLog — Syndication of file changes.[[br]]Stay up to date with changes to a specific file or directory.

== How to access RSS data ==
Anywhere in Trac where RSS is available, you should find a small orange ''''''XML'''''' icon, typically placed at the bottom of the page. Clicking the icon will access the RSS feed for that specific resource.

''''''Note:'''''' Different modules provide different data in their RSS feeds. Usually, the syndicated information corresponds to the current view. For example, if you click the RSS link on a report page, the feed will be based on that report. It might be explained by thinking of the RSS feeds as an ''''alternate view of the data currently displayed''''.

== Links ==
 * ''''Specifications:''''
   * http://blogs.law.harvard.edu/tech/rss — RSS 2.0 Specification

 * ''''Multi-platform RSS readers:''''
   * http://www.rssowl.org/ — Open source, Eclipse-based, RSS reader for Linux, Mac and Windows systems that supports https and authenticated feeds.

 * ''''Linux/BSD/*n*x systems:''''
   * http://pim.kde.org/users.php — [http://kde.org KDE] RSS Reader for Linux/BSD/*n*x systems
   * http://liferea.sourceforge.net/ — Open source GTK2 RSS Reader for Linux
   * http://akregator.sourceforge.net/ — Open source KDE RSS Reader (part of KDE-PIM)

 * ''''Mac OS X systems:''''
   * http://ranchero.com/netnewswire/ — An excellent RSS reader for Mac OS X (has both free and pay versions)
   * http://www.utsire.com/shrook/ — An RSS reader for Max OS X that supports https (even with self signed certificates) and authenticated feeds.
   * http://vienna-rss.sourceforge.net/ — Open source Feed Reader for Mac OS X with smart folders support
   * http://www.mesadynamics.com/Tickershock.html — Non-intrusive "news ticker" style RSS reader for Mac OS X

 * ''''Windows systems:''''
   * http://www.rssreader.com/ — Free and powerful RSS Reader for Windows
   * http://www.sharpreader.net/ — A free RSS Reader written in .NET for Windows

 * ''''Firefox:''''
   * http://www.mozilla.org/products/firefox/ — Mozilla Firefox supports [http://www.mozilla.org/products/firefox/live-bookmarks.html live bookmarks] using RSS
   * http://sage.mozdev.org — Sage RSS and Atom feed aggregator for Mozilla Firefox
   * http://www.wizzrss.com/Welcome.php — WizzRSS Feed Reader for Firefox

----
See also: TracGuide, TracTimeline, TracReports, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSearch',1,1293789825964000,'trac','127.0.0.1','= Using Search =

Trac has a built-in search engine to allow finding occurrences of keywords and substrings in wiki pages, tickets and changeset properties (author, revision and log message).

Using the Trac search facility is straightforward and its interface should be familiar to most users.

Apart from the [search: Search module], you will also find a small search field above the navigation bar at all time. It provides convenient access to the search module from all pages.

== "Quickjump" searches ==
For quick access to various project resources, the quick-search field at the top of every page can be used to enter a [TracLinks wiki link], which will take you directly to the resource identified by that link.

For example:

 * ![42] -- Opens change set 42
 * !#42 -- Opens ticket number 42
 * !{1} -- Opens report 1
 * /trunk -- Opens the browser for the `trunk` directory

== Advanced ==

=== Disabling Quickjumps ===
To disable the quickjump feature for a search keyword - for example when searching for occurences of the literal word !TracGuide - begin the query with an exclamation mark (!).

=== Search Links ===
From the Wiki, it is possible to link to a specific search, using
`search:` links:
 * `search:?q=crash` will search for the string "crash" 
 * `search:?q=trac+link&wiki=on` will search for "trac" and "link" 
   in wiki pages only

----
See also: TracGuide, TracLinks, TracQuery',NULL,NULL);
INSERT INTO "wiki" VALUES('TracStandalone',1,1293789825964000,'trac','127.0.0.1','= Tracd =

Tracd is a lightweight standalone Trac web server.
It can be used in a variety of situations, from a test or development server to a multiprocess setup behind another web server used as a load balancer.

== Pros ==

 * Fewer dependencies: You don''t need to install apache or any other web-server.
 * Fast: Should be almost as fast as the [wiki:TracModPython mod_python] version (and much faster than the [wiki:TracCgi CGI]), even more so since version 0.12 where the HTTP/1.1 version of the protocol is enabled by default
 * Automatic reloading: For development, Tracd can be used in ''''auto_reload'''' mode, which will automatically restart the server whenever you make a change to the code (in Trac itself or in a plugin).

== Cons ==

 * Fewer features: Tracd implements a very simple web-server and is not as configurable or as scalable as Apache httpd.
 * No native HTTPS support: [http://www.rickk.com/sslwrap/ sslwrap] can be used instead,
   or [http://trac.edgewall.org/wiki/STunnelTracd stunnel -- a tutorial on how to use stunnel with tracd] or Apache with mod_proxy.

== Usage examples ==

A single project on port 8080. (http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
Stricly speaking this will make your Trac accessible to everybody from your network rather than ''''localhost only''''. To truly limit it use ''''--hostname'''' option.
{{{
 $ tracd --hostname=localhost -p 8080 /path/to/project
}}}
With more than one project. (http://localhost:8080/project1/ and http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}

You can''t have the last portion of the path identical between the projects since Trac uses that name to keep the URLs of the
different projects unique. So if you use `/project1/path/to` and `/project2/path/to`, you will only see the second project.

An alternative way to serve multiple projects is to specify a parent directory in which each subdirectory is a Trac project, using the `-e` option. The example above could be rewritten:
{{{
 $ tracd -p 8080 -e /path/to
}}}

To exit the server on Windows, be sure to use {{{CTRL-BREAK}}} -- using {{{CTRL-C}}} will leave a Python process running in the background.

== Installing as a Windows Service ==

=== Option 1 ===
To install as a Windows service, get the [http://www.google.com/search?q=srvany.exe SRVANY] utility and run:
{{{
 C:\path\to\instsrv.exe tracd C:\path\to\srvany.exe
 reg add HKLM\SYSTEM\CurrentControlSet\Services\tracd\Parameters /v Application /d "\"C:\path\to\python.exe\" \"C:\path\to\python\scripts\tracd-script.py\" <your tracd parameters>"
 net start tracd
}}}

''''''DO NOT'''''' use {{{tracd.exe}}}.  Instead register {{{python.exe}}} directly with {{{tracd-script.py}}} as a parameter.  If you use {{{tracd.exe}}}, it will spawn the python process without SRVANY''s knowledge.  This python process will survive a {{{net stop tracd}}}.

If you want tracd to start automatically when you boot Windows, do:
{{{
 sc config tracd start= auto
}}}

The spacing here is important.

{{{#!div
Once the service is installed, it might be simpler to run the Registry Editor rather than use the `reg add` command documented above.  Navigate to:[[BR]]
`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\tracd\Parameters`

Three (string) parameters are provided:
||!AppDirectory ||C:\Python26\ ||
||Application ||python.exe ||
||!AppParameters ||scripts\tracd-script.py -p 8080 ... ||

Note that, if the !AppDirectory is set as above, the paths of the executable ''''and'''' of the script name and parameter values are relative to the directory.  This makes updating Python a little simpler because the change can be limited, here, to a single point.
(This is true for the path to the .htpasswd file, as well, despite the documentation calling out the /full/path/to/htpasswd; however, you may not wish to store that file under the Python directory.)
}}}

For Windows 7 User, srvany.exe may not be an option, so you can use [http://www.google.com/search?q=winserv.exe WINSERV] utility and run:
{{{
"C:\path\to\winserv.exe" install tracd -displayname "tracd" -start auto "C:\path\to\python.exe" c:\path\to\python\scripts\tracd-script.py <your tracd parameters>"

net start tracd
}}}

=== Option 2 ===

Use [http://trac-hacks.org/wiki/WindowsServiceScript WindowsServiceScript], available at [http://trac-hacks.org/ Trac Hacks]. Installs, removes, starts, stops, etc. your Trac service.

== Using Authentication ==

Tracd provides support for both Basic and Digest authentication. The default is to use Digest; to use Basic authentication, replace `--auth` with `--basic-auth` in the examples below. (You must still specify a dialogic "realm", which can be an empty string by trailing the BASICAUTH with a comma.)


The general format for using authentication is:
{{{
 $ tracd -p port --auth="base_project_dir,password_file_path,realm" project_path
}}}

where:

 * ''''''base_project_dir'''''': the base directory of the project specified as follows:
   * when serving multiple projects: ''''relative'''' to the `project_path`
   * when serving only a single project (`-s`): the name of the project directory
 Don''t use an absolute path here as this won''t work. ''''Note:'''' This parameter is case-sensitive even for environments on Windows.
 * ''''''password_file_path'''''': path to the password file
 * ''''''realm'''''': the realm name (can be anything)
 * ''''''project_path'''''': path of the project
 * **`--auth`** in the above means use Digest authentication, replace `--auth` with `--basic-auth` if you want to use Basic auth

Examples:

{{{
 $ tracd -p 8080 \
   --auth="project1,/path/to/passwordfile,mycompany.com" /path/to/project1
}}}

Of course, the password file can be be shared so that it is used for more than one project:
{{{
 $ tracd -p 8080 \
   --auth="project1,/path/to/passwordfile,mycompany.com" \
   --auth="project2,/path/to/passwordfile,mycompany.com" \
   /path/to/project1 /path/to/project2
}}}

Another way to share the password file is to specify "*" for the project name:
{{{
 $ tracd -p 8080 \
   --auth="*,/path/to/users.htdigest,mycompany.com" \
   /path/to/project1 /path/to/project2
}}}

=== Using a htpasswd password file ===
This section describes how to use `tracd` with Apache .htpasswd files.

To create a .htpasswd file use Apache''s `htpasswd` command (see [#GeneratingPasswordsWithoutApache below] for a method to create these files without using Apache):

{{{
 $ sudo htpasswd -c /path/to/env/.htpasswd username
}}}
then for additional users:
{{{
 $ sudo htpasswd /path/to/env/.htpasswd username2
}}}

Then to start `tracd` run something like this:

{{{
 $ tracd -p 8080 --basic-auth="projectdirname,/fullpath/environmentname/.htpasswd,realmname" /fullpath/environmentname
}}}

For example:

{{{
 $ tracd -p 8080 --basic-auth="testenv,/srv/tracenv/testenv/.htpasswd,My Test Env" /srv/tracenv/testenv
}}}

''''Note:'''' You might need to pass "-m" as a parameter to htpasswd on some platforms (OpenBSD).

=== Using a htdigest password file ===

If you have Apache available, you can use the htdigest command to generate the password file. Type ''htdigest'' to get some usage instructions, or read [http://httpd.apache.org/docs/2.0/programs/htdigest.html this page] from the Apache manual to get precise instructions.  You''ll be prompted for a password to enter for each user that you create.  For the name of the password file, you can use whatever you like, but if you use something like `users.htdigest` it will remind you what the file contains. As a suggestion, put it in your <projectname>/conf folder along with the [TracIni trac.ini] file.

Note that you can start tracd without the --auth argument, but if you click on the ''''Login'''' link you will get an error.

=== Generating Passwords Without Apache ===

If you don''t have Apache available, you can use this simple Python script to generate your passwords:

{{{
#!python
from optparse import OptionParser
# The md5 module is deprecated in Python 2.5
try:
    from hashlib import md5
except ImportError:
    from md5 import md5
realm = ''trac''

# build the options
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-u", "--username",action="store", dest="username", type = "string",
                  help="the username for whom to generate a password")
parser.add_option("-p", "--password",action="store", dest="password", type = "string",
                  help="the password to use")
parser.add_option("-r", "--realm",action="store", dest="realm", type = "string",
                  help="the realm in which to create the digest")
(options, args) = parser.parse_args()

# check options
if (options.username is None) or (options.password is None):
   parser.error("You must supply both the username and password")
if (options.realm is not None):
   realm = options.realm
   
# Generate the string to enter into the htdigest file
kd = lambda x: md5('':''.join(x)).hexdigest()
print '':''.join((options.username, realm, kd([options.username, realm, options.password])))
}}}

Note: If you use the above script you must use the --auth option to tracd, not --basic-auth, and you must set the realm in the --auth value to ''trac'' (without the quotes). Example usage (assuming you saved the script as trac-digest.py):

{{{
 $ python trac-digest.py -u username -p password >> c:\digest.txt
 $ tracd --port 8000 --auth=proj_name,c:\digest.txt,trac c:\path\to\proj_name
}}}


Note: If you would like to use --basic-auth you need to use htpasswd tool from apache server to generate .htpasswd file. The remaining part is similar but make sure to use empty realm (i.e. coma after path). Make sure to use -m option for it.  If you do not have Apache, [trac:source:/tags/trac-0.11/contrib/htpasswd.py htpasswd.py] may help.  (Note that it requires a `crypt` or `fcrypt` module; see the source comments for details.)

It is possible to use md5sum utility to generate digest-password file using such method:
{{{
 $ printf "${user}:trac:${password}" | md5sum - >>user.htdigest
}}}
and manually delete " -" from the end and add "${user}:trac:" to the start of line from ''to-file''.

== Reference ==

Here''s the online help, as a reminder (`tracd --help`):
{{{
Usage: tracd [options] [projenv] ...

Options:
  --version             show program''s version number and exit
  -h, --help            show this help message and exit
  -a DIGESTAUTH, --auth=DIGESTAUTH
                        [projectdir],[htdigest_file],[realm]
  --basic-auth=BASICAUTH
                        [projectdir],[htpasswd_file],[realm]
  -p PORT, --port=PORT  the port number to bind to
  -b HOSTNAME, --hostname=HOSTNAME
                        the host name or IP address to bind to
  --protocol=PROTOCOL   http|scgi|ajp
  -q, --unquote         unquote PATH_INFO (may be needed when using ajp)
  --http10              use HTTP/1.0 protocol version (default)
  --http11              use HTTP/1.1 protocol version instead of HTTP/1.0
  -e PARENTDIR, --env-parent-dir=PARENTDIR
                        parent directory of the project environments
  --base-path=BASE_PATH
                        the initial portion of the request URL''s "path"
  -r, --auto-reload     restart automatically when sources are modified
  -s, --single-env      only serve a single project without the project list
}}}

== Tips ==

=== Serving static content ===

If `tracd` is the only web server used for the project, 
it can also be used to distribute static content 
(tarballs, Doxygen documentation, etc.)

This static content should be put in the `$TRAC_ENV/htdocs` folder,
and is accessed by URLs like `<project_URL>/chrome/site/...`.

Example: given a `$TRAC_ENV/htdocs/software-0.1.tar.gz` file,
the corresponding relative URL would be `/<project_name>/chrome/site/software-0.1.tar.gz`, 
which in turn can be written as `htdocs:software-0.1.tar.gz` (TracLinks syntax) or `[/<project_name>/chrome/site/software-0.1.tar.gz]` (relative link syntax). 

 ''''Support for `htdocs:` TracLinks syntax was added in version 0.10''''

=== Using tracd behind a proxy

In some situations when you choose to use tracd behind Apache or another web server.

In this situation, you might experience issues with redirects, like being redirected to URLs with the wrong host or protocol. In this case (and only in this case), setting the `[trac] use_base_url_for_redirect` to `true` can help, as this will force Trac to use the value of `[trac] base_url` for doing the redirects.

If you''re using the AJP protocol to connect with `tracd` (which is possible if you have flup installed), then you might experience problems with double quoting. Consider adding the `--unquote` parameter.

See also [trac:TracOnWindowsIisAjp], [trac:TracNginxRecipe].

=== Serving a different base path than / ===
Tracd supports serving projects with different base urls than /<project>. The parameter name to change this is
{{{
 $ tracd --base-path=/some/path
}}}

----
See also: TracInstall, TracCgi, TracModPython, TracGuide, [trac:TracOnWindowsStandalone#RunningTracdasservice Running tracd.exe as a Windows service]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSupport',1,1293789825964000,'trac','127.0.0.1','= Trac Support =

Like in most [http://www.opensource.org/ open source projects], "free" Trac support is available primarily through the community itself, mainly through the [trac:MailingList mailing list] and the project wiki.

There is also an [trac:IrcChannel IRC channel], where people might be able to help out. Much of the ''live'' development discussions also happen there.

Before you start a new support query, make sure you''ve done the appropriate searching:
 * in the project''s [trac:TracFaq FAQ]
 * in past messages to the Trac [http://blog.gmane.org/gmane.comp.version-control.subversion.trac.general?set_user_css=http%3A%2F%2Fwww.edgewall.com%2Fcss%2Fgmane.css&do_set_user_css=t Mailing List]
 * in the Trac ticket system, using either a [http://trac.edgewall.org/search?q=&ticket=on&wiki=on full search] or a [http://trac.edgewall.org/query?summary=~&keywords=~ ticket query].

Please ''''''don''t'''''' create a ticket in this Trac for asking a support question about Trac. Only use it when you face a ''''real'''' and ''''new'''' bug in Trac, and do so only after having read the [trac:NewTicketGuidelines NewTicketGuidelines]. The more a bug report or enhancement request complies with those guidelines, the higher the chances are that it will be fixed or implemented promptly!

----
See also: [trac:MailingList MailingList], [trac:TracTroubleshooting TracTroubleshooting], [trac:CommercialServices CommercialServices]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSyntaxColoring',1,1293789825974000,'trac','127.0.0.1','= Syntax Coloring of Source Code =
Trac supports language-specific syntax highlighting of source code within wiki formatted text in [WikiProcessors#CodeHighlightingSupport wiki processors] blocks and in the [TracBrowser repository browser].

To do this, Trac uses external libraries with support for a great number of programming languages.

Currently Trac supports syntax coloring using one or more of the following packages:

 * [http://pygments.pocoo.org/ Pygments], by far the preferred system, as it covers a wide range of programming languages and other structured texts and is actively supported
 * [http://www.codento.com/people/mtr/genscript/ GNU Enscript], commonly available on Unix but somewhat unsupported on Windows
 * [http://silvercity.sourceforge.net/ SilverCity], legacy system, some versions can be [http://trac.edgewall.org/wiki/TracFaq#why-is-my-css-code-not-being-highlighted-even-though-i-have-silvercity-installed problematic]


To activate syntax coloring, simply install either one (or more) of these packages (see [#ExtraSoftware] section below).
If none of these packages is available, Trac will display the data as plain text. 


=== About Pygments ===

Starting with trac 0.11 [http://pygments.org/ pygments] will be the new default highlighter. It''s a highlighting library implemented in pure python, very fast, easy to extend and [http://pygments.org/docs/ well documented].

The Pygments default style can specified in the [TracIni#mimeviewer-section mime-viewer] section of trac.ini. The default style can be overridden by setting a Style preference on the [/prefs/pygments preferences page]. 

It''s very likely that the list below is outdated because the list of supported pygments lexers is growing weekly. Just have a look at the page of [http://pygments.org/docs/lexers/ supported lexers] on the pygments webpage.


== Syntax Coloring Support ==

=== Known MIME Types

[[KnownMimeTypes]]


=== List of Languages Supported, by Highlighter #language-supported

This list is only indicative.

||                 ||= !SilverCity   =||= Enscript      =||= Pygments =||
|| Ada             ||                 ||  ✓              ||     ||
|| Asm             ||                 ||  ✓              ||     ||
|| Apache Conf     ||                 ||                 ||  ✓  ||
|| ASP             ||  ✓              ||  ✓              ||     ||
|| C               ||  ✓              ||  ✓              ||  ✓  ||
|| C#              ||                 ||  ✓ ^[#a1 (1)]^  ||  ✓  ||
|| C++             ||  ✓              ||  ✓              ||  ✓  ||
|| Java            ||  ✓ ^[#a2 (2)]^  ||  ✓              ||  ✓  ||
|| Awk             ||                 ||  ✓              ||     ||
|| Boo             ||                 ||                 ||  ✓  ||
|| CSS             ||  ✓              ||                 ||  ✓  ||
|| Python Doctests ||                 ||                 ||  ✓  ||
|| Diff            ||                 ||  ✓              ||  ✓  ||
|| Eiffel          ||                 ||  ✓              ||     ||
|| Elisp           ||                 ||  ✓              ||     ||
|| Fortran         ||                 ||  ✓ ^[#a1 (1)]^  ||  ✓  ||
|| Haskell         ||                 ||  ✓              ||  ✓  ||
|| Genshi          ||                 ||                 ||  ✓  ||
|| HTML            ||  ✓              ||  ✓              ||  ✓  ||
|| IDL             ||                 ||  ✓              ||     ||
|| INI             ||                 ||                 ||  ✓  ||
|| Javascript      ||  ✓              ||  ✓              ||  ✓  ||
|| Lua             ||                 ||                 ||  ✓  ||
|| m4              ||                 ||  ✓              ||     ||
|| Makefile        ||                 ||  ✓              ||  ✓  ||
|| Mako            ||                 ||                 ||  ✓  ||
|| Matlab ^[#a3 (3)]^  ||             ||  ✓              ||  ✓  ||
|| Mygthy          ||                 ||                 ||  ✓  ||
|| Objective-C     ||                 ||  ✓              ||  ✓  ||
|| OCaml           ||                 ||                 ||  ✓  ||
|| Pascal          ||                 ||  ✓              ||  ✓  ||
|| Perl            ||  ✓              ||  ✓              ||  ✓  ||
|| PHP             ||  ✓              ||                 ||  ✓  ||
|| PSP             ||  ✓              ||                 ||     ||
|| Pyrex           ||                 ||  ✓              ||     ||
|| Python          ||  ✓              ||  ✓              ||  ✓  ||
|| Ruby            ||  ✓              ||  ✓ ^[#a1 (1)]^  ||  ✓  ||
|| Scheme          ||                 ||  ✓              ||  ✓  ||
|| Shell           ||                 ||  ✓              ||  ✓  ||
|| Smarty          ||                 ||                 ||  ✓  ||
|| SQL             ||  ✓              ||  ✓              ||  ✓  ||
|| Troff           ||                 ||  ✓              ||  ✓  ||
|| TCL             ||                 ||  ✓              ||     ||
|| Tex             ||                 ||  ✓              ||  ✓  ||
|| Verilog         ||  ✓ ^[#a2 (2)]^  ||  ✓              ||     ||
|| VHDL            ||                 ||  ✓              ||     ||
|| Visual Basic    ||                 ||  ✓              ||  ✓  ||
|| VRML            ||                 ||  ✓              ||     ||
|| XML             ||  ✓              ||                 ||  ✓  ||



''''[=#a1 (1)] Not included in the Enscript distribution.  Additional highlighting rules can be obtained for
[http://neugierig.org/software/ruby/ Ruby],
[http://wiki.hasno.info/index.php/Csharp.st C#],
[http://wiki.hasno.info/index.php/F90.st Fortran 90x/2003]

''''[=#a2 (2)] since Silvercity 0.9.7 released on 2006-11-23

''''[=#a3 (3)] By default `.m` files are considered Objective-C files. In order to treat `.m` files as MATLAB files, add "text/matlab:m" to the "mime_map" setting in the [wiki:TracIni#mimeviewer-section "[mimeviewer] section of trac.ini"].

== Extra Software ==
 * GNU Enscript -- http://directory.fsf.org/GNU/enscript.html
 * GNU Enscript for Windows -- http://gnuwin32.sourceforge.net/packages/enscript.htm
 * !SilverCity -- http://silvercity.sf.net/
 * Pygments -- http://pygments.org/

----
See also: WikiProcessors, WikiFormatting, TracWiki, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracTickets',1,1293789825974000,'trac','127.0.0.1','= The Trac Ticket System =
[[TracGuideToc]]

The Trac ticket database provides simple but effective tracking of issues and bugs within a project.

As the central project management element of Trac, tickets are used for ''''''project tasks'''''', ''''''feature requests'''''', ''''''bug reports'''''' and ''''''software support issues''''''. 

As with the TracWiki, this subsystem has been designed with the goal of making user contribution and participation as simple as possible. It should be as easy as possible to report bugs, ask questions and suggest improvements.

An issue is assigned to a person who must resolve it or reassign the ticket to someone else.
All tickets can be edited, annotated, assigned, prioritized and discussed at any time.

== Ticket Fields ==

A  ticket contains the following information attributes:
 
 * ''''''Reporter'''''' — The author of the ticket.
 * ''''''Type'''''' — The nature of the ticket (for example, defect or enhancement request)

 * ''''''Component'''''' — The project module or subsystem this ticket concerns.
 * ''''''Version'''''' — Version of the project that this ticket pertains to.
 * ''''''Keywords'''''' — Keywords that a ticket is marked with.  Useful for searching and report generation.

 * ''''''Priority'''''' — The importance of this issue, ranging from ''''trivial'''' to ''''blocker''''.
 * ''''''Milestone'''''' — When this issue should be resolved at the latest.
 * ''''''Assigned to/Owner'''''' — Principal person responsible for handling the issue.
 * ''''''Cc'''''' — A comma-separated list of other users or E-Mail addresses to notify. ''''Note that this does not imply responsiblity or any other policy.''''
 
 * ''''''Resolution'''''' — Reason for why a ticket was closed. One of {{{fixed}}}, {{{invalid}}}, {{{wontfix}}}, {{{duplicate}}}, {{{worksforme}}}.
 * ''''''Status'''''' — What is the current status? One of {{{new}}}, {{{assigned}}}, {{{closed}}}, {{{reopened}}}.
 * ''''''Summary'''''' — A brief description summarizing the problem or issue.
 * ''''''Description'''''' — The body of the ticket. A good description should be specific, descriptive and to the point.

''''''Note:'''''' Versions of Trac prior to 0.9 did not have the ''''type'''' field, but instead provided a ''''severity'''' field and different default values for the ''''priority'''' field. This change was done to simplify the ticket model by removing the somewhat blurry distinction between ''''priority'''' and ''''severity''''. However, the old model is still available if you prefer it: just add/modify the default values of the ''''priority'''' and ''''severity'''', and optionally hide the ''''type'''' field by removing all the possible values through [wiki:TracAdmin trac-admin].

''''''Note:'''''' the [trac:TicketTypes type], [trac:TicketComponent component], version, priority and severity fields can be managed with [wiki:TracAdmin trac-admin] or with the [trac:WebAdmin WebAdmin] plugin.

''''''Note:'''''' Description of the builtin ''''priority'''' values is available at [trac:TicketTypes#Whyistheseverityfieldgone TicketTypes]

== Changing and Commenting Tickets ==

Once a ticket has been entered into Trac, you can at any time change the
information by ''''''annotating'''''' the bug. This means changes and comments to
the ticket are logged as a part of the ticket itself.

When viewing a ticket, the history of changes will appear below the main ticket area.

''''In the Trac project, we use ticket comments to discuss issues and tasks. This makes
understanding the motivation behind a design- or implementation choice easier,
when returning to it later.''''

''''''Note:'''''' An important feature is being able to use TracLinks and
WikiFormatting in ticket descriptions and comments. Use TracLinks to refer to
other issues, changesets or files to make your ticket more specific and easier
to understand.

''''''Note:'''''' See TracNotification for how to configure email notifications of ticket changes.

''''''Note:'''''' See TracWorkflow for information about the state transitions (ticket lifecycle), and how this workflow can be customized.

== Default Values for Drop-Down Fields ==

The option selected by default for the various drop-down fields can be set in [wiki:TracIni trac.ini], in the `[ticket]` section:

 * `default_component`: Name of the component selected by default
 * `default_milestone`: Name of the default milestone
 * `default_priority`: Default priority value
 * `default_severity`: Default severity value
 * `default_type`: Default ticket type
 * `default_version`: Name of the default version
 * `default_owner`: Name of the default owner, ''''if no owner for the component has been set''''

If any of these options are omitted, the default value will either be the first in the list, or an empty value, depending on whether the field in question is required to be set.  Some of these can be chosen through the [trac:WebAdmin WebAdmin] plugin in the "Ticket System" section (others in the "trac.ini" section).  The default owner for a ticket will be the component owner, if that is set, or `default_owner`, if not.


== Hiding Fields and Adding Custom Fields ==

Many of the default ticket fields can be hidden from the ticket web interface simply by removing all the possible values through [wiki:TracAdmin trac-admin]. This of course only applies to drop-down fields, such as ''''type'''', ''''priority'''', ''''severity'''', ''''component'''', ''''version'''' and ''''milestone''''.

Trac also lets you add your own custom ticket fields. See TracTicketsCustomFields for more information.


== Assign-to as Drop-Down List ==

If the list of possible ticket owners is finite, you can change the ''''assign-to'''' ticket field from a text input to a drop-down list. This is done by setting the `restrict_owner` option of the `[ticket]` section in [wiki:TracIni trac.ini] to “true”. In that case, Trac will use the list of all users who have accessed the project to populate the drop-down field.

To appear in the dropdown list, a user needs be registered with the project, ''''i.e.'''' a user session should exist in the database. Such an entry is automatically created in the database the first time the user submits a change in the project, for example when editing the user''s details in the ''''Settings'''' page, or simply by authenticating if the user has a login. Also, the user must have `TICKET_MODIFY` [TracPermissions permissions].

''''''Note:'''''' See [http://pacopablo.com/wiki/pacopablo/blog/set-assign-to-drop-down Populating Assign To Drop Down] on how to add user entries at database level

''''''Note 2:'''''' If you need serious flexibility and aren''t afraid of a little plugin coding of your own, see [http://trac-hacks.org/wiki/FlexibleAssignToPlugin FlexibleAssignTo] (disclosure: I''m the author)

''''''Note 3:'''''' Activating this option may cause some performance degradation, read more about this in the [trac:TracPerformance#Configuration Trac performance] page.

== Preset Values for New Tickets ==

To create a link to the new-ticket form filled with preset values, you need to call the `/newticket?` URL with variable=value separated by &. 

Possible variables are :

 * ''''''type'''''' — The type droplist
 * ''''''reporter'''''' — Name or email of the reporter
 * ''''''summary'''''' — Summary line for the ticket
 * ''''''description'''''' — Long description of the ticket
 * ''''''component'''''' — The component droplist
 * ''''''version'''''' — The version droplist
 * ''''''severity'''''' — The severity droplist
 * ''''''keywords'''''' — The keywords 
 * ''''''priority'''''' — The priority droplist
 * ''''''milestone'''''' — The milestone droplist
 * ''''''owner'''''' — The person responsible for the ticket
 * ''''''cc'''''' — The list of emails for notifying about the ticket change

''''''Example:'''''' ''''/trac/newticket?summary=Compile%20Error&version=1.0&component=gui''''[[BR]]

----
See also:  TracGuide, TracWiki, TracTicketsCustomFields, TracNotification, TracReports, TracQuery',NULL,NULL);
INSERT INTO "wiki" VALUES('TracTicketsCustomFields',1,1293789825984000,'trac','127.0.0.1','= Custom Ticket Fields =
Trac supports adding custom, user-defined fields to the ticket module. Using custom fields, you can add typed, site-specific properties to tickets.

== Configuration ==
Configuring custom ticket fields is done in the [wiki:TracIni trac.ini] file. All field definitions should be under a section named `[ticket-custom]`.

The syntax of each field definition is:
{{{
 FIELD_NAME = TYPE
 (FIELD_NAME.OPTION = VALUE)
 ...
}}}
The example below should help to explain the syntax.

=== Available Field Types and Options ===
 * ''''''text'''''': A simple (one line) text field.
   * label: Descriptive label.
   * value: Default value.
   * order: Sort order placement. (Determines relative placement in forms with respect to other custom fields.)
   * format: Either `plain` for plain text or `wiki` to interpret the content as WikiFormatting. (''''since 0.11.3'''')
 * ''''''checkbox'''''': A boolean value check box.
   * label: Descriptive label.
   * value: Default value (0 or 1).
   * order: Sort order placement.
 * ''''''select'''''': Drop-down select box. Uses a list of values.
   * label: Descriptive label.
   * options: List of values, separated by ''''''|'''''' (vertical pipe).
   * value: Default value (one of the values from options).
   * order: Sort order placement.
 * ''''''radio'''''': Radio buttons. Essentially the same as ''''''select''''''.
   * label: Descriptive label.
   * options: List of values, separated by ''''''|'''''' (vertical pipe).
   * value: Default value (one of the values from options).
   * order: Sort order placement.
 * ''''''textarea'''''': Multi-line text area.
   * label: Descriptive label.
   * value: Default text.
   * cols: Width in columns.
   * rows: Height in lines.
   * order: Sort order placement.
   * format: Either `plain` for plain text or `wiki` to interpret the content as WikiFormatting. (''''since 0.11.3'''')

=== Sample Config ===
{{{
[ticket-custom]

test_one = text
test_one.label = Just a text box

test_two = text
test_two.label = Another text-box
test_two.value = Default [mailto:joe@nospam.com owner]
test_two.format = wiki

test_three = checkbox
test_three.label = Some checkbox
test_three.value = 1

test_four = select
test_four.label = My selectbox
test_four.options = one|two|third option|four
test_four.value = two

test_five = radio
test_five.label = Radio buttons are fun
test_five.options = uno|dos|tres|cuatro|cinco
test_five.value = dos

test_six = textarea
test_six.label = This is a large textarea
test_six.value = Default text
test_six.cols = 60
test_six.rows = 30
}}}

''''Note: To make entering an option for a `select` type field optional, specify a leading `|` in the `fieldname.options` option.''''

=== Reports Involving Custom Fields ===

Custom ticket fields are stored in the `ticket_custom` table, not in the `ticket` table. So to display the values from custom fields in a report, you will need a join on the 2 tables. Let''s use an example with a custom ticket field called `progress`.

{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, owner, c.value AS progress
  FROM ticket t, enum p, ticket_custom c
  WHERE status IN (''assigned'') AND t.id = c.ticket AND c.name = ''progress''
AND p.name = t.priority AND p.type = ''priority''
  ORDER BY p.value
}}}
''''''Note'''''' that this will only show tickets that have progress set in them, which is ''''''not the same as showing all tickets''''''. If you created this custom ticket field ''''after'''' you have already created some tickets, they will not have that field defined, and thus they will never show up on this ticket query. If you go back and modify those tickets, the field will be defined, and they will appear in the query. If that''s all you want, you''re set.

However, if you want to show all ticket entries (with progress defined and without), you need to use a `JOIN` for every custom field that is in the query.
{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, component, version, milestone, severity,
   (CASE status WHEN ''assigned'' THEN owner||'' *'' ELSE owner END) AS owner,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter,
  (CASE WHEN c.value = ''0'' THEN ''None'' ELSE c.value END) AS progress
  FROM ticket t
     LEFT OUTER JOIN ticket_custom c ON (t.id = c.ticket AND c.name = ''progress'')
     JOIN enum p ON p.name = t.priority AND p.type=''priority''
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY p.value, milestone, severity, time
}}}

Note in particular the `LEFT OUTER JOIN` statement here.

=== Updating the database ===

As noted above, any tickets created before a custom field has been defined will not have a value for that field. Here''s a bit of SQL (tested with SQLite) that you can run directly on the Trac database to set an initial value for custom ticket fields. Inserts the default value of ''None'' into a custom field called ''request_source'' for all tickets that have no existing value:

{{{
#!sql
INSERT INTO ticket_custom
   (ticket, name, value)
   SELECT 
      id AS ticket,
      ''request_source'' AS name,
      ''None'' AS value
   FROM ticket 
   WHERE id NOT IN (
      SELECT ticket FROM ticket_custom
   );
}}}

If you added multiple custom fields at different points in time, you should be more specific in the subquery on table {{{ticket}}} by adding the exact custom field name to the query:

{{{
#!sql
INSERT INTO ticket_custom
   (ticket, name, value)
   SELECT 
      id AS ticket,
      ''request_source'' AS name,
      ''None'' AS value
   FROM ticket 
   WHERE id NOT IN (
      SELECT ticket FROM ticket_custom WHERE name = ''request_source''
   );
}}}

----
See also: TracTickets, TracIni',NULL,NULL);
INSERT INTO "wiki" VALUES('TracTimeline',1,1293789825994000,'trac','127.0.0.1','= The Trac Timeline =
[[TracGuideToc]]

The timeline provides a historic view of the project in a single report.

It lists all Trac events that have occurred in chronological order, a
brief description of each event and if applicable, the person responsible for
the change.

The timeline lists these kinds of events:
 * ''''''Wiki page events'''''' — Creation and changes
 * ''''''Ticket events'''''' — Creation and resolution/closing (and optionally other changes)
 * ''''''Source code changes '''''' — Repository check-ins
 * ''''''Milestone '''''' — Milestone completed

Each event entry provides a hyperlink to the specific event in question, who authored the change as well as
a brief excerpt of the actual comment or text, if available.

It is possible to filter the displayed events with the various filters in the option panel:
 * ''''View changes from'''' — the date from which to start displaying events (current date if empty). Events that occurred after this date will not be shown, only those that occurred before that date.
 * ''''and X days back'''' — how many days backwards in time to get events.
 * ''''done by'''' — the author of an event. It accepts a space-separated list of authors for which events should be included. Alternatively, if the author names are prefixed by a "-" character, then the events having those authors will be excluded, and all the others included. Single or double quotes can be used for specifying author names containing space characters. ''''(since 0.12)''''
 * ''''Changesets in all repositories'''' — if you have more than one repository connected to your Trac project, then you can filter the output so events from specific repositories are not shown. ''''(since 0.12)''''
 * ''''Milestones reached'''' — display or hide milestones reached.
 * ''''Opened and closed tickets'''' — display or hide ticket open or close events.
 * ''''Wiki changes'''' — display or hide Wiki change events.

See !TracIni''s [wiki:TracIni#timeline-section "[timeline] section"] for timeline configuration options.

== RSS Support ==

The Timeline module supports subscription using RSS 2.0 syndication. To subscribe to project events, click the orange ''''''XML'''''' icon at the bottom of the page. See TracRss for more information on RSS support in Trac.

----
See also: TracGuide, TracIni, TracWiki, WikiFormatting, TracRss, TracNotification
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracUnicode',1,1293789825994000,'trac','127.0.0.1','= Unicode Support in Trac =
[[TracGuideToc]]

Trac stores all text using UTF-8 encoding, including text in tickets and wiki pages. Internal processing of text uses true Unicode representations.

As such, it supports most (all?) commonly used character encodings.

If your encoding is not UTF-8, you can use [wiki:TracModPython mod_python] to handle it.  For example, if your local encoding is gbk, you can set 
   default_charset = gbk
in trac.ini.

You also must make sure that your [trac:DatabaseBackend database backend] stores its data in UTF-8; otherwise strange things will happen.

To convert your database to UTF-8, the easiest way is to dump the database, convert the dump into UTF-8 and then import the converted dump back into the database.[[BR]]
You can use [http://www.gnu.org/software/libiconv/documentation/libiconv/iconv.1.html iconv] to convert the dump.


== Examples ==

=== Arabic ===
تراك يقوم بحفظ كل الكلمات باستخدام صيغة UTF-8، بما في ذلك الكلمات المستخدمة في صفحات  التيكت والويكي.

=== Bulgarian ===
Българският език работи ли?

=== Česky ===
Čeština v kódování UTF-8, žádný problém.

=== Chinese ===
Traditional: 繁體中文, 漢字測試; Simplified: 简体中文，汉字测试

=== Croatian ===
Ako podržava srpski i slovenski mora podržavati i Hrvatski - čćžšđ ČĆŽŠĐ 

=== English ===
Yes indeed, Trac supports English. Fully.

=== Français ===
Il est possible d''écrire en Français : à, ç, û, ...

=== German ===
Trac-Wiki muß auch deutsche Umlaute richtig anzeigen: ö, ä, ü, Ä, Ö, Ü; und das scharfe ß

=== Greek ===
Τα Ελληνικά υποστηρίζονται επαρκώς επίσης.

=== Hebrew ===
אני יכול לאכול זכוכית וזה לא מזיק לי

=== Hindi ===
अब हिन्दी में।

=== Hungarian ===
Árvíztűrő tükörfúrógép

=== Icelandic ===
Ævar sagði við ömmu sína: Sjáðu hvað ég er stór!

=== Japanese ===
漢字 ひらがな カタカナ ﾊﾝｶｸｶﾅ 日本語試験

=== Korean ===
이번에는 한글로 써보겠습니다. 잘 보이나요? 한글

=== Latvian ===

Latviešu valoda arī strādā!

=== Lithuanian ===
Sudalyvaukime ir mes. Ar veikia lietuviškos raidės? ąčęėįšųūž ĄČĘĖĮŠŲŪŽ Žinoma, kad veikia :)
Kas tie mes?

=== Persian (Farsi) ===
این یک متن فارسی است ولی امکان نوشتن مستقیم فارسی نیست چون حالت متن از راست به چپ و جود ندارد برای فارسی نوشتن باید از HTML استفاده کنید.
{{{
#!html
<div dir="rtl">
}}}
این نمونه یک متن از راست به چپ فارسی است که در HTML نوشته شده تا اعداد 12345 و حروف لاتین ABCDEF در محل خودشان نمایش داده شوند.
{{{
#!html
</div>
}}}

=== Polish ===
Pchnąć w tę łódź jeża lub osiem skrzyń fig; Nocna gżegżółka zawsze dzienną przekuka.

=== Portuguese ===
É possível guardar caracteres especias da língua portuguesa, incluindo o símbolo da moeda européia ''€'', trema ''ü'', crase ''à'', agudos ''áéíóú'', circunflexos ''âêô'', til ''ãõ'', cedilha ''ç'', ordinais ''ªº'', grau ''°¹²³''.

=== Russian ===
Проверка русского языка: кажется работает... И буква "ё" есть...

=== Serbian ===
Podržan, uprkos činjenici da se za njegovo pisanje koriste чак два алфабета.

=== Slovenian ===
Ta suhi škafec pušča vodo že od nekdaj!

=== Spanish ===
Esto es un pequeño texto en Español, donde el veloz murciélago hindú comía cardlllo y kiwi

=== Swedish ===
Räven raskar över isen med luva på.

=== Thai ===
Trac แสดงภาษาไทยได้อย่างถูกต้อง!

=== Ukrainian ===
Перевірка української мови...

=== Urdu ===
ٹریک اردو بھی سپورٹ کرتا ہے۔

=== Vietnamese ===
Viết tiếng Việt cũng được.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracUpgrade',1,1293789826004000,'trac','127.0.0.1','= Upgrade Instructions =
[[TracGuideToc]]

== Instructions ==

Typically, there are seven steps involved in upgrading to a newer version of Trac:

=== 1. Update the Trac Code === #UpdatetheTracCode

Get the new version as described in TracInstall, or your operating system specific procedure.

If you already have a 0.11 version of Trac installed via `easy_install`, it might be easiest to also use `easy_install` to upgrade your Trac installation:

{{{
# easy_install --upgrade Trac==0.12
}}}

If you do a manual (not operating system-specific) upgrade, you should also stop any running Trac servers before the installation. Doing "hot" upgrades is not advised, especially on Windows ([trac:#7265]).

You may also want to remove the pre-existing Trac code by deleting the `trac` directory from the Python `lib/site-packages` directory, or remove Trac `.egg` files from former versions.
The location of the site-packages directory depends on the operating system and the location in which Python was installed. However, the following locations are typical:
 * on Linux: `/usr/lib/python2.X/site-packages`
 * on Windows: `C:\Python2.X\lib\site-packages`
 * on MacOSX: `/Library/Python/2.X/site-packages`

You may also want to remove the Trac `cgi-bin`, `htdocs`, `templates` and `wiki-default` directories that are commonly found in a directory called `share/trac`. (The exact location depends on your platform.)

This cleanup is not mandatory, but makes it easier to troubleshoot issues later on, as you won''t waste your time looking at code or templates from a previous release that are not being used anymore... As usual, make a backup before actually deleting things.

=== 2. Upgrade the Trac Environment === #UpgradetheTracEnvironment

Environment upgrades are not necessary for minor version releases unless otherwise noted. 

After restarting, Trac should show the instances which need a manual upgrade via the automated upgrade scripts to ease the pain. These scripts are run via [TracAdmin trac-admin]:
{{{
trac-admin /path/to/projenv upgrade
}}}

This command will do nothing if the environment is already up-to-date.

Note that a backup of your database will be performed automatically prior to the upgrade. 
This feature is relatively new for the PostgreSQL or MySQL database backends, so if it fails, you will have to backup the database manually. Then, to perform the actual upgrade, run:
{{{
trac-admin /path/to/projenv upgrade --no-backup
}}}

=== 3. Update the Trac Documentation === #UpdatetheTracDocumentation

Every [TracEnvironment Trac environment] includes a copy of the Trac documentation for the installed version. As you probably want to keep the included documentation in sync with the installed version of Trac, [TracAdmin trac-admin] provides a command to upgrade the documentation:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

Note that this procedure will leave your `WikiStart` page intact.

=== 4. Resynchronize the Trac Environment Against the Source Code Repository ===

Each [TracEnvironment Trac environment] must be resynchronized against the source code repository in order to avoid errors such as "[http://trac.edgewall.org/ticket/6120 No changeset ??? in the repository]" while browsing the source through the Trac interface:

{{{
trac-admin /path/to/projenv repository resync ''*''
}}}

=== 5. Refresh static resources ===

If you have set up a web server to give out static resources directly (accessed using the `/chrome/` URL) then you will need to refresh them using the same command:
{{{
trac-admin /path/to/env deploy /deploy/path
}}}
this will extract static resources and CGI scripts (`trac.wsgi`, etc) from new Trac version and its plugins into `/deploy/path`.

Some web browsers cache CSS and Javascript files persistently, so you may need to instruct your users to manually erase the contents of their browser''s cache.

=== 6. Steps specific to a given Trac version  ===
==== Upgrading from Trac 0.11 to Trac 0.12 ====
===== Python 2.3 no longer supported =====
The minimum supported version of python is now 2.4

===== SQLite v3.x required =====
SQLite v2.x is no longer supported. If you still use a Trac database of this format, you''ll need to convert it to SQLite v3.x first. See [trac:PySqlite#UpgradingSQLitefrom2.xto3.x] for details.

===== PySqlite 2 required =====
PySqlite 1.1.x is no longer supported. Please install 2.5.5 or later if possible (see [#Tracdatabaseupgrade Trac database upgrade] below).

===== Multiple Repository Support =====
The latest version includes support for multiple repositories. If you plan to add more repositories to your Trac instance, please refer to TracRepositoryAdmin#Migration.

This may be of interest to users with only one repository, since there''s now a way to avoid the potentially costly resync check at every request.

===== Improved repository synchronization =====
In addition to supporting multiple repositories, there is now a more efficient method for synchronizing Trac and your repositories.

While you can keep the same synchronization as in 0.11 adding the post-commit hook as outlined in TracRepositoryAdmin#Synchronization and TracRepositoryAdmin#ExplicitSync will allow more efficient synchronization and is more or less required for multiple repositories.

Note that if you were using the `trac-post-commit-hook`, ''''you''re strongly advised to upgrade it'''' to the new hook documented in the above references, as the old hook will not work with anything else than the default repository and even for this case, it won''t trigger the appropriate notifications.

===== Authz permission checking =====
The authz permission checking has been migrated to a fine-grained permission policy. If you use authz permissions (aka `[trac] authz_file` and `authz_module_name`), you must add `AuthzSourcePolicy` in front of your permission policies in `[trac] permission_policies`. You must also remove `BROWSER_VIEW`, `CHANGESET_VIEW`, `FILE_VIEW` and `LOG_VIEW` from your global permissions (with `trac-admin $ENV permission remove` or the "Permissions" admin panel).

==== Upgrading from Trac 0.10 to Trac 0.11 ====
===== Site Templates and Styles =====
The templating engine has changed in 0.11 to Genshi, please look at TracInterfaceCustomization for more information.

If you are using custom CSS styles or modified templates in the `templates` directory of the TracEnvironment, you will need to convert them to the Genshi way of doing things. To continue to use your style sheet, follow the instructions at TracInterfaceCustomization#SiteAppearance.

===== Trac Macros, Plugins =====
The Trac macros will need to be adapted, as the old-style wiki-macros are not supported anymore (due to the drop of [trac:ClearSilver] and the HDF); they need to be converted to the new-style macros, see WikiMacros. When they are converted to the new style, they need to be placed into the plugins directory instead and not wiki-macros, which is no longer scanned for macros or plugins.

===== For FCGI/WSGI/CGI users =====
For those who run Trac under the CGI environment, run this command in order to obtain the trac.*gi file:
{{{
trac-admin /path/to/env deploy /deploy/directory/path
}}}

This will create a deploy directory with the following two subdirectories: `cgi-bin` and `htdocs`. Then update your Apache configuration file `httpd.conf` with this new `trac.cgi` location and `htdocs` location.

===== Web Admin plugin integrated =====
If you had the webadmin plugin installed, you can uninstall it as it is part of the Trac code base since 0.11.

=== 7. Restart the Web Server === #RestarttheWebServer

If you are not running [wiki:TracCgi CGI], reload the new Trac code by restarting your web server.

== Known Issues ==

=== parent dir ===
If you use a trac parent env configuration and one of the plugins in one child does not work, none of the children work.

=== Wiki Upgrade ===
`trac-admin` will not delete or remove default wiki pages that were present in a previous version but are no longer in the new version.

=== Trac database upgrade ===

A known issue in some versions of PySqlite (2.5.2-2.5.4) prevents the trac-admin upgrade script from successfully upgrading the database format. It is advised to use either a newer or older version of the sqlite python bindings to avoid this error. For more details see ticket [trac:#9434].

== Upgrading Python ==

Upgrading Python to a newer version will require reinstallation of Python packages: Trac of course; also [http://pypi.python.org/pypi/setuptools easy_install], if you''ve been using that.  Assuming you''re using Subversion, you''ll also need to upgrade the Python bindings for svn.

=== Windows and Python 2.6 ===

If you''ve been using !CollabNet''s Subversion package, you may need to uninstall that in favor of [http://alagazam.net/ Algazam], which has the Python bindings readily available (see TracSubversion).  The good news is, that works with no tweaking.

== Changing Database Backend ==
=== SQLite to PostgreSQL ===

The [http://trac-hacks.org/wiki/SqliteToPgScript sqlite2pg] script on [http://trac-hacks.org trac-hacks.org] has been written to assist in migrating a SQLite database to a PostgreSQL database

== Older Versions ==

For upgrades from versions older than Trac 0.10, refer first to [trac:wiki:0.10/TracUpgrade#SpecificVersions].

-----
See also: TracGuide, TracInstall
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracWiki',1,1293789826004000,'trac','127.0.0.1','= The Trac Wiki Engine =
[[TracGuideToc]]

Trac has a built-in wiki engine, used for text and documentation throughout the system. WikiFormatting is used in [wiki:TitleIndex wiki pages], [wiki:TracTickets tickets], [wiki:TracChangeset check-in log messages], [wiki:TracRoadmap milestone] and [wiki:TracReports report] descriptions.  It allows for formatted text and hyperlinks in and between all Trac modules.

Editing wiki text is easy, using any web browser and a simple [WikiFormatting formatting system], rather than more complex markup languages like HTML.  The reasoning behind its design is that HTML, with its large collection of nestable tags, is too complicated to allow fast-paced editing, and distracts from the actual content of the pages. Note though that Trac also supports [WikiHtml HTML], [WikiRestructuredText reStructuredText] and [http://www.textism.com/tools/textile/ Textile] as alternative markup formats.

The main goal of the wiki is to make editing text easier and ''''encourage'''' people to contribute and annotate text content for a project. Trac also provides a simple toolbar to make formatting text even easier, and supports the [http://universaleditbutton.org/Universal_Edit_Button universal edit button] of your browser.

The wiki itself does not enforce any structure, but rather resembles a stack of empty sheets of paper, where you can organize information and documentation as you see fit, and later reorganize if necessary. 
As contributing to a wiki is essentially building an hypertext, 
general advice regarding HTML authoring apply here as well.
For example, the ''''[http://www.w3.org/Provider/Style Style Guide for online hypertext]'''' explains how to think about the
[http://www.w3.org/Provider/Style/Structure.html overall structure of a work] 
and how to organize information [http://www.w3.org/Provider/Style/WithinDocument.html within each document]. One of the most important tip is “make your HTML page such that you can read it even if you don''t follow any links.”

Learn more about:
 * WikiNewPage creation, which can be configured to start from a [PageTemplates page template]
 * WikiFormatting rules, including advanced topics like WikiMacros and WikiProcessors
 * How to use WikiPageNames and other forms of TracLinks which are used to refer in a precise way to any resource within Trac

If you want to practice editing, please use the SandBox.

Before saving your changes, you can ''''Preview'''' the page or ''''Review the Changes'''' you''ve made.
You can get an automatic preview of the formatting as you type when you activate the ''''Edit Side-by-side'''' mode. '''' There is a [wiki:/TracIni#trac-section configurable delay] between when you make your edit and when the automatic preview will update.''''

Some more information about wikis on the web:
 * A definition of [http://wikipedia.org/wiki/Wiki Wiki], in a famous  wiki encyclopedia
 * The [http://c2.com/cgi/wiki?WikiHistory History] of the original wiki
 * A wiki page explaining [http://www.usemod.com/cgi-bin/mb.pl?WhyWikiWorks why wiki works]

----
See also: TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracWorkflow',1,1293789826004000,'trac','127.0.0.1','= The Trac Ticket Workflow System =
[[TracGuideToc]]

The Trac issue database provides a configurable workflow.

== The Default Ticket Workflow ==
=== Environments upgraded from 0.10 ===
When you run `trac-admin <env> upgrade`, your `trac.ini` will be modified to include a `[ticket-workflow]` section.
The workflow configured in this case is the original workflow, so that ticket actions will behave like they did in 0.10.

Graphically, that looks like this:

[[Image(htdocs:../common/guide/original-workflow.png)]]

There are some significant "warts" in this; such as accepting a ticket sets it to ''assigned'' state, and assigning a ticket sets it to ''new'' state.  Perfectly obvious, right?
So you will probably want to migrate to "basic" workflow; [trac:source:trunk/contrib/workflow/migrate_original_to_basic.py contrib/workflow/migrate_original_to_basic.py] may be helpful.

=== Environments created with 0.11 ===
When a new environment is created, a default workflow is configured in your trac.ini.  This workflow is the basic workflow (described in `basic-workflow.ini`), which is somewhat different from the workflow of the 0.10 releases.

Graphically, it looks like this:

[[Image(htdocs:../common/guide/basic-workflow.png)]]

== Additional Ticket Workflows ==

There are several example workflows provided in the Trac source tree; look in [trac:source:trunk/contrib/workflow contrib/workflow] for `.ini` config sections.  One of those may be a good match for what you want. They can be pasted into the `[ticket-workflow]` section of your `trac.ini` file. However if you have existing tickets then there may be issues if those tickets have states that are not in the new workflow. 

Here are some [http://trac.edgewall.org/wiki/WorkFlow/Examples diagrams] of the above examples.

== Basic Ticket Workflow Customization ==

Note: Ticket "statuses" or "states" are not separately defined. The states a ticket can be in are automatically generated by the transitions defined in a workflow. Therefore, creating a new ticket state simply requires defining a state transition in the workflow that starts or ends with that state.

Create a `[ticket-workflow]` section in `trac.ini`.
Within this section, each entry is an action that may be taken on a ticket. 
For example, consider the `accept` action from `simple-workflow.ini`:
{{{
accept = new,accepted -> accepted
accept.permissions = TICKET_MODIFY
accept.operations = set_owner_to_self
}}}
The first line in this example defines the `accept` action, along with the states the action is valid in (`new` and `accepted`), and the new state of the ticket when the action is taken (`accepted`).
The `accept.permissions` line specifies what permissions the user must have to use this action.
The `accept.operations` line specifies changes that will be made to the ticket in addition to the status change when this action is taken.  In this case, when a user clicks on `accept`, the ticket owner field is updated to the logged in user.  Multiple operations may be specified in a comma separated list.

The available operations are:
 - del_owner -- Clear the owner field.
 - set_owner -- Sets the owner to the selected or entered owner.
   - ''''actionname''''`.set_owner` may optionally be set to a comma delimited list or a single value.
 - set_owner_to_self -- Sets the owner to the logged in user.
 - del_resolution -- Clears the resolution field
 - set_resolution -- Sets the resolution to the selected value.
   - ''''actionname''''`.set_resolution` may optionally be set to a comma delimited list or a single value.
{{{
Example:

resolve_new = new -> closed
resolve_new.name = resolve
resolve_new.operations = set_resolution
resolve_new.permissions = TICKET_MODIFY
resolve_new.set_resolution = invalid,wontfix
}}}
 - leave_status -- Displays "leave as <current status>" and makes no change to the ticket.
''''''Note:'''''' Specifying conflicting operations (such as `set_owner` and `del_owner`) has unspecified results.

{{{
resolve_accepted = accepted -> closed
resolve_accepted.name = resolve
resolve_accepted.permissions = TICKET_MODIFY
resolve_accepted.operations = set_resolution
}}}

In this example, we see the `.name` attribute used.  The action here is `resolve_accepted`, but it will be presented to the user as `resolve`.

For actions that should be available in all states, `*` may be used in place of the state.  The obvious example is the `leave` action:
{{{
leave = * -> *
leave.operations = leave_status
leave.default = 1
}}}
This also shows the use of the `.default` attribute.  This value is expected to be an integer, and the order in which the actions are displayed is determined by this value.  The action with the highest `.default` value is listed first, and is selected by default.  The rest of the actions are listed in order of decreasing `.default` values.
If not specified for an action, `.default` is 0.  The value may be negative.

There are a couple of hard-coded constraints to the workflow.  In particular, tickets are created with status `new`, and tickets are expected to have a `closed` state.  Further, the default reports/queries treat any state other than `closed` as an open state.

While creating or modifying a ticket workfow, `contrib/workflow/workflow_parser.py` may be useful.  It can create `.dot` files that [http://www.graphviz.org GraphViz] understands to provide a visual description of the workflow.

This can be done as follows (your install path may be different).
{{{
cd /var/local/trac_devel/contrib/workflow/
sudo ./showworkflow /srv/trac/PlannerSuite/conf/trac.ini
}}}
And then open up the resulting `trac.pdf` file created by the script (it will be in the same directory as the `trac.ini` file).

An online copy of the workflow parser is available at http://foss.wush.net/cgi-bin/visual-workflow.pl

After you have changed a workflow, you need to restart apache for the changes to take effect. This is important, because the changes will still show up when you run your script, but all the old workflow steps will still be there until the server is restarted.

== Example: Adding optional Testing with Workflow ==

By adding the following to your [ticket-workflow] section of trac.ini you get optional testing.  When the ticket is in new, accepted or needs_work status you can choose to submit it for testing.  When it''s in the testing status the user gets the option to reject it and send it back to needs_work, or pass the testing and send it along to closed.  If they accept it then it gets automatically marked as closed and the resolution is set to fixed.  Since all the old work flow remains, a ticket can skip this entire section.

{{{
testing = new,accepted,needs_work,assigned,reopened -> testing
testing.name = Submit to reporter for testing
testing.permissions = TICKET_MODIFY

reject = testing -> needs_work
reject.name = Failed testing, return to developer

pass = testing -> closed
pass.name = Passes Testing
pass.operations = set_resolution
pass.set_resolution = fixed
}}}

=== How to combine the `tracopt.ticket.commit_updater` with the testing workflow ===

The [[source:trunk/tracopt/ticket/commit_updater.py|tracopt.ticket.commit_updater]] is the optional component that [[TracRepositoryAdmin#trac-post-commit-hook|replaces the old trac-post-commit-hook]], in Trac 0.12.

By default it reacts on some keywords found in changeset message logs like ''''close'''', ''''fix'''' etc. and performs the corresponding workflow action.

If you have a more complex workflow, like the testing stage described above and you want the ''''closes'''' keyword to move the ticket to the ''''testing'''' status instead of the ''''closed'''' status, you need to adapt the code a bit. 

Have a look at the [[0.11/TracWorkflow#How-ToCombineSVNtrac-post-commit-hookWithTestWorkflow|Trac 0.11 recipe]] for the `trac-post-commit-hook`, this will give you some ideas about how to modify the component.

== Example: Add simple optional generic review state ==

Sometimes Trac is used in situations where "testing" can mean different things to different people so you may want to create an optional workflow state that is between the default workflow''s `assigned` and `closed` states, but does not impose implementation-specific details. The only new state you need to add for this is a `reviewing` state. A ticket may then be "submitted for review" from any state that it can be reassigned. If a review passes, you can re-use the `resolve` action to close the ticket, and if it fails you can re-use the `reassign` action to push it back into the normal workflow.

The new `reviewing` state along with its associated `review` action looks like this:

{{{
review = new,assigned,reopened -> reviewing
review.operations = set_owner
review.permissions = TICKET_MODIFY
}}}

Then, to integrate this with the default Trac 0.11 workflow, you also need to add the `reviewing` state to the `accept` and `resolve` actions, like so:

{{{
accept = new,reviewing -> assigned
[…]
resolve = new,assigned,reopened,reviewing -> closed
}}}

Optionally, you can also add a new action that allows you to change the ticket''s owner without moving the ticket out of the `reviewing` state. This enables you to reassign review work without pushing the ticket back to the `new` status.

{{{
reassign_reviewing = reviewing -> *
reassign_reviewing.name = reassign review
reassign_reviewing.operations = set_owner
reassign_reviewing.permissions = TICKET_MODIFY
}}}

The full `[ticket-workflow]` configuration will thus look like this:

{{{
[ticket-workflow]
accept = new,reviewing -> assigned
accept.operations = set_owner_to_self
accept.permissions = TICKET_MODIFY
leave = * -> *
leave.default = 1
leave.operations = leave_status
reassign = new,assigned,reopened -> new
reassign.operations = set_owner
reassign.permissions = TICKET_MODIFY
reopen = closed -> reopened
reopen.operations = del_resolution
reopen.permissions = TICKET_CREATE
resolve = new,assigned,reopened,reviewing -> closed
resolve.operations = set_resolution
resolve.permissions = TICKET_MODIFY
review = new,assigned,reopened -> reviewing
review.operations = set_owner
review.permissions = TICKET_MODIFY
reassign_reviewing = reviewing -> *
reassign_reviewing.operations = set_owner
reassign_reviewing.name = reassign review
reassign_reviewing.permissions = TICKET_MODIFY
}}}

== Example: Limit the resolution options for a new ticket ==

The above resolve_new operation allows you to set the possible resolutions for a new ticket.  By modifying the existing resolve action and removing the new status from before the `->` we then get two resolve actions.  One with limited resolutions for new tickets, and then the regular one once a ticket is accepted.

{{{
resolve_new = new -> closed
resolve_new.name = resolve
resolve_new.operations = set_resolution
resolve_new.permissions = TICKET_MODIFY
resolve_new.set_resolution = invalid,wontfix,duplicate

resolve = assigned,accepted,reopened -> closed
resolve.operations = set_resolution
resolve.permissions = TICKET_MODIFY
}}}

== Advanced Ticket Workflow Customization ==

If the customization above is not extensive enough for your needs, you can extend the workflow using plugins.  These plugins can provide additional operations for the workflow (like code_review), or implement side-effects for an action (such as triggering a build) that may not be merely simple state changes.  Look at [trac:source:trunk/sample-plugins/workflow sample-plugins/workflow] for a few simple examples to get started.

But if even that is not enough, you can disable the !ConfigurableTicketWorkflow component and create a plugin that completely replaces it.

== Adding Workflow States to Milestone Progress Bars ==

If you add additional states to your workflow, you may want to customize your milestone progress bars as well.  See [TracIni#milestone-groups-section TracIni].

== some ideas for next steps ==

New enhancement ideas for the workflow system should be filed as enhancement tickets against the `ticket system` component.  If desired, add a single-line link to that ticket here.  Also look at the [th:wiki:AdvancedTicketWorkflowPlugin] as it provides experimental operations.

If you have a response to the comments below, create an enhancement ticket, and replace the description below with a link to the ticket.

 * the "operation" could be on the nodes, possible operations are:
   * ''''''preops'''''': automatic, before entering the state/activity
   * ''''''postops'''''': automatic, when leaving the state/activity
   * ''''''actions'''''': can be chosen by the owner in the list at the bottom, and/or drop-down/pop-up together with the default actions of leaving the node on one of the arrows.
''''This appears to add complexity without adding functionality; please provide a detailed example where these additions allow something currently impossible to implement.''''

 * operations could be anything: sum up the time used for the activity, or just write some statistical fields like 
''''A workflow plugin can add an arbitrary workflow operation, so this is already possible.''''

 * set_actor should be an operation allowing to set the owner, e.g. as a "preop":
   * either to a role, a person
   * entered fix at define time, or at run time, e.g. out of a field, or select.
''''This is either duplicating the existing `set_owner` operation, or needs to be clarified.''''

 * Actions should be selectable based on the ticket type (different Workflows for different tickets)
''''Look into the [th:wiki:AdvancedTicketWorkflowPlugin]''s `triage` operation.''''

',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiDeletePage',1,1293789826014000,'trac','127.0.0.1','= Deleting a Wiki Page =

Existing wiki pages can be completely deleted using the ''''Delete Page'''' or the ''''Delete this Version'''' buttons at the bottom of the wiki page. These buttons are only visible for users with `WIKI_DELETE` permissions.

''''''Note:'''''' Deleting a wiki page is an irreversible operation.

If you want to delete a page because you actually re-created a new page with the same content but a different name, it is recommended to keep the page and use it as a redirection page instead of completely deleting it, as to not frustrate the visitor with broken links when coming to the site from a search engine. 

In this situation, chances are that you actually wanted to [[WikiNewPage#renaming|rename]] the page instead of doing a copy + delete. 
The ''''Rename'''' operation also offers you the possibility to create a redirection page.
A redirection page is a short page that  contains a link such as  “See !SomeOtherPage”. 

However, deleting specific versions or even complete pages can make sense to remove spam or other abusive submissions.

----
See also: TracWiki, TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiFormatting',1,1293789826014000,'trac','127.0.0.1','= WikiFormatting =
[[TracGuideToc]]

Wiki markup is a core feature in Trac, tightly integrating all the other parts of Trac into a flexible and powerful whole.

Trac has a built in small and powerful wiki rendering engine. This wiki engine implements an ever growing subset of the commands from other popular Wikis,
especially [http://moinmo.in/ MoinMoin] and [trac:WikiCreole].


This page will give you an in-depth explanation of the wiki markup available anywhere WikiFormatting is allowed.

The ''''Cheat sheet'''' below gives you a quick overview for the most common syntax, each link in the ''''Category'''' column will lead you to the more detailed explanation later in this page.

A few other wiki pages present the advanced features of the Trac wiki markup in more depth: 
 - TracLinks covers all the possible ways to refer precisely to any Trac resource or parts thereof,
 - WikiPageNames talks about the various names a wiki page can take, CamelCase or not
 - WikiMacros lists the macros available for generating dynamic content,
 - WikiProcessors and WikiHtml details how parts of the wiki text can be processed in special ways


== Cheat sheet ==

||= ''''''Category'''''' =||= ''''''Wiki Markup'''''' =||= ''''''Display'''''' =||
|-----------------------------------------------------------
{{{#!th rowspan=3
[#FontStyles Font Styles]
}}}
|| `''''''bold''''''`, `''''italic''''`, `''''''''''Wikipedia style''''''''''` || \
|| ''''''bold'''''', ''''italic'''', ''''''''''Wikipedia style'''''''''' ||
|| {{{`monospaced and ''''nowiki''''`}}} || \
|| `monospaced and ''''nowiki''''` ||
|| `**bold**`, `//italic//`, `**//!WikiCreole style//**` || \
|| **bold**, //italic//, **//!WikiCreole style//** ||
|-----------------------------------------------------------
||= [#Headings Headings] =||\
{{{#!td 
 {{{
 == Level 2 ==
 === Level 3 ^([#hn note])^
 }}}
}}}
{{{#!td style="padding-left: 2em"
== Level 2
=== Level 3 ^([#hn note])^
}}}
|-----------------------------------------------------------
||= [#Paragraphs Paragraphs]  =||\
{{{#!td
 {{{
 First paragraph
 on multiple lines.

 Second paragraph.
 }}}
}}}
{{{#!td
First paragraph
on multiple lines.

Second paragraph.
}}}
|-----------------------------------------------------------
||= [#Lists Lists] =||\
{{{#!td
 {{{
 * bullets list
   on multiple paragraphs
   1. nested list
     a. different numbering 
        styles
 }}}
}}}
{{{#!td
* bullets list
  on multiple paragraphs
  1. nested list
    a. different numbering
       styles
}}}
|-----------------------------------------------------------
{{{#!th
[#DefinitionLists Definition Lists]
}}}
{{{#!td
 {{{
  term:: definition on
         multiple paragraphs
 }}}
}}}
{{{#!td
 term:: definition on
        multiple paragraphs
}}}
|-----------------------------------------------------------
||= [#PreformattedText Preformatted Text] =||\
{{{#!td
 {{{
 {{{
 multiple lines, ''''no wiki''''
       white space respected
 }}}
 }}}
}}}
{{{#!td
 {{{
 multiple lines, ''''no wiki''''
       white space respected
 }}}
}}}
|-----------------------------------------------------------
||= [#Blockquotes Blockquotes] =||\
{{{#!td
 {{{
   if there''s some leading
   space the text is quoted
 }}}
}}}
{{{#!td
 if there''s some leading
 space the text is quoted
}}}
|-----------------------------------------------------------
||= [#DiscussionCitations Discussion Citations] =||\
{{{#!td
 {{{
 >> ... (I said)
 > (he replied)
 }}}
}}}
{{{#!td
>>... (I said)
> (he replied)
}}}
|-----------------------------------------------------------
||= [#Tables Tables] =||\
{{{#!td
 {{{
 ||= Table Header =|| Cell ||
 ||||  (details below)  ||
 }}}
}}}
{{{#!td
||= Table Header =|| Cell ||
||||  (details below)  ||
}}}
|-----------------------------------------------------------
{{{#!th rowspan=2
[#Links Links]
}}}
|| `http://trac.edgewall.org` ||\
|| http://trac.edgewall.org ||
|| `WikiFormatting (CamelCase)` ||\
|| WikiFormatting (CamelCase) ||
|-----------------------------------------------------------
{{{#!th rowspan=5
[#TracLinks TracLinks]
}}}
|| `wiki:WikiFormatting`, `wiki:"WikiFormatting"` ||\
|| wiki:WikiFormatting, wiki:"WikiFormatting" ||
|| `#1 (ticket)`, `[1] (changeset)`, `{1} (report)` ||\
|| #1 (ticket), [1] (changeset), {1} (report) ||
|| `ticket:1, ticket:1#comment:1` ||\
|| ticket:1, ticket:1#comment:1 ||
|| `Ticket [ticket:1]`, `[ticket:1 ticket one]` ||\
|| Ticket [ticket:1], [ticket:1 ticket one] ||
|| `Ticket [[ticket:1]]`, `[[ticket:1|ticket one]]` ||\
|| Ticket [[ticket:1]], [[ticket:1|ticket one]] ||
|-----------------------------------------------------------
{{{#!th rowspan=2 
[#SettingAnchors Setting Anchors]
}}}
|| `[=#point1 (1)] First...` ||\
|| [=#point1 (1)] First... ||
|| `see [#point1 (1)]` ||\
|| see [#point1 (1)] ||
|-----------------------------------------------------------
{{{#!th rowspan=2
[#EscapingLinksandWikiPageNames Escaping Markup]
}}}
|| `!'''' doubled quotes` ||\
|| !'''' doubled quotes ||
|| `!wiki:WikiFormatting`, `!WikiFormatting` ||\
|| !wiki:WikiFormatting, !WikiFormatting ||
|-----------------------------------------------------------
||= [#Images Images] =|| `[[Image(`''''link''''`)]]` || [[Image(htdocs:../common/trac_logo_mini.png)]] ||
|-----------------------------------------------------------
{{{#!th rowspan=2
[#Macros Macros]
}}}
|| `[[MacroList(*)]]` ||  ''''(short list of all available macros)''''  ||
|| `[[Image?]]` ||  ''''(help for the Image macro)''''  ||
|-----------------------------------------------------------
||= [#Processors Processors] =||\
{{{#!td
 {{{
 {{{
 #!div style="font-size: 80%"
 Code highlighting:
   {{{#!python
   hello = lambda: "world"
   }}}
 }}}
 }}}
}}}
{{{#!td style="padding-left: 2em"
 {{{
 #!div style="font-size: 80%"
 Code highlighting:
   {{{#!python 
   hello = lambda: "world"
   }}}
 }}}
}}}
|-----------------------------------------------------------
||= [#Comments Comments] =||\
{{{#!td
 {{{
 {{{#!comment
 Note to Editors: ...
 }}}
 }}}
}}}
{{{#!td style="padding-left: 2em"
 {{{#!comment
 Note to Editors: ...
 }}}
}}}
|-----------------------------------------------------------
||= [#Miscellaneous Miscellaneous] =||\
{{{#!td
 {{{
 Line [[br]] break 
 Line \\ break
 ----
 }}}
}}}
{{{#!td style="padding-left: 2em"
Line [[br]] break
Line \\ break
----
}}}


== Font Styles ==

The Trac wiki supports the following font styles:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * ''''''bold'''''', 
     '''''' triple quotes !'''''' 
     can be bold too if prefixed by ! '''''', 
   * ''''italic''''
   * ''''''''''bold italic'''''''''' or ''''italic and
     '''''' italic bold '''''' ''''
   * __underline__
   * {{{monospace}}} or `monospace`
     (hence `{{{` or {{{`}}} quoting)
   * ~~strike-through~~
   * ^superscript^ 
   * ,,subscript,,
   * **also bold**, //italic as well//, 
     and **'''' bold italic **'''' //(since 0.12)//
  }}}
}}}
{{{#!td
 * ''''''bold'''''', 
   '''''' triple quotes !'''''' 
   can be bold too if prefixed by ! '''''', 
 * ''''italic''''
 * ''''''''''bold italic'''''''''' or ''''italic and
   '''''' italic bold '''''' ''''
 * __underline__
 * {{{monospace}}} or `monospace`
   (hence `{{{` or {{{`}}} quoting)
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,
 * **also bold**, //italic as well//, 
   and **'''' bold italic **'''' //(since 0.12)//
}}}

Notes:
 * `{{{...}}}` and {{{`...`}}} commands not only select a monospace font, but also treat their content as verbatim text, meaning that no further wiki processing is done on this text.
 * {{{ ! }}} tells wiki parser to not take the following characters as wiki format, so pay attention to put a space after !, e.g. when ending bold.
 * all the font styles marks have to be used in opening/closing pairs, 
   and they must nest properly (in particular, an `''''` italic can''t be paired 
   with a `//` one, and `''''''` can''t be paired with `**`)


== Headings ==

You can create heading by starting a line with one up to six ''''equal'''' characters ("=")
followed by a single space and the headline text. 

[=#hn]
The headline text can be followed by the same number of "=" characters, but this is no longer mandatory.

Finally, the heading might optionally be followed by an explicit id. If not, an implicit but nevertheless readable id will be generated.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  = Heading =
  == Subheading
  === About ''''this'''' ===
  === Explicit id === #using-explicit-id-in-heading
  == Subheading #sub2
}}}
}}}
{{{#!td style="padding: 1em;"
  {{{
  #!div
  == Subheading
  === About ''''this'''' ===
  === Explicit id === #using-explicit-id-in-heading
  == Subheading #sub2
  }}}
}}}

== Paragraphs ==

A new text paragraph is created whenever two blocks of text are separated by one or more empty lines.

A forced line break can also be inserted, using:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Line 1[[BR]]Line 2
  }}}
  {{{
  Paragraph
  one

  Paragraph 
  two
  }}}
}}}
{{{#!td
  Line 1[[BR]]Line 2

  Paragraph 
  one

  Paragraph 
  two
}}}

== Lists ==

The wiki supports both ordered/numbered and unordered lists.

Example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * Item 1
     * Item 1.1
        * Item 1.1.1   
        * Item 1.1.2
        * Item 1.1.3
     * Item 1.2
   * Item 2
  - items can start at the beginning of a line
    and they can span multiple lines
    - be careful though to continue the line 
    with the appropriate indentation, otherwise
  that will start a new paragraph...
  
   1. Item 1
     a. Item 1.a
     a. Item 1.b
        i. Item 1.b.i
        i. Item 1.b.ii
   1. Item 2
  And numbered lists can also be restarted
  with an explicit number:
   3. Item 3
  }}}
}}}
{{{#!td
 * Item 1
   * Item 1.1
      * Item 1.1.1   
      * Item 1.1.2
      * Item 1.1.3
   * Item 1.2
 * Item 2
- items can start at the beginning of a line
  and they can span multiple lines
  - be careful though to continue the line 
  with the appropriate indentation, otherwise
that will start a new paragraph...

 1. Item 1
   a. Item 1.a
   a. Item 1.b
      i. Item 1.b.i
      i. Item 1.b.ii
 1. Item 2
And numbered lists can also be restarted with an explicit number:
 3. Item 3
}}}


== Definition Lists ==

The wiki also supports definition lists.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   llama::
     some kind of mammal, with hair
   ppython::
     some kind of reptile, without hair
     (can you spot the typo?)
  }}}
}}}
{{{#!td
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)
}}}

Note that you need a space in front of the defined term.


== Preformatted Text ==

Block containing preformatted text are suitable for source code snippets, notes and examples. Use three ''''curly braces'''' wrapped around the text to define a block quote. The curly braces need to be on a separate line.
  
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  def HelloWorld():
      print ''''''Hello World''''''
  }}}
  }}}
}}}
{{{#!td
  {{{
  def HelloWorld():
      print ''''''Hello World''''''
  }}}
}}}

Note that this kind of block is also used for selecting lines that should be processed through WikiProcessors.

== Blockquotes ==

In order to mark a paragraph as blockquote, indent that paragraph with two spaces.

||= Wiki Markup =||= Display =||
{{{#!td
{{{
Paragraph
  This text is a quote from someone else.
}}}
}}}
{{{#!td
Paragraph
  This text is a quote from someone else.
}}}

== Discussion Citations ==

To delineate a citation in an ongoing discussion thread, such as the ticket comment area, e-mail-like citation marks (">", ">>", etc.) may be used.  

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  >> Someone''s original text
  > Someone else''s reply text
  >  - which can be any kind of Wiki markup
  My reply text
  }}}
}}}
{{{#!td
>> Someone''s original text
> Someone else''s reply text
>  - which can be any kind of Wiki markup
My reply text
}}}


== Tables ==
=== Simple Tables ===
Simple tables can be created like this:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||Cell 1||Cell 2||Cell 3||
  ||Cell 4||Cell 5||Cell 6||
  }}}
}}}
{{{#!td style="padding: 2em;"
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}

Cell headings can be specified by wrapping the content in a pair of ''='' characters.
Note that the ''='' characters have to stick to the cell separators, like this:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||        ||= stable =||= latest =||
  ||= 0.10 =||  0.10.5  || 0.10.6dev||
  ||= 0.11 =||  0.11.6  || 0.11.7dev||
  }}}
}}}
{{{#!td style="padding: 2em;"
||        ||= stable =||= latest =||
||= 0.10 =||  0.10.5  || 0.10.6dev||
||= 0.11 =||  0.11.6  || 0.11.7dev||
}}}

Finally, specifying an empty cell means that the next non empty cell will span the empty cells. For example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  || 1 || 2 || 3 ||
  |||| 1-2 || 3 ||
  || 1 |||| 2-3 ||
  |||||| 1-2-3 ||
  }}}
}}}
{{{#!td style="padding: 2em;"
|| 1 || 2 || 3 ||
|||| 1-2 || 3 ||
|| 1 |||| 2-3 ||
|||||| 1-2-3 ||
}}}

Note that if the content of a cell "sticks" to one side of the cell and only one, then the text will be aligned on that side. Example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||=Text =||= Numbers =||
  ||left align    ||        1.0||
  ||  center      ||        4.5||
  ||      right align||     4.5||
  || default alignment ||   2.5||
  ||default||         2.5||
  ||  default ||      2.5||
  || default ||       2.5||
  }}}
}}}
{{{#!td style="padding: 2em;"
||=Text =||= Numbers =||
||left align    ||        1.0||
||  center      ||        4.5||
||      right align||     4.5||
|| default alignment ||   2.5||
||default||         2.5||
||  default ||      2.5||
|| default ||       2.5||
}}}

If contrary to the example above, the cells in your table contain more text, it might be convenient to spread a table row over multiple lines of markup. The `\` character placed at the end of a line after a cell separator tells Trac to not start a new row for the cells on the next line.

||= Wiki Markup =||
{{{#!td
  {{{
  || this is column 1 [http://trac.edgewall.org/newticket new ticket] || \
  || this is column 2 [http://trac.edgewall.org/roadmap the road ahead] || \
  || that''s column 3 and last one ||
  }}}
}}}
|-------------
||= Display =||
{{{#!td style="padding: 2em;"
|| this is column 1 [http://trac.edgewall.org/newticket new ticket] || \
|| this is column 2 [http://trac.edgewall.org/roadmap the road ahead] || \
|| that''s column 3 and last one ||
}}}

=== Complex Tables ===

If the possibilities offered by the simple "pipe"-based markup for tables described above are not enough for your needs, you can create more elaborated tables by using [#Processors-example-tables WikiProcessor based tables].


== Links ==

Hyperlinks are automatically created for WikiPageNames and URLs. !WikiPageLinks can be disabled by prepending an exclamation mark "!" character, such as {{{!WikiPageLink}}}.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  TitleIndex, http://www.edgewall.com/, !NotAlink
  }}}
}}}
{{{#!td
TitleIndex, http://www.edgewall.com/, !NotAlink
}}}

Links can be given a more descriptive title by writing the link followed by a space and a title and all this inside square brackets. 
If the descriptive title is omitted, then the explicit prefix is discarded, unless the link is an external link. This can be useful for wiki pages not adhering to the WikiPageNames convention.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * [http://www.edgewall.com Edgewall Software]
   * [wiki:TitleIndex Title Index] 
   * [wiki:TitleIndex] 
   * [wiki:ISO9000]
  }}}
}}}
{{{#!td
   * [http://www.edgewall.com Edgewall Software]
   * [wiki:TitleIndex Title Index] 
   * [wiki:TitleIndex] 
   * [wiki:ISO9000]
}}}

Following the [trac:WikiCreole] trend, the descriptive title can also be specified by writing the link followed by a pipe (''|'') and a title and all this inside //double// square brackets. 

{{{#!td
  {{{
   * [[http://www.edgewall.com|Edgewall Software]]
   * [[wiki:TitleIndex|Title Index]]
     or even [[TitleIndex|Title Index]]
   * [[wiki:TitleIndex]]
     '''''' but not ![[TitleIndex]]! ''''''
   * [[ISO9000]]
  }}}
}}}
{{{#!td
   * [[http://www.edgewall.com|Edgewall Software]]
   * [[wiki:TitleIndex|Title Index]]
     or even [[TitleIndex|Title Index]]
   * [[wiki:TitleIndex]]
     '''''' but not ![[TitleIndex]]! ''''''
   * [[ISO9000]]
}}}

''''''Note'''''': the [trac:WikiCreole] style for links is quick to type and
certainly looks familiar as it''s the one used on Wikipedia and in many
other wikis. Unfortunately it conflicts with the syntax for [#Macros macros].
So in the rare case when you need to refer to a page which is named after
a macro (typical examples being TitleIndex, InterTrac and InterWiki), 
by writing `[[TitleIndex]]` you will actually call the macro instead of linking
to the page.

== Trac Links ==

Wiki pages can link directly to other parts of the Trac system. Pages can refer to tickets, reports, changesets, milestones, source files and other Wiki pages using the following notations:

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * Tickets: #1 or ticket:1
   * Reports: {1} or report:1
   * Changesets: r1, [1] or changeset:1
   * ...
   * targeting other Trac instances, 
     so called InterTrac links:
     - Tickets: #Trac1 or Trac:ticket:1
     - Changesets: [Trac1] or Trac:changeset:1
  }}}
}}}
{{{#!td
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * ... 
 * targeting other Trac instances, 
   so called InterTrac links:
   - Tickets: #Trac1 or Trac:ticket:1
   - Changesets: [Trac1] or Trac:changeset:1
}}}

There are many more flavors of Trac links, see TracLinks for more in-depth information and a reference for all the default link resolvers.


== Setting Anchors ==

An anchor, or more correctly speaking, an [http://www.w3.org/TR/REC-html40/struct/links.html#h-12.2.1 anchor name] can be added explicitly at any place in the Wiki page, in order to uniquely identify a position in the document:

{{{
[=#point1]
}}}

This syntax was chosen to match the format for explicitly naming the header id [#Headings documented above]. For example:
{{{
== Long title == #title
}}}

It''s also very close to the syntax for the corresponding link to that anchor:
{{{
[#point1]
}}}

Optionally, a label can be given to the anchor:
{{{
[[=#point1 ''''''Point 1'''''']]
}}}

||= Wiki Markup =||= Display =||
|----------------------------------
{{{#!td
  {{{
  [#point2 jump to the second point]

  ...

  Point2:  [=#point2] Jump here
  }}}
}}}
{{{#!td
  [#point2 jump to the second point]

  ...

  Point2:  [=#point2] Jump here
}}}

For more complex anchors (e.g. when a custom title is wanted), one can use the Span macro, e.g. `[[span(id=point2, class=wikianchor, title=Point 2, ^(2)^)]]`.


== Escaping Links and WikiPageNames ==

You may avoid making hyperlinks out of TracLinks by preceding an expression with a single "!" (exclamation mark).

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   !NoHyperLink
   !#42 is not a link
  }}}
}}}
{{{#!td
 !NoHyperLink
 !#42 is not a link
}}}

== Images ==

Urls ending with `.png`, `.gif` or `.jpg` are no longer automatically interpreted as image links, and converted to `<img>` tags.

You now have to use the ![[Image]] macro. The simplest way to include an image is to upload it as attachment to the current page, and put the filename in a macro call like `[[Image(picture.gif)]]`.

In addition to the current page, it is possible to refer to other resources:
 * `[[Image(wiki:WikiFormatting:picture.gif)]]` (referring to attachment on another page)
 * `[[Image(ticket:1:picture.gif)]]` (file attached to a ticket)
 * `[[Image(htdocs:picture.gif)]]` (referring to a file inside the [TracEnvironment environment] `htdocs` directory)
 * `[[Image(source:/trunk/trac/htdocs/trac_logo_mini.png)]]` (a file in repository)

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[Image(htdocs:../common/trac_logo_mini.png)]]
  }}}
}}}
{{{#!td
[[Image(htdocs:../common/trac_logo_mini.png)]]
}}}

See WikiMacros for further documentation on the `[[Image()]]` macro, which has several useful options (`title=`, `link=`, etc.)


== Macros ==

Macros are ''''custom functions'''' to insert dynamic content in a page.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[RecentChanges(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
[[RecentChanges(Trac,3)]]
}}}

See WikiMacros for more information, and a list of installed macros.

The detailed help for a specific macro can also be obtained more directly by appending a "?" to the macro name.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[MacroList?]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
[[MacroList?]]
}}}


== Processors ==

Trac supports alternative markup formats using WikiProcessors. For example, processors are used to write pages in 
[wiki:WikiRestructuredText reStructuredText] or [wiki:WikiHtml HTML]. 

||= Wiki Markup =||= Display =||
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

   [=#Processors-example-html Example 1:] HTML

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{
  #!html
  <h1 style="text-align: right; color: blue">
   HTML Test
  </h1>
  }}}
  }}}
}}}
{{{#!td valign="top"  style="border: 0px"

{{{
#!html
<h1 style="text-align: right; color: blue">HTML Test</h1>
}}}

}}}
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

   [=#Processors-example-highlight Example 2:] Code Highlighting

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{
  #!python
  class Test:
  
      def __init__(self):
          print "Hello World"
  if __name__ == ''__main__'':
     Test()
  }}}
  }}}
}}}
{{{
#!td valign="top"  style="border: 0px"

{{{
#!python
class Test:
    def __init__(self):
        print "Hello World"
if __name__ == ''__main__'':
   Test()
}}}

}}}
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

       [=#Processors-example-tables Example 3:] Complex Tables

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{#!th rowspan=4 align=justify
  With the `#td` and `#th` processors,
  table cells can contain any content:
  }}}
  |----------------
  {{{#!td
    - lists
    - embedded tables
    - simple multiline content
  }}}
  |----------------
  {{{#!td
  As processors can be easily nested, 
  so can be tables:
    {{{#!th
    Example:
    }}}
    {{{#!td style="background: #eef"
    || must be at the third level now... ||
    }}}
  }}}
  |----------------
  {{{#!td
  Even when you don''t have complex markup,
  this form of table cells can be convenient
  to write content on multiple lines.
  }}}
  }}}
}}}
{{{
#!td  valign="top"  style="border: 0px"

  {{{#!th rowspan=4 align=justify
  With the `#td` and `#th` processors,
  table cells can contain any content:
  }}}
  |----------------
  {{{#!td
    - lists
    - embedded tables
    - simple multiline content
  }}}
  |----------------
  {{{#!td
  As processors can be easily nested, 
  so can be tables:
    {{{#!th
    Example:
    }}}
    {{{#!td style="background: #eef"
    || must be at the third level now... ||
    }}}
  }}}
  |----------------
  {{{#!td
  Even when you don''t have complex markup,
  this form of table cells can be convenient
  to write content on multiple lines.
  }}}

}}}

See WikiProcessors for more information.


== Comments ==

Comments can be added to the plain text. These will not be rendered and will not display in any other format than plain text.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Nothing to
  {{{
  #!comment
  Your comment for editors here
  }}}
  see ;-)
  }}}
}}}
{{{#!td
  Nothing to
  {{{
  #!comment
  Your comment for editors here
  }}}
  see ;-)
}}}

== Miscellaneous ==

An horizontal line can be used to separated different parts of your page:

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Four or more dashes will be replaced 
  by an horizontal line (<HR>)
  ----
  See?
  }}}
}}}
{{{#!td
Four or more dashes will be replaced
by an horizontal line (<HR>)
----
See?
}}}
|----------------------------------
{{{#!td
  {{{
  "macro" style [[br]] line break
  }}}
}}}
{{{#!td
"macro" style [[br]] line break
}}}
|----------------------------------
{{{#!td
  {{{
  !WikiCreole style \\ line\\break
  }}}
}}}
{{{#!td
!WikiCreole style \\ line\\break
}}}

',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiHtml',1,1293789826034000,'trac','127.0.0.1','= Using HTML in Wiki Text =

Trac supports inserting HTML into any wiki context, accomplished using the `#!html` [wiki:WikiProcessors WikiProcessor]. 

However a constraint is that this HTML has to be well-formed.
In particular you can''t insert a start tag in an `#!html` block,
resume normal wiki text and insert the corresponding end tag in a 
second `#!html` block. 

Fortunately, for creating styled <div>s, <span>s  or even complex tables
containing arbitrary Wiki text, there''s a powerful alternative: use of
dedicated `#!div`, `#!span` and `#!table`, `#!tr`, `#!td` and `#!th` blocks.

Those Wiki processors are built-in, and does not require installing any additional packages.

== How to use `#!html` == #HowtoUseHTML
To inform the wiki engine that a block of text should be treated as HTML, use the ''''html'''' processor. 

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  #!html
  <h1 style="text-align: right; color: blue">HTML Test</h1>
  }}}
  }}}
}}}
{{{#!td style="padding-left: 2em"
  {{{
  #!html
  <h1 style="text-align: right; color: blue">HTML Test</h1>
  }}}
}}}

Note that Trac sanitizes your HTML code before displaying it. That means that if you try to use potentially dangerous constructs such as Javascript event handlers, those will be removed from the output. 

Since 0.11, the filtering is done by Genshi, and as such, the produced output will be a well-formed fragment of HTML. As noted above in the introduction, this mean that you can no longer use two HTML blocks, one for opening a <div>, the second for closing it, in order to wrap arbitrary wiki text.
The new way to wrap any wiki content inside a <div> is to use the `#!div` Wiki  processor.

== How to use `#!div` and `#!span` == #HowtoUseDivSpan

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  #!div class="important" style="border: 2pt solid; text-align: center"
  This is the ''''only'''' way to go in Trac 0.11
  }}}

  {{{
  #!div class="wikipage" style="border: 1pt dotted"
  Only `wikipage` (same as specifying no class attribute)
  }}}

  {{{
  #!div class="wikipage compact " style="border: 1pt solid"
  Use combined classes (`compact` and `wikipage`)
  }}}

  {{{
  #!div class="compact" style="border: 1pt dotted"
  Only `compact`
  }}}

  {{{
  #!div class="" style="border: 1pt solid"
  No classes (//not// the same as specifying no class attribute...)
  }}}
  }}}
}}}
{{{#!td style="padding-left: 2em"
  {{{
  #!div class="important" style="border: 2pt solid; text-align: center"
  This is the ''''only'''' way to go in Trac 0.11
  }}}

  {{{
  #!div class="wikipage" style="border: 1pt dotted"
  Only `wikipage` (same as specifying no class attribute)
  }}}

  {{{
  #!div class="wikipage compact " style="border: 1pt solid"
  Use combined classes (`compact` and `wikipage`)
  }}}

  {{{
  #!div class="compact" style="border: 1pt dotted"
  Only compact
  }}}

  {{{
  #!div class="" style="border: 1pt solid"
  No classes (//not// the same as specifying no class attribute...)
  }}}
}}}

Note that the contents of a `#!div` block are contained in one or more paragraphs, which have a non-zero top and bottom margin. This leads to the top and bottom padding in the example above. To remove the top and bottom margin of the contents, add the `compact` class to the `#!div`. Another predefined class besides `wikipage` and `compact` is `important`, which can be used to make a paragraph stand out. Extra CSS classes can be defined via the `site/style.css` file for example, see TracInterfaceCustomization#SiteAppearance.

For spans, you should rather use the Macro call syntax:
||= Wiki Markup =||
{{{#!td
  {{{
  Hello 
  [[span(''''WORLD'''' (click [#anchor here]), style=color: green; font-size: 120%, id=anchor)]]!
  }}}
}}}
|---------------------------------------------------------------------------------
||= Display =||
{{{#!td style="padding-left: 2em"
  Hello
  [[span(''''WORLD'''' (click [#anchor here]), style=color: green; font-size: 120%, id=anchor)]]!
}}}

== How to use `#!td` and other table related processors == #Tables

`#!td` or `#!th` processors are actually the main ones, for creating table data and header cells, respectively. The other processors `#!table` and `#!tr` are not required for introducing a table structure, as `#!td` and `#!th` will do this automatically. The `|-` row separator can be used to start a new row when needed, but some may prefer to use a `#!tr` block for that, as this introduces a more formal grouping and offers the possibility to use an extra level of indentation. The main purpose of the `#!table` and `#!tr` is to give the possibility to specify HTML attributes, like ''''style'''' or ''''valign'''' to these elements.

||= Wiki Markup =||= Display =||
{{{#!td
 {{{
 Simple 2x2 table with rich content:
 {{{#!th align=left
  - Left
  - Header
 }}}
 {{{#!th align=left
  - Right
  - Header
 }}}
 |----------------------------------
 {{{#!td style="background: #ffd"
  - Left
  - Content
 }}}
 {{{#!td style="vertical-align: top"
 !RightContent
 }}}
 |----------------------------------
 || ... and this can be mixed||\
 ||with pipe-based cells ||
 {{{#!td colspan=2
 Pick the style the more appropriate
 to your content
 
 See WikiFormatting#Tables for details
 on the pipe-based table syntax.
 }}}
 
 If one needs to add some 
 attributes to the table itself...
 
 {{{
 #!table style="border:none;text-align:center;margin:auto"
   {{{#!tr ====================================
     {{{#!th style="border: none"
     Left header
     }}}
     {{{#!th style="border: none"
     Right header
     }}}
   }}}
   {{{#!tr ==== style="border: 1px dotted grey"
     {{{#!td style="border: none"
     1.1
     }}}
     {{{#!td style="border: none"
     1.2
     }}}
   }}}
   {{{#!tr ====================================
     {{{#!td style="border: none"
     2.1
     }}}
     {{{#!td
     2.2
     }}}
   }}}
 }}}


 }}}
}}}
{{{#!td valign=top
Simple 2x2 table with rich content:
{{{#!th align=left
 - Left
 - Header
}}}
{{{#!th align=left
 - Right
 - Header
}}}
|----------------------------------
{{{#!td style="background: #ffd"
 - Left
 - Content
}}}
{{{#!td style="vertical-align: top"
!RightContent
}}}
|----------------------------------
|| ... and this can be mixed||\
||with pipe-based cells ||
{{{#!td colspan=2
Pick the style the more appropriate
to your content

See WikiFormatting#Tables for details
on the pipe-based table syntax.
}}}

If one needs to add some 
attributes to the table itself...

{{{
#!table style="border:none;text-align:center;margin:auto"
  {{{#!tr ====================================
    {{{#!th style="border: none"
    Left header
    }}}
    {{{#!th style="border: none"
    Right header
    }}}
  }}}
  {{{#!tr ==== style="border: 1px dotted grey"
    {{{#!td style="border: none"
    1.1
    }}}
    {{{#!td style="border: none"
    1.2
    }}}
  }}}
  {{{#!tr ====================================
    {{{#!td style="border: none"
    2.1
    }}}
    {{{#!td
    2.2
    }}}
  }}}
}}}
}}}

Note that by default tables are assigned the "wiki" CSS class, which gives a distinctive look to the header cells and a default border to the table and cells (as can be seen for the tables on this page). By removing this class (`#!table class=""`), one regains complete control on the table presentation. In particular, neither the table, the rows nor the cells will have a border, so this is a more effective way to get such an effect than having to specify a `style="border: no"` parameter everywhere. 

{{{#!table class=""
||= Wiki Markup =||= Display =||
 {{{#!td
  {{{
  {{{#!table class=""
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
  }}}
 }}}
 {{{#!td
  {{{#!table class=""
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
 }}}
}}}

Other classes can be specified as alternatives (remember that you can define your own in [TracInterfaceCustomization#SiteAppearance site/style.css]).

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{#!table class="listing"
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
  }}}
}}}
{{{#!td
  {{{#!table class="listing"
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
}}}


== HTML comments ==
HTML comments are stripped from the output of the `html` processor. To add an HTML comment to a wiki page, use the `htmlcomment` processor (available since 0.12). For example, the following code block:
||= Wiki Markup =||
{{{#!td
  {{{
  {{{
  #!htmlcomment
  This block is translated to an HTML comment.
  It can contain <tags> and &entities; that will not be escaped in the output.
  }}}
  }}}
}}}
|---------------------------------------------------------------------------------
||= Display =||
{{{#!td
  {{{
  <!--
  This block is translated to an HTML comment.
  It can contain <tags> and &entities; that will not be escaped in the output.
  -->
  }}}
}}}

Please note that the character sequence "--" is not allowed in HTML comments, and will generate a rendering error.


== More Information ==

 * http://www.w3.org/ -- World Wide Web Consortium
 * http://www.w3.org/MarkUp/ -- HTML Markup Home Page

----
See also:  WikiProcessors, WikiFormatting, WikiRestructuredText
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiMacros',1,1293789826034000,'trac','127.0.0.1','= Trac Macros =

[[PageOutline]]

Trac macros are plugins to extend the Trac engine with custom ''functions'' written in Python. A macro inserts dynamic HTML data in any context supporting WikiFormatting.

Another kind of macros are WikiProcessors. They typically deal with alternate markup formats and representation of larger blocks of information (like source code highlighting).

== Using Macros ==

Macro calls are enclosed in two ''''square brackets''''. Like Python functions, macros can also have arguments, a comma separated list within parentheses.

=== Getting Detailed Help ===
The list of available macros and the full help can be obtained using the !MacroList macro, as seen [#AvailableMacros below].

A brief list can be obtained via ![[MacroList(*)]] or ![[?]].

Detailed help on a specific macro can be obtained by passing it as an argument to !MacroList, e.g. ![[MacroList(MacroList)]], or, more conveniently, by appending a question mark (?) to the macro''s name, like in ![[MacroList?]].



=== Example ===

A list of 3 most recently changed wiki pages starting with ''Trac'':

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[RecentChanges(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em;"
[[RecentChanges(Trac,3)]]
}}}
|-----------------------------------
{{{#!td
  {{{
  [[RecentChanges?(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em;"
[[RecentChanges?(Trac,3)]]
}}}
|-----------------------------------
{{{#!td
  {{{
  [[?]]
  }}}
}}}
{{{#!td style="padding-left: 2em; font-size: 80%"
[[?]]
}}}

== Available Macros ==

''''Note that the following list will only contain the macro documentation if you''ve not enabled `-OO` optimizations, or not set the `PythonOptimize` option for [wiki:TracModPython mod_python].''''

[[MacroList]]

== Macros from around the world ==

The [http://trac-hacks.org/ Trac Hacks] site provides a wide collection of macros and other Trac [TracPlugins plugins] contributed by the Trac community. If you''re looking for new macros, or have written one that you''d like to share with the world, please don''t hesitate to visit that site.

== Developing Custom Macros ==
Macros, like Trac itself, are written in the [http://python.org/ Python programming language] and are developed as part of TracPlugins.

For more information about developing macros, see the [trac:TracDev development resources] on the main project site.


Here are 2 simple examples showing how to create a Macro with Trac 0.11. 

Also, have a look at [trac:source:tags/trac-0.11/sample-plugins/Timestamp.py Timestamp.py] for an example that shows the difference between old style and new style macros and at the [trac:source:tags/trac-0.11/wiki-macros/README macros/README] which provides a little more insight about the transition.

=== Macro without arguments ===
To test the following code, you should saved it in a `timestamp_sample.py` file located in the TracEnvironment''s `plugins/` directory.
{{{
#!python
from datetime import datetime
# Note: since Trac 0.11, datetime objects are used internally

from genshi.builder import tag

from trac.util.datefmt import format_datetime, utc
from trac.wiki.macros import WikiMacroBase

class TimeStampMacro(WikiMacroBase):
    """Inserts the current time (in seconds) into the wiki page."""

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, text):
        t = datetime.now(utc)
        return tag.b(format_datetime(t, ''%c''))
}}}

=== Macro with arguments ===
To test the following code, you should saved it in a `helloworld_sample.py` file located in the TracEnvironment''s `plugins/` directory.
{{{
#!python
from genshi.core import Markup

from trac.wiki.macros import WikiMacroBase

class HelloWorldMacro(WikiMacroBase):
    """Simple HelloWorld macro.

    Note that the name of the class is meaningful:
     - it must end with "Macro"
     - what comes before "Macro" ends up being the macro name

    The documentation of the class (i.e. what you''re reading)
    will become the documentation of the macro, as shown by
    the !MacroList macro (usually used in the WikiMacros page).
    """

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, text, args):
        """Return some output that will be displayed in the Wiki content.

        `name` is the actual name of the macro (no surprise, here it''ll be
        `''HelloWorld''`),
        `text` is the text enclosed in parenthesis at the call of the macro.
          Note that if there are ''''no'''' parenthesis (like in, e.g.
          [[HelloWorld]]), then `text` is `None`.
        `args` are the arguments passed when HelloWorld is called using a
        `#!HelloWorld` code block.
        """
        return ''Hello World, text = %s, args = %s'' % \
            (Markup.escape(text), Markup.escape(repr(args)))

}}}

Note that `expand_macro` optionally takes a 4^th^ parameter ''''`args`''''. When the macro is called as a [WikiProcessors WikiProcessor], it''s also possible to pass `key=value` [WikiProcessors#UsingProcessors processor parameters]. If given, those are stored in a dictionary and passed in this extra `args` parameter. On the contrary, when called as a macro, `args` is  `None`. (''''since 0.12'''').

For example, when writing:
{{{
{{{#!HelloWorld style="polite"
<Hello World!>
}}}

{{{#!HelloWorld
<Hello World!>
}}}

[[HelloWorld(<Hello World!>)]]
}}}
One should get:
{{{
Hello World, text = <Hello World!> , args = {''style'': u''polite''}
Hello World, text = <Hello World!> , args = {}
Hello World, text = <Hello World!> , args = None
}}}

Note that the return value of `expand_macro` is ''''''not'''''' HTML escaped. Depending on the expected result, you should escape it by yourself (using `return Markup.escape(result)`) or, if this is indeed HTML, wrap it in a Markup object (`return Markup(result)`) with `Markup` coming from Genshi, (`from genshi.core import Markup`).  

You can also recursively use a wiki Formatter (`from trac.wiki import Formatter`) to process the `text` as wiki markup, for example by doing:

{{{
#!python
from genshi.core import Markup
from trac.wiki.macros import WikiMacroBase
from trac.wiki import Formatter
import StringIO

class HelloWorldMacro(WikiMacroBase):
	def expand_macro(self, formatter, name, text, args):
		text = "whatever ''''''wiki'''''' markup you want, even containing other macros"
		# Convert Wiki markup to HTML, new style
		out = StringIO.StringIO()
		Formatter(self.env, formatter.context).format(text, out)
		return Markup(out.getvalue())
}}}
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiNewPage',1,1293789826044000,'trac','127.0.0.1','= Steps to Add a New Wiki Page =
[[TracGuideToc]]

 1. Choose a name for your new page. See WikiPageNames for naming conventions.
 2. Edit an existing page (or any other resources that support WikiFormatting and add a [TracLinks link] to your new page. Save your changes.
 3. Follow the link you created to take you to the new page. Trac will display a "describe !PageName here" message.
 4. Click the "Edit this page" button to edit and add content to your new page. Save your changes.
 5. All done. Your new page is published.

You can skip the second step by entering the CamelCase name of the page in the quick-search field at the top of the page. But note that the page will effectively be "orphaned" unless you link to it from somewhere else.

== Rename a page #renaming

While picking up good WikiPageNames is important, you can always change your mind
and rename the page later.

You''ll need to ask for the WIKI_RENAME permission in order to be allowed to do this.
When renaming a page, you''ll be offered the possibility to create a redirection page, so that links pointing to the old location will not be left dangling.

----
See also: TracWiki, PageTemplates, WikiFormatting, TracLinks, WikiDeletePage
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiPageNames',1,1293789826044000,'trac','127.0.0.1','= Wiki Page Names =
[[TracGuideToc]]

Wiki page names commonly use the CamelCase convention. Within wiki text, any word in CamelCase automatically becomes a hyperlink to the wiki page with that name.

CamelCase page names must follow these rules:

 1. The name must consist of ''''''alphabetic characters only''''''. No digits, spaces, punctuation, or underscores are allowed.
 2. A name must have at least two capital letters.
 3. The first character must be capitalized.
 4. Every capital letter must be followed by one or more lower-case letters. 
 5. The use of slash ( / ) is permitted in page names (possibly representing a hierarchy).

If you want to create a wiki page that doesn''t follow CamelCase rules you can use the following syntax:
{{{
 * [wiki:Wiki_page], [wiki:ISO9000],
   and with a label: [wiki:ISO9000 ISO 9000 standard]
 * [wiki:"Space Matters"]
   and with a label: [wiki:"Space Matters" all about white space]
 * or simply: ["WikiPageName"]s
 * even better, the new [[WikiCreole link style]]
   and with a label: [[WikiCreole link style|WikiCreole style links]]
}}}

This will be rendered as:
 * [wiki:Wiki_page], [wiki:ISO9000],
   and with a label: [wiki:ISO9000 ISO 9000 standard]
 * [wiki:"Space Matters"] ''''(that page name embeds space characters)''''
   and with a label: [wiki:"Space Matters" all about white space]
 * or simply: ["WikiPageName"]s ''''(old !MoinMoin''s internal free links style)''''
 * even better, the new [[WikiCreole link style]]
   and with a label: [[WikiCreole link style|WikiCreole style links]]
   ''''(since 0.12, also now adopted by !MoinMoin)''''


Starting with Trac 0.11, it''s also possible to link to a specific ''''version'''' of a Wiki page, as you would do for a specific version of a file, for example: WikiStart@1.

You can also prevent a CamelCase name to be interpreted as a TracLinks, by quoting it. See TracLinks#EscapingLinks.

As visible in the example above, one can also append an anchor to a Wiki page name, in order to link to a specific section within that page. The anchor can easily be seen by hovering the mouse over a section heading, then clicking on the [[html(&para;)]] sign that appears at its end. The anchor is usually generated automatically, but it''s also possible to specify it explicitly: see WikiFormatting#using-explicit-id-in-heading.
----
See also: WikiNewPage, WikiFormatting, TracWiki, TracLinks
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiProcessors',1,1293789826044000,'trac','127.0.0.1','= Wiki Processors =

Processors are WikiMacros designed to provide alternative markup formats for the [TracWiki Wiki engine]. Processors can be thought of as ''''macro functions to process user-edited text''''. 

Wiki processors can be used in any Wiki text throughout Trac,
for various different purposes, like:
 - [#CodeHighlightingSupport syntax highlighting] or for rendering text verbatim,
 - rendering [#HTMLrelated Wiki markup inside a context], 
   like inside <div> blocks or <span> or within <td> or <th> table cells,
 - using an alternative markup syntax, like [wiki:WikiHtml raw HTML] and
   [wiki:WikiRestructuredText Restructured Text],
   or [http://www.textism.com/tools/textile/ textile]


== Using Processors ==

To use a processor on a block of text, first delimit the lines using
a Wiki ''''code block'''':
{{{
{{{
The lines
that should be processed...
}}}
}}}

Immediately after the `{{{` or on the line just below, 
add `#!` followed by the ''''processor name''''.

{{{
{{{
#!processorname
The lines
that should be processed...
}}}
}}}

This is the "shebang" notation, familiar to most UNIX users.

Besides their content, some Wiki processors can also accept ''''parameters'''',
which are then given as `key=value` pairs after the processor name, 
on the same line. If `value` has to contain space, as it''s often the case for
the style parameter, a quoted string can be used (`key="value with space"`).

As some processors are meant to process Wiki markup, it''s quite possible to
''''nest'''' processor blocks.
You may want to indent the content of nested blocks for increased clarity,
this extra indentation will be ignored when processing the content.


== Examples ==

||= Wiki Markup =||= Display =||
{{{#!td colspan=2 align=center style="border: none"

                __Example 1__: Inserting raw HTML
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
{{{
{{{
<h1 style="color: grey">This is raw HTML</h1>
}}}
}}}
}}}
{{{#!td valign=top style="border: none; padding-left: 2em"
{{{
#!html
<h1 style="color: grey">This is raw HTML</h1>
}}}
}}}
|-----------------------------------------------------------------
{{{#!td colspan=2 align=center style="border: none"

     __Example 2__: Highlighted Python code in a <div> block with custom style
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
  {{{
  {{{#!div style="background: #ffd; border: 3px ridge"

  This is an example of embedded "code" block:

    {{{
    #!python
    def hello():
        return "world"
    }}}

  }}}
  }}}
}}}
{{{#!td valign=top style="border: none; padding: 1em"
  {{{#!div style="background: #ffd; border: 3px ridge"

  This is an example of embedded "code" block:

    {{{
    #!python
    def hello():
        return "world"
    }}}

  }}}
}}}
|-----------------------------------------------------------------
{{{#!td colspan=2 align=center style="border: none"

     __Example 3__: Searching tickets from a wiki page, by keywords.
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
  {{{
  {{{
  #!html
  <form action="/query" method="get">
  <input type="text" name="keywords" value="~" size="30">
  <input type="submit" value="Search by Keywords">
  <!-- To control what fields show up use hidden fields
  <input type="hidden" name="col" value="id">
  <input type="hidden" name="col" value="summary">
  <input type="hidden" name="col" value="status">
  <input type="hidden" name="col" value="milestone">
  <input type="hidden" name="col" value="version">
  <input type="hidden" name="col" value="owner">
  <input type="hidden" name="col" value="priority">
  <input type="hidden" name="col" value="component">
  -->
  </form>
  }}}
  }}}
}}}
{{{#!td valign=top style="border: none; padding: 1em"
  {{{
  #!html
  <form action="/query" method="get">
  <input type="text" name="keywords" value="~" size="30">
  <input type="submit" value="Search by Keywords">
  <!-- To control what fields show up use hidden fields
  <input type="hidden" name="col" value="id">
  <input type="hidden" name="col" value="summary">
  <input type="hidden" name="col" value="status">
  <input type="hidden" name="col" value="milestone">
  <input type="hidden" name="col" value="version">
  <input type="hidden" name="col" value="owner">
  <input type="hidden" name="col" value="priority">
  <input type="hidden" name="col" value="component">
  -->
  </form>
  }}}
}}}
== Available Processors ==

The following processors are included in the Trac distribution:

 `#!default` :: Present the text verbatim in a preformatted text block. 
                This is the same as specifying ''''no'''' processor name
                (and no `#!`)
 `#!comment` :: Do not process the text in this section (i.e. contents exist
                only in the plain text - not in the rendered page).

=== HTML related ===

 `#!html`        :: Insert custom HTML in a wiki page.
 `#!htmlcomment` :: Insert an HTML comment in a wiki page (''''since 0.12'''').

Note that `#!html` blocks have to be ''''self-contained'''',
i.e. you can''t start an HTML element in one block and close it later in a second block. Use the following processors for achieving a similar effect. 

  `#!div` :: Wrap an arbitrary Wiki content inside a <div> element
             (''''since 0.11'''').
 `#!span` :: Wrap an arbitrary Wiki content inside a <span> element 
             (''''since 0.11''''). 

 `#!td` :: Wrap an arbitrary Wiki content inside a <td> element (''''since 0.12'''')
 `#!th` :: Wrap an arbitrary Wiki content inside a <th> element (''''since 0.12'''') 
 `#!tr` :: Can optionally be used for wrapping `#!td` and `#!th` blocks,
       either for specifying row attributes of better visual grouping
       (''''since 0.12'''')

See WikiHtml for example usage and more details about these processors.

=== Other Markups ===

     `#!rst` :: Trac support for Restructured Text. See WikiRestructuredText.
 `#!textile` :: Supported if [http://cheeseshop.python.org/pypi/textile Textile] 
                is installed. 
                See [http://www.textism.com/tools/textile/ a Textile reference].


=== Code Highlighting Support ===

Trac includes processors to provide inline syntax highlighting:
 `#!c` (C), `#!cpp` (C++), `#!python` (Python), `#!perl` (Perl), 
 `#!ruby` (Ruby), `#!php` (PHP), `#!asp` (ASP), `#!java` (Java), 
 `#!js` (Javascript), `#!sql (SQL)`, `#!xml` (XML or HTML),
 `#!sh` (!Bourne/Bash shell), etc.

Trac relies on external software packages for syntax coloring,
like [http://pygments.org Pygments]. 

See TracSyntaxColoring for information about which languages
are supported and how to enable support for more languages.

Note also that by using the MIME type as processor, it is possible to syntax-highlight the same languages that are supported when browsing source code. For example, you can write:
{{{
{{{
#!text/html
<h1>text</h1>
}}}
}}}

The result will be syntax highlighted HTML code:
{{{
#!text/html
<h1>text</h1>
}}}

The same is valid for all other [TracSyntaxColoring#SyntaxColoringSupport mime types supported].


For more processor macros developed and/or contributed by users, visit: 
 * [trac:ProcessorBazaar]
 * [trac:MacroBazaar]
 * [th:WikiStart Trac Hacks] community site

Developing processors is no different from Wiki macros. 
In fact they work the same way, only the usage syntax differs. 
See WikiMacros#DevelopingCustomMacros for more information.


----
See also: WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiRestructuredText',1,1293789826054000,'trac','127.0.0.1','= reStructuredText Support in Trac =

Trac supports using ''''reStructuredText'''' (RST) as an alternative to wiki markup in any context WikiFormatting is used.

From the reStucturedText webpage:
 "''''reStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser   system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating  simple web pages, and for standalone documents. reStructuredText is designed for extensibility for  specific application domains. ''''"

If you want a file from your Subversion repository be displayed as reStructuredText in Trac''s source browser, set `text/x-rst` as value for the Subversion property `svn:mime-type`. See [trac:source:/trunk/INSTALL this example].

=== Requirements ===
Note that to activate RST support in Trac, the python docutils package must be installed. 
If not already available on your operating system, you can download it at the [http://docutils.sourceforge.net/rst.html RST Website].

Install docutils using `easy_install docutils`. Do not use the package manager of your OS (e.g. `apt-get install python-docutils`), because Trac will not find docutils then.

=== More information on RST ===

 * reStructuredText Website -- http://docutils.sourceforge.net/rst.html
 * RST Quick Reference -- http://docutils.sourceforge.net/docs/rst/quickref.html

----

== Using RST in Trac ==
To specify that a block of text should be parsed using RST, use the ''''rst'''' processor. 

=== TracLinks in reStructuredText ===

 * Trac provides a custom RST directive `trac::` to allow TracLinks from within RST text.

 Example:
 {{{
 {{{
 #!rst
 This is a reference to |a ticket|

 .. |a ticket| trac:: #42
 }}}
 }}}

 * Trac allows an even easier way of creating TracLinks in RST, using the custom `:trac:` role.

 Example:
 {{{
 {{{
 #!rst
 This is a reference to ticket `#12`:trac:

 To learn how to use Trac, see `TracGuide`:trac:
 }}}
 }}}

 For a complete example of all uses of the `:trac:` role, please see WikiRestructuredTextLinks. 


=== Syntax highlighting in reStructuredText ===

There is a directive for doing TracSyntaxColoring in RST as well. The directive is called
code-block

Example

{{{
{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}
}}}

Will result in the below.

{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}

=== Wiki Macros in reStructuredText ===

For doing [WikiMacros Wiki Macros] in RST you use the same directive as for syntax highlighting i.e code-block.

=== Wiki Macro Example ===

{{{
{{{
#!rst

.. code-block:: RecentChanges

   Trac,3

}}}
}}}

Will result in the below:

     [[RecentChanges(Trac,3)]]

Or a more concise Wiki Macro like syntax is also available:

{{{
{{{
#!rst

:code-block:`RecentChanges:Trac,3`
}}}
}}}

=== Bigger RST Example ===
The example below should be mostly self-explanatory:
{{{
#!html
<pre class="wiki">{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket `#42`:trac:.

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}</pre>
}}}


Results in:
{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket `#42`:trac:.

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}


----
See also: WikiRestructuredTextLinks, WikiProcessors, WikiFormatting
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiRestructuredTextLinks',1,1293789826054000,'trac','127.0.0.1','= TracLinks in reStructuredText =

This document illustrates how to use the `:trac:` role in reStructuredText. The page is written like:

{{{
{{{
#!rst 
Examples:

 * Tickets: :trac:`#1` or :trac:`ticket:1`
 * Ticket comments: :trac:`comment:ticket:1:2`
 * Reports: :trac:`{1}` or :trac:`report:1`
 * Changesets: :trac:`r1`, :trac:`[1]` or :trac:`changeset:1`
 * Revision log: :trac:`r1:3`, :trac:`[1:3]` or :trac:`log:@1:3`, :trac:`log:trunk@1:3`
 * Diffs (since version 0.10): :trac:`diff:@20:30`, :trac:`diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` or :trac:`diff:trunk/trac@3538//sandbox/vc-refactoring/trac@3539`
 * Wiki pages: :trac:`CamelCase` or :trac:`wiki:CamelCase`
 * Milestones: :trac:`milestone:1.0`
 * Attachment: :trac:`attachment:ticket:944:attachment.1073.diff`
 * Files: :trac:`source:trunk/COPYING`
 * A specific file revision: :trac:`source:/trunk/COPYING@200`
 * A particular line of a specific file revision: :trac:`source:/trunk/COPYING@200#L25`

An explicit label can be specified, separated from the link by a space:

 * See :trac:`#1 ticket 1` and the :trac:`source:trunk/COPYING license`.
}}}
}}}

Provided you have docutils installed, the above block will render as:
----
{{{
#!rst 
Examples:

 * Tickets: :trac:`#1` or :trac:`ticket:1`
 * Ticket comments: :trac:`comment:ticket:1:2`
 * Reports: :trac:`{1}` or :trac:`report:1`
 * Changesets: :trac:`r1`, :trac:`[1]` or :trac:`changeset:1`
 * Revision log: :trac:`r1:3`, :trac:`[1:3]` or :trac:`log:@1:3`, :trac:`log:trunk@1:3`
 * Diffs (since version 0.10): :trac:`diff:@20:30`, :trac:`diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` or :trac:`diff:trunk/trac@3538//sandbox/vc-refactoring/trac@3539`
 * Wiki pages: :trac:`CamelCase` or :trac:`wiki:CamelCase`
 * Milestones: :trac:`milestone:1.0`
 * Attachment: :trac:`attachment:ticket:944:attachment.1073.diff`
 * Files: :trac:`source:trunk/COPYING`
 * A specific file revision: :trac:`source:/trunk/COPYING@200`
 * A particular line of a specific file revision: :trac:`source:/trunk/COPYING@200#L25`

An explicit label can be specified, separated from the link by a space:

 * See :trac:`#1 ticket 1` and the :trac:`source:trunk/COPYING license`.
}}}
----

Note also that any of the above could have been written using substitution references and the `trac::` directive:
{{{
{{{
#!rst
See |ticket123|.

 .. |ticket123| trac:: ticket:123 this ticket
}}}
}}}

This renders as:
----

{{{
#!rst
See |ticket123|.

 .. |ticket123| trac:: ticket:123 this ticket
}}}

----
See also: WikiRestructuredText, TracLinks',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiStart',1,1293789826064000,'trac','127.0.0.1','= Welcome to Trac 0.12.1 =

Trac is a ''''''minimalistic'''''' approach to ''''''web-based'''''' management of
''''''software projects''''''. Its goal is to simplify effective tracking and handling of software issues, enhancements and overall progress.

All aspects of Trac have been designed with the single goal to 
''''''help developers write great software'''''' while ''''''staying out of the way''''''
and imposing as little as possible on a team''s established process and
culture.

As all Wiki pages, this page is editable, this means that you can
modify the contents of this page simply by using your
web-browser. Simply click on the "Edit this page" link at the bottom
of the page. WikiFormatting will give you a detailed description of
available Wiki formatting commands.

"[wiki:TracAdmin trac-admin] ''''yourenvdir'''' initenv" created
a new Trac environment, containing a default set of wiki pages and some sample
data. This newly created environment also contains 
[wiki:TracGuide documentation] to help you get started with your project.

You can use [wiki:TracAdmin trac-admin] to configure
[http://trac.edgewall.org/ Trac] to better fit your project, especially in
regard to ''''components'''', ''''versions'''' and ''''milestones''''. 


TracGuide is a good place to start.

Enjoy! [[BR]]
''''The Trac Team''''

== Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://trac.edgewall.org/ The Trac project] -- Trac Open Source Project
 * [http://trac.edgewall.org/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.
',NULL,NULL);
INSERT INTO "wiki" VALUES('SandBox/Graphviz',1,1293876840661000,'admin','10.0.2.2','{{{
#!graphviz


digraph G {
 ranksep=3;
 ratio=auto;
"1" [ label="02f5daf56e299b8a8ecea892",shape="hexagon",style="filled",color="green" ];
"189E" [ label="ca5af2",shape="box",style="filled",color="grey" ];
"790E" [ label="b4dfef6",shape="box",style="filled",color="grey" ];
"2" [ label="171192dc1f8e6ea551548a910c00",shape="hexagon",style="filled",color="green" ];
"191E" [ label="629e42",shape="box",style="filled",color="grey" ];
"3" [ label="6bce02baf91781a831e1b95",shape="hexagon",style="filled",color="green" ];
"193E" [ label="1c08373",shape="box",style="filled",color="grey" ];
"4" [ label="6236a67933a619a6a3d48",shape="hexagon",style="filled",color="green" ];
"195E" [ label="be8f4199f",shape="box",style="filled",color="grey" ];
"5" [ label="50962c93b4cb293f5beb59eb",shape="hexagon",style="filled",color="green" ];
"197E" [ label="be8f4199f",shape="box",style="filled",color="grey" ];
"6" [ label="05d4b1ed6a6135eec3abd3f2",shape="hexagon",style="filled",color="green" ];
"199E" [ label="",shape="box",style="filled",color="grey" ];
"7" [ label="08769f73d31c1a99be2d9363f",shape="hexagon",style="filled",color="green" ];
"201E" [ label="629e42",shape="box",style="filled",color="grey" ];
"8" [ label="a6a196a504c3a7657d1fa41",shape="hexagon",style="filled",color="green" ];
"203E" [ label="cd856f",shape="box",style="filled",color="grey" ];
"9" [ label="837ebf4bde22e1f1535cb662",shape="hexagon",style="filled",color="green" ];
"725E" [ label="d0eb84",shape="box",style="filled",color="grey" ];
"785E" [ label="dd2ba36",shape="box",style="filled",color="grey" ];
"10" [ label="5f865c374cb3fe976dd376b8",shape="hexagon",style="filled",color="green" ];
"205E" [ label="23ad1",shape="box",style="filled",color="grey" ];
"11" [ label="8be752bc95d436a90493bec9",shape="hexagon",style="filled",color="green" ];
"207E" [ label="ee91c97828",shape="box",style="filled",color="grey" ];
"12" [ label="969a58db14386cb9d2f51ec",shape="hexagon",style="filled",color="green" ];
"209E" [ label="7c7c",shape="box",style="filled",color="grey" ];
"13" [ label="da24f74aad2ff519009d1f38c",shape="hexagon",style="filled",color="green" ];
"211E" [ label="460aed10cc9",shape="box",style="filled",color="grey" ];
"14" [ label="3124d3a6ed3381a6341c6",shape="hexagon",style="filled",color="green" ];
"213E" [ label="bbe0a8f93dc1",shape="box",style="filled",color="grey" ];
"15" [ label="71512ec7d43f958f2b6da",shape="hexagon",style="filled",color="green" ];
"215E" [ label="3f0a2b4eb62f",shape="box",style="filled",color="grey" ];
"16" [ label="3828a2c682419423cf",shape="hexagon",style="filled",color="green" ];
"727E" [ label="2",shape="box",style="filled",color="grey" ];
"784E" [ label="",shape="box",style="filled",color="grey" ];
"17" [ label="aa868f65c34cdb64f1fad19a",shape="hexagon",style="filled",color="green" ];
"217E" [ label="3089106e3b",shape="box",style="filled",color="grey" ];
"787E" [ label="1aaaab063",shape="box",style="filled",color="grey" ];
"18" [ label="dca32af03698c988b22",shape="hexagon",style="filled",color="green" ];
"219E" [ label="eb8",shape="box",style="filled",color="grey" ];
"19" [ label="d8f4a9e463a1e89217f",shape="hexagon",style="filled",color="green" ];
"221E" [ label="4c6c8c",shape="box",style="filled",color="grey" ];
"20" [ label="c96782ef56711c5d6a3f69",shape="hexagon",style="filled",color="green" ];
"223E" [ label="6a8f5bafb1",shape="box",style="filled",color="grey" ];
"21" [ label="4f04c39708f",shape="hexagon",style="filled",color="green" ];
"225E" [ label="a49284e9",shape="box",style="filled",color="grey" ];
"22" [ label="97284d4c3a5d499853f0e",shape="hexagon",style="filled",color="green" ];
"227E" [ label="53069e384a2",shape="box",style="filled",color="grey" ];
"792E" [ label="79b69c612",shape="box",style="filled",color="grey" ];
"23" [ label="c4d32527b670afb370d643",shape="hexagon",style="filled",color="green" ];
"231E" [ label="e851f5ddd920",shape="box",style="filled",color="grey" ];
"24" [ label="5e9156098c064",shape="hexagon",style="filled",color="green" ];
"233E" [ label="",shape="box",style="filled",color="grey" ];
"25" [ label="3d475ea3aeca51b60212dd",shape="hexagon",style="filled",color="green" ];
"235E" [ label="4280833ef80172",shape="box",style="filled",color="grey" ];
"26" [ label="966d271c22e75c7538",shape="hexagon",style="filled",color="green" ];
"237E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"27" [ label="b630e1af6ae1997f0e8ba750",shape="hexagon",style="filled",color="green" ];
"239E" [ label="bb828f1a326",shape="box",style="filled",color="grey" ];
"783E" [ label="499f6985db294c",shape="box",style="filled",color="grey" ];
"28" [ label="ebd8ffc2ac3a90efb8af9",shape="hexagon",style="filled",color="green" ];
"241E" [ label="1ebeec",shape="box",style="filled",color="grey" ];
"791E" [ label="c0b727",shape="box",style="filled",color="grey" ];
"29" [ label="69fdd1a1f4768c5efe7",shape="hexagon",style="filled",color="green" ];
"243E" [ label="35b8742610",shape="box",style="filled",color="grey" ];
"30" [ label="d93a80739fc1edb41a11b7294",shape="hexagon",style="filled",color="green" ];
"245E" [ label="e03b8bc0435a",shape="box",style="filled",color="grey" ];
"31" [ label="bf65cfddeb00ff847feae0c",shape="hexagon",style="filled",color="green" ];
"247E" [ label="8df",shape="box",style="filled",color="grey" ];
"32" [ label="916c686a1e82dba72524a",shape="hexagon",style="filled",color="green" ];
"249E" [ label="a849f9d352e",shape="box",style="filled",color="grey" ];
"33" [ label="f496bcf0889b301d77819c",shape="hexagon",style="filled",color="green" ];
"251E" [ label="f29dfb9",shape="box",style="filled",color="grey" ];
"34" [ label="76889f7d35e",shape="hexagon",style="filled",color="green" ];
"253E" [ label="e7ef998",shape="box",style="filled",color="grey" ];
"35" [ label="668d636002",shape="hexagon",style="filled",color="green" ];
"255E" [ label="4379b5ed",shape="box",style="filled",color="grey" ];
"36" [ label="e1e4c23db39d8bd633c3a",shape="hexagon",style="filled",color="green" ];
"257E" [ label="1ed5d7f63b8c6",shape="box",style="filled",color="grey" ];
"37" [ label="842bc5775657c1e0d67",shape="hexagon",style="filled",color="green" ];
"259E" [ label="a387210a27b",shape="box",style="filled",color="grey" ];
"38" [ label="e4e2f4e6d",shape="hexagon",style="filled",color="green" ];
"261E" [ label="1f4f0fdf",shape="box",style="filled",color="grey" ];
"39" [ label="04390dec6f1779353c07f5",shape="hexagon",style="filled",color="green" ];
"263E" [ label="bac77c3f414a",shape="box",style="filled",color="grey" ];
"40" [ label="69f2611acc42c36ed7cc",shape="hexagon",style="filled",color="green" ];
"265E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"41" [ label="1562abef0d8241",shape="hexagon",style="filled",color="green" ];
"267E" [ label="6a8f5bafb1",shape="box",style="filled",color="grey" ];
"42" [ label="e49aaa5cc4e44355d6a0",shape="hexagon",style="filled",color="green" ];
"269E" [ label="cc3f63d",shape="box",style="filled",color="grey" ];
"43" [ label="e8ebe1bf5f421c1223",shape="hexagon",style="filled",color="green" ];
"271E" [ label="96325ea",shape="box",style="filled",color="grey" ];
"44" [ label="2759e82e30d6d",shape="hexagon",style="filled",color="green" ];
"273E" [ label="ca5af2",shape="box",style="filled",color="grey" ];
"45" [ label="23c1ec53358d237c1",shape="hexagon",style="filled",color="green" ];
"275E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"46" [ label="5838586c293d455",shape="hexagon",style="filled",color="green" ];
"277E" [ label="83c397b8bf7f",shape="box",style="filled",color="grey" ];
"47" [ label="f841118350a27b7ea29a9c9d",shape="hexagon",style="filled",color="green" ];
"279E" [ label="69f4ecb77d",shape="box",style="filled",color="grey" ];
"48" [ label="658d208447d8ec5d6de8",shape="hexagon",style="filled",color="green" ];
"281E" [ label="f7b22b9640",shape="box",style="filled",color="grey" ];
"49" [ label="11180ae7706510211bc4",shape="hexagon",style="filled",color="green" ];
"283E" [ label="052bb6e3",shape="box",style="filled",color="grey" ];
"50" [ label="5807acd8d58e006f43",shape="hexagon",style="filled",color="green" ];
"285E" [ label="",shape="box",style="filled",color="grey" ];
"51" [ label="fe4e848cb5291ee59a2",shape="hexagon",style="filled",color="green" ];
"287E" [ label="e3aefac763",shape="box",style="filled",color="grey" ];
"52" [ label="c4f31ea3844e12da27ad47c6",shape="hexagon",style="filled",color="green" ];
"289E" [ label="fb16636aae",shape="box",style="filled",color="grey" ];
"53" [ label="00cbeb87c182ca0785f",shape="hexagon",style="filled",color="green" ];
"291E" [ label="3089106e3b",shape="box",style="filled",color="grey" ];
"54" [ label="11f088bfd8",shape="hexagon",style="filled",color="green" ];
"293E" [ label="6a80cbe",shape="box",style="filled",color="grey" ];
"55" [ label="64a9ec24428099ad8ed82ba6",shape="hexagon",style="filled",color="green" ];
"745E" [ label="68d8993e61d8c82cd29e8d0182b0",shape="box",style="filled",color="grey" ];
"56" [ label="3c2a62e0e5e9f7",shape="hexagon",style="filled",color="green" ];
"295E" [ label="ae32701",shape="box",style="filled",color="grey" ];
"57" [ label="dd84fe6a65cfac7bca03ebd",shape="hexagon",style="filled",color="green" ];
"297E" [ label="",shape="box",style="filled",color="grey" ];
"58" [ label="b06bbfa920aa95dd",shape="hexagon",style="filled",color="green" ];
"299E" [ label="07",shape="box",style="filled",color="grey" ];
"59" [ label="6b5aaa4bdf44b2c898854",shape="hexagon",style="filled",color="green" ];
"301E" [ label="4c6c8c",shape="box",style="filled",color="grey" ];
"789E" [ label="3a0ff0",shape="box",style="filled",color="grey" ];
"60" [ label="855d26296eda4eb7",shape="hexagon",style="filled",color="green" ];
"303E" [ label="53069e384a2",shape="box",style="filled",color="grey" ];
"61" [ label="e82f47b8d4949ba4af69b38cbc19",shape="hexagon",style="filled",color="green" ];
"305E" [ label="b62cd1d0a0",shape="box",style="filled",color="grey" ];
"62" [ label="86569bffb49adf6b3d0ebac",shape="hexagon",style="filled",color="green" ];
"307E" [ label="660ffeb76fc59",shape="box",style="filled",color="grey" ];
"63" [ label="a96e47ff37983425a3e452095",shape="hexagon",style="filled",color="green" ];
"309E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"64" [ label="71a48d11b2e7e56b1df128bd",shape="hexagon",style="filled",color="green" ];
"311E" [ label="be8f4199f",shape="box",style="filled",color="grey" ];
"65" [ label="a0befe6dd1ca7b165786835",shape="hexagon",style="filled",color="green" ];
"313E" [ label="3cfae",shape="box",style="filled",color="grey" ];
"66" [ label="f33ec11db496f7bfcb024f",shape="hexagon",style="filled",color="green" ];
"315E" [ label="71e6b",shape="box",style="filled",color="grey" ];
"67" [ label="fe6be3206549f5b5564acde84783",shape="hexagon",style="filled",color="green" ];
"317E" [ label="",shape="box",style="filled",color="grey" ];
"68" [ label="e4dba079d5fcb1f165920a3bf",shape="hexagon",style="filled",color="green" ];
"319E" [ label="",shape="box",style="filled",color="grey" ];
"69" [ label="35dfbee3123dc389cba0b15",shape="hexagon",style="filled",color="green" ];
"746E" [ label="4c865eec228e41e7f4e5fc68a9a6",shape="box",style="filled",color="grey" ];
"70" [ label="16c508ab98483d430bbe",shape="hexagon",style="filled",color="green" ];
"321E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"71" [ label="9c9e2e0f2da8758e436c",shape="hexagon",style="filled",color="green" ];
"327E" [ label="cd0d985a366cad7e",shape="box",style="filled",color="grey" ];
"72" [ label="fb039d7a2a9fe73b5f468eba9",shape="hexagon",style="filled",color="green" ];
"329E" [ label="81dabfaba8",shape="box",style="filled",color="grey" ];
"73" [ label="2ef949c4a39b",shape="hexagon",style="filled",color="green" ];
"331E" [ label="617809d979f",shape="box",style="filled",color="grey" ];
"74" [ label="a9497e0757b0969bde707ed5",shape="hexagon",style="filled",color="green" ];
"333E" [ label="541ab86a2e",shape="box",style="filled",color="grey" ];
"75" [ label="230cc6bbc66b24eae94fa03d",shape="hexagon",style="filled",color="green" ];
"335E" [ label="",shape="box",style="filled",color="grey" ];
"76" [ label="1d163eac141def176461c",shape="hexagon",style="filled",color="green" ];
"337E" [ label="0acc5bb8ca4",shape="box",style="filled",color="grey" ];
"77" [ label="32979f8cf86",shape="hexagon",style="filled",color="green" ];
"339E" [ label="a7e89580",shape="box",style="filled",color="grey" ];
"78" [ label="37d80ae421dba4a70730338860",shape="hexagon",style="filled",color="green" ];
"341E" [ label="",shape="box",style="filled",color="grey" ];
"79" [ label="fbba7215e7c13173a60206",shape="hexagon",style="filled",color="green" ];
"343E" [ label="617809d979f",shape="box",style="filled",color="grey" ];
"80" [ label="2dd8cc4d693415f93c0f8fc",shape="hexagon",style="filled",color="green" ];
"345E" [ label="94da691e20e3",shape="box",style="filled",color="grey" ];
"81" [ label="00880e6f50c765ebc1f85d3e9",shape="hexagon",style="filled",color="green" ];
"347E" [ label="e7ef998",shape="box",style="filled",color="grey" ];
"82" [ label="ef13d45b1277ac9a0444adb",shape="hexagon",style="filled",color="green" ];
"349E" [ label="a7fe7",shape="box",style="filled",color="grey" ];
"83" [ label="2573e1bf51f1b307f4640",shape="hexagon",style="filled",color="green" ];
"351E" [ label="84e4ede82074",shape="box",style="filled",color="grey" ];
"84" [ label="162d8039483d8",shape="hexagon",style="filled",color="green" ];
"353E" [ label="a8e9",shape="box",style="filled",color="grey" ];
"85" [ label="f490de272a7f6e4af346d40",shape="hexagon",style="filled",color="green" ];
"355E" [ label="460aed10cc9",shape="box",style="filled",color="grey" ];
"788E" [ label="391256c872",shape="box",style="filled",color="grey" ];
"86" [ label="678bf739c344b9ad41da1",shape="hexagon",style="filled",color="green" ];
"357E" [ label="396b16a892fe",shape="box",style="filled",color="grey" ];
"87" [ label="876d120b38b0e88817",shape="hexagon",style="filled",color="green" ];
"359E" [ label="e5",shape="box",style="filled",color="grey" ];
"88" [ label="503737b64d432c60d6ac557e0e6",shape="hexagon",style="filled",color="green" ];
"361E" [ label="9937ccba1469",shape="box",style="filled",color="grey" ];
"89" [ label="b36e0be6f67fc25286127456",shape="hexagon",style="filled",color="green" ];
"363E" [ label="87a7e69a72412",shape="box",style="filled",color="grey" ];
"90" [ label="4cc20a0b7651e486",shape="hexagon",style="filled",color="green" ];
"365E" [ label="e079d2c",shape="box",style="filled",color="grey" ];
"91" [ label="08dade990b2282",shape="hexagon",style="filled",color="green" ];
"367E" [ label="45827dbdd8",shape="box",style="filled",color="grey" ];
"92" [ label="f8128d574c356631b8a9",shape="hexagon",style="filled",color="green" ];
"369E" [ label="",shape="box",style="filled",color="grey" ];
"93" [ label="88a4f0337c2189c3fc7b31",shape="hexagon",style="filled",color="green" ];
"729E" [ label="da0d7bbcf30",shape="box",style="filled",color="grey" ];
"94" [ label="1b13908a9f0763c0ae54af9062080",shape="hexagon",style="filled",color="green" ];
"371E" [ label="8b06a67a",shape="box",style="filled",color="grey" ];
"95" [ label="e2a5d11499b7e",shape="hexagon",style="filled",color="green" ];
"373E" [ label="66abc181ac4",shape="box",style="filled",color="grey" ];
"96" [ label="90cc275011c2013c61eb11",shape="hexagon",style="filled",color="green" ];
"375E" [ label="",shape="box",style="filled",color="grey" ];
"97" [ label="1e003bfe8fc840df0163f4c",shape="hexagon",style="filled",color="green" ];
"747E" [ label="8983ffbc30deb364dd92c3ad85c9",shape="box",style="filled",color="grey" ];
"98" [ label="1927c743a0d440a5a0",shape="hexagon",style="filled",color="green" ];
"377E" [ label="b12441ecff15fa12c",shape="box",style="filled",color="grey" ];
"99" [ label="155d892827c33ed3cae3",shape="hexagon",style="filled",color="green" ];
"379E" [ label="71e6b",shape="box",style="filled",color="grey" ];
"100" [ label="9f24ba80192c339a64c0",shape="hexagon",style="filled",color="green" ];
"381E" [ label="",shape="box",style="filled",color="grey" ];
"101" [ label="3e814305b42beb41b8c706",shape="hexagon",style="filled",color="green" ];
"383E" [ label="1c08373",shape="box",style="filled",color="grey" ];
"102" [ label="eccfe5ff0af70fe9fbec8b2360f90",shape="hexagon",style="filled",color="green" ];
"385E" [ label="be8f4199f",shape="box",style="filled",color="grey" ];
"103" [ label="8fa622d9f842c5572a545ed72982",shape="hexagon",style="filled",color="green" ];
"387E" [ label="4dccb",shape="box",style="filled",color="grey" ];
"104" [ label="ad9142a65f5eab78b4ca5e",shape="hexagon",style="filled",color="green" ];
"389E" [ label="f36cce089",shape="box",style="filled",color="grey" ];
"105" [ label="20f234fdcd0e1fc50261ce8",shape="hexagon",style="filled",color="green" ];
"391E" [ label="67219ef689f0146b544",shape="box",style="filled",color="grey" ];
"106" [ label="e06cc38155ff6781cf944d745",shape="hexagon",style="filled",color="green" ];
"393E" [ label="87a7e69a72412",shape="box",style="filled",color="grey" ];
"107" [ label="cfdf1932665dcb4cd3c",shape="hexagon",style="filled",color="green" ];
"395E" [ label="964b86fc1bba0e",shape="box",style="filled",color="grey" ];
"108" [ label="6d4a4a5a5af91b895272c30",shape="hexagon",style="filled",color="green" ];
"397E" [ label="b5e86c73d1198f",shape="box",style="filled",color="grey" ];
"109" [ label="e0ad365c2fb444358201",shape="hexagon",style="filled",color="green" ];
"399E" [ label="bb5e89c8963",shape="box",style="filled",color="grey" ];
"110" [ label="b07bbdc8cca5985d4c4",shape="hexagon",style="filled",color="green" ];
"401E" [ label="50023f6f88",shape="box",style="filled",color="grey" ];
"111" [ label="df5dba74c75b228de48c",shape="hexagon",style="filled",color="green" ];
"403E" [ label="7e493ee44b28",shape="box",style="filled",color="grey" ];
"112" [ label="0b8694c9ef9b27b9c3d8",shape="hexagon",style="filled",color="green" ];
"405E" [ label="2342b759c03",shape="box",style="filled",color="grey" ];
"113" [ label="81e20155999fa64e0ae6fd",shape="hexagon",style="filled",color="green" ];
"407E" [ label="4280833ef80172",shape="box",style="filled",color="grey" ];
"114" [ label="3ef07ae75d29a707",shape="hexagon",style="filled",color="green" ];
"409E" [ label="4280833ef80172",shape="box",style="filled",color="grey" ];
"115" [ label="4a36db80f1ab1e97",shape="hexagon",style="filled",color="green" ];
"411E" [ label="460aed10cc9",shape="box",style="filled",color="grey" ];
"116" [ label="16da5f1301b36df4df0f",shape="hexagon",style="filled",color="green" ];
"413E" [ label="460aed10cc9",shape="box",style="filled",color="grey" ];
"117" [ label="6b3f3fa236bb90592d23a",shape="hexagon",style="filled",color="green" ];
"415E" [ label="83c397b8bf7f",shape="box",style="filled",color="grey" ];
"118" [ label="f2a57e4d4f0cec516891e3",shape="hexagon",style="filled",color="green" ];
"417E" [ label="bd2484",shape="box",style="filled",color="grey" ];
"119" [ label="deb3089920548bf1ecb23f0d",shape="hexagon",style="filled",color="green" ];
"419E" [ label="87a7e69a72412",shape="box",style="filled",color="grey" ];
"120" [ label="bf01c8a262",shape="hexagon",style="filled",color="green" ];
"421E" [ label="01",shape="box",style="filled",color="grey" ];
"121" [ label="23dc3a52fed9c119610b5e8",shape="hexagon",style="filled",color="green" ];
"423E" [ label="71e6b",shape="box",style="filled",color="grey" ];
"122" [ label="aff7fc220edc93572bb2",shape="hexagon",style="filled",color="green" ];
"748E" [ label="68d8993e61d8c82cd29e8d0182b0",shape="box",style="filled",color="grey" ];
"123" [ label="78cc16f965adc5f712ea2372c6",shape="hexagon",style="filled",color="green" ];
"425E" [ label="23ad1",shape="box",style="filled",color="grey" ];
"124" [ label="5be631dff7b97697be7dc0a2f07f2",shape="hexagon",style="filled",color="green" ];
"427E" [ label="",shape="box",style="filled",color="grey" ];
"786E" [ label="421",shape="box",style="filled",color="grey" ];
"125" [ label="48398d080dfcccced48da1980",shape="hexagon",style="filled",color="green" ];
"431E" [ label="866808df",shape="box",style="filled",color="grey" ];
"126" [ label="03716a2c341e5edaa31",shape="hexagon",style="filled",color="green" ];
"433E" [ label="21407f8a6d7",shape="box",style="filled",color="grey" ];
"127" [ label="ddfeabe456a9de5f5784",shape="hexagon",style="filled",color="green" ];
"435E" [ label="aac615ae78",shape="box",style="filled",color="grey" ];
"128" [ label="d550a7f392c787661aadd48",shape="hexagon",style="filled",color="green" ];
"437E" [ label="e3aefac763",shape="box",style="filled",color="grey" ];
"129" [ label="4c82921f4ad3f07066540",shape="hexagon",style="filled",color="green" ];
"439E" [ label="a7fe7",shape="box",style="filled",color="grey" ];
"130" [ label="0bc7f8f513e0e74b270",shape="hexagon",style="filled",color="green" ];
"441E" [ label="a849f9d352e",shape="box",style="filled",color="grey" ];
"131" [ label="3b1563a23eb9",shape="hexagon",style="filled",color="green" ];
"443E" [ label="a8e9",shape="box",style="filled",color="grey" ];
"132" [ label="be233fafa38d931d894",shape="hexagon",style="filled",color="green" ];
"445E" [ label="a849f9d352e",shape="box",style="filled",color="grey" ];
"133" [ label="f906dc5244ee6a371f8",shape="hexagon",style="filled",color="green" ];
"749E" [ label="4c865eec228e41e7f4e5fc68a9a6",shape="box",style="filled",color="grey" ];
"134" [ label="e7a887d88c2318beba51",shape="hexagon",style="filled",color="green" ];
"447E" [ label="9d8988c0945d6",shape="box",style="filled",color="grey" ];
"135" [ label="be6b73bd46a7a5183e8c91a",shape="hexagon",style="filled",color="green" ];
"449E" [ label="ee91c97828",shape="box",style="filled",color="grey" ];
"769E" [ label="444189d179b5db71fe",shape="box",style="filled",color="grey" ];
"770E" [ label="1e1fbbe14ac24e0518",shape="box",style="filled",color="grey" ];
"136" [ label="644f112bb0aa452ee7040a",shape="hexagon",style="filled",color="green" ];
"451E" [ label="52f247fc3b",shape="box",style="filled",color="grey" ];
"137" [ label="010957669f3770aac",shape="hexagon",style="filled",color="green" ];
"453E" [ label="78",shape="box",style="filled",color="grey" ];
"138" [ label="0a185946ee443342b07d8e1",shape="hexagon",style="filled",color="green" ];
"455E" [ label="87a7e69a72412",shape="box",style="filled",color="grey" ];
"139" [ label="f66fe4df3d189e69ce10c9c",shape="hexagon",style="filled",color="green" ];
"457E" [ label="21407f8a6d7",shape="box",style="filled",color="grey" ];
"140" [ label="247e407f45b353f8",shape="hexagon",style="filled",color="green" ];
"459E" [ label="",shape="box",style="filled",color="grey" ];
"141" [ label="84907547f36d0ff7",shape="hexagon",style="filled",color="green" ];
"461E" [ label="e920b915087",shape="box",style="filled",color="grey" ];
"142" [ label="805004328dad9d315d",shape="hexagon",style="filled",color="green" ];
"463E" [ label="4280833ef80172",shape="box",style="filled",color="grey" ];
"143" [ label="4f0cbd3fbf0cb1e8c",shape="hexagon",style="filled",color="green" ];
"465E" [ label="403126",shape="box",style="filled",color="grey" ];
"144" [ label="4869e993f2bb10f",shape="hexagon",style="filled",color="green" ];
"467E" [ label="ff",shape="box",style="filled",color="grey" ];
"145" [ label="665b76844ff78fc2cf66ca2",shape="hexagon",style="filled",color="green" ];
"469E" [ label="af0268dddd",shape="box",style="filled",color="grey" ];
"146" [ label="3f16509139c7dad5163b91799",shape="hexagon",style="filled",color="green" ];
"471E" [ label="3089106e3b",shape="box",style="filled",color="grey" ];
"147" [ label="01db23a60422ba93a68611cc0",shape="hexagon",style="filled",color="green" ];
"473E" [ label="",shape="box",style="filled",color="grey" ];
"148" [ label="46125fcc583c0f494a3a1d3",shape="hexagon",style="filled",color="green" ];
"475E" [ label="db6c4213a717bc",shape="box",style="filled",color="grey" ];
"149" [ label="731857fe189fb398e80a0594",shape="hexagon",style="filled",color="green" ];
"477E" [ label="3089106e3b",shape="box",style="filled",color="grey" ];
"150" [ label="6fb7a84e370ef70feac5cb",shape="hexagon",style="filled",color="green" ];
"479E" [ label="396b16a892fe",shape="box",style="filled",color="grey" ];
"151" [ label="e343cea291b79a2ed4e",shape="hexagon",style="filled",color="green" ];
"481E" [ label="88d8b220746882d",shape="box",style="filled",color="grey" ];
"152" [ label="5f2592b20f13356b7fc8b42",shape="hexagon",style="filled",color="green" ];
"483E" [ label="",shape="box",style="filled",color="grey" ];
"153" [ label="275a0407e33e9b8aa9cdd051",shape="hexagon",style="filled",color="green" ];
"731E" [ label="",shape="box",style="filled",color="grey" ];
"154" [ label="011d119375cf494ca2fa8d59",shape="hexagon",style="filled",color="green" ];
"750E" [ label="8983ffbc30deb364dd92c3ad85c9",shape="box",style="filled",color="grey" ];
"155" [ label="173fd00917644f0f1f3e3",shape="hexagon",style="filled",color="green" ];
"485E" [ label="0acc5bb8ca4",shape="box",style="filled",color="grey" ];
"156" [ label="c72df69b40156a3254",shape="hexagon",style="filled",color="green" ];
"487E" [ label="fff03efcd",shape="box",style="filled",color="grey" ];
"157" [ label="6c632ad9c42228bb337",shape="hexagon",style="filled",color="green" ];
"489E" [ label="eb8",shape="box",style="filled",color="grey" ];
"158" [ label="bbb13dc62adf2de2a42b6",shape="hexagon",style="filled",color="green" ];
"491E" [ label="69ce90c9b2",shape="box",style="filled",color="grey" ];
"159" [ label="6282bc21f6",shape="hexagon",style="filled",color="green" ];
"495E" [ label="de34214b4c258c9333ec3",shape="box",style="filled",color="grey" ];
"160" [ label="71cf45dd4e91bcca945137b40e",shape="hexagon",style="filled",color="green" ];
"499E" [ label="65fd8495",shape="box",style="filled",color="grey" ];
"161" [ label="a3b6df27179b175c88fa4c9cf9f",shape="hexagon",style="filled",color="green" ];
"501E" [ label="6577",shape="box",style="filled",color="grey" ];
"162" [ label="284f14a259991806654e74",shape="hexagon",style="filled",color="green" ];
"503E" [ label="4280833ef80172",shape="box",style="filled",color="grey" ];
"163" [ label="a7c99ccf6ddf6f5ebbe",shape="hexagon",style="filled",color="green" ];
"505E" [ label="c4fd8",shape="box",style="filled",color="grey" ];
"164" [ label="c32d2697e8",shape="hexagon",style="filled",color="green" ];
"507E" [ label="52f247fc3b",shape="box",style="filled",color="grey" ];
"165" [ label="d12bd75c24b110ef90cdd35d3",shape="hexagon",style="filled",color="green" ];
"509E" [ label="0668",shape="box",style="filled",color="grey" ];
"166" [ label="1c07453d584f3d14b1876fdb",shape="hexagon",style="filled",color="green" ];
"511E" [ label="460aed10cc9",shape="box",style="filled",color="grey" ];
"167" [ label="f713a8b311ffa05ce3683ad10",shape="hexagon",style="filled",color="green" ];
"513E" [ label="30d6138b63eb",shape="box",style="filled",color="grey" ];
"168" [ label="3cdc90c57243373efaba65a",shape="hexagon",style="filled",color="green" ];
"515E" [ label="fa2afbd869",shape="box",style="filled",color="grey" ];
"169" [ label="e3bdbca0e2256fffa8a59018",shape="hexagon",style="filled",color="green" ];
"517E" [ label="81dabfaba8",shape="box",style="filled",color="grey" ];
"170" [ label="75ba8d840070942eb4e737849",shape="hexagon",style="filled",color="green" ];
"519E" [ label="81dabfaba8",shape="box",style="filled",color="grey" ];
"171" [ label="fbdc3ca37406f66635c8b226e",shape="hexagon",style="filled",color="green" ];
"521E" [ label="8cbcf5cb5",shape="box",style="filled",color="grey" ];
"172" [ label="40b49a5a9bb256c7a3286e56",shape="hexagon",style="filled",color="green" ];
"523E" [ label="f72564578be",shape="box",style="filled",color="grey" ];
"173" [ label="3b2f08d52e4bca3f9ca7bbbd6",shape="hexagon",style="filled",color="green" ];
"525E" [ label="81dabfaba8",shape="box",style="filled",color="grey" ];
"174" [ label="4a38abc630c82b0c48dfbf5271",shape="hexagon",style="filled",color="green" ];
"527E" [ label="f0bd1521",shape="box",style="filled",color="grey" ];
"175" [ label="2d7b7fb6c9ad6821752651f7",shape="hexagon",style="filled",color="green" ];
"529E" [ label="47b2da3d",shape="box",style="filled",color="grey" ];
"176" [ label="910b00285f11bb90d0a15641",shape="hexagon",style="filled",color="green" ];
"531E" [ label="81dabfaba8",shape="box",style="filled",color="grey" ];
"177" [ label="24431c3eb075102f07cc2c1be",shape="hexagon",style="filled",color="green" ];
"533E" [ label="",shape="box",style="filled",color="grey" ];
"178" [ label="07f8a9e55a16beddb3c9153b0",shape="hexagon",style="filled",color="green" ];
"535E" [ label="81dabfaba8",shape="box",style="filled",color="grey" ];
"179" [ label="c1c30f30d40c4f1f84924622f",shape="hexagon",style="filled",color="green" ];
"537E" [ label="c5d5be3942",shape="box",style="filled",color="grey" ];
"180" [ label="86276bb1e23f2c7ffcbe82a0",shape="hexagon",style="filled",color="green" ];
"539E" [ label="0f940646",shape="box",style="filled",color="grey" ];
"181" [ label="f78e145a127014eb43345a0c",shape="hexagon",style="filled",color="green" ];
"541E" [ label="d370c12dbc",shape="box",style="filled",color="grey" ];
"182" [ label="a27037332d9fa5c43bcfe94c0",shape="hexagon",style="filled",color="green" ];
"543E" [ label="80874aa8",shape="box",style="filled",color="grey" ];
"183" [ label="c29ce10bb8d19b498355aa04",shape="hexagon",style="filled",color="green" ];
"545E" [ label="1c08373",shape="box",style="filled",color="grey" ];
"184" [ label="4f8c642b53c349c687534bda35db",shape="hexagon",style="filled",color="green" ];
"547E" [ label="46969c4",shape="box",style="filled",color="grey" ];
"185" [ label="30cc206b1878485",shape="hexagon",style="filled",color="green" ];
"549E" [ label="23ad1",shape="box",style="filled",color="grey" ];
"186" [ label="5d69639a5e3bdd3d",shape="hexagon",style="filled",color="green" ];
"551E" [ label="6139fa6adc88d",shape="box",style="filled",color="grey" ];
"187" [ label="b656f0ed2202b8e46eb",shape="hexagon",style="filled",color="green" ];
"553E" [ label="f6e6236b48bc3",shape="box",style="filled",color="grey" ];
"188" [ label="3b566eaa70ed401479d43a9",shape="hexagon",style="filled",color="green" ];
"555E" [ label="4c6c8c",shape="box",style="filled",color="grey" ];
"189" [ label="d6125ef42bd9958",shape="hexagon",style="filled",color="green" ];
"557E" [ label="4c6c8c",shape="box",style="filled",color="grey" ];
"190" [ label="dd12f26f8d9bb55",shape="hexagon",style="filled",color="green" ];
"559E" [ label="83c397b8bf7f",shape="box",style="filled",color="grey" ];
"191" [ label="ea890ccca2f7c2107351",shape="hexagon",style="filled",color="green" ];
"561E" [ label="eb8",shape="box",style="filled",color="grey" ];
"192" [ label="84e4f1c582427a98d7b",shape="hexagon",style="filled",color="green" ];
"563E" [ label="eb8",shape="box",style="filled",color="grey" ];
"193" [ label="d378760b814eaecb6efe636e0efc4",shape="hexagon",style="filled",color="green" ];
"565E" [ label="81bcc35f82891",shape="box",style="filled",color="grey" ];
"194" [ label="f722890f70a32dce3baff371a",shape="hexagon",style="filled",color="green" ];
"567E" [ label="84e4ede82074",shape="box",style="filled",color="grey" ];
"195" [ label="666f11bb45c3a8dcf26e1ed79",shape="hexagon",style="filled",color="green" ];
"569E" [ label="c90f755c8b6612d",shape="box",style="filled",color="grey" ];
"196" [ label="91ecbe29a71f00ed5a3",shape="hexagon",style="filled",color="green" ];
"571E" [ label="0a963fef9",shape="box",style="filled",color="grey" ];
"197" [ label="30c3f3bf8463d3843dc57d8e98",shape="hexagon",style="filled",color="green" ];
"573E" [ label="3089106e3b",shape="box",style="filled",color="grey" ];
"198" [ label="8ea965ab6ee8dedb6c3333e9",shape="hexagon",style="filled",color="green" ];
"575E" [ label="84e4ede82074",shape="box",style="filled",color="grey" ];
"199" [ label="3eecb304bab2136a76deda",shape="hexagon",style="filled",color="green" ];
"577E" [ label="8df",shape="box",style="filled",color="grey" ];
"200" [ label="d886e4b76537a99bc71b8a9331c94",shape="hexagon",style="filled",color="green" ];
"579E" [ label="1172dca23",shape="box",style="filled",color="grey" ];
"201" [ label="dcc5d5e9d6c4e",shape="hexagon",style="filled",color="green" ];
"581E" [ label="a8e9",shape="box",style="filled",color="grey" ];
"202" [ label="8292af691429f8d9ed481ff71ffd",shape="hexagon",style="filled",color="green" ];
"583E" [ label="212af4",shape="box",style="filled",color="grey" ];
"203" [ label="12fcb26b3de00ef98719c2ca",shape="hexagon",style="filled",color="green" ];
"585E" [ label="",shape="box",style="filled",color="grey" ];
"204" [ label="a141a557a60912051f3c135",shape="hexagon",style="filled",color="green" ];
"587E" [ label="",shape="box",style="filled",color="grey" ];
"205" [ label="64eeeddfc34489ff396",shape="hexagon",style="filled",color="green" ];
"751E" [ label="8983ffbc30deb364dd92c3ad85c9",shape="box",style="filled",color="grey" ];
"206" [ label="f5d636e14a6cd716362158d",shape="hexagon",style="filled",color="green" ];
"589E" [ label="32c958c9997",shape="box",style="filled",color="grey" ];
"207" [ label="84e4978afc069d5a1aecbf2b",shape="hexagon",style="filled",color="green" ];
"593E" [ label="56caa96d171a9ac2da7c",shape="box",style="filled",color="grey" ];
"208" [ label="52a6c2063bccd83110c32",shape="hexagon",style="filled",color="green" ];
"597E" [ label="",shape="box",style="filled",color="grey" ];
"209" [ label="46f754ea06f070dbc023e571a876",shape="hexagon",style="filled",color="green" ];
"599E" [ label="ffccaa9e3",shape="box",style="filled",color="grey" ];
"210" [ label="c10cb9baf4dcb43e24",shape="hexagon",style="filled",color="green" ];
"601E" [ label="ac6e99186",shape="box",style="filled",color="grey" ];
"211" [ label="3dafe1619016463f521f",shape="hexagon",style="filled",color="green" ];
"603E" [ label="b9",shape="box",style="filled",color="grey" ];
"212" [ label="0f5db6ce12751ddcc64e",shape="hexagon",style="filled",color="green" ];
"605E" [ label="bb828f1a326",shape="box",style="filled",color="grey" ];
"213" [ label="34c8c8dc0f6e41c7e7b2",shape="hexagon",style="filled",color="green" ];
"607E" [ label="2832ed5cea6",shape="box",style="filled",color="grey" ];
"214" [ label="0a49c95f107c0aa57c9b5748",shape="hexagon",style="filled",color="green" ];
"609E" [ label="",shape="box",style="filled",color="grey" ];
"215" [ label="3b4fdad8e0429d112",shape="hexagon",style="filled",color="green" ];
"611E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"216" [ label="17dafa5ebaafd48440e3",shape="hexagon",style="filled",color="green" ];
"613E" [ label="b5f038f79a3",shape="box",style="filled",color="grey" ];
"217" [ label="f4c69e5e212f89348122e8",shape="hexagon",style="filled",color="green" ];
"615E" [ label="396b16a892fe",shape="box",style="filled",color="grey" ];
"218" [ label="4f2e020854dfacce46a12",shape="hexagon",style="filled",color="green" ];
"617E" [ label="e079d2c",shape="box",style="filled",color="grey" ];
"219" [ label="6448451ac2ceade90715378b",shape="hexagon",style="filled",color="green" ];
"619E" [ label="",shape="box",style="filled",color="grey" ];
"220" [ label="7d7b14baa649330",shape="hexagon",style="filled",color="green" ];
"621E" [ label="77d145b32328880440c7a",shape="box",style="filled",color="grey" ];
"221" [ label="d7c27cc6f7b02a31eb64d",shape="hexagon",style="filled",color="green" ];
"623E" [ label="87a7e69a72412",shape="box",style="filled",color="grey" ];
"222" [ label="8f5a69ece1",shape="hexagon",style="filled",color="green" ];
"752E" [ label="eb9cf6456613d4cd06f7c0894bd6",shape="box",style="filled",color="grey" ];
"223" [ label="eccf7c722ddf",shape="hexagon",style="filled",color="green" ];
"625E" [ label="df61d5f5fc",shape="box",style="filled",color="grey" ];
"224" [ label="86633c26be93ada8b",shape="hexagon",style="filled",color="green" ];
"627E" [ label="08500a6044",shape="box",style="filled",color="grey" ];
"225" [ label="3f9ddf1ffbc0d38b",shape="hexagon",style="filled",color="green" ];
"629E" [ label="07",shape="box",style="filled",color="grey" ];
"226" [ label="e33792703",shape="hexagon",style="filled",color="green" ];
"631E" [ label="6a8f5bafb1",shape="box",style="filled",color="grey" ];
"227" [ label="293a225dc56dd1e0564e6bb",shape="hexagon",style="filled",color="green" ];
"633E" [ label="e3aefac763",shape="box",style="filled",color="grey" ];
"228" [ label="57c77c341f94afddef07e6",shape="hexagon",style="filled",color="green" ];
"635E" [ label="5e80f85274",shape="box",style="filled",color="grey" ];
"229" [ label="3bbfc7bfdbbb1ba1bfad7517",shape="hexagon",style="filled",color="green" ];
"637E" [ label="",shape="box",style="filled",color="grey" ];
"230" [ label="a7167d5eb5408b3839903",shape="hexagon",style="filled",color="green" ];
"639E" [ label="8c8b5bde6",shape="box",style="filled",color="grey" ];
"231" [ label="34d7bb6af4fcd8d630de72500c8",shape="hexagon",style="filled",color="green" ];
"641E" [ label="32fe7eee5283",shape="box",style="filled",color="grey" ];
"232" [ label="8e69341faa4489",shape="hexagon",style="filled",color="green" ];
"643E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"233" [ label="459236f07c73814faf5",shape="hexagon",style="filled",color="green" ];
"645E" [ label="18083a711d",shape="box",style="filled",color="grey" ];
"234" [ label="c71aa521578164debd0c5",shape="hexagon",style="filled",color="green" ];
"647E" [ label="78",shape="box",style="filled",color="grey" ];
"235" [ label="a5520019b8a73bc141b5fd416a",shape="hexagon",style="filled",color="green" ];
"649E" [ label="3219b6b71443",shape="box",style="filled",color="grey" ];
"236" [ label="6c89dc59ee7aaebbbd6bb64",shape="hexagon",style="filled",color="green" ];
"651E" [ label="8c8b5bde6",shape="box",style="filled",color="grey" ];
"237" [ label="a9a36ef02f",shape="hexagon",style="filled",color="green" ];
"653E" [ label="6a80cbe",shape="box",style="filled",color="grey" ];
"238" [ label="3db761b596844f133c",shape="hexagon",style="filled",color="green" ];
"655E" [ label="e920b915087",shape="box",style="filled",color="grey" ];
"239" [ label="383db224d7508ef072bea21d0",shape="hexagon",style="filled",color="green" ];
"657E" [ label="975fedfb64df",shape="box",style="filled",color="grey" ];
"240" [ label="8e307415fb435445ced7",shape="hexagon",style="filled",color="green" ];
"659E" [ label="21dff35936370ae5f",shape="box",style="filled",color="grey" ];
"241" [ label="aff6d7896e0e142bbc3e78",shape="hexagon",style="filled",color="green" ];
"661E" [ label="d2498",shape="box",style="filled",color="grey" ];
"242" [ label="e153c6e676c7369b285b4e9033a",shape="hexagon",style="filled",color="green" ];
"663E" [ label="",shape="box",style="filled",color="grey" ];
"243" [ label="f3c4311de0e931f08c232b",shape="hexagon",style="filled",color="green" ];
"665E" [ label="a849f9d352e",shape="box",style="filled",color="grey" ];
"244" [ label="0c72a426929600000f5",shape="hexagon",style="filled",color="green" ];
"667E" [ label="45827dbdd8",shape="box",style="filled",color="grey" ];
"245" [ label="38fa61352f5086d2cb51",shape="hexagon",style="filled",color="green" ];
"669E" [ label="af0268dddd",shape="box",style="filled",color="grey" ];
"246" [ label="ad1dd724f1c3e",shape="hexagon",style="filled",color="green" ];
"671E" [ label="cab04b7c14a",shape="box",style="filled",color="grey" ];
"247" [ label="11bb8ed3ae227d3acefc",shape="hexagon",style="filled",color="green" ];
"673E" [ label="eb8",shape="box",style="filled",color="grey" ];
"248" [ label="f2c7b3bb4d44f977d0ab8a42351",shape="hexagon",style="filled",color="green" ];
"675E" [ label="",shape="box",style="filled",color="grey" ];
"249" [ label="51e045ca826077ae765",shape="hexagon",style="filled",color="green" ];
"679E" [ label="e842",shape="box",style="filled",color="grey" ];
"250" [ label="aa0adc8978020629574",shape="hexagon",style="filled",color="green" ];
"753E" [ label="68d8993e61d8c82cd29e8d0182b0",shape="box",style="filled",color="grey" ];
"251" [ label="3b6b2c549de670d7bf5fc0ee",shape="hexagon",style="filled",color="green" ];
"681E" [ label="",shape="box",style="filled",color="grey" ];
"252" [ label="5eea496cc301b2a9721",shape="hexagon",style="filled",color="green" ];
"683E" [ label="",shape="box",style="filled",color="grey" ];
"253" [ label="bfc6564cbdeeffac00a141",shape="hexagon",style="filled",color="green" ];
"685E" [ label="3b0a8a1c2e5050bd",shape="box",style="filled",color="grey" ];
"254" [ label="c360aaeb167487c9578a8f",shape="hexagon",style="filled",color="green" ];
"687E" [ label="d",shape="box",style="filled",color="grey" ];
"255" [ label="39d025b265f9790490781cb201",shape="hexagon",style="filled",color="green" ];
"689E" [ label="5e80f85274",shape="box",style="filled",color="grey" ];
"256" [ label="b4ce21e0a3df1d097277d6",shape="hexagon",style="filled",color="green" ];
"691E" [ label="a849f9d352e",shape="box",style="filled",color="grey" ];
"257" [ label="8bdb6a91c6dee925b557c705b3",shape="hexagon",style="filled",color="green" ];
"693E" [ label="53069e384a2",shape="box",style="filled",color="grey" ];
"258" [ label="ac487676a04e4",shape="hexagon",style="filled",color="green" ];
"695E" [ label="a8e9",shape="box",style="filled",color="grey" ];
"259" [ label="18115fa32ff1cb99",shape="hexagon",style="filled",color="green" ];
"697E" [ label="45827dbdd8",shape="box",style="filled",color="grey" ];
"260" [ label="b7b899dc8bc6a32b28cb098fa16",shape="hexagon",style="filled",color="green" ];
"699E" [ label="32fe7eee5283",shape="box",style="filled",color="grey" ];
"261" [ label="b69e426d974e1907e88",shape="hexagon",style="filled",color="green" ];
"703E" [ label="e842",shape="box",style="filled",color="grey" ];
"262" [ label="60d0128bdb61ae40e98638bd1391",shape="hexagon",style="filled",color="green" ];
"705E" [ label="23ad1",shape="box",style="filled",color="grey" ];
"264" [ label="8fb60d769e4c387",shape="hexagon",style="filled",color="green" ];
"709E" [ label="6a8f5bafb1",shape="box",style="filled",color="grey" ];
"265" [ label="e1fa7f549e5a0893bb42da5",shape="hexagon",style="filled",color="green" ];
"711E" [ label="6a3c6921b0aeceda3",shape="box",style="filled",color="grey" ];
"266" [ label="a77622f2ff77ffeeb2",shape="hexagon",style="filled",color="green" ];
"713E" [ label="21dff35936370ae5f",shape="box",style="filled",color="grey" ];
"267" [ label="30d9d350943c0e3ff7594b50",shape="hexagon",style="filled",color="green" ];
"715E" [ label="b5e86c73d1198f",shape="box",style="filled",color="grey" ];
"268" [ label="89ced1a7906d58d687d5a04",shape="hexagon",style="filled",color="green" ];
"717E" [ label="c0174bbe7ae8",shape="box",style="filled",color="grey" ];
"269" [ label="1de26f6b12b0d292f94184",shape="hexagon",style="filled",color="green" ];
"719E" [ label="65fd8495",shape="box",style="filled",color="grey" ];
"270" [ label="26fa7360ab81be9d4434a",shape="hexagon",style="filled",color="green" ];
"721E" [ label="af0268dddd",shape="box",style="filled",color="grey" ];
"272" [ label="4a9d79c960b8d33e39251e5f66",shape="hexagon" ];
"34E" [ label="330342f283ef2",shape="box",style="filled",color="grey" ];
"252E" [ label="3dafb9a29c00",shape="box",style="filled",color="grey" ];
"436E" [ label="8d5137b16a",shape="box",style="filled",color="grey" ];
"274" [ label="10a7d61c201c67a5e78542807cd",shape="hexagon" ];
"59E" [ label="ef6361295eba07",shape="box",style="filled",color="grey" ];
"500E" [ label="a8f0fe2eb7bc1471",shape="box",style="filled",color="grey" ];
"720E" [ label="cfff3acd8e9d",shape="box",style="filled",color="grey" ];
"275" [ label="f8ff39eab120851f143bf19",shape="hexagon" ];
"98E" [ label="4e3cfd27a",shape="box",style="filled",color="grey" ];
"278" [ label="4995c71223c9f6067324d387a2",shape="hexagon" ];
"35E" [ label="57948adb5dead",shape="box",style="filled",color="grey" ];
"488E" [ label="a738ba39",shape="box",style="filled",color="grey" ];
"598E" [ label="be7d637c50c",shape="box",style="filled",color="grey" ];
"604E" [ label="8d52f183ec",shape="box",style="filled",color="grey" ];
"628E" [ label="cef12b6",shape="box",style="filled",color="grey" ];
"279" [ label="b9ae94e6935503603341ecf4",shape="hexagon" ];
"99E" [ label="14a3c17f3d",shape="box",style="filled",color="grey" ];
"280" [ label="fd28c194a46fde909b019c52f",shape="hexagon" ];
"242E" [ label="9fe65061641",shape="box",style="filled",color="grey" ];
"270E" [ label="34d06d1ed6",shape="box",style="filled",color="grey" ];
"272E" [ label="713db1c1",shape="box",style="filled",color="grey" ];
"284E" [ label="90dccb18c0",shape="box",style="filled",color="grey" ];
"286E" [ label="e17fea65",shape="box",style="filled",color="grey" ];
"288E" [ label="aebb7b91b",shape="box",style="filled",color="grey" ];
"586E" [ label="4348f3abcb7716",shape="box",style="filled",color="grey" ];
"763E" [ label="b082f7a5ff",shape="box",style="filled",color="grey" ];
"281" [ label="7c0ab977f5a3c4ab6d625f5033",shape="hexagon" ];
"45E" [ label="20949455f573f",shape="box",style="filled",color="grey" ];
"470E" [ label="c338481d79773",shape="box",style="filled",color="grey" ];
"670E" [ label="e1d01ef89f",shape="box",style="filled",color="grey" ];
"722E" [ label="c4507c22d19",shape="box",style="filled",color="grey" ];
"282" [ label="7e0b91491c8c8566892cd9a0889",shape="hexagon" ];
"103E" [ label="de9efa12873949",shape="box",style="filled",color="grey" ];
"283" [ label="d58478d9c273ad4f4b2e091324",shape="hexagon" ];
"165E" [ label="1a220eb692c",shape="box",style="filled",color="grey" ];
"284" [ label="8be0efdd94a6383e87fbfded4f",shape="hexagon" ];
"39E" [ label="c8a6c26d4fd9f",shape="box",style="filled",color="grey" ];
"224E" [ label="8cbae42a3900",shape="box",style="filled",color="grey" ];
"268E" [ label="fc73",shape="box",style="filled",color="grey" ];
"632E" [ label="",shape="box",style="filled",color="grey" ];
"710E" [ label="102f1",shape="box",style="filled",color="grey" ];
"285" [ label="3aeb78ea51020a44f2d2615436dae",shape="hexagon" ];
"53E" [ label="96deede0c6b44119",shape="box",style="filled",color="grey" ];
"286" [ label="6bbd5b422edb8e358dcc20eecf9",shape="hexagon" ];
"38E" [ label="4f2de229621272",shape="box",style="filled",color="grey" ];
"166E" [ label="d495de0b35f6",shape="box",style="filled",color="grey" ];
"288" [ label="4856000a6802ddfc121ef40432297",shape="hexagon",style="filled",color="#ff0000" ];
"40E" [ label="04904a458422a5b9",shape="box",style="filled",color="grey" ];
"218E" [ label="8cd4d",shape="box",style="filled",color="grey" ];
"244E" [ label="",shape="box",style="filled",color="grey" ];
"246E" [ label="9be88247",shape="box",style="filled",color="grey" ];
"258E" [ label="4f05b",shape="box",style="filled",color="grey" ];
"290E" [ label="8b092",shape="box",style="filled",color="grey" ];
"292E" [ label="c3bbf4",shape="box",style="filled",color="grey" ];
"308E" [ label="6331b3f",shape="box",style="filled",color="grey" ];
"318E" [ label="",shape="box",style="filled",color="grey" ];
"388E" [ label="3711",shape="box",style="filled",color="grey" ];
"472E" [ label="c5255d",shape="box",style="filled",color="grey" ];
"478E" [ label="5c6a2",shape="box",style="filled",color="grey" ];
"566E" [ label="51ec95518d1b3",shape="box",style="filled",color="grey" ];
"570E" [ label="82a65ed4b69",shape="box",style="filled",color="grey" ];
"574E" [ label="05fed5e",shape="box",style="filled",color="grey" ];
"608E" [ label="bf",shape="box",style="filled",color="grey" ];
"614E" [ label="ce",shape="box",style="filled",color="grey" ];
"658E" [ label="1a830d9f",shape="box",style="filled",color="grey" ];
"664E" [ label="",shape="box",style="filled",color="grey" ];
"682E" [ label="",shape="box",style="filled",color="grey" ];
"289" [ label="2e31175cbd52fcd08360fe86d20",shape="hexagon" ];
"41E" [ label="4ad5d68f07981a",shape="box",style="filled",color="grey" ];
"636E" [ label="51192117f9b4",shape="box",style="filled",color="grey" ];
"642E" [ label="6bf214d9e7fa5f2df",shape="box",style="filled",color="grey" ];
"690E" [ label="558d8534f92fddfe",shape="box",style="filled",color="grey" ];
"700E" [ label="6819fd5a6cdd280dd",shape="box",style="filled",color="grey" ];
"290" [ label="3aa0ce5efcf79bc3ecced1886e89",shape="hexagon" ];
"56E" [ label="ff9d64ddf49a20f",shape="box",style="filled",color="grey" ];
"264E" [ label="6c93f24516f01d",shape="box",style="filled",color="grey" ];
"510E" [ label="32b98f11f3d01d6",shape="box",style="filled",color="grey" ];
"718E" [ label="8f7c875500073",shape="box",style="filled",color="grey" ];
"291" [ label="7c1767485953d9c2",shape="hexagon" ];
"66E" [ label="086",shape="box",style="filled",color="grey" ];
"76E" [ label="",shape="box",style="filled",color="grey" ];
"610E" [ label="450d3a2d49cbfd",shape="box",style="filled",color="grey" ];
"292" [ label="9c1305d59c37e9be9f13d7d049c",shape="hexagon" ];
"73E" [ label="817",shape="box",style="filled",color="grey" ];
"293" [ label="efe092824916a5637ee35d439589",shape="hexagon" ];
"49E" [ label="",shape="box",style="filled",color="grey" ];
"214E" [ label="",shape="box",style="filled",color="grey" ];
"216E" [ label="",shape="box",style="filled",color="grey" ];
"236E" [ label="",shape="box",style="filled",color="grey" ];
"278E" [ label="",shape="box",style="filled",color="grey" ];
"358E" [ label="",shape="box",style="filled",color="grey" ];
"398E" [ label="",shape="box",style="filled",color="grey" ];
"400E" [ label="",shape="box",style="filled",color="grey" ];
"402E" [ label="",shape="box",style="filled",color="grey" ];
"404E" [ label="",shape="box",style="filled",color="grey" ];
"406E" [ label="",shape="box",style="filled",color="grey" ];
"408E" [ label="",shape="box",style="filled",color="grey" ];
"412E" [ label="",shape="box",style="filled",color="grey" ];
"438E" [ label="",shape="box",style="filled",color="grey" ];
"448E" [ label="",shape="box",style="filled",color="grey" ];
"476E" [ label="",shape="box",style="filled",color="grey" ];
"504E" [ label="",shape="box",style="filled",color="grey" ];
"552E" [ label="",shape="box",style="filled",color="grey" ];
"634E" [ label="",shape="box",style="filled",color="grey" ];
"768E" [ label="",shape="box",style="filled",color="grey" ];
"295" [ label="70815f0352b43dc1562133ab6eb",shape="hexagon",style="filled",color="#A52A2A" ];
"44E" [ label="ef2d4636934472",shape="box",style="filled",color="grey" ];
"92E" [ label="22bd92e302816",shape="box",style="filled",color="grey" ];
"250E" [ label="74e86",shape="box",style="filled",color="grey" ];
"316E" [ label="",shape="box",style="filled",color="grey" ];
"380E" [ label="",shape="box",style="filled",color="grey" ];
"424E" [ label="c",shape="box",style="filled",color="grey" ];
"442E" [ label="a5a",shape="box",style="filled",color="grey" ];
"446E" [ label="bce",shape="box",style="filled",color="grey" ];
"454E" [ label="",shape="box",style="filled",color="grey" ];
"460E" [ label="",shape="box",style="filled",color="grey" ];
"462E" [ label="",shape="box",style="filled",color="grey" ];
"648E" [ label="",shape="box",style="filled",color="grey" ];
"656E" [ label="e9",shape="box",style="filled",color="grey" ];
"666E" [ label="b701e7",shape="box",style="filled",color="grey" ];
"692E" [ label="f2e7cc",shape="box",style="filled",color="grey" ];
"712E" [ label="8a9eb2806b0aa",shape="box",style="filled",color="grey" ];
"296" [ label="e287d497450664a4c0f4efc338",shape="hexagon",style="filled",color="#ff0000" ];
"47E" [ label="06eff1db45cdf",shape="box",style="filled",color="grey" ];
"330E" [ label="c0f34a600",shape="box",style="filled",color="grey" ];
"514E" [ label="bd7aca295ca",shape="box",style="filled",color="grey" ];
"516E" [ label="0da9135",shape="box",style="filled",color="grey" ];
"518E" [ label="fe821bce",shape="box",style="filled",color="grey" ];
"520E" [ label="e64f22a31",shape="box",style="filled",color="grey" ];
"522E" [ label="46e412a3",shape="box",style="filled",color="grey" ];
"526E" [ label="99da1f8a5",shape="box",style="filled",color="grey" ];
"528E" [ label="0f167280",shape="box",style="filled",color="grey" ];
"530E" [ label="82d201",shape="box",style="filled",color="grey" ];
"532E" [ label="1d529eb4",shape="box",style="filled",color="grey" ];
"534E" [ label="",shape="box",style="filled",color="grey" ];
"536E" [ label="bf141dbce",shape="box",style="filled",color="grey" ];
"538E" [ label="e3fd0c7b3",shape="box",style="filled",color="grey" ];
"540E" [ label="c96cb3",shape="box",style="filled",color="grey" ];
"542E" [ label="0fabab47",shape="box",style="filled",color="grey" ];
"544E" [ label="1b82200",shape="box",style="filled",color="grey" ];
"297" [ label="2ced414a91575a48f2dd29a",shape="hexagon" ];
"46E" [ label="85221d5e9e",shape="box",style="filled",color="grey" ];
"93E" [ label="97a7eea3f",shape="box",style="filled",color="grey" ];
"206E" [ label="4d22e1",shape="box",style="filled",color="grey" ];
"426E" [ label="e65185ca",shape="box",style="filled",color="grey" ];
"550E" [ label="",shape="box",style="filled",color="grey" ];
"706E" [ label="a9012b7bb5",shape="box",style="filled",color="grey" ];
"298" [ label="38f162cf917ce7298663a1f1c607",shape="hexagon" ];
"36E" [ label="a031c9192ae8e75",shape="box",style="filled",color="grey" ];
"95E" [ label="062fc905b9eb35",shape="box",style="filled",color="grey" ];
"364E" [ label="c8fc17180bea86",shape="box",style="filled",color="grey" ];
"394E" [ label="09e64744536c5e1",shape="box",style="filled",color="grey" ];
"420E" [ label="af4a1fac3e2076",shape="box",style="filled",color="grey" ];
"456E" [ label="238805e2194c3",shape="box",style="filled",color="grey" ];
"624E" [ label="73e6ed83012",shape="box",style="filled",color="grey" ];
"299" [ label="549fa15d68f0b3bee6192f888cd8",shape="hexagon" ];
"48E" [ label="d17f8f4eeb8e63d",shape="box",style="filled",color="grey" ];
"168E" [ label="cca7040e47789",shape="box",style="filled",color="grey" ];
"260E" [ label="47ebc3f17",shape="box",style="filled",color="grey" ];
"282E" [ label="cf5a6049ad",shape="box",style="filled",color="grey" ];
"554E" [ label="2a47a6a27",shape="box",style="filled",color="grey" ];
"590E" [ label="eff3468631dd4",shape="box",style="filled",color="grey" ];
"767E" [ label="efb52b499303115c33fd",shape="box",style="filled",color="grey" ];
"300" [ label="8593dcf973b110d00cecdc1e756",shape="hexagon",style="filled",color="#ff7f00" ];
"62E" [ label="472a156cf2b55f",shape="box",style="filled",color="grey" ];
"190E" [ label="647",shape="box",style="filled",color="grey" ];
"226E" [ label="",shape="box",style="filled",color="grey" ];
"238E" [ label="8a",shape="box",style="filled",color="grey" ];
"254E" [ label="",shape="box",style="filled",color="grey" ];
"256E" [ label="",shape="box",style="filled",color="grey" ];
"262E" [ label="",shape="box",style="filled",color="grey" ];
"266E" [ label="e8b",shape="box",style="filled",color="grey" ];
"274E" [ label="",shape="box",style="filled",color="grey" ];
"276E" [ label="f",shape="box",style="filled",color="grey" ];
"294E" [ label="",shape="box",style="filled",color="grey" ];
"296E" [ label="",shape="box",style="filled",color="grey" ];
"310E" [ label="1b34fb150",shape="box",style="filled",color="grey" ];
"320E" [ label="",shape="box",style="filled",color="grey" ];
"322E" [ label="a7d2",shape="box",style="filled",color="grey" ];
"332E" [ label="",shape="box",style="filled",color="grey" ];
"340E" [ label="",shape="box",style="filled",color="grey" ];
"344E" [ label="f55670",shape="box",style="filled",color="grey" ];
"346E" [ label="1ed67841",shape="box",style="filled",color="grey" ];
"348E" [ label="07283",shape="box",style="filled",color="grey" ];
"374E" [ label="73ba1714ee",shape="box",style="filled",color="grey" ];
"378E" [ label="27709106",shape="box",style="filled",color="grey" ];
"452E" [ label="93ea0",shape="box",style="filled",color="grey" ];
"508E" [ label="",shape="box",style="filled",color="grey" ];
"524E" [ label="1d792d81",shape="box",style="filled",color="grey" ];
"612E" [ label="a",shape="box",style="filled",color="grey" ];
"626E" [ label="",shape="box",style="filled",color="grey" ];
"638E" [ label="",shape="box",style="filled",color="grey" ];
"644E" [ label="",shape="box",style="filled",color="grey" ];
"654E" [ label="",shape="box",style="filled",color="grey" ];
"672E" [ label="",shape="box",style="filled",color="grey" ];
"302" [ label="23f94655294d3ff537f2915fa",shape="hexagon" ];
"797E" [ label="",shape="box",style="filled",color="grey" ];
"798E" [ label="a2eab7c9fa641e5f",shape="box",style="filled",color="grey" ];
"303" [ label="a9058241db5b6b6c25569acdf5",shape="hexagon" ];
"52E" [ label="b2babf3244213",shape="box",style="filled",color="grey" ];
"650E" [ label="b354cd9e9dbb0bfa",shape="box",style="filled",color="grey" ];
"304" [ label="bdbdb31bd777fb65dd6dd2d0e7",shape="hexagon" ];
"50E" [ label="3bec1c012b498",shape="box",style="filled",color="grey" ];
"640E" [ label="c54f0fc1e05",shape="box",style="filled",color="grey" ];
"646E" [ label="9ab6c66dc",shape="box",style="filled",color="grey" ];
"652E" [ label="699e3db878047",shape="box",style="filled",color="grey" ];
"306" [ label="1d4ea80c7194689d69f9592186",shape="hexagon" ];
"55E" [ label="8066f87a88f4e",shape="box",style="filled",color="grey" ];
"220E" [ label="3a8173d6c",shape="box",style="filled",color="grey" ];
"338E" [ label="24dfe1a997a",shape="box",style="filled",color="grey" ];
"368E" [ label="65a1",shape="box",style="filled",color="grey" ];
"486E" [ label="59a8b435ccd",shape="box",style="filled",color="grey" ];
"490E" [ label="86e9b0428",shape="box",style="filled",color="grey" ];
"562E" [ label="5a7a610a8a",shape="box",style="filled",color="grey" ];
"564E" [ label="8f143077e",shape="box",style="filled",color="grey" ];
"600E" [ label="6472c2861e0e0dd681",shape="box",style="filled",color="grey" ];
"668E" [ label="f0f45e707",shape="box",style="filled",color="grey" ];
"674E" [ label="95e93c4a13",shape="box",style="filled",color="grey" ];
"698E" [ label="33e1de",shape="box",style="filled",color="grey" ];
"307" [ label="7204950f6233bf9c9e1f00d4a870",shape="hexagon" ];
"107E" [ label="ccceeef40edda78",shape="box",style="filled",color="grey" ];
"308" [ label="a2c4b1d72e2da483a86ae0c62e5",shape="hexagon" ];
"108E" [ label="eedc819a68add6",shape="box",style="filled",color="grey" ];
"309" [ label="f603819d560c5603259aa05dca",shape="hexagon" ];
"109E" [ label="acacfc83af504",shape="box",style="filled",color="grey" ];
"310" [ label="2f43cba12702078b4e0d3bfdae2bc",shape="hexagon" ];
"110E" [ label="3c1edc8de4795936",shape="box",style="filled",color="grey" ];
"311" [ label="8f9cdc26798117dd3e9ee4a8770",shape="hexagon" ];
"58E" [ label="881d373",shape="box",style="filled",color="grey" ];
"234E" [ label="",shape="box",style="filled",color="grey" ];
"300E" [ label="",shape="box",style="filled",color="grey" ];
"306E" [ label="8c7cd9b93b1cbe48e1",shape="box",style="filled",color="grey" ];
"314E" [ label="616d8a7b",shape="box",style="filled",color="grey" ];
"342E" [ label="",shape="box",style="filled",color="grey" ];
"354E" [ label="",shape="box",style="filled",color="grey" ];
"370E" [ label="",shape="box",style="filled",color="grey" ];
"382E" [ label="",shape="box",style="filled",color="grey" ];
"422E" [ label="",shape="box",style="filled",color="grey" ];
"444E" [ label="",shape="box",style="filled",color="grey" ];
"582E" [ label="",shape="box",style="filled",color="grey" ];
"620E" [ label="",shape="box",style="filled",color="grey" ];
"630E" [ label="",shape="box",style="filled",color="grey" ];
"684E" [ label="",shape="box",style="filled",color="grey" ];
"696E" [ label="",shape="box",style="filled",color="grey" ];
"801E" [ label="",shape="box",style="filled",color="grey" ];
"312" [ label="97c9d726e27304311901a52ce",shape="hexagon",style="filled",color="#ff0000" ];
"42E" [ label="1112164c2f7a",shape="box",style="filled",color="grey" ];
"192E" [ label="5c609b12c",shape="box",style="filled",color="grey" ];
"194E" [ label="00265",shape="box",style="filled",color="grey" ];
"196E" [ label="04767",shape="box",style="filled",color="grey" ];
"198E" [ label="f0d99f16",shape="box",style="filled",color="grey" ];
"200E" [ label="",shape="box",style="filled",color="grey" ];
"202E" [ label="6e186b",shape="box",style="filled",color="grey" ];
"204E" [ label="d382",shape="box",style="filled",color="grey" ];
"312E" [ label="c6b5321a",shape="box",style="filled",color="grey" ];
"336E" [ label="",shape="box",style="filled",color="grey" ];
"376E" [ label="",shape="box",style="filled",color="grey" ];
"384E" [ label="aeb8",shape="box",style="filled",color="grey" ];
"386E" [ label="2e53009d4a375",shape="box",style="filled",color="grey" ];
"428E" [ label="",shape="box",style="filled",color="grey" ];
"474E" [ label="",shape="box",style="filled",color="grey" ];
"484E" [ label="",shape="box",style="filled",color="grey" ];
"546E" [ label="dea1d1",shape="box",style="filled",color="grey" ];
"548E" [ label="5a0b4b906a",shape="box",style="filled",color="grey" ];
"314" [ label="1727041c622518c9dd24f7c211",shape="hexagon" ];
"113E" [ label="49704867bee95",shape="box",style="filled",color="grey" ];
"315" [ label="31f2f9aef958979f9f3532b9b",shape="hexagon",style="filled",color="#ff0000" ];
"43E" [ label="47cd70f",shape="box",style="filled",color="grey" ];
"240E" [ label="248df40dae",shape="box",style="filled",color="grey" ];
"298E" [ label="",shape="box",style="filled",color="grey" ];
"334E" [ label="9dd5bf47f",shape="box",style="filled",color="grey" ];
"360E" [ label="",shape="box",style="filled",color="grey" ];
"390E" [ label="28533c",shape="box",style="filled",color="grey" ];
"418E" [ label="",shape="box",style="filled",color="grey" ];
"492E" [ label="a4c7d0",shape="box",style="filled",color="grey" ];
"502E" [ label="4f6f7f",shape="box",style="filled",color="grey" ];
"584E" [ label="7ab64a969",shape="box",style="filled",color="grey" ];
"588E" [ label="",shape="box",style="filled",color="grey" ];
"602E" [ label="69",shape="box",style="filled",color="grey" ];
"606E" [ label="67513d",shape="box",style="filled",color="grey" ];
"662E" [ label="cf",shape="box",style="filled",color="grey" ];
"316" [ label="a54092a3033f7d5e41e0a76c1",shape="hexagon" ];
"51E" [ label="1467f017b74e",shape="box",style="filled",color="grey" ];
"317" [ label="2043b477ac0393676a4309514d0",shape="hexagon" ];
"116E" [ label="bdec8c86db51b9",shape="box",style="filled",color="grey" ];
"318" [ label="ab48d1f65812bc0f8ab6941c3b5",shape="hexagon" ];
"74E" [ label="81",shape="box",style="filled",color="grey" ];
"319" [ label="ca3d67754cf62fdafbf0a1e0",shape="hexagon" ];
"57E" [ label="75b14f1719d",shape="box",style="filled",color="grey" ];
"94E" [ label="62f36ea98a",shape="box",style="filled",color="grey" ];
"350E" [ label="e3a76d31ca59a",shape="box",style="filled",color="grey" ];
"440E" [ label="b3cadc253f7",shape="box",style="filled",color="grey" ];
"466E" [ label="fb58e11",shape="box",style="filled",color="grey" ];
"676E" [ label="8606837526d81cdec",shape="box",style="filled",color="grey" ];
"320" [ label="a7a7f3681dad1250b01cf80bc17",shape="hexagon" ];
"60E" [ label="2c514b0cd8f7d3",shape="box",style="filled",color="grey" ];
"366E" [ label="7e494b",shape="box",style="filled",color="grey" ];
"434E" [ label="15d44ab97",shape="box",style="filled",color="grey" ];
"458E" [ label="78b2d75d00166",shape="box",style="filled",color="grey" ];
"618E" [ label="761e0f72f95",shape="box",style="filled",color="grey" ];
"321" [ label="275afb2b215b966d9fac51b96b9",shape="hexagon" ];
"72E" [ label="ac284d73563",shape="box",style="filled",color="grey" ];
"362E" [ label="7e74e1587f3a4d208",shape="box",style="filled",color="grey" ];
"372E" [ label="ffd1b1af3b6864078f3",shape="box",style="filled",color="grey" ];
"572E" [ label="b38049e00",shape="box",style="filled",color="grey" ];
"322" [ label="c3c93c700edc0cb4f95f03c04",shape="hexagon" ];
"54E" [ label="99237fce1358",shape="box",style="filled",color="grey" ];
"222E" [ label="3dcf8f454",shape="box",style="filled",color="grey" ];
"302E" [ label="c5acd20cad2",shape="box",style="filled",color="grey" ];
"556E" [ label="6c998bf2a5edd",shape="box",style="filled",color="grey" ];
"558E" [ label="4b683",shape="box",style="filled",color="grey" ];
"323" [ label="63a3d4fb9d38a0182be6e39e76",shape="hexagon" ];
"37E" [ label="bba6e6e194ccf",shape="box",style="filled",color="grey" ];
"208E" [ label="01938827",shape="box",style="filled",color="grey" ];
"210E" [ label="9",shape="box",style="filled",color="grey" ];
"352E" [ label="64ef1d545",shape="box",style="filled",color="grey" ];
"450E" [ label="b473716",shape="box",style="filled",color="grey" ];
"568E" [ label="7c13bf753da",shape="box",style="filled",color="grey" ];
"576E" [ label="4e4a79111d",shape="box",style="filled",color="grey" ];
"686E" [ label="af4abb0d6a99",shape="box",style="filled",color="grey" ];
"324" [ label="4399cf78123dedd0dfe9776104",shape="hexagon" ];
"228E" [ label="af9c489df53",shape="box",style="filled",color="grey" ];
"248E" [ label="3703059dbc5a8",shape="box",style="filled",color="grey" ];
"304E" [ label="8a46e6",shape="box",style="filled",color="grey" ];
"468E" [ label="f9d09",shape="box",style="filled",color="grey" ];
"578E" [ label="cd1e9af3dec2",shape="box",style="filled",color="grey" ];
"660E" [ label="9e650e89bb",shape="box",style="filled",color="grey" ];
"688E" [ label="f62b136b2171",shape="box",style="filled",color="grey" ];
"694E" [ label="4727c415d06bcbef",shape="box",style="filled",color="grey" ];
"714E" [ label="38b3b0d9",shape="box",style="filled",color="grey" ];
"766E" [ label="a153512d982",shape="box",style="filled",color="grey" ];
"325" [ label="40f253cd228f7ac2d0aee",shape="hexagon" ];
"97E" [ label="a3ff993",shape="box",style="filled",color="grey" ];
"506E" [ label="7528dd86b",shape="box",style="filled",color="grey" ];
"326" [ label="89a2505da6179a80202d4a6c3",shape="hexagon" ];
"61E" [ label="75eea05672a5",shape="box",style="filled",color="grey" ];
"175E" [ label="3b0c08dd2ca",shape="box",style="filled",color="grey" ];
"482E" [ label="a3781072b",shape="box",style="filled",color="grey" ];
"328" [ label="2601085bde1b2450d64509f36",shape="hexagon" ];
"75E" [ label="0efbd",shape="box",style="filled",color="grey" ];
"580E" [ label="bb92d1da1f38d52f8ff",shape="box",style="filled",color="grey" ];
"329" [ label="5c81103c751345d0ee0f4bd",shape="hexagon" ];
"96E" [ label="b23526044",shape="box",style="filled",color="grey" ];
"330" [ label="fcbd9ad14139718bc6fcc8b4",shape="hexagon" ];
"100E" [ label="73ca543bf1",shape="box",style="filled",color="grey" ];
"170E" [ label="c2f32e2cf9",shape="box",style="filled",color="grey" ];
"333" [ label="44cbb41a9cfc15497eacd294",color="yellow",style="filled",shape="doubleoctagon" ];
"63E" [ label="6a91",shape="box",style="filled",color="grey" ];
"67E" [ label="b074e",shape="box",style="filled",color="grey" ];
"68E" [ label="06209",shape="box",style="filled",color="grey" ];
"69E" [ label="58e3dcc618",shape="box",style="filled",color="grey" ];
"70E" [ label="eee44624da",shape="box",style="filled",color="grey" ];
"71E" [ label="6a91",shape="box",style="filled",color="grey" ];
"802E" [ label="e1e8c",shape="box",style="filled",color="grey" ];
"793E" [ label="",shape="box",style="filled",color="grey" ];
"334" [ label="b46b0756dba915943839e90a55",color="yellow",style="filled",shape="doubleoctagon" ];
"64E" [ label="5fdf",shape="box",style="filled",color="grey" ];
"81E" [ label="3eca1f94dc181",shape="box",style="filled",color="grey" ];
"82E" [ label="6b1bb9b0e",shape="box",style="filled",color="grey" ];
"83E" [ label="a54d477232",shape="box",style="filled",color="grey" ];
"84E" [ label="a164d9f60fbbdd",shape="box",style="filled",color="grey" ];
"85E" [ label="78c8463ea",shape="box",style="filled",color="grey" ];
"86E" [ label="c110ba7",shape="box",style="filled",color="grey" ];
"87E" [ label="3b63cdc0f",shape="box",style="filled",color="grey" ];
"88E" [ label="6f578c5128",shape="box",style="filled",color="grey" ];
"89E" [ label="3e048573fd",shape="box",style="filled",color="grey" ];
"336" [ URL="tes hi",area="test",label="825c7994d5da13afe519861818",color="#ff0000",style="filled",shape="tripleoctagon" ];
"1E" [ label="f4bef37b6a94bfd00",shape="box",style="filled",color="grey" ];
"2E" [ label="d2647f8b6d8661d08",shape="box",style="filled",color="grey" ];
"3E" [ label="964cb56d8f69ff058",shape="box",style="filled",color="grey" ];
"4E" [ label="4f35e206816c3bd22",shape="box",style="filled",color="grey" ];
"5E" [ label="affb2d716803a2d3e",shape="box",style="filled",color="grey" ];
"6E" [ label="e4ae306d9bd669c70",shape="box",style="filled",color="grey" ];
"7E" [ label="4dbf4395236fb03ed",shape="box",style="filled",color="grey" ];
"8E" [ label="15b3ad672cd2f713a",shape="box",style="filled",color="grey" ];
"9E" [ label="8d6e6e0cd9b842a47",shape="box",style="filled",color="grey" ];
"10E" [ label="00d0dd018fe879f96",shape="box",style="filled",color="grey" ];
"11E" [ label="f28b78d4803c",shape="box",style="filled",color="grey" ];
"12E" [ label="2d886da042b5384b4",shape="box",style="filled",color="grey" ];
"13E" [ label="548c0081a62132b44",shape="box",style="filled",color="grey" ];
"14E" [ label="52126553e52385d16",shape="box",style="filled",color="grey" ];
"15E" [ label="9fe716e738eaea34e",shape="box",style="filled",color="grey" ];
"16E" [ label="5782807b5f575e0a8",shape="box",style="filled",color="grey" ];
"17E" [ label="792fd6f9df1fa1e33",shape="box",style="filled",color="grey" ];
"18E" [ label="c471b6fdbfb852661",shape="box",style="filled",color="grey" ];
"19E" [ label="a84844dfd0052b3b5",shape="box",style="filled",color="grey" ];
"20E" [ label="724dabdce9744d061",shape="box",style="filled",color="grey" ];
"21E" [ label="57f7fd2eecec93c8b",shape="box",style="filled",color="grey" ];
"22E" [ label="baba65f670ee34a88",shape="box",style="filled",color="grey" ];
"23E" [ label="ac34ec0f0488b17ec",shape="box",style="filled",color="grey" ];
"24E" [ label="51e74bec5513083bb",shape="box",style="filled",color="grey" ];
"25E" [ label="8e2d970b2f820ee35",shape="box",style="filled",color="grey" ];
"26E" [ label="19398d3cd6b9c674f",shape="box",style="filled",color="grey" ];
"27E" [ label="6505e29f4a11d9530",shape="box",style="filled",color="grey" ];
"28E" [ label="bc4824f07a9d2bba6",shape="box",style="filled",color="grey" ];
"29E" [ label="3acbf8a1537e4e1a1",shape="box",style="filled",color="grey" ];
"30E" [ label="536264e787cf70469",shape="box",style="filled",color="grey" ];
"31E" [ label="d",shape="box",style="filled",color="grey" ];
"65E" [ label="d4b2",shape="box",style="filled",color="grey" ];
"119E" [ label="2a9caef7",shape="box",style="filled",color="grey" ];
"150E" [ label="73d12",shape="box",style="filled",color="grey" ];
"176E" [ label="8896166adc0",shape="box",style="filled",color="grey" ];
"743E" [ label="9f",shape="box",style="filled",color="grey" ];
"744E" [ label="2e1313c",shape="box",style="filled",color="grey" ];
"764E" [ label="cd6",shape="box",style="filled",color="grey" ];
"337" [ label="8304a439f91fc90b3fe8dd35be8",color="yellow",style="filled",shape="doubleoctagon" ];
"120E" [ label="345d26b3f821fe",shape="box",style="filled",color="grey" ];
"121E" [ label="357679fea1e2f",shape="box",style="filled",color="grey" ];
"122E" [ label="c71043819b6a79",shape="box",style="filled",color="grey" ];
"123E" [ label="f9df653b86fb8df",shape="box",style="filled",color="grey" ];
"124E" [ label="020df871874cd",shape="box",style="filled",color="grey" ];
"125E" [ label="4c52fdd8e396692",shape="box",style="filled",color="grey" ];
"126E" [ label="8b98c3ddbe0b336",shape="box",style="filled",color="grey" ];
"127E" [ label="d9f4abac731a9e",shape="box",style="filled",color="grey" ];
"128E" [ label="50f4d9b97aefe",shape="box",style="filled",color="grey" ];
"129E" [ label="ea920d9f5b295119",shape="box",style="filled",color="grey" ];
"130E" [ label="ff5c9b242337c",shape="box",style="filled",color="grey" ];
"131E" [ label="4e12f7ff0918",shape="box",style="filled",color="grey" ];
"132E" [ label="ee3b6be71d59b",shape="box",style="filled",color="grey" ];
"133E" [ label="615cd6b5e3d21c",shape="box",style="filled",color="grey" ];
"134E" [ label="6d52dd1b198bb",shape="box",style="filled",color="grey" ];
"135E" [ label="8c932e1e502dca",shape="box",style="filled",color="grey" ];
"136E" [ label="e84330eef281284a",shape="box",style="filled",color="grey" ];
"137E" [ label="85fc23f1c88b4",shape="box",style="filled",color="grey" ];
"138E" [ label="5997cb0c083422",shape="box",style="filled",color="grey" ];
"339" [ label="b1ffbabb24d71f67d1e0ce23c51",color="yellow",style="filled",shape="doubleoctagon" ];
"151E" [ label="",shape="box",style="filled",color="grey" ];
"153E" [ label="41a8b095c7fd3",shape="box",style="filled",color="grey" ];
"154E" [ label="151bcc2a8de7ea634",shape="box",style="filled",color="grey" ];
"155E" [ label="6c541cad8de1b15",shape="box",style="filled",color="grey" ];
"156E" [ label="c935c7f4d1090ac",shape="box",style="filled",color="grey" ];
"157E" [ label="5ce1fcfb042b",shape="box",style="filled",color="grey" ];
"158E" [ label="531806429433",shape="box",style="filled",color="grey" ];
"159E" [ label="d285240b89cb",shape="box",style="filled",color="grey" ];
"160E" [ label="f22c27c0f0a54e",shape="box",style="filled",color="grey" ];
"161E" [ label="8d0d8314d211d80",shape="box",style="filled",color="grey" ];
"162E" [ label="",shape="box",style="filled",color="grey" ];
"347" [ label="9652ab8b55fdb2a36d1f3fe020",shape="hexagon" ];
"139E" [ label="ef8b68bb5772f3",shape="box",style="filled",color="grey" ];
"795E" [ label="16c3ae29c0bc713",shape="box",style="filled",color="grey" ];
"348" [ label="676bbe7d1c1fb71742df534ce8",shape="hexagon" ];
"799E" [ label="a78eb40ae56aaa9",shape="box",style="filled",color="grey" ];
"800E" [ label="6aae8d25951",shape="box",style="filled",color="grey" ];
"349" [ label="66c0220688a999aaf7f1702d1",shape="hexagon" ];
"141E" [ label="67b6a4dca3a6d",shape="box",style="filled",color="grey" ];
"350" [ label="1322fb0818783e6f9a4f173d47c52",shape="hexagon" ];
"142E" [ label="9696c0950295d8cb5",shape="box",style="filled",color="grey" ];
"678E" [ label="b5c747cc9",shape="box",style="filled",color="grey" ];
"351" [ label="ff07977fca5513098d220d1eb3a",shape="hexagon" ];
"143E" [ label="89a36b13f8c344b",shape="box",style="filled",color="grey" ];
"232E" [ label="56292d076643",shape="box",style="filled",color="grey" ];
"680E" [ label="b5c747cc9",shape="box",style="filled",color="grey" ];
"704E" [ label="431430c49",shape="box",style="filled",color="grey" ];
"352" [ label="a97ef281eafc34b1630d450a1df",shape="hexagon" ];
"144E" [ label="4ff4e275c710c3b",shape="box",style="filled",color="grey" ];
"432E" [ label="d13da6273c9b4da",shape="box",style="filled",color="grey" ];
"353" [ label="72cbb37db85ed3c6eda5dcf8",shape="hexagon" ];
"145E" [ label="33ff9e43d5ab",shape="box",style="filled",color="grey" ];
"354" [ label="0f6784e49852c0be0da23b16",shape="hexagon" ];
"146E" [ label="d4f958b03a98",shape="box",style="filled",color="grey" ];
"396E" [ label="8e24e9b4e",shape="box",style="filled",color="grey" ];
"355" [ label="383f5c65cc6c25aa0a0e6dbb",shape="hexagon" ];
"147E" [ label="1ff8ff951ee9",shape="box",style="filled",color="grey" ];
"356" [ label="f52a45620969f0df4e6ae1dcd7",shape="hexagon" ];
"148E" [ label="5256925081c812",shape="box",style="filled",color="grey" ];
"357" [ label="1f5df34ad75a55a76ef4afa0a47",shape="hexagon" ];
"149E" [ label="26a185dde9a93dd",shape="box",style="filled",color="grey" ];
"358" [ label="45ba4d4c61c9601a26d59e47e0260",shape="hexagon" ];
"167E" [ label="99bd3e7feeb710",shape="box",style="filled",color="grey" ];
"359" [ label="f95344b0ae31693f3a2746597d4",shape="hexagon" ];
"169E" [ label="4e8259973f1f",shape="box",style="filled",color="grey" ];
"360" [ label="b79798b186d6b82288e8be4017d",shape="hexagon" ];
"171E" [ label="63b079bd5847",shape="box",style="filled",color="grey" ];
"361" [ label="47e0067f4d853afd2012f04daa8",shape="hexagon" ];
"172E" [ label="92fb5d4a0805",shape="box",style="filled",color="grey" ];
"362" [ label="f2b6201774de40a29b504b1f716",shape="hexagon" ];
"173E" [ label="d7203571944b",shape="box",style="filled",color="grey" ];
"363" [ label="800422ab81d804eef3e7b91dfba91",shape="hexagon" ];
"174E" [ label="952316a1a5a785",shape="box",style="filled",color="grey" ];
"364" [ label="35b941379e1af658078cffb83a2",shape="hexagon" ];
"101E" [ label="331675c046693f",shape="box",style="filled",color="grey" ];
"365" [ label="d4f7b7fba7afcf7a72397353ec",shape="hexagon" ];
"102E" [ label="32c4684b55361",shape="box",style="filled",color="grey" ];
"367" [ label="e4b45b7a2f884d3734bfd5985656",shape="hexagon" ];
"104E" [ label="1333074979f2d0b",shape="box",style="filled",color="grey" ];
"368" [ label="02c2ba83680ab57f236a33d702",shape="hexagon" ];
"105E" [ label="084d4bfa5853e",shape="box",style="filled",color="grey" ];
"369" [ label="9ccd974150a18260b207b6584caa",shape="hexagon" ];
"106E" [ label="28f7bfc40c88e6a",shape="box",style="filled",color="grey" ];
"374" [ label="653ae44d45dcadeb481b53027d",shape="hexagon" ];
"111E" [ label="8f95518f48528",shape="box",style="filled",color="grey" ];
"375" [ label="d66f542ef1ce4d02c59bec65e",shape="hexagon" ];
"112E" [ label="2ef209509e2a",shape="box",style="filled",color="grey" ];
"377" [ label="a2984b7a11e49440420058c1d80",shape="hexagon" ];
"114E" [ label="ef42184297591d",shape="box",style="filled",color="grey" ];
"378" [ label="31055116421c96b37f72a262bb",shape="hexagon" ];
"115E" [ label="be9c5958196ed",shape="box",style="filled",color="grey" ];
"380" [ label="8462bb2eec1a62d19a15865e57c92",shape="hexagon" ];
"117E" [ label="16a795a1d63f30df",shape="box",style="filled",color="grey" ];
"392E" [ label="85a34bc9616ff",shape="box",style="filled",color="grey" ];
"381" [ label="c21eb96fe100a1efaa128181b7",shape="hexagon" ];
"118E" [ label="f1b0d754353a6",shape="box",style="filled",color="grey" ];
"382" [ label="e3e284d0cc803d98d674f9c3f6d",color="yellow",style="filled",shape="doubleoctagon" ];
"177E" [ label="30417faf916",shape="box",style="filled",color="grey" ];
"178E" [ label="e618df70814a",shape="box",style="filled",color="grey" ];
"179E" [ label="fa90ddf10bd574",shape="box",style="filled",color="grey" ];
"180E" [ label="815cc0b83d733",shape="box",style="filled",color="grey" ];
"181E" [ label="f787d827958c",shape="box",style="filled",color="grey" ];
"182E" [ label="f20f7f513e",shape="box",style="filled",color="grey" ];
"183E" [ label="290907417e13",shape="box",style="filled",color="grey" ];
"184E" [ label="e8386a8e1c8a",shape="box",style="filled",color="grey" ];
"185E" [ label="319bc900218b",shape="box",style="filled",color="grey" ];
"186E" [ label="3ba7afb0e48ae1",shape="box",style="filled",color="grey" ];
"187E" [ label="6ba0776fc8e",shape="box",style="filled",color="grey" ];
"188E" [ label="09847696ae",shape="box",style="filled",color="grey" ];
"383" [ label="908f9ad506eae9ab6ada185e3",color="yellow",style="filled",shape="doubleoctagon" ];
"730E" [ label="65694ca6d575",shape="box",style="filled",color="grey" ];
"732E" [ label="37f57e81ebed95",shape="box",style="filled",color="grey" ];
"741E" [ label="9b6c",shape="box",style="filled",color="grey" ];
"765E" [ label="88ebe2e8782c",shape="box",style="filled",color="grey" ];
"796E" [ label="901b2105a902ee7791",shape="box",style="filled",color="grey" ];
"384" [ label="593caebf2037317648bb451aa79",color="yellow",style="filled",shape="doubleoctagon" ];
"726E" [ label="351dd0aefe480c",shape="box",style="filled",color="grey" ];
"728E" [ label="56e1a896",shape="box",style="filled",color="grey" ];
"742E" [ label="5ba4693031",shape="box",style="filled",color="grey" ];
"385" [ label="717c254aeffbb527dabfc",shape="hexagon" ];
"328E" [ label="123cc6d1ac",shape="box",style="filled",color="grey" ];
"496E" [ label="",shape="box",style="filled",color="grey" ];
"594E" [ label="7f8c557bcf3889",shape="box",style="filled",color="grey" ];
"622E" [ label="da3d5",shape="box",style="filled",color="grey" ];
"754E" [ label="68d8993e61d8c82cd29e8d0182b0",shape="box",style="filled",color="grey" ];
"755E" [ label="4c865eec228e41e7f4e5fc68a9a6",shape="box",style="filled",color="grey" ];
"756E" [ label="8983ffbc30deb364dd92c3ad85c9",shape="box",style="filled",color="grey" ];
"757E" [ label="68d8993e61d8c82cd29e8d0182b0",shape="box",style="filled",color="grey" ];
"758E" [ label="4c865eec228e41e7f4e5fc68a9a6",shape="box",style="filled",color="grey" ];
"759E" [ label="8983ffbc30deb364dd92c3ad85c9",shape="box",style="filled",color="grey" ];
"760E" [ label="8983ffbc30deb364dd92c3ad85c9",shape="box",style="filled",color="grey" ];
"761E" [ label="eb9cf6456613d4cd06f7c0894bd6",shape="box",style="filled",color="grey" ];
"762E" [ label="1e2298c4bb",shape="box",style="filled",color="grey" ];
"1" -> "189E" [ label=" ",color="blue",arrowhead="dot" ];
"1" -> "790E" [ label=" ",color="blue",arrowhead="dot" ];
"2" -> "191E" [ label=" ",color="blue",arrowhead="dot" ];
"3" -> "193E" [ label=" ",color="blue",arrowhead="dot" ];
"4" -> "195E" [ label=" ",color="blue",arrowhead="dot" ];
"5" -> "197E" [ label=" ",color="blue",arrowhead="dot" ];
"6" -> "199E" [ label=" ",color="blue",arrowhead="dot" ];
"7" -> "201E" [ label=" ",color="blue",arrowhead="dot" ];
"8" -> "203E" [ label=" ",color="blue",arrowhead="dot" ];
"9" -> "725E" [ label=" ",color="blue",arrowhead="dot" ];
"9" -> "785E" [ label=" ",color="blue",arrowhead="dot" ];
"10" -> "205E" [ label=" ",color="blue",arrowhead="dot" ];
"11" -> "207E" [ label=" ",color="blue",arrowhead="dot" ];
"12" -> "209E" [ label=" ",color="blue",arrowhead="dot" ];
"13" -> "211E" [ label=" ",color="blue",arrowhead="dot" ];
"14" -> "213E" [ label=" ",color="blue",arrowhead="dot" ];
"15" -> "215E" [ label=" ",color="blue",arrowhead="dot" ];
"16" -> "727E" [ label=" ",color="blue",arrowhead="dot" ];
"16" -> "784E" [ label=" ",color="blue",arrowhead="dot" ];
"17" -> "217E" [ label=" ",color="blue",arrowhead="dot" ];
"17" -> "787E" [ label=" ",color="blue",arrowhead="dot" ];
"18" -> "219E" [ label=" ",color="blue",arrowhead="dot" ];
"19" -> "221E" [ label=" ",color="blue",arrowhead="dot" ];
"20" -> "223E" [ label=" ",color="blue",arrowhead="dot" ];
"21" -> "225E" [ label=" ",color="blue",arrowhead="dot" ];
"22" -> "227E" [ label=" ",color="blue",arrowhead="dot" ];
"22" -> "792E" [ label=" ",color="blue",arrowhead="dot" ];
"23" -> "231E" [ label=" ",color="blue",arrowhead="dot" ];
"24" -> "233E" [ label=" ",color="blue",arrowhead="dot" ];
"25" -> "235E" [ label=" ",color="blue",arrowhead="dot" ];
"26" -> "237E" [ label=" ",color="blue",arrowhead="dot" ];
"27" -> "239E" [ label=" ",color="blue",arrowhead="dot" ];
"27" -> "783E" [ label=" ",color="blue",arrowhead="dot" ];
"28" -> "241E" [ label=" ",color="blue",arrowhead="dot" ];
"28" -> "791E" [ label=" ",color="blue",arrowhead="dot" ];
"29" -> "243E" [ label=" ",color="blue",arrowhead="dot" ];
"30" -> "245E" [ label=" ",color="blue",arrowhead="dot" ];
"31" -> "247E" [ label=" ",color="blue",arrowhead="dot" ];
"32" -> "249E" [ label=" ",color="blue",arrowhead="dot" ];
"33" -> "251E" [ label=" ",color="blue",arrowhead="dot" ];
"34" -> "253E" [ label=" ",color="blue",arrowhead="dot" ];
"35" -> "255E" [ label=" ",color="blue",arrowhead="dot" ];
"36" -> "257E" [ label=" ",color="blue",arrowhead="dot" ];
"37" -> "259E" [ label=" ",color="blue",arrowhead="dot" ];
"38" -> "261E" [ label=" ",color="blue",arrowhead="dot" ];
"39" -> "263E" [ label=" ",color="blue",arrowhead="dot" ];
"40" -> "265E" [ label=" ",color="blue",arrowhead="dot" ];
"41" -> "267E" [ label=" ",color="blue",arrowhead="dot" ];
"42" -> "269E" [ label=" ",color="blue",arrowhead="dot" ];
"43" -> "271E" [ label=" ",color="blue",arrowhead="dot" ];
"44" -> "273E" [ label=" ",color="blue",arrowhead="dot" ];
"45" -> "275E" [ label=" ",color="blue",arrowhead="dot" ];
"46" -> "277E" [ label=" ",color="blue",arrowhead="dot" ];
"47" -> "279E" [ label=" ",color="blue",arrowhead="dot" ];
"48" -> "281E" [ label=" ",color="blue",arrowhead="dot" ];
"49" -> "283E" [ label=" ",color="blue",arrowhead="dot" ];
"50" -> "285E" [ label=" ",color="blue",arrowhead="dot" ];
"51" -> "287E" [ label=" ",color="blue",arrowhead="dot" ];
"52" -> "289E" [ label=" ",color="blue",arrowhead="dot" ];
"53" -> "291E" [ label=" ",color="blue",arrowhead="dot" ];
"54" -> "293E" [ label=" ",color="blue",arrowhead="dot" ];
"55" -> "745E" [ label=" ",color="blue",arrowhead="dot" ];
"56" -> "295E" [ label=" ",color="blue",arrowhead="dot" ];
"57" -> "297E" [ label=" ",color="blue",arrowhead="dot" ];
"58" -> "299E" [ label=" ",color="blue",arrowhead="dot" ];
"59" -> "301E" [ label=" ",color="blue",arrowhead="dot" ];
"59" -> "789E" [ label=" ",color="blue",arrowhead="dot" ];
"60" -> "303E" [ label=" ",color="blue",arrowhead="dot" ];
"61" -> "305E" [ label=" ",color="blue",arrowhead="dot" ];
"62" -> "307E" [ label=" ",color="blue",arrowhead="dot" ];
"63" -> "309E" [ label=" ",color="blue",arrowhead="dot" ];
"64" -> "311E" [ label=" ",color="blue",arrowhead="dot" ];
"65" -> "313E" [ label=" ",color="blue",arrowhead="dot" ];
"66" -> "315E" [ label=" ",color="blue",arrowhead="dot" ];
"67" -> "317E" [ label=" ",color="blue",arrowhead="dot" ];
"68" -> "319E" [ label=" ",color="blue",arrowhead="dot" ];
"69" -> "746E" [ label=" ",color="blue",arrowhead="dot" ];
"70" -> "321E" [ label=" ",color="blue",arrowhead="dot" ];
"71" -> "327E" [ label=" ",color="blue",arrowhead="dot" ];
"72" -> "329E" [ label=" ",color="blue",arrowhead="dot" ];
"73" -> "331E" [ label=" ",color="blue",arrowhead="dot" ];
"74" -> "333E" [ label=" ",color="blue",arrowhead="dot" ];
"75" -> "335E" [ label=" ",color="blue",arrowhead="dot" ];
"76" -> "337E" [ label=" ",color="blue",arrowhead="dot" ];
"77" -> "339E" [ label=" ",color="blue",arrowhead="dot" ];
"78" -> "341E" [ label=" ",color="blue",arrowhead="dot" ];
"79" -> "343E" [ label=" ",color="blue",arrowhead="dot" ];
"80" -> "345E" [ label=" ",color="blue",arrowhead="dot" ];
"81" -> "347E" [ label=" ",color="blue",arrowhead="dot" ];
"82" -> "349E" [ label=" ",color="blue",arrowhead="dot" ];
"83" -> "351E" [ label=" ",color="blue",arrowhead="dot" ];
"84" -> "353E" [ label=" ",color="blue",arrowhead="dot" ];
"85" -> "355E" [ label=" ",color="blue",arrowhead="dot" ];
"85" -> "788E" [ label=" ",color="blue",arrowhead="dot" ];
"86" -> "357E" [ label=" ",color="blue",arrowhead="dot" ];
"87" -> "359E" [ label=" ",color="blue",arrowhead="dot" ];
"88" -> "361E" [ label=" ",color="blue",arrowhead="dot" ];
"89" -> "363E" [ label=" ",color="blue",arrowhead="dot" ];
"90" -> "365E" [ label=" ",color="blue",arrowhead="dot" ];
"91" -> "367E" [ label=" ",color="blue",arrowhead="dot" ];
"92" -> "369E" [ label=" ",color="blue",arrowhead="dot" ];
"93" -> "729E" [ label=" ",color="blue",arrowhead="dot" ];
"94" -> "371E" [ label=" ",color="blue",arrowhead="dot" ];
"95" -> "373E" [ label=" ",color="blue",arrowhead="dot" ];
"96" -> "375E" [ label=" ",color="blue",arrowhead="dot" ];
"97" -> "747E" [ label=" ",color="blue",arrowhead="dot" ];
"98" -> "377E" [ label=" ",color="blue",arrowhead="dot" ];
"99" -> "379E" [ label=" ",color="blue",arrowhead="dot" ];
"100" -> "381E" [ label=" ",color="blue",arrowhead="dot" ];
"101" -> "383E" [ label=" ",color="blue",arrowhead="dot" ];
"102" -> "385E" [ label=" ",color="blue",arrowhead="dot" ];
"103" -> "387E" [ label=" ",color="blue",arrowhead="dot" ];
"104" -> "389E" [ label=" ",color="blue",arrowhead="dot" ];
"105" -> "391E" [ label=" ",color="blue",arrowhead="dot" ];
"106" -> "393E" [ label=" ",color="blue",arrowhead="dot" ];
"107" -> "395E" [ label=" ",color="blue",arrowhead="dot" ];
"108" -> "397E" [ label=" ",color="blue",arrowhead="dot" ];
"109" -> "399E" [ label=" ",color="blue",arrowhead="dot" ];
"110" -> "401E" [ label=" ",color="blue",arrowhead="dot" ];
"111" -> "403E" [ label=" ",color="blue",arrowhead="dot" ];
"112" -> "405E" [ label=" ",color="blue",arrowhead="dot" ];
"113" -> "407E" [ label=" ",color="blue",arrowhead="dot" ];
"114" -> "409E" [ label=" ",color="blue",arrowhead="dot" ];
"115" -> "411E" [ label=" ",color="blue",arrowhead="dot" ];
"116" -> "413E" [ label=" ",color="blue",arrowhead="dot" ];
"117" -> "415E" [ label=" ",color="blue",arrowhead="dot" ];
"118" -> "417E" [ label=" ",color="blue",arrowhead="dot" ];
"119" -> "419E" [ label=" ",color="blue",arrowhead="dot" ];
"120" -> "421E" [ label=" ",color="blue",arrowhead="dot" ];
"121" -> "423E" [ label=" ",color="blue",arrowhead="dot" ];
"122" -> "748E" [ label=" ",color="blue",arrowhead="dot" ];
"123" -> "425E" [ label=" ",color="blue",arrowhead="dot" ];
"124" -> "427E" [ label=" ",color="blue",arrowhead="dot" ];
"124" -> "786E" [ label=" ",color="blue",arrowhead="dot" ];
"125" -> "431E" [ label=" ",color="blue",arrowhead="dot" ];
"126" -> "433E" [ label=" ",color="blue",arrowhead="dot" ];
"127" -> "435E" [ label=" ",color="blue",arrowhead="dot" ];
"128" -> "437E" [ label=" ",color="blue",arrowhead="dot" ];
"129" -> "439E" [ label=" ",color="blue",arrowhead="dot" ];
"130" -> "441E" [ label=" ",color="blue",arrowhead="dot" ];
"131" -> "443E" [ label=" ",color="blue",arrowhead="dot" ];
"132" -> "445E" [ label=" ",color="blue",arrowhead="dot" ];
"133" -> "749E" [ label=" ",color="blue",arrowhead="dot" ];
"134" -> "447E" [ label=" ",color="blue",arrowhead="dot" ];
"135" -> "449E" [ label=" ",color="blue",arrowhead="dot" ];
"135" -> "769E" [ label=" ",color="blue",arrowhead="dot" ];
"135" -> "770E" [ label=" ",color="blue",arrowhead="dot" ];
"136" -> "451E" [ label=" ",color="blue",arrowhead="dot" ];
"137" -> "453E" [ label=" ",color="blue",arrowhead="dot" ];
"138" -> "455E" [ label=" ",color="blue",arrowhead="dot" ];
"139" -> "457E" [ label=" ",color="blue",arrowhead="dot" ];
"140" -> "459E" [ label=" ",color="blue",arrowhead="dot" ];
"141" -> "461E" [ label=" ",color="blue",arrowhead="dot" ];
"142" -> "463E" [ label=" ",color="blue",arrowhead="dot" ];
"143" -> "465E" [ label=" ",color="blue",arrowhead="dot" ];
"144" -> "467E" [ label=" ",color="blue",arrowhead="dot" ];
"145" -> "469E" [ label=" ",color="blue",arrowhead="dot" ];
"146" -> "471E" [ label=" ",color="blue",arrowhead="dot" ];
"147" -> "473E" [ label=" ",color="blue",arrowhead="dot" ];
"148" -> "475E" [ label=" ",color="blue",arrowhead="dot" ];
"149" -> "477E" [ label=" ",color="blue",arrowhead="dot" ];
"150" -> "479E" [ label=" ",color="blue",arrowhead="dot" ];
"151" -> "481E" [ label=" ",color="blue",arrowhead="dot" ];
"152" -> "483E" [ label=" ",color="blue",arrowhead="dot" ];
"153" -> "731E" [ label=" ",color="blue",arrowhead="dot" ];
"154" -> "750E" [ label=" ",color="blue",arrowhead="dot" ];
"155" -> "485E" [ label=" ",color="blue",arrowhead="dot" ];
"156" -> "487E" [ label=" ",color="blue",arrowhead="dot" ];
"157" -> "489E" [ label=" ",color="blue",arrowhead="dot" ];
"158" -> "491E" [ label=" ",color="blue",arrowhead="dot" ];
"159" -> "495E" [ label=" ",color="blue",arrowhead="dot" ];
"160" -> "499E" [ label=" ",color="blue",arrowhead="dot" ];
"161" -> "501E" [ label=" ",color="blue",arrowhead="dot" ];
"162" -> "503E" [ label=" ",color="blue",arrowhead="dot" ];
"163" -> "505E" [ label=" ",color="blue",arrowhead="dot" ];
"164" -> "507E" [ label=" ",color="blue",arrowhead="dot" ];
"165" -> "509E" [ label=" ",color="blue",arrowhead="dot" ];
"166" -> "511E" [ label=" ",color="blue",arrowhead="dot" ];
"167" -> "513E" [ label=" ",color="blue",arrowhead="dot" ];
"168" -> "515E" [ label=" ",color="blue",arrowhead="dot" ];
"169" -> "517E" [ label=" ",color="blue",arrowhead="dot" ];
"170" -> "519E" [ label=" ",color="blue",arrowhead="dot" ];
"171" -> "521E" [ label=" ",color="blue",arrowhead="dot" ];
"172" -> "523E" [ label=" ",color="blue",arrowhead="dot" ];
"173" -> "525E" [ label=" ",color="blue",arrowhead="dot" ];
"174" -> "527E" [ label=" ",color="blue",arrowhead="dot" ];
"175" -> "529E" [ label=" ",color="blue",arrowhead="dot" ];
"176" -> "531E" [ label=" ",color="blue",arrowhead="dot" ];
"177" -> "533E" [ label=" ",color="blue",arrowhead="dot" ];
"178" -> "535E" [ label=" ",color="blue",arrowhead="dot" ];
"179" -> "537E" [ label=" ",color="blue",arrowhead="dot" ];
"180" -> "539E" [ label=" ",color="blue",arrowhead="dot" ];
"181" -> "541E" [ label=" ",color="blue",arrowhead="dot" ];
"182" -> "543E" [ label=" ",color="blue",arrowhead="dot" ];
"183" -> "545E" [ label=" ",color="blue",arrowhead="dot" ];
"184" -> "547E" [ label=" ",color="blue",arrowhead="dot" ];
"185" -> "549E" [ label=" ",color="blue",arrowhead="dot" ];
"186" -> "551E" [ label=" ",color="blue",arrowhead="dot" ];
"187" -> "553E" [ label=" ",color="blue",arrowhead="dot" ];
"188" -> "555E" [ label=" ",color="blue",arrowhead="dot" ];
"189" -> "557E" [ label=" ",color="blue",arrowhead="dot" ];
"190" -> "559E" [ label=" ",color="blue",arrowhead="dot" ];
"191" -> "561E" [ label=" ",color="blue",arrowhead="dot" ];
"192" -> "563E" [ label=" ",color="blue",arrowhead="dot" ];
"193" -> "565E" [ label=" ",color="blue",arrowhead="dot" ];
"194" -> "567E" [ label=" ",color="blue",arrowhead="dot" ];
"195" -> "569E" [ label=" ",color="blue",arrowhead="dot" ];
"196" -> "571E" [ label=" ",color="blue",arrowhead="dot" ];
"197" -> "573E" [ label=" ",color="blue",arrowhead="dot" ];
"198" -> "575E" [ label=" ",color="blue",arrowhead="dot" ];
"199" -> "577E" [ label=" ",color="blue",arrowhead="dot" ];
"200" -> "579E" [ label=" ",color="blue",arrowhead="dot" ];
"201" -> "581E" [ label=" ",color="blue",arrowhead="dot" ];
"202" -> "583E" [ label=" ",color="blue",arrowhead="dot" ];
"203" -> "585E" [ label=" ",color="blue",arrowhead="dot" ];
"204" -> "587E" [ label=" ",color="blue",arrowhead="dot" ];
"205" -> "751E" [ label=" ",color="blue",arrowhead="dot" ];
"206" -> "589E" [ label=" ",color="blue",arrowhead="dot" ];
"207" -> "593E" [ label=" ",color="blue",arrowhead="dot" ];
"208" -> "597E" [ label=" ",color="blue",arrowhead="dot" ];
"209" -> "599E" [ label=" ",color="blue",arrowhead="dot" ];
"210" -> "601E" [ label=" ",color="blue",arrowhead="dot" ];
"211" -> "603E" [ label=" ",color="blue",arrowhead="dot" ];
"212" -> "605E" [ label=" ",color="blue",arrowhead="dot" ];
"213" -> "607E" [ label=" ",color="blue",arrowhead="dot" ];
"214" -> "609E" [ label=" ",color="blue",arrowhead="dot" ];
"215" -> "611E" [ label=" ",color="blue",arrowhead="dot" ];
"216" -> "613E" [ label=" ",color="blue",arrowhead="dot" ];
"217" -> "615E" [ label=" ",color="blue",arrowhead="dot" ];
"218" -> "617E" [ label=" ",color="blue",arrowhead="dot" ];
"219" -> "619E" [ label=" ",color="blue",arrowhead="dot" ];
"220" -> "621E" [ label=" ",color="blue",arrowhead="dot" ];
"221" -> "623E" [ label=" ",color="blue",arrowhead="dot" ];
"222" -> "752E" [ label=" ",color="blue",arrowhead="dot" ];
"223" -> "625E" [ label=" ",color="blue",arrowhead="dot" ];
"224" -> "627E" [ label=" ",color="blue",arrowhead="dot" ];
"225" -> "629E" [ label=" ",color="blue",arrowhead="dot" ];
"226" -> "631E" [ label=" ",color="blue",arrowhead="dot" ];
"227" -> "633E" [ label=" ",color="blue",arrowhead="dot" ];
"228" -> "635E" [ label=" ",color="blue",arrowhead="dot" ];
"229" -> "637E" [ label=" ",color="blue",arrowhead="dot" ];
"230" -> "639E" [ label=" ",color="blue",arrowhead="dot" ];
"231" -> "641E" [ label=" ",color="blue",arrowhead="dot" ];
"232" -> "643E" [ label=" ",color="blue",arrowhead="dot" ];
"233" -> "645E" [ label=" ",color="blue",arrowhead="dot" ];
"234" -> "647E" [ label=" ",color="blue",arrowhead="dot" ];
"235" -> "649E" [ label=" ",color="blue",arrowhead="dot" ];
"236" -> "651E" [ label=" ",color="blue",arrowhead="dot" ];
"237" -> "653E" [ label=" ",color="blue",arrowhead="dot" ];
"238" -> "655E" [ label=" ",color="blue",arrowhead="dot" ];
"239" -> "657E" [ label=" ",color="blue",arrowhead="dot" ];
"240" -> "659E" [ label=" ",color="blue",arrowhead="dot" ];
"241" -> "661E" [ label=" ",color="blue",arrowhead="dot" ];
"242" -> "663E" [ label=" ",color="blue",arrowhead="dot" ];
"243" -> "665E" [ label=" ",color="blue",arrowhead="dot" ];
"244" -> "667E" [ label=" ",color="blue",arrowhead="dot" ];
"245" -> "669E" [ label=" ",color="blue",arrowhead="dot" ];
"246" -> "671E" [ label=" ",color="blue",arrowhead="dot" ];
"247" -> "673E" [ label=" ",color="blue",arrowhead="dot" ];
"248" -> "675E" [ label=" ",color="blue",arrowhead="dot" ];
"249" -> "679E" [ label=" ",color="blue",arrowhead="dot" ];
"250" -> "753E" [ label=" ",color="blue",arrowhead="dot" ];
"251" -> "681E" [ label=" ",color="blue",arrowhead="dot" ];
"252" -> "683E" [ label=" ",color="blue",arrowhead="dot" ];
"253" -> "685E" [ label=" ",color="blue",arrowhead="dot" ];
"254" -> "687E" [ label=" ",color="blue",arrowhead="dot" ];
"255" -> "689E" [ label=" ",color="blue",arrowhead="dot" ];
"256" -> "691E" [ label=" ",color="blue",arrowhead="dot" ];
"257" -> "693E" [ label=" ",color="blue",arrowhead="dot" ];
"258" -> "695E" [ label=" ",color="blue",arrowhead="dot" ];
"259" -> "697E" [ label=" ",color="blue",arrowhead="dot" ];
"260" -> "699E" [ label=" ",color="blue",arrowhead="dot" ];
"261" -> "703E" [ label=" ",color="blue",arrowhead="dot" ];
"262" -> "705E" [ label=" ",color="blue",arrowhead="dot" ];
"264" -> "709E" [ label=" ",color="blue",arrowhead="dot" ];
"265" -> "711E" [ label=" ",color="blue",arrowhead="dot" ];
"266" -> "713E" [ label=" ",color="blue",arrowhead="dot" ];
"267" -> "715E" [ label=" ",color="blue",arrowhead="dot" ];
"268" -> "717E" [ label=" ",color="blue",arrowhead="dot" ];
"269" -> "719E" [ label=" ",color="blue",arrowhead="dot" ];
"270" -> "721E" [ label=" ",color="blue",arrowhead="dot" ];
"272" -> "34E" [ label=" ",color="blue",arrowhead="dot" ];
"272" -> "252E" [ label=" ",color="blue",arrowhead="dot" ];
"272" -> "436E" [ label=" ",color="blue",arrowhead="dot" ];
"274" -> "59E" [ label=" ",color="blue",arrowhead="dot" ];
"274" -> "500E" [ label=" ",color="blue",arrowhead="dot" ];
"274" -> "720E" [ label=" ",color="blue",arrowhead="dot" ];
"275" -> "98E" [ label=" ",color="blue",arrowhead="dot" ];
"278" -> "35E" [ label=" ",color="blue",arrowhead="dot" ];
"278" -> "488E" [ label=" ",color="blue",arrowhead="dot" ];
"278" -> "598E" [ label=" ",color="blue",arrowhead="dot" ];
"278" -> "604E" [ label=" ",color="blue",arrowhead="dot" ];
"278" -> "628E" [ label=" ",color="blue",arrowhead="dot" ];
"279" -> "99E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "242E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "270E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "272E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "284E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "286E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "288E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "586E" [ label=" ",color="blue",arrowhead="dot" ];
"280" -> "763E" [ label=" ",color="blue",arrowhead="dot" ];
"281" -> "45E" [ label=" ",color="blue",arrowhead="dot" ];
"281" -> "470E" [ label=" ",color="blue",arrowhead="dot" ];
"281" -> "670E" [ label=" ",color="blue",arrowhead="dot" ];
"281" -> "722E" [ label=" ",color="blue",arrowhead="dot" ];
"282" -> "103E" [ label=" ",color="blue",arrowhead="dot" ];
"283" -> "165E" [ label=" ",color="blue",arrowhead="dot" ];
"284" -> "39E" [ label=" ",color="blue",arrowhead="dot" ];
"284" -> "224E" [ label=" ",color="blue",arrowhead="dot" ];
"284" -> "268E" [ label=" ",color="blue",arrowhead="dot" ];
"284" -> "632E" [ label=" ",color="blue",arrowhead="dot" ];
"284" -> "710E" [ label=" ",color="blue",arrowhead="dot" ];
"285" -> "53E" [ label=" ",color="blue",arrowhead="dot" ];
"286" -> "38E" [ label=" ",color="blue",arrowhead="dot" ];
"286" -> "166E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "40E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "218E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "244E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "246E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "258E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "290E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "292E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "308E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "318E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "388E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "472E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "478E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "566E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "570E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "574E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "608E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "614E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "658E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "664E" [ label=" ",color="blue",arrowhead="dot" ];
"288" -> "682E" [ label=" ",color="blue",arrowhead="dot" ];
"289" -> "41E" [ label=" ",color="blue",arrowhead="dot" ];
"289" -> "636E" [ label=" ",color="blue",arrowhead="dot" ];
"289" -> "642E" [ label=" ",color="blue",arrowhead="dot" ];
"289" -> "690E" [ label=" ",color="blue",arrowhead="dot" ];
"289" -> "700E" [ label=" ",color="blue",arrowhead="dot" ];
"290" -> "56E" [ label=" ",color="blue",arrowhead="dot" ];
"290" -> "264E" [ label=" ",color="blue",arrowhead="dot" ];
"290" -> "510E" [ label=" ",color="blue",arrowhead="dot" ];
"290" -> "718E" [ label=" ",color="blue",arrowhead="dot" ];
"291" -> "66E" [ label=" ",color="blue",arrowhead="dot" ];
"291" -> "76E" [ label=" ",color="blue",arrowhead="dot" ];
"291" -> "610E" [ label=" ",color="blue",arrowhead="dot" ];
"292" -> "73E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "49E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "214E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "216E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "236E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "278E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "358E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "398E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "400E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "402E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "404E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "406E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "408E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "412E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "438E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "448E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "476E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "504E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "552E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "634E" [ label=" ",color="blue",arrowhead="dot" ];
"293" -> "768E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "44E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "92E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "250E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "316E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "380E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "424E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "442E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "446E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "454E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "460E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "462E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "648E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "656E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "666E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "692E" [ label=" ",color="blue",arrowhead="dot" ];
"295" -> "712E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "47E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "330E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "514E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "516E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "518E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "520E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "522E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "526E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "528E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "530E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "532E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "534E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "536E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "538E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "540E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "542E" [ label=" ",color="blue",arrowhead="dot" ];
"296" -> "544E" [ label=" ",color="blue",arrowhead="dot" ];
"297" -> "46E" [ label=" ",color="blue",arrowhead="dot" ];
"297" -> "93E" [ label=" ",color="blue",arrowhead="dot" ];
"297" -> "206E" [ label=" ",color="blue",arrowhead="dot" ];
"297" -> "426E" [ label=" ",color="blue",arrowhead="dot" ];
"297" -> "550E" [ label=" ",color="blue",arrowhead="dot" ];
"297" -> "706E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "36E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "95E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "364E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "394E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "420E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "456E" [ label=" ",color="blue",arrowhead="dot" ];
"298" -> "624E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "48E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "168E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "260E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "282E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "554E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "590E" [ label=" ",color="blue",arrowhead="dot" ];
"299" -> "767E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "62E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "190E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "226E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "238E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "254E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "256E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "262E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "266E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "274E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "276E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "294E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "296E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "310E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "320E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "322E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "332E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "340E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "344E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "346E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "348E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "374E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "378E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "452E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "508E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "524E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "612E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "626E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "638E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "644E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "654E" [ label=" ",color="blue",arrowhead="dot" ];
"300" -> "672E" [ label=" ",color="blue",arrowhead="dot" ];
"302" -> "797E" [ label=" ",color="blue",arrowhead="dot" ];
"302" -> "798E" [ label=" ",color="blue",arrowhead="dot" ];
"303" -> "52E" [ label=" ",color="blue",arrowhead="dot" ];
"303" -> "650E" [ label=" ",color="blue",arrowhead="dot" ];
"304" -> "50E" [ label=" ",color="blue",arrowhead="dot" ];
"304" -> "640E" [ label=" ",color="blue",arrowhead="dot" ];
"304" -> "646E" [ label=" ",color="blue",arrowhead="dot" ];
"304" -> "652E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "55E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "220E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "338E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "368E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "486E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "490E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "562E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "564E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "600E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "668E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "674E" [ label=" ",color="blue",arrowhead="dot" ];
"306" -> "698E" [ label=" ",color="blue",arrowhead="dot" ];
"307" -> "107E" [ label=" ",color="blue",arrowhead="dot" ];
"308" -> "108E" [ label=" ",color="blue",arrowhead="dot" ];
"309" -> "109E" [ label=" ",color="blue",arrowhead="dot" ];
"310" -> "110E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "58E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "234E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "300E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "306E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "314E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "342E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "354E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "370E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "382E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "422E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "444E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "582E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "620E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "630E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "684E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "696E" [ label=" ",color="blue",arrowhead="dot" ];
"311" -> "801E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "42E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "192E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "194E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "196E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "198E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "200E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "202E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "204E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "312E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "336E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "376E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "384E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "386E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "428E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "474E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "484E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "546E" [ label=" ",color="blue",arrowhead="dot" ];
"312" -> "548E" [ label=" ",color="blue",arrowhead="dot" ];
"314" -> "113E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "43E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "240E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "298E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "334E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "360E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "390E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "418E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "492E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "502E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "584E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "588E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "602E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "606E" [ label=" ",color="blue",arrowhead="dot" ];
"315" -> "662E" [ label=" ",color="blue",arrowhead="dot" ];
"316" -> "51E" [ label=" ",color="blue",arrowhead="dot" ];
"317" -> "116E" [ label=" ",color="blue",arrowhead="dot" ];
"318" -> "74E" [ label=" ",color="blue",arrowhead="dot" ];
"319" -> "57E" [ label=" ",color="blue",arrowhead="dot" ];
"319" -> "94E" [ label=" ",color="blue",arrowhead="dot" ];
"319" -> "350E" [ label=" ",color="blue",arrowhead="dot" ];
"319" -> "440E" [ label=" ",color="blue",arrowhead="dot" ];
"319" -> "466E" [ label=" ",color="blue",arrowhead="dot" ];
"319" -> "676E" [ label=" ",color="blue",arrowhead="dot" ];
"320" -> "60E" [ label=" ",color="blue",arrowhead="dot" ];
"320" -> "366E" [ label=" ",color="blue",arrowhead="dot" ];
"320" -> "434E" [ label=" ",color="blue",arrowhead="dot" ];
"320" -> "458E" [ label=" ",color="blue",arrowhead="dot" ];
"320" -> "618E" [ label=" ",color="blue",arrowhead="dot" ];
"321" -> "72E" [ label=" ",color="blue",arrowhead="dot" ];
"321" -> "362E" [ label=" ",color="blue",arrowhead="dot" ];
"321" -> "372E" [ label=" ",color="blue",arrowhead="dot" ];
"321" -> "572E" [ label=" ",color="blue",arrowhead="dot" ];
"322" -> "54E" [ label=" ",color="blue",arrowhead="dot" ];
"322" -> "222E" [ label=" ",color="blue",arrowhead="dot" ];
"322" -> "302E" [ label=" ",color="blue",arrowhead="dot" ];
"322" -> "556E" [ label=" ",color="blue",arrowhead="dot" ];
"322" -> "558E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "37E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "208E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "210E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "352E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "450E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "568E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "576E" [ label=" ",color="blue",arrowhead="dot" ];
"323" -> "686E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "228E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "248E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "304E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "468E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "578E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "660E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "688E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "694E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "714E" [ label=" ",color="blue",arrowhead="dot" ];
"324" -> "766E" [ label=" ",color="blue",arrowhead="dot" ];
"325" -> "97E" [ label=" ",color="blue",arrowhead="dot" ];
"325" -> "506E" [ label=" ",color="blue",arrowhead="dot" ];
"326" -> "61E" [ label=" ",color="blue",arrowhead="dot" ];
"326" -> "175E" [ label=" ",color="blue",arrowhead="dot" ];
"326" -> "482E" [ label=" ",color="blue",arrowhead="dot" ];
"328" -> "75E" [ label=" ",color="blue",arrowhead="dot" ];
"328" -> "580E" [ label=" ",color="blue",arrowhead="dot" ];
"329" -> "96E" [ label=" ",color="blue",arrowhead="dot" ];
"330" -> "100E" [ label=" ",color="blue",arrowhead="dot" ];
"330" -> "170E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "63E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "67E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "68E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "69E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "70E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "71E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "802E" [ label=" ",color="blue",arrowhead="dot" ];
"333" -> "793E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "64E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "81E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "82E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "83E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "84E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "85E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "86E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "87E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "88E" [ label=" ",color="blue",arrowhead="dot" ];
"334" -> "89E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "1E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "2E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "3E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "4E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "5E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "6E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "7E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "8E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "9E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "10E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "11E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "12E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "13E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "14E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "15E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "16E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "17E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "18E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "19E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "20E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "21E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "22E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "23E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "24E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "25E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "26E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "27E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "28E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "29E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "30E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "31E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "65E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "119E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "150E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "176E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "743E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "744E" [ label=" ",color="blue",arrowhead="dot" ];
"336" -> "764E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "120E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "121E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "122E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "123E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "124E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "125E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "126E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "127E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "128E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "129E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "130E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "131E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "132E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "133E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "134E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "135E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "136E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "137E" [ label=" ",color="blue",arrowhead="dot" ];
"337" -> "138E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "151E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "153E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "154E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "155E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "156E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "157E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "158E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "159E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "160E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "161E" [ label=" ",color="blue",arrowhead="dot" ];
"339" -> "162E" [ label=" ",color="blue",arrowhead="dot" ];
"347" -> "139E" [ label=" ",color="blue",arrowhead="dot" ];
"347" -> "795E" [ label=" ",color="blue",arrowhead="dot" ];
"348" -> "799E" [ label=" ",color="blue",arrowhead="dot" ];
"348" -> "800E" [ label=" ",color="blue",arrowhead="dot" ];
"349" -> "141E" [ label=" ",color="blue",arrowhead="dot" ];
"350" -> "142E" [ label=" ",color="blue",arrowhead="dot" ];
"350" -> "678E" [ label=" ",color="blue",arrowhead="dot" ];
"351" -> "143E" [ label=" ",color="blue",arrowhead="dot" ];
"351" -> "232E" [ label=" ",color="blue",arrowhead="dot" ];
"351" -> "680E" [ label=" ",color="blue",arrowhead="dot" ];
"351" -> "704E" [ label=" ",color="blue",arrowhead="dot" ];
"352" -> "144E" [ label=" ",color="blue",arrowhead="dot" ];
"352" -> "432E" [ label=" ",color="blue",arrowhead="dot" ];
"353" -> "145E" [ label=" ",color="blue",arrowhead="dot" ];
"354" -> "146E" [ label=" ",color="blue",arrowhead="dot" ];
"354" -> "396E" [ label=" ",color="blue",arrowhead="dot" ];
"355" -> "147E" [ label=" ",color="blue",arrowhead="dot" ];
"356" -> "148E" [ label=" ",color="blue",arrowhead="dot" ];
"357" -> "149E" [ label=" ",color="blue",arrowhead="dot" ];
"358" -> "167E" [ label=" ",color="blue",arrowhead="dot" ];
"359" -> "169E" [ label=" ",color="blue",arrowhead="dot" ];
"360" -> "171E" [ label=" ",color="blue",arrowhead="dot" ];
"361" -> "172E" [ label=" ",color="blue",arrowhead="dot" ];
"362" -> "173E" [ label=" ",color="blue",arrowhead="dot" ];
"363" -> "174E" [ label=" ",color="blue",arrowhead="dot" ];
"364" -> "101E" [ label=" ",color="blue",arrowhead="dot" ];
"365" -> "102E" [ label=" ",color="blue",arrowhead="dot" ];
"367" -> "104E" [ label=" ",color="blue",arrowhead="dot" ];
"368" -> "105E" [ label=" ",color="blue",arrowhead="dot" ];
"369" -> "106E" [ label=" ",color="blue",arrowhead="dot" ];
"374" -> "111E" [ label=" ",color="blue",arrowhead="dot" ];
"375" -> "112E" [ label=" ",color="blue",arrowhead="dot" ];
"377" -> "114E" [ label=" ",color="blue",arrowhead="dot" ];
"378" -> "115E" [ label=" ",color="blue",arrowhead="dot" ];
"380" -> "117E" [ label=" ",color="blue",arrowhead="dot" ];
"380" -> "392E" [ label=" ",color="blue",arrowhead="dot" ];
"381" -> "118E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "177E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "178E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "179E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "180E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "181E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "182E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "183E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "184E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "185E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "186E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "187E" [ label=" ",color="blue",arrowhead="dot" ];
"382" -> "188E" [ label=" ",color="blue",arrowhead="dot" ];
"383" -> "730E" [ label=" ",color="blue",arrowhead="dot" ];
"383" -> "732E" [ label=" ",color="blue",arrowhead="dot" ];
"383" -> "741E" [ label=" ",color="blue",arrowhead="dot" ];
"383" -> "765E" [ label=" ",color="blue",arrowhead="dot" ];
"383" -> "796E" [ label=" ",color="blue",arrowhead="dot" ];
"384" -> "726E" [ label=" ",color="blue",arrowhead="dot" ];
"384" -> "728E" [ label=" ",color="blue",arrowhead="dot" ];
"384" -> "742E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "328E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "496E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "594E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "622E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "754E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "755E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "756E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "757E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "758E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "759E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "760E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "761E" [ label=" ",color="blue",arrowhead="dot" ];
"385" -> "762E" [ label=" ",color="blue",arrowhead="dot" ];
"1E" -> "34E" [ color="purple",arrowhead="none" ];
"2E" -> "35E" [ color="purple",arrowhead="none" ];
"3E" -> "36E" [ color="purple",arrowhead="none" ];
"4E" -> "37E" [ color="purple",arrowhead="none" ];
"5E" -> "38E" [ color="purple",arrowhead="none" ];
"6E" -> "39E" [ color="purple",arrowhead="none" ];
"7E" -> "40E" [ color="purple",arrowhead="none" ];
"9E" -> "41E" [ color="purple",arrowhead="none" ];
"10E" -> "42E" [ color="purple",arrowhead="none" ];
"11E" -> "43E" [ color="purple",arrowhead="none" ];
"12E" -> "44E" [ color="purple",arrowhead="none" ];
"13E" -> "45E" [ color="purple",arrowhead="none" ];
"14E" -> "46E" [ color="purple",arrowhead="none" ];
"15E" -> "47E" [ color="purple",arrowhead="none" ];
"16E" -> "48E" [ color="purple",arrowhead="none" ];
"49E" -> "17E" [ color="purple",arrowhead="none" ];
"18E" -> "50E" [ color="purple",arrowhead="none" ];
"19E" -> "51E" [ color="purple",arrowhead="none" ];
"20E" -> "52E" [ color="purple",arrowhead="none" ];
"21E" -> "53E" [ color="purple",arrowhead="none" ];
"22E" -> "54E" [ color="purple",arrowhead="none" ];
"23E" -> "55E" [ color="purple",arrowhead="none" ];
"24E" -> "56E" [ color="purple",arrowhead="none" ];
"25E" -> "57E" [ color="purple",arrowhead="none" ];
"26E" -> "58E" [ color="purple",arrowhead="none" ];
"27E" -> "59E" [ color="purple",arrowhead="none" ];
"28E" -> "60E" [ color="purple",arrowhead="none" ];
"29E" -> "61E" [ color="purple",arrowhead="none" ];
"30E" -> "62E" [ color="purple",arrowhead="none" ];
"31E" -> "63E" [ color="purple",arrowhead="none" ];
"64E" -> "65E" [ color="purple",arrowhead="none" ];
"66E" -> "8E" [ color="purple",arrowhead="none" ];
"71E" -> "76E" [ color="purple",arrowhead="none" ];
"67E" -> "72E" [ color="purple",arrowhead="none" ];
"68E" -> "73E" [ color="purple",arrowhead="none" ];
"69E" -> "74E" [ color="purple",arrowhead="none" ];
"70E" -> "75E" [ color="purple",arrowhead="none" ];
"81E" -> "92E" [ color="purple",arrowhead="none" ];
"82E" -> "93E" [ color="purple",arrowhead="none" ];
"83E" -> "94E" [ color="purple",arrowhead="none" ];
"84E" -> "95E" [ color="purple",arrowhead="none" ];
"85E" -> "96E" [ color="purple",arrowhead="none" ];
"86E" -> "97E" [ color="purple",arrowhead="none" ];
"87E" -> "98E" [ color="purple",arrowhead="none" ];
"88E" -> "99E" [ color="purple",arrowhead="none" ];
"89E" -> "100E" [ color="purple",arrowhead="none" ];
"101E" -> "120E" [ color="purple",arrowhead="none" ];
"102E" -> "121E" [ color="purple",arrowhead="none" ];
"103E" -> "122E" [ color="purple",arrowhead="none" ];
"104E" -> "123E" [ color="purple",arrowhead="none" ];
"105E" -> "124E" [ color="purple",arrowhead="none" ];
"106E" -> "125E" [ color="purple",arrowhead="none" ];
"107E" -> "126E" [ color="purple",arrowhead="none" ];
"108E" -> "127E" [ color="purple",arrowhead="none" ];
"109E" -> "128E" [ color="purple",arrowhead="none" ];
"110E" -> "129E" [ color="purple",arrowhead="none" ];
"111E" -> "130E" [ color="purple",arrowhead="none" ];
"112E" -> "131E" [ color="purple",arrowhead="none" ];
"113E" -> "132E" [ color="purple",arrowhead="none" ];
"114E" -> "133E" [ color="purple",arrowhead="none" ];
"115E" -> "134E" [ color="purple",arrowhead="none" ];
"116E" -> "135E" [ color="purple",arrowhead="none" ];
"117E" -> "136E" [ color="purple",arrowhead="none" ];
"118E" -> "137E" [ color="purple",arrowhead="none" ];
"119E" -> "138E" [ color="purple",arrowhead="none" ];
"139E" -> "151E" [ color="purple",arrowhead="none" ];
"141E" -> "153E" [ color="purple",arrowhead="none" ];
"142E" -> "154E" [ color="purple",arrowhead="none" ];
"143E" -> "155E" [ color="purple",arrowhead="none" ];
"144E" -> "156E" [ color="purple",arrowhead="none" ];
"145E" -> "157E" [ color="purple",arrowhead="none" ];
"146E" -> "158E" [ color="purple",arrowhead="none" ];
"147E" -> "159E" [ color="purple",arrowhead="none" ];
"148E" -> "160E" [ color="purple",arrowhead="none" ];
"149E" -> "161E" [ color="purple",arrowhead="none" ];
"150E" -> "162E" [ color="purple",arrowhead="none" ];
"165E" -> "177E" [ color="purple",arrowhead="none" ];
"166E" -> "178E" [ color="purple",arrowhead="none" ];
"167E" -> "179E" [ color="purple",arrowhead="none" ];
"168E" -> "180E" [ color="purple",arrowhead="none" ];
"169E" -> "181E" [ color="purple",arrowhead="none" ];
"170E" -> "182E" [ color="purple",arrowhead="none" ];
"171E" -> "183E" [ color="purple",arrowhead="none" ];
"172E" -> "184E" [ color="purple",arrowhead="none" ];
"173E" -> "185E" [ color="purple",arrowhead="none" ];
"174E" -> "186E" [ color="purple",arrowhead="none" ];
"175E" -> "187E" [ color="purple",arrowhead="none" ];
"176E" -> "188E" [ color="purple",arrowhead="none" ];
"189E" -> "190E" [ color="purple",arrowhead="none" ];
"191E" -> "192E" [ color="purple",arrowhead="none" ];
"193E" -> "194E" [ color="purple",arrowhead="none" ];
"195E" -> "196E" [ color="purple",arrowhead="none" ];
"197E" -> "198E" [ color="purple",arrowhead="none" ];
"199E" -> "200E" [ color="purple",arrowhead="none" ];
"201E" -> "202E" [ color="purple",arrowhead="none" ];
"203E" -> "204E" [ color="purple",arrowhead="none" ];
"205E" -> "206E" [ color="purple",arrowhead="none" ];
"207E" -> "208E" [ color="purple",arrowhead="none" ];
"209E" -> "210E" [ color="purple",arrowhead="none" ];
"412E" -> "211E" [ color="purple",arrowhead="none" ];
"214E" -> "213E" [ color="purple",arrowhead="none" ];
"216E" -> "215E" [ color="purple",arrowhead="none" ];
"217E" -> "218E" [ color="purple",arrowhead="none" ];
"219E" -> "220E" [ color="purple",arrowhead="none" ];
"221E" -> "222E" [ color="purple",arrowhead="none" ];
"223E" -> "224E" [ color="purple",arrowhead="none" ];
"225E" -> "226E" [ color="purple",arrowhead="none" ];
"227E" -> "228E" [ color="purple",arrowhead="none" ];
"231E" -> "232E" [ color="purple",arrowhead="none" ];
"233E" -> "234E" [ color="purple",arrowhead="none" ];
"236E" -> "235E" [ color="purple",arrowhead="none" ];
"237E" -> "238E" [ color="purple",arrowhead="none" ];
"239E" -> "240E" [ color="purple",arrowhead="none" ];
"241E" -> "242E" [ color="purple",arrowhead="none" ];
"243E" -> "244E" [ color="purple",arrowhead="none" ];
"245E" -> "246E" [ color="purple",arrowhead="none" ];
"247E" -> "248E" [ color="purple",arrowhead="none" ];
"249E" -> "250E" [ color="purple",arrowhead="none" ];
"251E" -> "252E" [ color="purple",arrowhead="none" ];
"253E" -> "254E" [ color="purple",arrowhead="none" ];
"255E" -> "256E" [ color="purple",arrowhead="none" ];
"257E" -> "258E" [ color="purple",arrowhead="none" ];
"259E" -> "260E" [ color="purple",arrowhead="none" ];
"261E" -> "262E" [ color="purple",arrowhead="none" ];
"263E" -> "264E" [ color="purple",arrowhead="none" ];
"265E" -> "266E" [ color="purple",arrowhead="none" ];
"267E" -> "268E" [ color="purple",arrowhead="none" ];
"269E" -> "270E" [ color="purple",arrowhead="none" ];
"271E" -> "272E" [ color="purple",arrowhead="none" ];
"273E" -> "274E" [ color="purple",arrowhead="none" ];
"275E" -> "276E" [ color="purple",arrowhead="none" ];
"278E" -> "277E" [ color="purple",arrowhead="none" ];
"279E" -> "767E" [ color="purple",arrowhead="none" ];
"281E" -> "282E" [ color="purple",arrowhead="none" ];
"283E" -> "284E" [ color="purple",arrowhead="none" ];
"285E" -> "286E" [ color="purple",arrowhead="none" ];
"768E" -> "287E" [ color="purple",arrowhead="none" ];
"289E" -> "290E" [ color="purple",arrowhead="none" ];
"291E" -> "292E" [ color="purple",arrowhead="none" ];
"293E" -> "294E" [ color="purple",arrowhead="none" ];
"295E" -> "296E" [ color="purple",arrowhead="none" ];
"297E" -> "298E" [ color="purple",arrowhead="none" ];
"299E" -> "300E" [ color="purple",arrowhead="none" ];
"301E" -> "302E" [ color="purple",arrowhead="none" ];
"303E" -> "304E" [ color="purple",arrowhead="none" ];
"305E" -> "306E" [ color="purple",arrowhead="none" ];
"307E" -> "308E" [ color="purple",arrowhead="none" ];
"309E" -> "310E" [ color="purple",arrowhead="none" ];
"311E" -> "312E" [ color="purple",arrowhead="none" ];
"313E" -> "314E" [ color="purple",arrowhead="none" ];
"315E" -> "316E" [ color="purple",arrowhead="none" ];
"317E" -> "318E" [ color="purple",arrowhead="none" ];
"319E" -> "320E" [ color="purple",arrowhead="none" ];
"321E" -> "322E" [ color="purple",arrowhead="none" ];
"327E" -> "800E" [ color="purple",arrowhead="none" ];
"329E" -> "330E" [ color="purple",arrowhead="none" ];
"331E" -> "332E" [ color="purple",arrowhead="none" ];
"333E" -> "334E" [ color="purple",arrowhead="none" ];
"335E" -> "336E" [ color="purple",arrowhead="none" ];
"337E" -> "338E" [ color="purple",arrowhead="none" ];
"339E" -> "340E" [ color="purple",arrowhead="none" ];
"341E" -> "342E" [ color="purple",arrowhead="none" ];
"343E" -> "344E" [ color="purple",arrowhead="none" ];
"345E" -> "346E" [ color="purple",arrowhead="none" ];
"347E" -> "348E" [ color="purple",arrowhead="none" ];
"349E" -> "350E" [ color="purple",arrowhead="none" ];
"351E" -> "352E" [ color="purple",arrowhead="none" ];
"353E" -> "354E" [ color="purple",arrowhead="none" ];
"412E" -> "355E" [ color="purple",arrowhead="none" ];
"357E" -> "358E" [ color="purple",arrowhead="none" ];
"359E" -> "360E" [ color="purple",arrowhead="none" ];
"361E" -> "362E" [ color="purple",arrowhead="none" ];
"363E" -> "364E" [ color="purple",arrowhead="none" ];
"365E" -> "366E" [ color="purple",arrowhead="none" ];
"367E" -> "368E" [ color="purple",arrowhead="none" ];
"369E" -> "370E" [ color="purple",arrowhead="none" ];
"371E" -> "372E" [ color="purple",arrowhead="none" ];
"373E" -> "374E" [ color="purple",arrowhead="none" ];
"375E" -> "376E" [ color="purple",arrowhead="none" ];
"377E" -> "378E" [ color="purple",arrowhead="none" ];
"379E" -> "380E" [ color="purple",arrowhead="none" ];
"381E" -> "382E" [ color="purple",arrowhead="none" ];
"383E" -> "384E" [ color="purple",arrowhead="none" ];
"385E" -> "386E" [ color="purple",arrowhead="none" ];
"387E" -> "388E" [ color="purple",arrowhead="none" ];
"389E" -> "390E" [ color="purple",arrowhead="none" ];
"391E" -> "392E" [ color="purple",arrowhead="none" ];
"393E" -> "394E" [ color="purple",arrowhead="none" ];
"395E" -> "396E" [ color="purple",arrowhead="none" ];
"397E" -> "398E" [ color="purple",arrowhead="none" ];
"399E" -> "400E" [ color="purple",arrowhead="none" ];
"402E" -> "401E" [ color="purple",arrowhead="none" ];
"404E" -> "403E" [ color="purple",arrowhead="none" ];
"406E" -> "405E" [ color="purple",arrowhead="none" ];
"408E" -> "407E" [ color="purple",arrowhead="none" ];
"236E" -> "409E" [ color="purple",arrowhead="none" ];
"412E" -> "411E" [ color="purple",arrowhead="none" ];
"412E" -> "413E" [ color="purple",arrowhead="none" ];
"278E" -> "415E" [ color="purple",arrowhead="none" ];
"417E" -> "418E" [ color="purple",arrowhead="none" ];
"419E" -> "420E" [ color="purple",arrowhead="none" ];
"421E" -> "422E" [ color="purple",arrowhead="none" ];
"423E" -> "424E" [ color="purple",arrowhead="none" ];
"425E" -> "426E" [ color="purple",arrowhead="none" ];
"427E" -> "428E" [ color="purple",arrowhead="none" ];
"431E" -> "432E" [ color="purple",arrowhead="none" ];
"433E" -> "434E" [ color="purple",arrowhead="none" ];
"435E" -> "436E" [ color="purple",arrowhead="none" ];
"438E" -> "437E" [ color="purple",arrowhead="none" ];
"439E" -> "440E" [ color="purple",arrowhead="none" ];
"441E" -> "442E" [ color="purple",arrowhead="none" ];
"443E" -> "444E" [ color="purple",arrowhead="none" ];
"445E" -> "446E" [ color="purple",arrowhead="none" ];
"448E" -> "447E" [ color="purple",arrowhead="none" ];
"449E" -> "450E" [ color="purple",arrowhead="none" ];
"451E" -> "452E" [ color="purple",arrowhead="none" ];
"453E" -> "454E" [ color="purple",arrowhead="none" ];
"455E" -> "456E" [ color="purple",arrowhead="none" ];
"457E" -> "458E" [ color="purple",arrowhead="none" ];
"459E" -> "460E" [ color="purple",arrowhead="none" ];
"461E" -> "462E" [ color="purple",arrowhead="none" ];
"236E" -> "463E" [ color="purple",arrowhead="none" ];
"465E" -> "466E" [ color="purple",arrowhead="none" ];
"467E" -> "468E" [ color="purple",arrowhead="none" ];
"469E" -> "470E" [ color="purple",arrowhead="none" ];
"471E" -> "472E" [ color="purple",arrowhead="none" ];
"473E" -> "474E" [ color="purple",arrowhead="none" ];
"476E" -> "475E" [ color="purple",arrowhead="none" ];
"477E" -> "478E" [ color="purple",arrowhead="none" ];
"479E" -> "358E" [ color="purple",arrowhead="none" ];
"481E" -> "482E" [ color="purple",arrowhead="none" ];
"483E" -> "484E" [ color="purple",arrowhead="none" ];
"485E" -> "486E" [ color="purple",arrowhead="none" ];
"487E" -> "488E" [ color="purple",arrowhead="none" ];
"489E" -> "490E" [ color="purple",arrowhead="none" ];
"491E" -> "492E" [ color="purple",arrowhead="none" ];
"495E" -> "795E" [ color="purple",arrowhead="none" ];
"499E" -> "500E" [ color="purple",arrowhead="none" ];
"501E" -> "502E" [ color="purple",arrowhead="none" ];
"504E" -> "503E" [ color="purple",arrowhead="none" ];
"505E" -> "506E" [ color="purple",arrowhead="none" ];
"507E" -> "508E" [ color="purple",arrowhead="none" ];
"509E" -> "510E" [ color="purple",arrowhead="none" ];
"412E" -> "511E" [ color="purple",arrowhead="none" ];
"513E" -> "514E" [ color="purple",arrowhead="none" ];
"515E" -> "516E" [ color="purple",arrowhead="none" ];
"517E" -> "518E" [ color="purple",arrowhead="none" ];
"519E" -> "520E" [ color="purple",arrowhead="none" ];
"521E" -> "522E" [ color="purple",arrowhead="none" ];
"523E" -> "524E" [ color="purple",arrowhead="none" ];
"525E" -> "526E" [ color="purple",arrowhead="none" ];
"527E" -> "528E" [ color="purple",arrowhead="none" ];
"529E" -> "530E" [ color="purple",arrowhead="none" ];
"531E" -> "532E" [ color="purple",arrowhead="none" ];
"533E" -> "534E" [ color="purple",arrowhead="none" ];
"535E" -> "536E" [ color="purple",arrowhead="none" ];
"537E" -> "538E" [ color="purple",arrowhead="none" ];
"539E" -> "540E" [ color="purple",arrowhead="none" ];
"541E" -> "542E" [ color="purple",arrowhead="none" ];
"543E" -> "544E" [ color="purple",arrowhead="none" ];
"545E" -> "546E" [ color="purple",arrowhead="none" ];
"547E" -> "548E" [ color="purple",arrowhead="none" ];
"549E" -> "550E" [ color="purple",arrowhead="none" ];
"551E" -> "552E" [ color="purple",arrowhead="none" ];
"553E" -> "554E" [ color="purple",arrowhead="none" ];
"555E" -> "556E" [ color="purple",arrowhead="none" ];
"557E" -> "558E" [ color="purple",arrowhead="none" ];
"278E" -> "559E" [ color="purple",arrowhead="none" ];
"561E" -> "562E" [ color="purple",arrowhead="none" ];
"563E" -> "564E" [ color="purple",arrowhead="none" ];
"565E" -> "566E" [ color="purple",arrowhead="none" ];
"567E" -> "568E" [ color="purple",arrowhead="none" ];
"569E" -> "570E" [ color="purple",arrowhead="none" ];
"571E" -> "572E" [ color="purple",arrowhead="none" ];
"573E" -> "574E" [ color="purple",arrowhead="none" ];
"575E" -> "576E" [ color="purple",arrowhead="none" ];
"577E" -> "578E" [ color="purple",arrowhead="none" ];
"579E" -> "580E" [ color="purple",arrowhead="none" ];
"581E" -> "582E" [ color="purple",arrowhead="none" ];
"583E" -> "584E" [ color="purple",arrowhead="none" ];
"585E" -> "586E" [ color="purple",arrowhead="none" ];
"587E" -> "588E" [ color="purple",arrowhead="none" ];
"589E" -> "590E" [ color="purple",arrowhead="none" ];
"593E" -> "594E" [ color="purple",arrowhead="none" ];
"597E" -> "598E" [ color="purple",arrowhead="none" ];
"599E" -> "600E" [ color="purple",arrowhead="none" ];
"601E" -> "602E" [ color="purple",arrowhead="none" ];
"603E" -> "604E" [ color="purple",arrowhead="none" ];
"605E" -> "606E" [ color="purple",arrowhead="none" ];
"607E" -> "608E" [ color="purple",arrowhead="none" ];
"609E" -> "610E" [ color="purple",arrowhead="none" ];
"611E" -> "612E" [ color="purple",arrowhead="none" ];
"613E" -> "614E" [ color="purple",arrowhead="none" ];
"615E" -> "358E" [ color="purple",arrowhead="none" ];
"617E" -> "618E" [ color="purple",arrowhead="none" ];
"619E" -> "620E" [ color="purple",arrowhead="none" ];
"621E" -> "622E" [ color="purple",arrowhead="none" ];
"623E" -> "624E" [ color="purple",arrowhead="none" ];
"625E" -> "626E" [ color="purple",arrowhead="none" ];
"627E" -> "628E" [ color="purple",arrowhead="none" ];
"629E" -> "630E" [ color="purple",arrowhead="none" ];
"631E" -> "632E" [ color="purple",arrowhead="none" ];
"634E" -> "633E" [ color="purple",arrowhead="none" ];
"635E" -> "636E" [ color="purple",arrowhead="none" ];
"637E" -> "638E" [ color="purple",arrowhead="none" ];
"639E" -> "640E" [ color="purple",arrowhead="none" ];
"641E" -> "642E" [ color="purple",arrowhead="none" ];
"643E" -> "644E" [ color="purple",arrowhead="none" ];
"645E" -> "646E" [ color="purple",arrowhead="none" ];
"647E" -> "648E" [ color="purple",arrowhead="none" ];
"649E" -> "650E" [ color="purple",arrowhead="none" ];
"651E" -> "652E" [ color="purple",arrowhead="none" ];
"653E" -> "654E" [ color="purple",arrowhead="none" ];
"655E" -> "656E" [ color="purple",arrowhead="none" ];
"657E" -> "658E" [ color="purple",arrowhead="none" ];
"659E" -> "660E" [ color="purple",arrowhead="none" ];
"661E" -> "662E" [ color="purple",arrowhead="none" ];
"663E" -> "664E" [ color="purple",arrowhead="none" ];
"665E" -> "666E" [ color="purple",arrowhead="none" ];
"667E" -> "668E" [ color="purple",arrowhead="none" ];
"669E" -> "670E" [ color="purple",arrowhead="none" ];
"671E" -> "672E" [ color="purple",arrowhead="none" ];
"673E" -> "674E" [ color="purple",arrowhead="none" ];
"675E" -> "676E" [ color="purple",arrowhead="none" ];
"679E" -> "680E" [ color="purple",arrowhead="none" ];
"681E" -> "682E" [ color="purple",arrowhead="none" ];
"683E" -> "684E" [ color="purple",arrowhead="none" ];
"685E" -> "686E" [ color="purple",arrowhead="none" ];
"687E" -> "688E" [ color="purple",arrowhead="none" ];
"689E" -> "690E" [ color="purple",arrowhead="none" ];
"691E" -> "692E" [ color="purple",arrowhead="none" ];
"693E" -> "694E" [ color="purple",arrowhead="none" ];
"695E" -> "696E" [ color="purple",arrowhead="none" ];
"697E" -> "698E" [ color="purple",arrowhead="none" ];
"699E" -> "700E" [ color="purple",arrowhead="none" ];
"703E" -> "704E" [ color="purple",arrowhead="none" ];
"705E" -> "706E" [ color="purple",arrowhead="none" ];
"709E" -> "710E" [ color="purple",arrowhead="none" ];
"711E" -> "712E" [ color="purple",arrowhead="none" ];
"713E" -> "714E" [ color="purple",arrowhead="none" ];
"715E" -> "398E" [ color="purple",arrowhead="none" ];
"717E" -> "718E" [ color="purple",arrowhead="none" ];
"719E" -> "720E" [ color="purple",arrowhead="none" ];
"721E" -> "722E" [ color="purple",arrowhead="none" ];
"725E" -> "726E" [ color="purple",arrowhead="none" ];
"727E" -> "728E" [ color="purple",arrowhead="none" ];
"729E" -> "730E" [ color="purple",arrowhead="none" ];
"731E" -> "732E" [ color="purple",arrowhead="none" ];
"741E" -> "743E" [ color="purple",arrowhead="none" ];
"742E" -> "744E" [ color="purple",arrowhead="none" ];
"745E" -> "754E" [ color="purple",arrowhead="none" ];
"746E" -> "755E" [ color="purple",arrowhead="none" ];
"747E" -> "756E" [ color="purple",arrowhead="none" ];
"748E" -> "757E" [ color="purple",arrowhead="none" ];
"749E" -> "758E" [ color="purple",arrowhead="none" ];
"750E" -> "759E" [ color="purple",arrowhead="none" ];
"751E" -> "760E" [ color="purple",arrowhead="none" ];
"752E" -> "761E" [ color="purple",arrowhead="none" ];
"753E" -> "762E" [ color="purple",arrowhead="none" ];
"763E" -> "764E" [ color="purple",arrowhead="none" ];
"765E" -> "766E" [ color="purple",arrowhead="none" ];
"770E" -> "783E" [ color="purple",arrowhead="none" ];
"770E" -> "784E" [ color="purple",arrowhead="none" ];
"769E" -> "785E" [ color="purple",arrowhead="none" ];
"769E" -> "786E" [ color="purple",arrowhead="none" ];
"769E" -> "787E" [ color="purple",arrowhead="none" ];
"770E" -> "788E" [ color="purple",arrowhead="none" ];
"770E" -> "789E" [ color="purple",arrowhead="none" ];
"769E" -> "790E" [ color="purple",arrowhead="none" ];
"770E" -> "791E" [ color="purple",arrowhead="none" ];
"769E" -> "792E" [ color="purple",arrowhead="none" ];
"793E" -> "769E" [ color="purple",arrowhead="none" ];
"769E" -> "784E" [ color="purple",arrowhead="none" ];
"770E" -> "785E" [ color="purple",arrowhead="none" ];
"788E" -> "787E" [ color="purple",arrowhead="none" ];
"770E" -> "792E" [ color="purple",arrowhead="none" ];
"798E" -> "799E" [ color="purple",arrowhead="none" ];
"796E" -> "797E" [ color="purple",arrowhead="none" ];
"793E" -> "789E" [ color="purple",arrowhead="none" ];
"783E" -> "787E" [ color="purple",arrowhead="none" ];
"784E" -> "792E" [ color="purple",arrowhead="none" ];
"787E" -> "789E" [ color="purple",arrowhead="none" ];
"769E" -> "791E" [ color="purple",arrowhead="none" ];
"802E" -> "801E" [ color="purple",arrowhead="none" ];
}

}}}','',0);
INSERT INTO "wiki" VALUES('SandBox/Graphviz',2,1293876975685000,'admin','10.0.2.2','{{{
#!graphviz

    digraph G {

	subgraph cluster_0 {
		style=filled;
		color=lightgrey;
		node [style=filled,color=white];
		a0 -> a1 -> a2 -> a3;
		label = "process #1";
	}

	subgraph cluster_1 {
		node [style=filled];
		b0 -> b1 -> b2 -> b3;
		label = "process #2";
		color=blue
	}
	start -> a0;
	start -> b0;
	a1 -> b3;
	b2 -> a3;
	a3 -> a0;
	a3 -> end;
	b3 -> end;

	start [shape=Mdiamond];
	end [shape=Msquare];
    }

}}}','',0);
INSERT INTO "wiki" VALUES('SandBox/Graphviz',3,1293877192086000,'admin','10.0.2.2','{{{
#!graphviz

    digraph G {

	subgraph cluster_0 {
		style=filled;
		color=lightgrey;
		node [style=filled,color=white];
		a0 -> a1 -> a2 -> a3;
		label = "process #1";
	}

	subgraph cluster_1 {
		node [style=filled];
		b0 -> b1 -> b2 -> b3;
		label = "process #2";
		color=blue
	}
	start -> a0;
	start -> b0;
	a1 -> b3;
	b2 -> a3;
	a3 -> a0;
	a3 -> end;
	b3 -> end;

	start [shape=Mdiamond];
	end [shape=Msquare];
    }
}}}

{{{
#!graphviz
    digraph G {
	graph [center rankdir=LR bgcolor="#808080"]
	edge [dir=none]
	node [width=0.3 height=0.3 label=""]
	{ node [shape=circle style=invis]
		1 2 3 4 5 6 7 8  10 20 30 40 50 60 70 80
	}
	{ node [shape=circle]
		a b c d e f g h  i j k l m n o p  q r s t u v w x
	}
	{ node [shape=diamond]
		A B C D E F G H  I J K L M N O P  Q R S T U V W X
	}
	1 -> a -> {A B} [color="#0000ff"]
	2 -> b -> {B A} [color="#ff0000"]
	3 -> c -> {C D} [color="#ffff00"]
	4 -> d -> {D C} [color="#00ff00"]
	5 -> e -> {E F} [color="#000000"]
	6 -> f -> {F E} [color="#00ffff"]
	7 -> g -> {G H} [color="#ffffff"]
	8 -> h -> {H G} [color="#ff00ff"]
	{ edge [color="#ff0000:#0000ff"]
		A -> i -> {I K}
		B -> j -> {J L}
	}
	{ edge [color="#00ff00:#ffff00"]
		C -> k -> {K I}
		D -> l -> {L J}
	}
	{ edge [color="#00ffff:#000000"]
		E -> m -> {M O}
		F -> n -> {N P}
	}
	{ edge [color="#ff00ff:#ffffff"]
		G -> o -> {O M}
		H -> p -> {P N}
	}
	{ edge [color="#00ff00:#ffff00:#ff0000:#0000ff"]
		I -> q -> {Q U}
		J -> r -> {R V}
		K -> s -> {S W}
		L -> t -> {T X}
	}
	{ edge [color="#ff00ff:#ffffff:#00ffff:#000000"]
		M -> u -> {U Q}
		N -> v -> {V R}
		O -> w -> {W S}
		P -> x -> {X T}
	}
	{ edge [color="#ff00ff:#ffffff:#00ffff:#000000:#00ff00:#ffff00:#ff0000:#0000ff"]
		Q -> 10
		R -> 20
		S -> 30
		T -> 40
		U -> 50
		V -> 60
		W -> 70
		X -> 80
	}
    }
}}}','',0);
INSERT INTO "wiki" VALUES('ZhCamelCase',1,1293980803702000,'trac','127.0.0.1','= 驼峰式 =
使用多个首字母大写的单词组成新单词.

在Wiki中, 驼峰式约定用于创建超链接, 并且要求大写字母后面必须是小写字母; 因此, "AlabamA"和"ABc"将不是链接.

== 定制Wiki行为 ==

有些人却不喜欢驼峰式.  虽然Trac忠实于原版Wiki样式, 它还是提供了一些适应用户要求的方法:
 * 有一个选项(在`[wiki]`的`ignore_missing_pages`中), 可以忽略所有没有对应页面的驼峰式的链接, 而不是将其显示成一个带问号("?")的灰色链接.[[BR]]
   这对于将驼峰式用于代码名称(比如: 类名), 因而没有相应页面的情况非常有用.
 * 有一个选项(在`[wiki]`的`split_page_names`中), 可以在渲染链接时向驼峰式链接的单词中自动插入空格.
 * 创建显式Wiki链接也相当容易, 详情请参见[ZhWikiPageNames Wiki页面名字].
 * 另外, Wiki格式在某些地方可以被完全禁用(比如, 在渲染提交日志消息时).

更多选项, 请参见[ZhTracIni Trac配置].

== 更多驼峰式的相关信息 ==

 * http://c2.com/cgi/wiki?WikiCase
 * http://en.wikipedia.org/wiki/CamelCase

----
原文版本: CamelCase[[BR]]
相关信息: [ZhWikiPageNames Wiki页面名字],  [ZhWikiNewPage 创建Wiki页面], [ZhWikiFormatting Wiki格式], [ZhTracWiki Trac内置Wiki][[BR]]
See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhInterMapTxt',1,1293980803712000,'trac','127.0.0.1','= 链接前缀表 =

== 这是定义外部Wiki前缀的地方 ==

本页效仿了MeatBall:InterMapTxt页. 另外, 可以在映射后, 添加一个注释(可选).

Trac以一种特殊的方式来调用该页, 用于以一种灵活的和动态的方式支持[ZhInterWiki 外部Wiki]链接.

该页中第一个行分隔符后的代码块, 将被解释为[ZhInterWiki 外部Wiki]的规格说明表:
{{{
prefix <space> URL [<space> # comment]
}}}

通过使用URL内的`$1`, `$2`等, 可以创建支持多参数的[ZhInterWiki 外部Wiki]链接, 例如, !Trac:ticket:40. 此URL本身可以添加注释, 该注释会用来修饰那些使用了该前缀的链接.

可以实时向列表添加, 创建新的[ZhInterWiki 外部Wiki]链接.

注意, ''''删除前缀''''也是立即生效的. 因此如果要禁止前缀, 最好使用注释的方法.

还要注意一点, [ZhInterWiki 外部Wiki]的前缀是区分大小写的.

== 活动前缀列表 ==
[[InterWiki]]


== 前缀定义 ==
{{{
PEP     http://www.python.org/peps/pep-$1.html                                       # Python Enhancement Proposal 
Trac-ML  http://thread.gmane.org/gmane.comp.version-control.subversion.trac.general/ # Message $1 in Trac Mailing List
trac-dev http://thread.gmane.org/gmane.comp.version-control.subversion.trac.devel/   # Message $1 in Trac Development Mailing List

Mercurial http://www.selenic.com/mercurial/wiki/index.cgi/ # the wiki for the Mercurial distributed SCM
RFC       http://tools.ietf.org/html/rfc$1 # IETF''s RFC $1
ISO       http://en.wikipedia.org/wiki/ISO_ # ISO Standard $1 in Wikipedia

CheeseShop  http://cheeseshop.python.org/pypi/  # Python Package $1 from the Cheese Shop
SQLite      http://www.sqlite.org/cvstrac/wiki?p= 
mysql-bugs  http://bugs.mysql.com/bug.php?id=  # Bug #$1 in MySQL''s bug database
peak        http://peak.telecommunity.com/DevCenter/ # $1 in Python Enterprise Application Kit''s Wiki
MODPYTHON   http://issues.apache.org/jira/browse/MODPYTHON- # Issue $1 in mod_python''s JIRA instance
SvnWiki     http://www.orcaware.com/svn/wiki/ # Subversion Wiki

#
# A arbitrary pick of InterWiki prefixes...
#
Acronym          http://www.acronymfinder.com/af-query.asp?String=exact&Acronym=
C2find           http://c2.com/cgi/wiki?FindPage&value=
Cache            http://www.google.com/search?q=cache:
CPAN             http://search.cpan.org/perldoc?
DebianBug        http://bugs.debian.org/
DebianPackage    http://packages.debian.org/
Dictionary       http://www.dict.org/bin/Dict?Database=*&Form=Dict1&Strategy=*&Query=
Google           http://www.google.com/search?q=
GoogleGroups     http://groups.google.com/group/$1/msg/$2        # Message $2 in $1 Google Group
JargonFile       http://downlode.org/perl/jargon-redirect.cgi?term=
MeatBall         http://www.usemod.com/cgi-bin/mb.pl?
MetaWiki         http://sunir.org/apps/meta.pl?
MetaWikiPedia    http://meta.wikipedia.org/wiki/
MoinMoin         http://moinmoin.wikiwikiweb.de/
WhoIs            http://www.whois.sc/
Why              http://clublet.com/c/c/why?
c2Wiki             http://c2.com/cgi/wiki?
WikiPedia        http://en.wikipedia.org/wiki/
}}}


----
原文版本: InterMapTxt[[BR]]

',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhInterTrac',1,1293980803712000,'trac','127.0.0.1','= 外部Trac链接  =
从0.10版之后, Trac就支持在Wiki标记中, 方便地引用其它Trac服务器资源的方法.

== 定义 ==

一个[ZhInterTrac 外部Trac]链接可被看做一个指定范围的Trac链接.
它用来引用位于另一个Trac环境中的Trac资源, 例如Wiki页面, 变更集, 传票等等.

== 活动外部Trac前缀表 ==

[[InterTrac]]

== 链接语法 ==
将另外一个Trac环境的名字作为前缀, 紧跟一个冒号, 以另一个Trac环境中的资源结尾.
{{{
<target_environment>:<TracLinks>
}}}

使用一个通常的[ZhTracLinks Trac链接]去指定另外的那个资源.

该目标环境的名字可以是该环境的实名, 也可以是一个别名.

关于别名, 要在`trac.ini`中对其进行定义(见下面的部分). 前缀是区分大小写的.

为了方便, 还有一些快捷的方式. 用户可使用某个别名来作为一个传票, 更改集或者报告等标识符的前缀.
(例如 `#T234`,  `[T1508]`,  `[trac 1508]`,  ...)


要使用[ZhInterTrac 外部Trac], 需要先创建一个配置表. 该配置表位于[ZhTracIni TracIni]文件中[intertrac]节中.

配置例子:
{{{
...
[intertrac]
# -- 创建一个别名的例子
t = trac

# -- 到一个外部Trac的链接:
trac.title = Edgewall''s Trac for Trac
trac.url = http://trac.edgewall.org
}}}

`.url`是强制的, 用于定位其他Trac. 如果Trac的环境位于同一个服务器, 它可以是一个相对URL.

`.title`用于当你将鼠标移动到一个[ZhInterTrac 外部Trac]链接时, 提供一个有用的提示信息.

最后, `.compat`项会被用来启用或禁用某"兼容模式":

 * 如果目标Trac在运行于小于里程碑0.10(准确说是r3526)的某个版本, 
   它将不知如何处理一个[ZhInterTrac 外部Trac], 
   因此, 将由本地Trac来准备好正确的链接. 
   并不是所有的链接都可以这样运行, 
   但绝大多数时候是这样的. 
   这个叫做"兼容模式", 并且默认为`true`.

 * 如果你清楚远端Trac知道如何处理[ZhInterTrac 外部Trac]链接, 
   你可以明确禁用兼容模式, 
   那么任何[ZhTracLinks Trac链接]会变成[ZhInterTrac 外部Trac]链接.

现在, 有了上述的配置, 你可以创造以下链接:
 * 到此 InterTrac 页面:
   * `trac:wiki:InterTrac` trac:wiki:InterTrac
   * `t:wiki:InterTrac` t:wiki:InterTrac
   * Keys are case insensitive: `T:wiki:InterTrac` T:wiki:InterTrac
 * 到传票 #234:
   * `trac:ticket:234` trac:ticket:234
   * `trac:#234` trac:#234 
   * `#T234` #T234
 * 到变更集 [1912]:
   * `trac:changeset:1912` trac:changeset:1912
   * `[T1912]` [T1912]
 * 到日志范围 [3300:3330]: ''''''(注意: 下面这条需要`trac.compat=false`)''''''
   * `trac:log:@3300:3330` trac:log:@3300:3330  
   * `[trac 3300:3330]` [trac 3300:3330] 
 * 最后, 到远程trac的起始页面, 只需在一个明确的链接中, 简单地使用其前缀和'':''. 例如: `[th: Trac Hacks]` (''''从0.11起; 注意, 要使其起作用, ''''远程'''' Trac 必须运行0.11'''')

普通形式`intertrac_prefix:module:id`被转换为对应的URL`<remote>/module/id`. 对于一些特定的模块而言, 可以使用快捷的链接(例如: #T234将被传票模块处理), 而剩余的部分(`intertrac_prefix:something`), 我们将依赖于远端Trac的TracSearch#quickjump机制.

----
原文版本: InterTrac[[BR]]
相关信息: [ZhTracLinks Trac链接],  [ZhInterWiki 外部Wiki][[BR]]
See also: TracLinks,  InterWiki 
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhInterWiki',1,1293980803722000,'trac','127.0.0.1','= 外部Wiki链接的帮助 =
''''(自里程碑0.10后)''''

== 定义 ==
[ZhInterWiki 外部Wiki]链接可用来引用另一个Wiki系统中的某个Wiki页面, 推而广之, 只需要一个简单的URL映射, [ZhInterWiki 外部Wiki]链接可用来引用其他任何Web程序中的某个对象.

甚至, [ZhInterWiki 外部Wiki]前缀甚至可以用来将链接指定到新的协议中, 例如!TortoiseSvn使用的`tsvn:`.

== 链接语法 ==
{{{
<target_wiki>(:<identifier>)+
}}}

链接是由目标Wiki(或者系统)的名字组成的, 紧跟一个冒号(比如 MeatBall:), 接着是目标的页面规格说明. 作为[ZhInterTrac 外部Trac]前缀, ''''''[ZhInterWiki 外部Wiki]前缀是不区分大小写的.''''''

目标Wiki的URL是在[ZhInterMapTxt 链接前缀表]Wiki页面中查找的, 参照的是MeatBall:InterMapTxt.

除了传统的[ZhInterWiki 外部Wiki]链接外(目标被简单地附加在URL的后面), Trac支持参数化的[ZhInterWiki 外部Wiki] URL.URL中的标识符`$1`,  `$2`,  ..., 会被相应的参数所替代. 参数列表是通过用":"来分隔页标记而形成的.

== 例子 ==
下面是[ZhInterMapTxt 链接前缀表]页面的一个摘录:
{{{
= InterMapTxt =
== 此处定义外部Wiki前缀 ==
当前的活动前缀:[[InterWiki]]

该页参照MeatBall:InterMapTxt页.
另外, 可以在在映射后添加注释.
----
{{{
PEP      http://www.python.org/peps/pep-$1.html           # Python Enhancement Proposal $1 
Trac-ML  http://thread.gmane.org/gmane.comp.version-control.subversion.trac.general/$1  # Message $1 in Trac Mailing List

tsvn     tsvn:                                            # Interact with TortoiseSvn
...
MeatBall http://www.usemod.com/cgi-bin/mb.pl?
MetaWiki http://sunir.org/apps/meta.pl?
MetaWikiPedia http://meta.wikipedia.org/wiki/
MoinMoin http://moinmoin.wikiwikiweb.de/
...
}}}
}}}

那么, 
 * `MoinMoin:InterWikiMap`将被解释为 MoinMoin:InterWikiMap , 该链接的''''标题''''则是"!InterWikiMap in !MoinMoin".
 * `Trac-ML:4346`将被解释为 Trac-ML:4346 , 该链接的''''标题''''则是"Message 4346 in Trac Mailing List".
----
原文版本: InterWiki[[BR]]
相关信息: [ZhInterTrac 外部Trac],  [ZhInterMapTxt 链接前缀表][[BR]]
See also: InterTrac,  InterMapTxt 
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhPageTemplates',1,1293980803722000,'trac','127.0.0.1','= Wiki 页面模板 = 

  ''''(自从[http://trac.edgewall.org/milestone/0.11 0.11])''''

新建的wiki页的默认内容可以从页面模板的列表中选择.

该列表由以''''PageTemplates/''''开头命名的wiki页面而组成.
一个新页面的最初内容将是选中的模板页中的内容, 或者是一个空白页, 如果选了某个特殊选项的话, 比如说''''(blank page)''''. 当没有wiki页面匹配该前缀时, 页面中的最初内容将一直是空白页, 并且不会显示列表选择器(即: 这跟我们现在的行为是一致的).

要创建一个新的模板, 只需创建一个名字以''''PageTemplates/''''开头的的页面.

(提示: 甚至可以创建一个''''!PageTemplates/Template''''模板, 以便日后创建模板使用!)

现有的模板:

[[TitleIndex(PageTemplates/)]]

----
原文版本: PageTemplates[[BR]]
相关信息: [ZhTracWiki 维基][[BR]]
See also: TracWiki
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhRecentChanges',1,1293980803722000,'trac','127.0.0.1',''''''' [ZhTitleIndex 标题索引] '''''' | '''''' 日期索引 ''''''

[[RecentChanges]]

----
原文版本: RecentChanges
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhSandBox',1,1293980803722000,'trac','127.0.0.1','= 沙箱 =

该页只是一个练习和学习Wiki格式的网页.

行动吧! 自由地编辑它吧!

----
原文版本: SandBox[[BR]]',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTitleIndex',1,1293980803732000,'trac','127.0.0.1',''''''' 标题索引 '''''' | '''''' [ZhRecentChanges 日期索引] ''''''

[[TitleIndex(format=group,min=4)]]

----
原文版本: TitleIndex
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracAccessibility',1,1293980803732000,'trac','127.0.0.1','= Trac中的辅助性支持 =
不是每个用户都拥有带鼠标或其他定点设备的图形环境. 一些用户依赖键盘, 替代键盘或者语音输入来导航链接, 激活表单控件, 等等. 在Trac中, 我们要确保用户可以使用这些设备.

Trac支持使用`辅助键`来做最通常的操作. 在Wndows和Linux系统上, 同时按下列任意一个键以及`<Alt>`键;在Mac系统上, 则是`<ctrl>`键.

''''注意当使用Windows版的Firefox 2.0时, 你需要按`<Shift> + <Alt> + <Key>`.''''

''''注意在Windows系统中使用IE浏览器时, 使用了辅助键后你需要敲一下Enter键.''''

== 全局辅助键 ==

 * `1` - [ZhWikiStart Wiki首页]
 * `2` - [wiki:ZhTracTimeline 时间线索]
 * `3` - [wiki:ZhTracRoadmap 路线图]
 * `4` - [wiki:ZhTracSearch 搜索]
 * `6` - [wiki:ZhTracGuide Trac导览]
 * `7` - [wiki:ZhTracTickets 新建传票]
 * `9` - [../about 关于Trac]
 * `0` - 本页
 * `e` - 编辑页面
 * `f` - 搜索


----
原文版本: TracAccessibility[[BR]]
相关信息: [ZhTracGuide Trac导览][[BR]]
See also: TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracAdmin',1,1293980803732000,'trac','127.0.0.1','= TracAdmin =
[[ZhTracGuideToc]]
跟Trac一起发布的, 有一个强大的命令行配置工具. 该工具可以用来配置和定制您的Trac安装, 从而更好的适应您的需求.

其中一些操作可通过[http://trac.edgewall.org/wiki/WebAdmin WebAdmin]([http://trac.edgewall.org/wiki/WebAdmin WebAdmin] 插件的升级版, 现在(从0.11起)集成在Trac中)Web界面实现.

== 用法 ==

通过执行`trac-admin`和`help`命令, 你可以得到有效选项, 命令和子命令的完整列表:.
{{{
trac-admin help
}}}

你需要将[ZhTracEnvironment Trac环境]路径作为第一个参数(除非是运行`help`, `about` 或`version`等子命令), 例如:
{{{
trac-admin /path/to/projenv wiki list
}}}

== 交互方式 ==

将环境路径作为唯一的参数时, `trac-admin`进入交互模式. 这些命令将在选定的环境中执行, 命令提示符提供了提供了tab补全(在非Windows系统中并且Python"readline"模块可用时)和自动重复最后一个命令的功能.

一旦你进入交互方式, 你还可以得到某些具体的命令或者命令子集的帮助:

例如, 为了得到`resync`命令的一个解释, 运行:
{{{
> help resync
}}}

为了得到所有Wiki相关的命令的帮助, 运行:
{{{
> help wiki
}}}

== 命令完整参考 ==

[[TracAdminHelp()]]

=== 题注 ===

`initenv`也支持附加的`--inherit`选项, 可用于在创建环境时指定`[inherit] file` 选项, 以仅仅将''''没有''''在全局配置文件中指定的选项写入新创建环境的conf/trac.ini文件中.
参见 [ZhTracIni#GlobalConfiguration 全局选项].

----
原文版本: TracAdmin[[BR]]
相关信息: [ZhTracGuide Trac导览],  [ZhTracBackup Trac备份],  [ZhTracPermissions TracACL],  [ZhTracEnvironment Trac环境],  [ZhTracIni Trac配置][[BR]]
See also: TracGuide,  TracBackup,  TracPermissions,  TracEnvironment,  TracIni
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracBackup',1,1293980803742000,'trac','127.0.0.1','= Trac备份 =
[[ZhTracGuideToc]]

由于Trac使用了数据库后端, 为了安全地备份一个[wiki:ZhTracEnvironment Trac环境], 需要额外做一些事情. 幸运的是[wiki:ZhTracAdmin trac-admin]提供了一个轻松安全创建备份的命令:  `hotcopy`.

  ''''注意: Trac使用`hotcopy`术语来对应[http://subversion.tigris.org/ Subversion]的术语,  以在同时管理Trac和Subversion两种服务器时, 能减少记忆的负担.''''

== 创建备份 ==

为了创建[ZhTracEnvironment Trac环境]的热备份, 只需运行:
{{{

  $ trac-admin /path/to/projenv hotcopy /path/to/backupdir

}}}

在复制的过程中, [wiki:ZhTracAdmin trac-admin]会锁住数据库.

备份的结果目录将能被标准的基于文件的备份工具(比如:tar和dump/restore)安全处理.

请注意, 热备份命令不会覆盖目标路径, 当目标路径存在时, 热备份发出错误: `命令失败: [错误号 17] 文件存在:` 此问题的讨论见 trac:ticket:3198.

=== 备份恢复 ===

备份文件仅仅是整个[wiki:ZhTracEnvironment 项目环境]目录的一个快照(包含了SQLite数据库).

为了从某个备份中恢复Trac环境, 只需停止运行Trac的程序(比如, Web服务器或[wiki:ZhTracStandalone tracd]), 从备份中恢复目录结构, 并重新启动服务.

  ''''注意: 目前还不支持不使用SQLite作为数据库后端的环境的自动备份. 提示一个可行的方法: 我们建议你停止该服务器, 备份Trac环境的目录结构, 并创建一个数据库的备份文件(可以使用任何该数据库能提供的机制).
----

原文版本: TracBackup[[BR]]
相关信息: [ZhTracAdmin Trac管理],  [ZhTracEnvironment Trac环境],  [ZhTracGuide Trac导览][[BR]]
See also: TracAdmin,  TracEnvironment,  TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracBrowser',1,1293980803742000,'trac','127.0.0.1','= Trac源代码浏览器 =
[[ZhTracGuideToc]]

Trac源码浏览可用来浏览存储在版本控制系统的仓库中的目录和文件及其修订日志.

目录的条目都显示在一个列表中, 该列表中的列都可以进行排序. 单击列标题, 列表的项目可按照''''名字'''', ''''大小''''或''''时间''''等进行排序. 再次单击某个给定的列标题排序, 可以逆转排序的顺序.


单击目录上的名字, 可以使用浏览器来浏览整个目录. 单击某个文件名会显示该文件的内容. 单击某文件的修订号或者目录可以把你带到该文件的[ZhTracRevisionLog Trac修订日志]. 注意, 还有一个''''修订日志''''导航链接, 可以对目前查看的路径做相同的操作.

还可以在任何给定的仓库修订中, 浏览目录或者文件的历史情况. 默认的行为是显示最新的修订, 但通过页面顶端的''''查看修订''''输入栏, 可以轻松地选择另一个修订号.

''''(自 0.11)'''':

在浏览页面的顶部, 在下拉菜单中, 你可以选择仓库中感兴趣的地方, 比如分支或标记. 
这就是有时候被称为''''浏览快速跳转''''的机制.
其准确的意义及展现的内容取决于你的仓库后端.
对于Subversion, 此列表默认包含了一些分支(`trunk` 和最新`branches`顶级目录的所有子目录)和一些标记(最新`tags`顶级目录的所有子目录). 可以通过[ZhTracIni#svn 配置]以或更多高级用例.

如果你支持Javascript的浏览器, 你可以通过点击目录右边的箭头来展开和折叠目录. 或者, 也可以使用键盘: 使用''j''和''k''转到上一个或下一个条目, 使用''o'' (或者''回车'')切换所选目录/文件的展开和折叠状态.

对Subversion后端, 有一些附加特性:
 - 支持`svn:needs-lock`属性
 - 支持`svn:externals`属性(可以被[ZhTracIni#svn:externals 配置])

----
原文版本: TracBrowser[[BR]]
相关信息: [ZhTracGuide Trac导览],  [ZhTracChangeset Trac变更集][[BR]]
See also: TracGuide,  TracChangeset
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracCgi',1,1293980803742000,'trac','127.0.0.1','= 将Trac作为CGI安装 =

把Trac作为CGI脚本安装, 你需要使`trac.cgi`成为Web服务器可以执行的一个CGI.

  ''''请注意, 通过CGI来使用Trac, 与其他方法(比如[ZhTracModPython mod_python] 或 [ZhTracFastCgi FastCGI].)相比, 其速度要慢得多.''''

如果你在使用[http://httpd.apache.org/ Apache HTTPD], 有很多方法可以用:

 1. 用`ScriptAlias`将一个URL映射到`trac.cgi`脚本.
 2. 将`trac.cgi`文件复制到Web服务器的CGI文件的目录(通常是''''cgi-bin'''')中. 你还可以创建一个符号链接, 但要确保启用''''cgi-bin''''目录的`FollowSymLinks`选项.

推荐第一个选项, 因为它还可以让你将CGI映射到一个友好的URL中.

现在, 编辑Apache配置文件并添加以下这段代码(修改文件名和路径以匹配你的安装):
{{{
ScriptAlias /trac /usr/share/trac/cgi-bin/trac.cgi
}}}

 ''''注意, 该指令要求安装和启用`mod_alias`模块.''''

如果你正在某个独立项目中使用Trac, 你需要用`TRAC_ENV`环境变量来设置其位置:
{{{
<Location "/trac">
  SetEnv TRAC_ENV "/path/to/projectenv"
</Location>
}}}

或者如果使用多个项目, 通过`TRAC_ENV_PARENT_DIR`变量来指定他们的共同父目录:
{{{
<Location "/trac">
  SetEnv TRAC_ENV_PARENT_DIR "/path/to/project/parent/dir"
</Location>
}}}

 ''''注意, `SetEnv`指令要求安装和启用`mod_env`模块. 否则, 你可以在trac.cgi中设置TRAC_ENV. 只需要增加如下代码到"try:" 和 "from trac.web ..."之间:''''

{{{
    import os
    os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}

 '''' 或者, 对于TRAC_ENV_PARENT_DIR: ''''

{{{
    import os
    os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

这将使得`http://yourhost.example.org/trac`生效.

如果你在使用[http://httpd.apache.org/docs/suexec.html Apache suEXEC], 请参见[http://trac.edgewall.org/wiki/ApacheSuexec].

某些系统中, 你''''或许''''需要在`trac.cgi`中编辑shebang行, 从而指向你真正的Python安装路径. 在Windows系统中, 你可能需要配置Windows, 使其知道如何运行一个.cgi文件.(资源管理器 -> 工具 -> 文件夹选项 -> 文件类型 -> CGI)

== 映射静态资源 ==

Trac天生就知道如何服务静态资源, 例如样式表或图片. 但是对于作为CGI的安装来说, 则非常不希望如此, 因为它会使得为处理此类文件而调用CGI脚本, 本来直接用Web服务器处理那些文件更高效.

通过像[http://httpd.apache.org/ Apache HTTPD]的Web服务器, 你可以给那些资源创建''''别名'''', 这样给那些资源一个虚拟的URL, 不会与服务器文件系统的版本有任何雷同之处. 对CGI脚本定义''''!ScriptAlias''''时, 我们已经使用过上述的特性. 我们现在会用它将静态资源的请求映射到文件系统上的目录上, 这样就避免了使用CGI脚本来处理这类请求.

再次编辑Apache配置文件, 并在''''!ScriptAlias''''之前添加以下片断(修改文件名和路径以匹配你的安装):
{{{
Alias /trac/chrome/common /usr/share/trac/htdocs
<Directory "/usr/share/trac/htdocs">
  Order allow,deny
  Allow from all
</Directory>
}}}

注意, 无论你将`trac.cgi`脚本映射到哪个URL路径, `/chrome/common`路径是你必须追加的位置, 来拦截访问静态资源的请求.

例如, 在你的服务器上, 如果Trac映射到`/cgi-bin/trac.cgi`, ''''别名''''的URL应该是`/cgi-bin/trac.cgi/chrome/common`.

类似的, 如果你在项目的htdocs目录中有静态资源, 你可以配置apache来提供那些资源((再次, 对CGI脚本, 将此放在`ScriptAlias`''''''之前'''''', 并按你配置来调整名字和位置):

{{{
Alias /trac/chrome/site /path/to/projectenv/htdocs
<Directory "/path/to/projectenv/htdocs">
  Order allow,deny
  Allow from all
</Directory>
}}}

或者, 你可以在[wiki:TracIni trac.ini]中设置`htdocs_location`配置选项:
{{{
[trac]
htdocs_location = /trac-htdocs
}}}

当把静态资源嵌入到HTML页面中时, Trac会使用该URL. 当然, 你仍然需要使Trac的`htdocs`目录对Web服务器可用. 例如, 将目录复制或链接到Web服务器的文档根目录中.
{{{
$ ln -s /usr/share/trac/htdocs /var/www/your_site.com/htdocs/trac-htdocs
}}}

注意, 要想获得此`htdocs`目录, 你需要首先使用TracAdmin的`copystatic`命令, 提取相关Trac资源 :
[[TracAdminHelp(copystatic)]]

== 添加验证 ==

启用Apache验证的最简单的方法是创建一个口令文件. 用`htpasswd`程序来创建该口令文件:
{{{
$ htpasswd -c /somewhere/trac.htpasswd admin
New password: <type password>
Re-type new password: <type password again>
Adding password for user admin
}}}

创建了第一个用户后, 不要再使用"-c"选项:
{{{
$ htpasswd /somewhere/trac.htpasswd john
New password: <type password>
Re-type new password: <type password again>
Adding password for user john
}}}

创建用户后, 你可以使用[ZhTracPermissions Trac权限]设置他们的权限.

现在, 在Apache配置中启用对此口令文件的验证:
{{{
<Location "/trac/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</Location>
}}}

如果同时有多个项目, 你可以对所有项目都使用同一个口令文件:
{{{
<LocationMatch "/trac/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</LocationMatch>
}}}

为了更加安全, 建议你启用SSL, 或者至少要使用''''Digest''''验证而不是''''Basic''''验证. 请阅读[http://httpd.apache.org/docs/2.0/ Apache HTTPD documentation]详细了解情况. 例如, 在 Debian 4.0r1 (etch) 系统中, 相关的apache配置段如下:
{{{
<Location "/trac/login">
    LoadModule auth_digest_module /usr/lib/apache2/modules/mod_auth_digest.so
    AuthType Digest
    AuthName "trac"
    AuthDigestDomain /trac
    AuthUserFile /somewhere/trac.htpasswd
    Require valid-user
</Location>
}}}
你将使用htdigest而非htpasswd来需要创建.htpasswd文件:
{{{
# htdigest /somewhere/trac.htpasswd trac admin
}}}
其中上述的"trac"参数与上述!AuthName(apache文档中的"Realm")相同. 

----
原文版本: TracCgi[[BR]]
相关信息: [ZhTracGuide Trac导览],  [ZhTracInstall Trac安装],  [ZhTracFastCgi FastCgi],  [ZhTracModPython ModPython][[BR]]
See also: TracGuide,  TracInstall,  TracFastCgi,  TracModPython
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracChangeset',1,1293980803752000,'trac','127.0.0.1','= Trac变更集模块 =
[[ZhTracGuideToc]]

Trac有一个内置功能, 能可视化''''diffs''''. ''''diffs''''也就是指对文件的修改产生的变化.

有不同类型的''''变更集''''. 一些可以对应Subversion仓库中的修订, 另外一些可以集合在几处修订中做的更改, 但最终, 所有类型的变化都可以显示出来.

变更集视图包含了两部分, ''''头部''''和''''diff视图''''.

== 变更集头部 ==

头部显示了整个变更集的概貌. 在此, 你将找到如下信息:

 * 时间戳 -- 变更集何时提交的
 * 作者 -- 谁提交的变更集
 * 消息 -- 作者写的简短描述(入库日志消息)
 * 文件列表 -- 被变更集影响的文件列表
 
如果正在显示的变更集涉及多个修订的话, ''''时间戳'''',  ''''作者'''' 和''''消息''''就不会显示出来.

在列举的每个文件前, 有一个彩色的矩形, 其颜色表示变更集对该文件的影响.

 * 绿色: 添加
 * 红色: 删除
 * 黄色: 修改
 * 蓝色: 复制
 * 灰色: 移动

颜色图例位于头部下方.

== Diff视图 ==

头部下方是变更集的主要部分:diff视图. 每个文件单独显示一段, 每段只包含该文件受变更集影响的区域. 有两种样式来显示diffs(区别):''''内嵌''''和''''并排''''(在''''''查看方式''''''中, 切换这两种样式).

 * ''''内嵌''''样式显示了文件更改的区域. 从文件中删除的区域标为红色, 添加的区域为绿色. 如果某个区域被更改了, 旧的版本会显示在新版本的上方. 左侧的行数显示了该更改在新旧版本中的具体位置.

 * ''''并排''''样式在左侧显示旧版本, 右侧显示新版本(这样会比内嵌样式需要更大的屏幕宽度). 添加和删除的区域会像内嵌样式一样用绿色和红色标记出来, 但更改部分会有一个黄色的背景色.

另外, 在''''''查看方式''''''中有很多高级选项, 来调整diffs的显示:

 * 你可以设置更改前和更改后显示多少行(如果使用''''全部''''值的话, 整个文件都会显示出来)

 * 你可以设置是否忽略对空行, 大小写还有空格的更改, 以使你能更快找到对功能的更改.

== 获得Diff的不同方法 ==

=== 检查变更集 ===

当查看Subversion仓库检入(例如, 在[wiki:ZhTracTimeline 时间线索]中, 跟随一个变更集[wiki:ZhTracLinks 链接]或者变更集事件)时, Trac会显示具体的修改.

还有''''上一变更集''''和''''下一变更集''''的导航链接.

=== 检查修订的差异 ===

通常你会想要看跨越多个修订的文件或者目录的更改. 最简单的方法是[ZhTracRevisionLog Trac修订日志], 你可在其中选择文件或目录的''''新'''', ''''旧''''修订, 然后单击''''查看更改''''按钮.

=== 检查不同分支间的差异 ===

版本控制系统的一个核心特征是在不同''''开发路线''''上同步工作的能力, 通常叫做''''分支''''. Trac可以让你检查不同分支间的具体区别.

使用Trac浏览器中的''''查看修改...''''按钮, 可让你输入''''从:''''和''''到:''''(路径或修订). 差异集包含了应用于''''从:''''的修改.

可方便地点击变更集页面上的''''反转Diff''''链接将''''旧''''和''''新''''路径或修订的角色对换.

=== 检查最后修改 ===

最后一种检查修改的方法是使用[ZhTracBrowser Trac游览]提供的''''最后修改''''链接.

该链接把你带到最后所做的修改处.在那里, 你可以用''''上一版本''''和''''下一版本''''链接来回顾文件或目录的修改历史.

----
原文版本: TracChangeset[[BR]]
相关信息: [ZhTracGuide Trac导览],  [ZhTracBrowser Trac游览 ][[BR]]
See also: TracGuide,  TracBrowser',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracEnvironment',1,1293980803752000,'trac','127.0.0.1','= Trac环境 =

Trac用目录和数据库来储存项目信息, 叫做''''环境''''.

== 创建一个环境 ==

一个新的Trac环境是通过使用[wiki:ZhTracAdmin trac-admin]创建出来的:
{{{
$ trac-admin /path/to/myproject initenv
}}}

[wiki:ZhTracAdmin trac-admin]会要求你给出项目的名称, 数据库类型和你的源代码仓库的类型和路径.

''''注意: Web服务器用户会要求对环境目录及其内部所有文件的写权限. 请记得设置恰当的权限. 这同样适用于Trac最终使用的Subversion仓库, 虽然只要你没有使用BDB文件系统, Trac就仅仅要求读访问.''''

== 数据库连接字符串 ==

自0.9版本后, Trac支持[http://sqlite.org/ SQLite],  [http://www.postgresql.org/ PostgreSQL]和[http://mysql.com/ MySQL]作为数据库的后端. 默认使用SQLite, 这对大多数项目都是适用的. 数据库文件存储在环境目录中, 可轻松地与环境中的其余部分一起[wiki:ZhTracBackup 备份].

=== 嵌入式 SQLite 连接字符串 ===
一个连接到SQLite数据库的连接字符串是:
{{{
sqlite:db/trac.db
}}}

=== PostgreSQL 连接字符串 ===
如果想使用PostgreSQL或MySQL, 你必须使用不同的连接字符串. 例如, 要连接到同一个机器上的一个名叫trac的PostgreSQL数据库, 用户名是`johndoe`, 密码`letmein`, 需要使用:
{{{
postgres://johndoe:letmein@localhost/trac
}}}
''''注意, 由于上述字符串解析的方式, 密码中不能包含字符"/"和"@".''''

如果PstgreSQL运行在一个非标准的端口上, 例如9342, 使用:
{{{
postgres://johndoe:letmein@localhost:9342/trac
}}}

在UNIX中, 你也可以为传输使用UNIX套接字,
可以是PGHOST环境变量定义的默认套接字:
{{{
postgres://user:password@/database
}}}
也可以指定一个:
{{{
postgres://user:password@/database?host=/path/to/socket/dir
}}}

注意, 使用PostgreSQL, 你必须在运行`trac-admin initenv`之前创建一个数据库.

如何管理[http://postgresql.org PostgreSQL]的详细指令参见[http://www.postgresql.org/docs/ PostgreSQL文档].
一般来说, 下面足以创建一个名为`tracuser`的数据库用户, 和名为`trac`的数据库.
{{{
createuser -U postgres -E -P tracuser
createdb -U postgres -O tracuser -E UTF8 trac
}}}
当运行`createuser`, 你将被提示用户`tracuser`的密码. 这个新用户不是超级用户, 将不允许创建其他数据库, 而且不允许创建其他角色. 运行trac实例不需要这些特权. 如果用户不需要密码, 从`createuser`命令中删除`-P`和`-E`选项. 并请注意, 数据库应该使用UTF-8创建. LATIN1编码将导致使用unicode的trac错误.  SQL_ASCII看来也能其作用.

在一些默认配置(debian)中, 需要以`postgres`用户来运行`createuser`和`createdb`脚本.  例如:
{{{
sudo su - postgres -c ''createuser -U postgres -S -D -R -E -P tracuser''
sudo su - postgres -c ''createdb -U postgres -O tracuser -E UTF8 trac''
}}}

Trac默认使用`public`schema, 但是你可以在连接字符串中指定一个不同的schema:
{{{
postgres://user:pass@server/database?schema=yourschemaname
}}}

=== MySQL连接字符串 ===

如果你想使用MySQL, 你必须使用不同的链接字符串. 例如, 要连接同一台计算机上的名叫`trac`的MySQL数据库(允许以用户`johndoe`, 密码''letmein''来访问), mysql的连接字符串为:
{{{
mysql://johndoe:letmein@localhost:3306/trac
}}}

== 源代码仓库 ==

首先你需要提供你的仓库的''''类型''''(例如`svn`, 这是默认的), 然后定位仓库的"路径".

如果你不想和一个源代码仓库一起使用Trac, 只需将"路径"留为空.(这时, "类型"信息就没有关系了)

在某些系统中, 你不但可以指定仓库的路径, 还可以指定仓库内的''''范围''''. 那么Trac只会显示与该范围下的文件和变更集有关的信息. Trac的Subversion后端支持此功能. 对于其他系统, 你需查看相应插件的文档.

一个Subversion仓库的配置的例子:
{{{
[trac]
repository_type = svn
repository_dir = /path/to/your/repository
}}}

一个指定Subversion仓库范围的配置应是:
{{{
[trac]
repository_type = svn
repository_dir = /path/to/your/repository/scope/within/repos
}}}

== 目录结构 ==

一份环境目录通常要包含下列文件和目录:

 * `README` - 环境的简短介绍.
 * `VERSION` - 包含了环境版本.
 * `attachments` -此处存储wiki页面和传票的附件.
 * `conf`
   * `trac.ini` - 主要配置文件.请见[ZhTracIni 配置文件]
 * `db`
   * `trac.db` - SQLite数据库(如果你在使用SQLite的话).
 * `htdocs` - 包含web资源的目录, 可被Genshi模板引用. ''''''''''(仅0.11)''''''''''
 * `log` - 日志文件的缺省目录(如果启用日志, 并提供了此日志文件的相对路径).
 * `plugins` - 环境特定的[wiki:ZhTracPlugins 插件] (Python egg)
 * `templates` - 定制环境特定的模板. ''''''''''(仅0.10)''''''''''
   * `site_css.cs` - 定制CSS规则.
   * `site_footer.cs` - 定制页脚.
   * `site_header.cs` - 定制页眉.
 * `templates` - 定制Genshi环境特定模板. ''''''''''(仅0.11)''''''''''
   * `site.html` - 定制页头, 页脚和样式的方法, 见 TracInterfaceCustomization#SiteAppearance
 * `wiki-macros` - 环境特定的[wiki:ZhWikiMacros Wiki 宏]. ''''''''''(仅0.10)''''''''''

  ''''''注意: 不要将Trac环境目录与源代码仓库目录弄混.''''''

上述结构稍微模仿了Subversion仓库的目录结构, 但他们没有, 也绝对不能位于同一位置.

----
原文版本: TracEnvironment[[BR]]
相关信息: [ZhTracAdmin Trac管理],  [ZhTracBackup Trac备份],  [ZhTracIni Trac配置],  [ZhTracGuide Trac导览][[BR]]
See also: TracAdmin,  TracBackup,  TracIni,  TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracFastCgi',1,1293980803762000,'trac','127.0.0.1','= Trac与FastCGI =

自0.9版本后, Trac支持通过[http://www.fastcgi.com/ FastCGI]接口运行. 像[wiki:ZhTracModPython mod_python], 它允许Trac保留在原处, 并且比外部的CGI接口(此接口必须为每个请求开始一个新进程)要快. 然而, 不像mod_python, 它能支持[http://httpd.apache.org/docs/suexec.html SuEXEC]. 另外, FastCGI也被更广范围的Web服务器支持.

{{{
#!html
<p style="background: #fdc; border: 2px solid #d00; font-style: italic; padding: 0 .5em; margin: 1em 0;">
<strong>Windows用户注意:</strong> Trac的FCGI不能在Windows运行, 因为Windows没有实现_fcgi.py需要的Socket.fromfd
</p>
}}}

== 简单的Apache配置 ==

有两种FastCGI模式适用于Apache, `mod_fastcgi`和 `mod_fcgid`. 下面讨论的`FastCgiIpcDir` 和`FastCgiConfig`是`mod_fastcgi`指令, `DefaultInitEnv`是`mod_fgcid`指令.

对`mod_fastcgi`, 添加下面内容到相应的Apache配置文件中:
{{{
# Enable fastcgi for .fcgi files
# (If you''re using a distro package for mod_fcgi,  something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}

如果默认的选项合适的话, `FastCgiIpcDir`选项是可选的. 注意, `LoadModule`行必须位于`IfModule`组之后.

象`Trac Cgi`中描述的那样配置`ScriptAlias`及类似选项, 但是调用''''trac.fcgi''''而不是''''trac.cgi''''.

你可将`TRAC_ENV`设置为全局默认选项:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

或者你可以在一个目录中服务多个Trac项目:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

但这两个模式都对"mod_fcgid"不起作用. `mod_fcgid`的一个类似但只是部分的解决方法是:
{{{
DefaultInitEnv TRAC_ENV /path/to/env/trac/
}}}

但它不能用于Directory` 或 `Location`上下文中, 这样会使它很难支持多个项目.

有一个更好对以上两种模式(包括对lighttpd和CGI)都其作用的方法(因为它不涉及对环境变量的服务器配置设置), 是在`trac.fcgi`设置其中一个变量. 例如:
{{{
import os
os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}

或者
{{{
import os
os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

使用这个方法, 通过使用带不同`ScriptAliases`的`.fcgi`脚本, 复制和相应地重命名`trac.fcgi`, 以及将上面的代码加进来, 以创建每个类似的脚本, 从而可支持不同的项目.

参见 [https://coderanger.net/~coderanger/httpd/fcgi_example.conf fcgid配置例子], 其使用了!ScriptAlias指令如下(在trac.fcgi中使用/后缀):
{{{
ScriptAlias / /srv/tracsite/cgi-bin/trac.fcgi/
}}}

== 简单Cherokee配置 ==

暂无.

== 简单的Lighttpd配置 ==

FastCGI前端主要是为了使用其他Web服务器(如:lighttpd).

lighttpd是一种安全, 快速, 合适和非常灵活的Web服务器, 并已优化以使用于高性能的环境. 与其他Web服务器相比, 它只有非常低的内存占用和CPU负载.

为了通过lighttpd使用`trac.fcgi`, 将下面内容添加到你的lighttpd.conf中:
{{{
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => "/path/to/cgi-bin/trac.fcgi",
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}}}

注意, 你需要在fastcgi.server中为每个单独的Trac实例添加一个新的条目. 或者, 你可以使用`TRAC_ENV_PARENT_DIR`变量而不是上面提到的`TRAC_ENV`, 而且, 你可以通过使用`bin-environment`在trac.fcgi`中设置两个变量中的一个, 而不是`lighttpd.conf`中(就像上面Apache配置的段中一样).

为了通过lighttpd使用两个项目, 将下列内容添加到你的`lighttpd.conf`中:
{{{
fastcgi.server = ("/first" =>
                   ("first" =>
                    ("socket" => "/tmp/trac-fastcgi-first.sock",
                     "bin-path" => "/path/to/cgi-bin/trac.fcgi",
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-first")
                    )
                  ),
                  "/second" =>
                    ("second" =>
                    ("socket" => "/tmp/trac-fastcgi-second.sock",
                     "bin-path" => "/path/to/cgi-bin/trac.fcgi",
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-second")
                    )
                  )
                )
}}}

注意, 域值是不同的. 如果你更喜欢在`.fcgi`脚本中设置环境变量, 那么复制或重命名`trac.fcgi`. 比如说, 将其变为`first.fcgi` 和 `second.fcgi`, 并且在上述设置中引用他们. 注:上述情况会产生不同的进程, 即使二者都运行自同样的`trac.fcgi`脚本.
{{{
#!html
<p style="background: #fdc; border: 2px solid #d00; font-style: italic; padding: 0 .5em; margin: 1em 0;">
<strong>来自c00i90wn的注释:</strong> server.modules载入的顺序非常重要, 如果mod_auth在mod_fastcgi<strong>之前</strong>载入 , 服务器将无法验证用户.
</p>
}}}

为了验证, 你应启用lingttpd.conf''server.modules''中的mod_auth, 选择auth.backend和验证规则:
{{{
server.modules              = (
...
  "mod_auth",
...
)

auth.backend               = "htpasswd"

# 每个项目的独立的口令文件
# 请见 "Conditional Configuration" 
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/configuration.txt

$HTTP["url"] =~ "^/first/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-first/htpasswd.htaccess"
}
$HTTP["url"] =~ "^/second/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-second/htpasswd.htaccess"
}

# 启用trac URL上的验证, 请见
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/authentication.txt

auth.require = ("/first/login" =>
                ("method"  => "basic",
                 "realm"   => "First project",
                 "require" => "valid-user"
                ),
                "/second/login" =>
                ("method"  => "basic",
                 "realm"   => "Second project",
                 "require" => "valid-user"
                )
               )


}}}

注意:如果口令文件不存在的话, ligttpd会停止运行(我用的是1.4.3版本).

注意:1.3.16之前的版本中, lighttpd不支持''''有效的用户''''(''valid-user'').

条件配置对于映射静态资源也是有用的, 即, 直接将图片和CSS分发出去而不是通过FastCGI:
{{{
# Aliasing functionality is needed
server.modules += ("mod_alias")

# 为静态资源设置一个别名
alias.url = ("/trac/chrome/common" => "/usr/share/trac/htdocs")

# 使用nagative lookahead来匹配trac下的任意资源的请求, 除非在/trac/chrome/common中
# 并对它们使用FastCGI
$HTTP["url"] =~ "^/trac(?!/chrome/common)" {
# 即使你有应用程序而不是Trac的其他的fastcgi.server声明, 不要使用下面设置
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => "/path/to/cgi-bin/trac.fcgi",
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}
}}}

通过为每个项目创建一个别名, 并把对fastcgi.server的声明封装在条件配置块中的方法, 可以轻松地应用于多个项目. 还有一个方法来处理多项目, 它是使用TRAC_ENV_PARENT_DIR和全局验证而不是TRAC_ENV, 请看下面的一个例子:
{{{
#  用于处理多个项目
  alias.url       = ( "/trac/" => "/path/to/trac/htdocs/" )

  fastcgi.server += ("/projects"  =>
                      ("trac" =>
                        (
                          "socket" => "/tmp/trac.sock",
                          "bin-path" => "/path/to/cgi-bin/trac.fcgi",
                          "check-local" => "disable",
                          "bin-environment" =>
                            ("TRAC_ENV_PARENT_DIR" => "/path/to/parent/dir/of/projects/" )
                        )
                      )
                    )
#此处开启了全局验证配置
  auth.backend = "htpasswd"
  auth.backend.htpasswd.userfile = "/path/to/unique/htpassword/file/trac.htpasswd"
  $HTTP["url"] =~ "^/projects/.*/login$" {
    auth.require = ("/" =>
                     (
                       "method"  => "basic",
                       "realm"   => "trac",
                       "require" => "valid-user"
                     )
                   )
  }
}}}

通过环境变量LC_TIME, lighttpd也支持更改日期或时间格式.
{{{
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => "/path/to/cgi-bin/trac.fcgi",
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv",
                        "LC_TIME" => "ru_RU")
                     )
                   )
                 )
}}}

关于语言规格的细节, 请参见`TracFaq question 2.13`.

像[http://trac.lighttpd.net/trac/wiki/TracInstall 升级后的安装说明]的重要信息, [wiki:TracCgi#MappingStaticResources 还有这里]对于非fastcgi安装方面是有帮助的.

如果你使用trac-0.9, 阅读[http://lists.edgewall.com/archive/trac/2005-November/005311.html 关于一些bug]

重新启动lighttpd并浏览`http://yourhost.example.org/trac`来访问Trac.

注意关于运行lighttpd的几点:

  如果没有别的办法, 并且trac.fcgi没有跟lighttpd设置(server.username = "www-data",  server.groupname = "www-data")启动,  那么, 在bin-environment 段中设置PYTHON_EGG_CACHE为www-data的主目录, 或者该帐户有写权限的其他目录. 

== 简单的LiteSpeed配置 ==

FastCGI前端主要是为了与另外的Web服务器一起使用而开发的, 例如[http://www.litespeedtech.com/ LiteSpeed].

LiteSpeedWeb服务器是一个事件驱动的异步Apache的替代物, 从其最开始起, 就是以安全的, 扩展性和最低资源消耗为设计目标. LiteSpeed可以直接从一个Apache配置文件进行操作, 并且目标定位于重要的商业环境. 

安装:

1) 请确保你首先有安装一个Trac项目. 首先用"tracd"测试其安装.

2) 为该安装创建一个虚拟机. 从现在开始, 我们会将这个虚拟机叫做TracVhost. 对于该指南, 我们会假设, 你的trac项目会通过下列实现:

{{{
http://yourdomain.com/trac/
}}}

3) 到''''TracVhost → External Apps''''选项卡, 并创建一个新的''''外部程序''''.

{{{
Name: MyTracFCGI	
Address: uds://tmp/lshttpd/mytracfcgi.sock
Max Connections: 10
Environment: TRAC_ENV=/fullpathto/mytracproject/ <--- path to root folder of trac project
Initial Request Timeout (secs): 30
Retry Timeout (secs): 0
Persistent Connection	Yes
Connection Keepalive Timeout: 30
Response Bufferring: No	
Auto Start: Yes
Command: /usr/share/trac/cgi-bin/trac.fcgi  <--- path to trac.fcgi
Back Log: 50
Instances: 10
}}}

4) 可选的. 如果你需要使用基于htpasswd的验证. 选择''''TracVhost → Security(安全)''''选项卡并创建一个新的安全''''域''''.

{{{
DB Type: Password File
Realm Name: MyTracUserDB               <--- any name you wish and referenced later
User DB Location: /fullpathto/htpasswd <--- path to your htpasswd file
}}}

如果你没有htpasswd文件或者不知道如何在其中创建选项, 访问http://sherylcanter.com/encrypt.php去创建''''用户:密码''''.

5) 选择''''PythonVhost → Contexts''''并创建一个新的"FCGI Context".

{{{
URI: /trac/                              <--- URI path to bind to python fcgi app we created	
Fast CGI App: [VHost Level] MyTractFCGI  <--- select the trac fcgi extapp we just created
Realm: TracUserDB                        <--- only if (4) is set. select realm created in (4)
}}}

6) 更改/fullpathto/mytracproject/conf/trac.ini.

{{{
#find/set base_rul, url, and link variables
base_url = http://yourdomain.com/trac/ <--- base url to generate correct links to
url = http://yourdomain.com/trac/      <--- link of project
link = http://yourdomain.com/trac/     <--- link of graphic logo
}}}

7) 重新启动LiteSpeed, ''''lswsctrl restart'''', 并在以下地址访问你的新Trac项目:

{{{
http://yourdomain.com/trac/
}}}

----
原文版本: TracFastCgi[[BR]]
相关信息: [ZhTracCgi TracCgi],  [ZhTracModPython ModPython],  [ZhTracInstall Trac安装],  [ZhTracGuide Trac导览][[BR]]
See also: TracCgi,  TracModPython,  TracInstall,  TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracFineGrainedPermissions',1,1293980803762000,'trac','127.0.0.1','= 粒度更细的权限 =

在Trac 0.11之前, 只能在仓库浏览子系统中定义细粒度的权限.

自0.11起, 有一种通用机制, 允许定制权限策略, 授予或拒绝针对Trac资源的任何动作, 甚至到了资源的特定版本这个程度.

== 权限策略 ==

=== !AuthzPolicy ===

增加了一个基于认证式系统的策略例子. 详情参见
[source:trunk/sample-plugins/permissions/authz_policy.py]. (更多例子见 [source:trunk/sample-plugins/permissions].)

 - 安装[http://www.voidspace.org.uk/python/configobj.html ConfigObj] (必须).
 - 复制此文件到你的插件目录
 - 创建一个[http://swapoff.org/files/authzpolicy.conf authzpolicy.conf]文件. FIXME: what does ''''plonk'''' mean? ;-)
 - 更新你的`trac.ini`:
{{{
[trac]
...
permission_policies = AuthzPolicy, DefaultPermissionPolicy

[authz_policy]
authz_file = /some/trac/env/conf/authzpolicy.conf

[components]
...
authz_policy = enabled
}}}

注意指定权限策略的顺序是非常重要的, 
因为将按照提供的顺序进行策略的检查.

策略将对一个给定的权限检查返回`True`, `False` 或者 `None`.
仅仅当返回值是`None`时, 将查询''''下一个''''权限策略.
如果没有策略明确授予权限, 最终结果将是`False` 
(即, 没有权限).

比如, 如果`authz_file`包含:
{{{
[wiki:WikiStart@*]
* = VIEW

[wiki:PrivatePage@*]
john = VIEW
* =
}}}
and the default permissions are set like this:
{{{
john           WIKI_VIEW
jack           WIKI_VIEW
# anonymous has no WIKI_VIEW
}}}

因此: 
 - WikiStart的所有版本将可以被所有人看到(包括匿名用户)
 - !PrivatePage只能被john看到
 - 其余页面只能被john和jack看到


=== mod_authz_svn-like权限策略 ===

编写时, 用于限制访问仓库的Trac 0.10 及之前版本的旧的细粒度权限系统还没有转换为权限策略组件, 但是从用户的角度看没有什么分别.

那种细粒度权限控制需要一个定义文件, 其被Subversion的mod_authz_svn使用. 
关于此文件格式及其在Subversion中的用法的更多信息, 见[http://svnbook.red-bean.com/svnbook/book.html#svn-ch-6-sect-4.4.2 Subversion Book (Per-Directory Access Control)].

例子:
{{{
[/]
* = r

[/branches/calc/bug-142]
harry = rw
sally = r

[/branches/calc/bug-142/secret]
harry =
}}}

 * ''''''/'''''' = ''''默认所有人可以读''''
 * ''''''/branches/calc/bug-142'''''' = ''''harry有读/写权限, sally只有读权限''''
 * ''''''/branches/calc/bug-142/secret'''''' = ''''harry没有权限, sally有读权限 (从子目录权限中继承来)''''

==== Trac配置 ====

要激活细粒度权限, 你 __必须__ 在trac.ini中{{{[trac]}}}段指定{{{authz_file}}}选项. 如果此选项设为空, 或者没有指定, 将没有任何权限.

{{{
[trac]
authz_file = /path/to/svnaccessfile
}}}

如果你想在`authz_file`中支持`[`''''modulename''''`:/`''''some''''`/`''''path''''`]`语法, 增加

{{{
authz_module_name = modulename
}}}

其中''''modulename''''对应`[trac]`段中`repository_dir`条目指示的同一个仓库.

''''''注意:'''''' 在Authz文件中的用户名 __必须__ 与trac中使用的相同. 

==== Subversion配置 ====

典型用于相应的Subversion仓库相同的访问文件, 用Apache指令则如下:
{{{
<Location /repos>
  DAV svn
  SubversionParentPath /usr/local/svn

  # our access control policy
  AuthzSubversionAccessFile /path/to/svnaccessfile
</Location>
}}}

关于在多项目环境中, 如何限制访问整个项目的更多信息参见[trac:wiki:TracMultipleProjectsSubversionAccess]

----
原文版本: TracFineGrainedPermissions[[BR]]
相关信息: [ZhTracPermissions Trac权限][[BR]]
See also: TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracGuide',1,1293980803762000,'trac','127.0.0.1','= Trac使用及管理指南 =
[[ZhTracGuideToc]]

''''''Trac导览''''''旨在作为一个所有相关Trac的使用/开发文档的一个索引服务. 
''''''Trac导览''''''本身是一个免费的文档, 一个协作的成果, 并且是[http://projects.edgewall.com/trac/ Trac Project]本身的一部分.

== 目录 ==
现有的文档:
 * [ZhTracGuide  Trac导览(本页)] -- 内置文档起点
 * ''''''管理员指南''''''
   * [ZhTracInstall Trac安装] -- 如何安装和运行Trac
   * [ZhTracUpgrade Trac升级] -- 如何升级已安装文件
   * [ZhTracAdmin Trac管理] -- 管理一个Trac项目
   * [ZhTracImport Trac导入] -- 从其他bug数据库中导入传票
   * [ZhTracIni Trac配置] -- 配置参数指南
   * [ZhTracPermissions TracACL] -- 访问控制和许可
   * [ZhTracInterfaceCustomization Trac定制] -- 自定义Trac界面
   * [ZhTracPlugins Trac插件] -- 安装和管理Trac插件
   * [ZhTracLogging Trac日志] -- Trac日志工具
   * [ZhTracNotification Trac提醒] -- 邮件通知
   * [ZhTracWorkflow Trac工作流] -- 可配置的传票工作流
 * ''''''用户指南''''''
   * [ZhTracWiki Trac内置Wiki] -- 如何使用内置的Wiki
   * [ZhTracTimeline Trac项目时间线索] -- 为项目提供了完整的历史记录
   * [ZhTracRss Trac的RSS] -- Trac中的RSS内容组织
   * ''''版本控制系统''''
     * [ZhTracBrowser Trac游览] -- 用Trac浏览源代码
     * [ZhTracChangeset Trac变更集] -- 查看源代码的变更集
     * [ZhTracRevisionLog Trac版本日志] -- 查看修改历史
   * ''''传票系统''''
     * [ZhTracTickets Trac传票] -- 使用传票系统
     * [ZhTracReports Trac报表] -- 撰写和使用报表
     * [ZhTracQuery Trac查询] -- 执行自定义传票查询
     * [ZhTracRoadmap Trac项目路线图] -- 定义里程碑,协助项目的进度追踪
 * [http://projects.edgewall.com/trac/wiki/TracFaq 常见问题集(在Trac官方网站上)]

== 支持和其他的信息资源 ==
如果你在寻找一个能解答你关于Trac的疑问的地方, 那么[http://projects.edgewall.com/trac/wiki/MailingList 邮件列表]是最佳选择. 它提供了一个Trac用户与开发者之间自由地讨论的良好的环境.
相关信息: 想得到更多的信息资源, 请见[ZhTracSupport Trac技术支持]页面.

原文版本: TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracImport',1,1293980803772000,'trac','127.0.0.1','= 导入传票数据 =

== Bugzilla ==

可以通过使用[http://projects.edgewall.com/trac/browser/trunk/contrib/bugzilla2trac.py bugzilla2trac.py]脚本从Bugzilla中导入传票数据. 该脚本位于Trac的contrib/目录中.

{{{
$ bugzilla2trac.py
bugzilla2trac - 从Bugzilla中导入一个bug数据库到Trac中.

使用:bugzilla2trac.py [选项]

可用的选项:
  --db <MySQL dbname>              - Bugzilla的数据库
  --tracenv /path/to/trac/env      - Trac db环境的完整路径
  -h | --host <MySQL hostname>     - Bugzilla的DNS主机名
  -u | --user <MySQL username>     - Bugzilla数据库的有效用户名
  -p | --passwd <MySQL password>   - Bugzilla的用户密码
  -c | --clean                     - 在导入前删除现有的Trac传票
  --help | help                    - 本帮助信息

在脚本中可以直接定义额外的配置选项.
}}}

目前, 从Bugzilla中导入了下列数据:

  * bugs
  * bug活动(字段改变)
  * bug附件
  * 用户名和密码(放在htpasswd文件中)

该脚本提供了许多特性, 以使转换过程轻松一些, 例如:

  * PRODUCT_KEYWORDS:  Trac没有产品的概念, 因此脚本提供了一个附加传票关键字作为替代.

  * IGNORE_COMMENTS:  不导入匹配某个正则表达式的Bugzilla注释.

  * STATUS_KEYWORDS:  为Trac中不可用的Bugzilla状态附加传票关键字. 默认情况下, ''VERIFIED''和''RELEASED'' Bugzilla状态是转换为Trac关键字.

可用选项的更多细节, 请见该脚本头部的配置部分.

== Sourceforge ==

可通过使用[http://projects.edgewall.com/trac/browser/trunk/contrib/sourceforge2trac.py sourceforge2trac.py]脚本从Sourceforge2trac.py中导入传票数据. 该脚本可在Trac的contrib/目录中得到.

== Mantis ==

注意! mantis2trac脚本现在位于 http://trac-hacks.org/wiki/MantisImportScript . 你总是可以从 http://trac-hacks.org/changeset/latest/mantisimportscript?old_path=/&filename=mantisimportscript&format=zip 得到其最新版本. 

Mantis的bug可以使用其附带的脚本导入.

目前, 从Mantis中导入下列数据:
  * bugs
  * bug 注释
  * bug 活动 (字段改变)
  * 附件 (只要文件存在于mantis数据库而不是在文件系统中) 

如果你使用该脚本, 请阅读`注意`那一节(在该文件的头部), 并确认你调整了适合你的环境的配置参数.

mantis2trac.py与bugzilla2trac.py脚本有同样的参数:
{{{
mantis2trac - 从Mantis中导入一个bug数据库到Trac中.

使用:mantis2trac.py [选项] 

可用的选项:
  --db <MySQL dbname>              - Mantis数据库
  --tracenv /path/to/trac/env      - Trac db环境的完整路径
  -h | --host <MySQL hostname>     - Mantis DNS主机名
  -u | --user <MySQL username>     - 有效的Mantis数据库用户
  -p | --passwd <MySQL password>   - Mantis数据库用户密码
  -c | --clean                     - 在导入前删除现有的Trac传票
  --help | help                    - 本帮助信息

在脚本中可以直接定义额外的配置选项.
}}} 


== 其他 ==

因为trac用一个SQL数据库来存储数据, 你可以通过检查数据库表格, 以从其他数据库系统中导入. 只需进入[http://www.sqlite.org/sqlite.html sqlite]命令行查看表格, 然后从你的应用程序中导入它们.

=== 使用一个逗号分隔的文件 - CSV ===

细节请见[http://trac.edgewall.org/attachment/wiki/TracSynchronize/csv2trac.2.py]. 如果有人需要手动输入大量的传票, 那么该方法会非常有用(注意, 该脚本需要传票类型字段(task等等...), 以使其与后来的Trac发行版一起工作).

----
原文版本: TracImport[[BR]]
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracIni',1,1293980803772000,'trac','127.0.0.1','= Trac配置文件 =

[[ZhTracGuideToc]]

== 全局选项 ==
在0.11版之前, 全局选项默认位于`$prefix/share/trac/conf/trac.ini`, 或根据发布版本的不同, 有时位于/etc/trac/trac.ini. 如果你正在升级, 你可能想指定这个要继承的文件.

全局选项将与环境特定的选项进行合并, 其中局部选项覆盖全局选项. 选项文件用下面指定:
{{{
[inherit]
file = /usr/share/trac/conf/trac.ini
}}}

注意, 当创建一个新项目时, 通过增加选项`--inherit=/path/to/global/options` 到 [TracAdmin trac-admin] 的 `initenv`命令中, 你也可以指定全局选项文件.
如果你不想这样做, 而是想在你的新环境中, 使用全局选项文件,
你将需要翻阅生成的整个conf/trac.ini文件, 删除会覆盖全局选项的条目.

== 参考 ==

下面是可用配置选项的简明参考.

[[TracIni()]]

== [components] == #components-section
该节是用于启用或禁用插件提供的组件以及Trac本身的组件. 启用或禁用的组件是通过选项的名字来指定的. 能否启用是由选项值决定的, 将值设定为''''enabled''''或''''on''''会启用该组件, 其他任意值则禁用该组件, 一般是''''disabled''''或''''off''''.

选项名可以是组件的全名, 或模块/安装包的前缀. 前者启用或禁用一个具体的组件, 但后者却可以启用或禁用指定的包或模块中的任意组件.

考虑下列的配置片断:
{{{
[components]
trac.ticket.report.ReportModule = disabled
webadmin.* = enabled
}}}

第一个选项让Trac禁用[wiki:ZhTracReports 报表模块]. 第二个选项让Trac启用`webadmin`包中的所有组件. 注意, 要匹配模块/包, 结尾的通配符是必不可少的.

参见''''关于Trac''''的''''插件''''页以获得所有可用组件的列表(要求`CONFIG_VIEW` [wiki:ZhTracPermissions 权限]).

相关信息:[ZhTracPlugins Trac插件]

== [ticket-custom] == #ticket-custom-section

此段中, 你可以定义传票的附加域. 更多详情参见TracTicketsCustomFields.

== [ticket-workflow] == #ticket-workflow-section
''''(自 0.11)''''

传票工作流由插件控制. 默认情况下, 只指定了一个`ConfigurableTicketWorkflow`组件. 此组件允许通过trac.ini文件中的此段的来配置工作流.
更多详情参见TracWorkflow.

== [milestone-groups] == #milestone-groups-section
''''(自 0.11)''''

由于传票工作流现在可配置, 将可能有许多传票状态, 简单地显示已关闭传票和所有其他状态, 可能不是所有情况下都恰当的. 此段可以轻易创建状态''''组'''', 其将在里程碑进度条中以不同颜色显示.

配置样例(也是默认配置):
{{{
closed = closed
closed.order = 0                     # 进度条序列号
closed.query_args = group=resolution # 查询的可选附加参数
closed.overall_completion = true     # 总体完成的数量

active = *                           # 允许一个catch-all组
active.order = 1
active.css_class = open              # 交替显示的CSS类
}}}

定义由逗号分割的可用状态列表组成. 并且, ''*''表示所有状态, 可用于关联所有剩余状态到一个catch-all组.

CSS类可以是: new (黄色), open (无色) 或 closed (绿色). 新样式可以使用如下段轻易添加:  `table.progress td.<class>`

== [svn:externals] == #svn:externals-section
''''(自从 0.11)''''

[ZhTracBrowser Trac游览](Subversion)天生就可以解析目录的`svn:externals`属性.
然而, 如果那些外部目录''''不''''使用`http:`协议, 或者如果链接到一个不同的仓库浏览器(比如另一个Trac或者[http://www.viewvc.org/ ViewVC]), 那么Trac需要能映射到此URL的外部前缀 .

此映射在[ZhTracIni Trac配置]的`[svn:externals]`段完成.

例如:
{{{
[svn:externals]
http://theirserver.org/svn/eng-soft       http://ourserver/viewvc/svn/$path/?pathrev=25914
svn://anotherserver.com/tools_repository  http://ourserver/trac/support/browser/$path?rev=$rev
}}}
上例中, `svn://anotherserver.com/tools_repository/tags/1.1/tools`外部链接将映射到`http://ourserver/trac/support/browser/tags/1.1/tools?rev=` (并且`修订号` 将设置为此外部链接对应的修订号(如果指定了修订号), 更多详情参见[http://svnbook.red-bean.com/en/1.4/svn.advanced.externals.html Subversion Book on externals]).

注意, 上述节中使用的关键字纯粹是用作占位符的, 因为URL本身不能用作关键字(由于配置文件解析器的各种限制). 

----
原文版本: TracIni[[BR]]
相关信息: [ZhTracGuide Traqc导览],  [ZhTracAdmin Trac管理],  [ZhTracEnvironment Trac环境][[BR]]
See also: TracGuide,  TracAdmin,  TracEnvironment
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracInstall',1,1293980803772000,'trac','127.0.0.1','= Trac0.11安装指南 = 
[[ZhTracGuideToc]]

  ''''''注意: 此页面是针对的是0.11. 要安装以前版本的Trac, 请参考wiki:0.10/TracInstall.''''''

Trac是用Python编程语言编写的, 并且需要数据库支持, [http://sqlite.org/ SQLite], [http://www.postgresql.org/ PostgreSQL], 或者 [http://mysql.com/ MySQL]. 对于HTML渲染, Trac使用[http://genshi.edgewall.org Genshi]模板系统.

接下来是通常的安装指导和设置Trac及其要求. 虽然你能在Trac官方网站的TracInstallPlatforms页面找到在特定系统上安装Trac的指导, 请确定''''''首先完整阅读通用指导'''''', 以获得相关任务的良好理解.

== 简短 - 安装发行版本 ==
对于快速安装, 请确定你安装有[http://python.org Python-2.5], [http://peak.telecommunity.com/DevCenter/EasyInstall#installing-easy-install easy_install] 和 SQlite-3.3.4 (或以上).
{{{
sudo easy_install Pygments
sudo easy_install Genshi
sudo easy_install Trac
}}}

== 要求 - 也可用于老版本 ==

要安装Trac, 必须安装下列软件包:

 * [http://www.python.org/ Python], 版本 >= 2.3
   * 如果使用mod_python及xml相关事情, 则使用请python-2.5. 其名字空间已经有expat, 因此不会再导致apache崩溃(详情参见 [http://www.dscpl.com.au/wiki/ModPython/Articles/ExpatCausingApacheCrash 此处]).
   * 对于基于RPM的系统, 你可能需要`python-devel`和`python-xml`包.
   * 参见["TracOnWindows/Python2.5"]中的指导
 * [http://peak.telecommunity.com/DevCenter/setuptools setuptools], 版本 >= 0.6
 * [http://genshi.edgewall.org/wiki/Download Genshi], 版本 >= 0.3.6
 * 你同时需要一个数据库系统和相应的python驱动.
   数据库可以是SQLite, PostgreSQL 或者 ''''MySQL (实验性)''''.
 * 可选的, 如果某些插件需要: [http://www.clearsilver.net/ ClearSilver]

=== 对SQLite ===

 * [http://www.sqlite.org/ SQLite], 最好版本3.3.4以上.
 * 如果没有使用Python-2.5: [http://pysqlite.org/ PySQLite], 版本1.x (对SQLite 2.x)或版本2.x (对SQLite 3.x). 详情请见[http://trac.edgewall.org/wiki/PySqlite PySqlite]

'''' 注意:0.9c版之前的Tra不能与PySQLite2.x一起运行. 如果你打算使用源代码库中''contrib''节的''trac-post-commit-hook.py''脚本, Trac 0.9+/SQLite 3.x可能需要PySQLite 2.x.''''

''''注意: Mac OS X的使用者请注意, Apple提供的SQLite包括额外的代码来支持像AFP或SMB的网络文件系统的文件锁定. 当前版本(3.3.6)中没有包含该特性. 因此, 如果你从源代码中自己构建SQLite, 在这些文件系统上SQLite无法正常运行. 它会有类似"{{{数据库被锁定}}}"的错误. [http://www.alastairs-place.net/2006/07/sqlite_and_mac/ 补丁](在3.3.6版本上可用的, 基于Apple代码). 如果你不想用该补丁, 你最好使用Apple提供的版本, 目前是3.1.3版本.''''

=== 对PostgreSQL ===

 * [http://www.postgresql.org/ PostgreSQL]
 * [http://initd.org/projects/psycopg2 psycopg2] 或 [http://pypgsql.sourceforge.net/ pyPgSQL]

''''''警告'''''': PostgreSQL 8.3 使用了严格的类型检查机制. 要想将Trac 和 8.3 版本的 PostgreSQL 一同使用, 你需要 [http://trac.edgewall.org/changeset/6512 trac-0.11] 及以上版本.

=== 对MySQL ===

''''''警告'''''': MySQL支持目前''''仍然''''是实验性的. 这意味它对有些人有用, 但还存在几个问题, 特别是使用unicode和在仓库缓存中的键长度. 详情参见MySqlDb.

 * [http://mysql.com/ MySQL], 4.1及之后版本
 * [http://sf.net/projects/mysql-python MySQLdb], 1.2.1及之后版本

=== 可选的要求 ===

==== 版本控制系统 ====
''''''请注意:'''''' 如果使用Subversion, Trac必须安装在''''''同一台机器上''''''. 当前还不支持远程仓库.

 * [http://subversion.tigris.org/ Subversion], 版本 >= 1.0. (推荐: 1.2.4, 1.3.2 or 1.4.2) 和 ''''''''''相应的'''''''''' Python绑定. 如有问题, 可以访问[TracSubversion Trac与Subversion]
   * Trac使用Subversion发行版中的[http://www.swig.org/ SWIG]绑定, 而不是 [http://pysvn.tigris.org/ PySVN](有时会和标准的SWIG绑定混淆).
   * 如果Subversion在没有SWIG绑定的情况下已经安装好了, 你需要''''re-configure'''' Subversion, 并''''makn swig-py, make install-swig-py''''.
   * 有win32可以的[http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91 预编译绑定]. 
 * 对其他版本控制系统的支持由第三方提供. 请见[PluginList 插件列表]和[VersioningSystemBackend 版本系统后端].

==== Web服务器 ====
 * 一个支持CGI的Web服务器(见[ZhTracCgi TracCgi]), 或者
 * 一个支持[http://www.fastcgi.com/ FastCGI]的Web服务器(见[ZhTracFastCgi TracFastCgi]), 或者
 * 带[http://www.modpython.org/ mod_python 3.1.3+]的[http://httpd.apache.org/ Apache] (见[ZhTracModPython TracModPython])
    * 安装mod_python, 要求Python和Apache的开发版本(实际上是程序库和头文件).
 * 带[http://code.google.com/p/modwsgi/ mod_wsgi]的[http://httpd.apache.org/ Apache](见[wiki:TracModWSGI])
    * 虽然mod_wsgi是很新的特性, 有点实验性质, 其应当能与Apache 1.3, 2.0或者2.2一起工作, 而且肯定比使用mod_python带来更好的性能.

对那些受Apache1.3困扰的程序, 可以让Trac0.8.4与[http://www.modpython.org/ mod_python 2.7]一起运行. (见[wiki:ZhTracModPython2.7 TracModPython2.7]). 该指南自0.84后就没有更新, 因此它也许能, 也许不能正常工作.

==== 其他Python工具 ====
 * [http://docutils.sourceforge.net/ docutils], 版本 >= 0.3.9以使用 [ZhWikiRestructuredText 新结构化文本].
 * [http://pygments.pocoo.org Pygments] 用于 [wiki:TracSyntaxColoring 语法高亮], 及 [http://silvercity.sourceforge.net/ SilverCity] 和 [http://gnu.org/software/enscript/enscript.html Enscript] 仍然在使用.
    * 注意 !SilverCity 0.9.6有一个 [http://sourceforge.net/tracker/index.php?func=detail&aid=1424436&group_id=45693&atid=443739 bug], 会破坏Trac中的Python语法高亮功能. 在出现一个有效更新前, 推荐使用版本0.9.5.
 * [http://pytz.sf.net pytz] 以得到时区的完整列表, 否则Trac将使用内部实现的时区的较短列表.

''''''注意'''''': 这些依赖组件的各种版本不一定能互换, 所以请注意上面提到的版本号. 如果你遇到问题, 在[http://projects.edgewall.com/trac/wiki/MailingList 邮件列表]或者 [http://projects.edgewall.com/trac/wiki/IrcChannel IrcChannel]中提问前, 请先仔细检查所有依赖组件. 

请参考这些安装包的文档, 以最好地安装它们. 另外, [http://projects.edgewall.com/trac/wiki/TracInstallPlatforms 特定平台指南]中的大多数文档也描述了这些依赖组件的安装. 而请记住, 那里的信息可能说的是较老版本的Trac, 而不是你正在安装的版本(特殊情况下, 有些网页还是针对Trac 0.8的).

== 安装Trac ==

安装Trac的一种方式是使用`setuptools`.
使用setuptools, 你可以从subversion仓库安装Trac; 例如,
安装0.11发行版:
{{{
easy_install http://svn.edgewall.com/repos/trac/tags/trac-0.11
}}}

但是当然, 在源代码的顶级目录中使用python方式的setup也有效:
{{{
$ python ./setup.py install
}}}

''''注意:你需要root权限.''''

这会将python源代码编译为字节码, 并安装在你的Python安装的`site-packages`目录中.
`cgi-bin`, `templates`, `htdocs`, `wiki-default`和`wiki-macros`目录都会复制到`$prefix/share/trac/`. `conf`和`plugins`子目录也创建在`$prefix/share/trac/` (''''自 [milestone:0.10]'''')之下.

该脚本还会安装[wiki:ZhTracAdmin trac-admin]命令行工具, 用来创建和维护[wiki:ZhTracEnvironment Trac环境]和独立服务器[wiki:ZhTracStandalone tracd].

=== 高级选项 ===

要自定义Trac安装位置, 或查看其他高级安装选项, 运行:
{{{
easy_install --help
}}}

详细信息请参见[http://docs.python.org/inst/inst.html 安装Python模块].

你可能对以下命令感兴趣:
{{{
easy_install --prefix=/path/to/installdir
}}}
或者, 如果安装Trac到一个Mac OS X系统中:
{{{
easy_install --prefix=/usr/local --install-dir=/Library/Python/2.5/site-packages
}}}

上面会把`tracd` 和 `trac-admin` 命令放入 `/usr/local/bin`中, 并将安装 Trac 库和依赖文件到 `/Library/Python/2.5/site-packages`, 这是 Apple中Python第三方应用程序安装的约定位置.

== 创建一个项目环境 ==

[wiki:ZhTracEnvironment Trac环境]是Trac存储像wiki页, 传票, 报表, 设置等的信息的后端存储. 环境基本上是一个目录, 包含了一个可读的配置文件和各式的其他文件及目录.

用[wiki:ZhTracAdmin trac-admin]来创建一个新的环境:

{{{
$ trac-admin /path/to/myproject initenv
}}}

[wiki:ZhTracAdmin trac-admin]会提示你一些创建环境所需的信息, 例如项目名称, 类型和现有[wiki:ZhTracEnvironment#SourceCodeRepository Subversion仓库]的路径, [wiki:ZhTracEnvironment#DatabaseConnectionStrings 数据库连接字符串], 等等. 如果你不确定其中某个选项, 就把它空着而使用默认值. 只要你安装了SQLite, 数据库连接字符串都会有作用. 将访问源代码仓库的路径设为空, 会使所有与版本控制有关的功能都失效. 但是当基本系统运行时, 你仍然可以将其添加进来.

还要注意, 稍后可以通过直接编辑[wiki:ZhTracIni Trac配置]来更改此处你指定的值.

'''' 注意:Web服务器运行用户帐号需要拥有环境目录及里面所有文件的写权限.''''

  chown -R apache.apache /path/to/myproject

== 运行独立服务器 ==

创建了一个Trac环境后, 你可以运行独立服务器[wiki:ZhTracStandalone tracd]轻松地尝试Web界面:
{{{
$ tracd --port 8000 /path/to/myproject
}}}

然后, 启动一个浏览器并访问`http://localhost:8000/`. 你将获得tracd中所有环境的简单列表. 点击链接到你刚创建的环境, 你会看到Trac已经能用了. 如果你仅仅管理一个项目, 你可以让服务器跳过环境列表, 方法如下:
{{{
$ tracd -s --port 8000 /path/to/myproject
}}}


== 在Web服务器上运行Trac ==

Trac提供了三种方法来连接到一个真实的Web服务器: [wiki:ZhTracCgi CGI], [wiki:ZhTracFastCgi FastCGI] 和[wiki:ZhTracModPython mod_python]. 如果想有出色的性能, 建议你使用FastCGI或mod_python.

如果你不害怕运行的是开发版本的代码, 你也可以尝试在[wiki:TracModWSGI mod_wsgi]上运行Trac. 这应该可以提供比mod_python更好的性能, 但是现在此模块还不太稳定.

== 配置验证 ==

添加, 删除和配置用户帐户的验证的过程, 取决于你运行Trac的具体方式. 基本的步骤在[ZhTracCgi TracCgi]页的[wiki:ZhTracCgi#AddingAuthentication 增加验证]节中有详细的描述. 想知道如何设置你在使用的前端的验证, 请参考以下网页:
 * [ZhTracStandalone  Trac独立服务器], 如果你使用`tracd`独立服务器方式.
 * [ZhTracCgi TracCgi], 如果你使用CGI或FastCGI方式.
 * [ZhTracModPython TracModPython], 如果你使用mod_python方式.

== 在 Mac OS X Leopard (10.5) 中的Trac 0.11 与 SVN  ==

 * TracOnLeopardServer

== 使用Trac ==

如果你创建了你的Trac站点并在运行它, 你应该能浏览Subversion仓库, 创建传票, 查看时间线索, 等等.

请记住, 匿名用户(没有注册的用户)默认可以使用大多数的功能, 但不是全部. 你需要配置验证, 并为通过验证的用户提供额外的[wiki:ZhTracPermissions 权限], 以使他们可以看到全部功能.

'''' 享受吧! ''''

[http://projects.edgewall.com/trac/wiki/TracTeam Trac团队]

----
原文版本: TracInstall[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracCgi TracCgi], [ZhTracFastCgi TracFastCgi], [ZhTracModPython TracModPython], [ZhTracUpgrade Trac升级], [ZhTracPermissions Trac权限][[BR]]
See also: TracGuide, TracCgi, TracFastCgi, TracModPython, TracUpgrade, TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracInterfaceCustomization',1,1293980803782000,'trac','127.0.0.1','= 定制Trac界面 =
[[ZhTracGuideToc]]

== 介绍 ==

该页面旨提供有关如何定制Trac界面的建议. 话题涵盖了编辑HTML模板和CSS文件, 但不包含程序代码本身. 这些话题想要向用户展示如何更改Trac的外观来满足他们特定的要求. 

== 项目Logo和图标 ==
定制Trac界面最简单的部分是logo和站点的图标. 他们都可以通过[wiki:ZhTracIni trac.ini]的设置进行配置.

logo或者图标应放在项目环境目录中的一个''''htdocs''''目录中(注意: 用Trac0.9之前的版本创建的项目, 你需要创建该目录).

 ''''注意: 实际上你可以把logo和图标放在服务器的任何地方(只要通过服务器能访问到就可以), 并且在配置中使用他们的绝对URL或服务器的相对URL.''''

在你的[wiki:ZhTracIni trac.ini]中的配置相应的段:

=== Logo ===
将`src`设置改为`site/`, 后面跟着你的图像文件的名字. 应修改''''宽度''''和''''高度''''设置来匹配你的图像的尺寸(Trac的chrome处理器用"site/"对应位于项目目录的"htdocs", 用"common/"对应普通文件).
{{{
[header_logo]
src = site/my_logo.gif
alt = My Project
width = 300
height = 100
}}}

=== 图标 ===
图标应该是`.gif`或`.ico`格式的大小16x16的图像. 将`icon`选项修改为`site/`, 后面跟着你的图标文件的名称. 在你的Web浏览器中, 图标一般会显示在站点的URL旁边或者在''''书签''''菜单中.
{{{
[project]
icon = site/my_icon.ico
}}}

''''''注意'''''', 该图标会被 IE 忽略, 它只接受主机根路径下名为''''favicon.ico''''的文件. 要使项目图标在IE和其他浏览器中都起作用的话, 你可以将图标储存在主机的根路径中, 并按照下列方法在``trac.ini``中引用它:
{{{
[project]
icon = /favicon.ico
}}}

== 定制导航栏项目 ==
新的[mainnav]和[metanav]可以用于定制导航栏项目的文本和链接, 甚至是禁止它们.

在下面的例子中, 我们把Wiki起始页面改为"Home", 并隐藏了"帮助/指南". 同时我们增加了某个特定报表的"查看传票"项目.
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24

[metanav]
help = disabled
}}}


== 站点外观 ==

Trac使用[http://genshi.edgewall.org Genshi]作为模板引擎. 文档还正在编写中, 这时候, 下列提示应能起作用.

假设你想增加一个定制的样式表, 和你自己的页头和页脚.  创建文件{{{/path/to/env/templates/site.html}}} 或者 {{{/path/to/inherit/option/templates_dir/site.html}}}, 内容如下:

{{{
#!xml
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      py:strip="">

  <!--! Add site-specific style sheet -->
  <head py:match="head" py:attrs="select(''@*'')">
    ${select(''*'')}
    <link rel="stylesheet" type="text/css"
          href="${href.chrome(''site/style.css'')}" />
  </head>

  <body py:match="body" py:attrs="select(''@*'')">
    <!--! Add site-specific header -->
    <div id="siteheader">
      <!--! Place your header content here... -->
    </div>

    ${select(''*|text()'')}

    <!--! Add site-specific footer -->
    <div id="sitefooter">
      <!--! Place your footer content here... -->
    </div>
  </body>
</html>
}}}
注意, 引用了你的环境中的`htdocs/style.css`.

例子, 在新建传票中增加介绍文本(预览时隐藏):

{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)">
    <p>Please make sure to search for existing tickets before reporting a new one!</p>
  </py:if>
  ${select(''*'')} 
</form>
}}}

如果环境是从0.10升级来的, 并且已经存在`site_newticket.cs`, 实际上可以用一种变通办法来载入 - 提供一个不包含ClearSilver特性的版本. 另外, 由于只能导入一个元素, 内容必须做某种封装, 比如`<div>`块或者其它类似的容器标签. XInclude必须指定名字空间以允许包含, 但是其可以与其他内容一起, 被移动至文档根目录:
{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')"
        xmlns:xi="http://www.w3.org/2001/XInclude">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)"> 
    <xi:include href="site_newticket.cs"><xi:fallback /></xi:include>
  </py:if>
  ${select(''*'')} 
</form>
}}}

同时注意, `site.html` (不管名字是什么) 可以放在一个普通的模板目录中 - 参见`[inherit] templates_dir`选项. 这将更加容易维护, (从0.10大型安装迁移路径), 因为一个新的全局`site.html`文件可以包含任何已有页头, 页脚和新传票片段.

== 项目列表 ==
如果你在使用Trac执行多个项目时, 你可以用一个定制!ClearSilver模板来显示项目的列表.

下面是Trac用来显示各项目链接的列表的基本模板. 对于不能加载的项目, 它会显示一个错误信息. 你可以将它作为你自己的索引模板的一个起点.

{{{
#!text/html
<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <head>
    <title>Available Projects</title>
  </head>
  <body>
    <h1>Available Projects</h1>
    <ul>
      <li py:for="project in projects" py:choose="">
        <a py:when="project.href" href="$project.href"
           title="$project.description">$project.name</a>
        <py:otherwise>
          <small>$project.name: <em>Error</em> <br /> ($project.description)</small>
        </py:otherwise>
      </li>
    </ul>
  </body>
</html>
}}}

一旦你创建了自己的定制模板, 你需要配置Web服务器, 来告诉Trac该模板的具体位置:

对于 [wiki:ZhTracFastCgi FastCGI]:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects \
              -initial-env TRAC_ENV_INDEX_TEMPLATE=/path/to/template
}}}

对于 [wiki:ZhTracModPython mod_python]:
{{{
PythonOption TracEnvIndexTemplate /path/to/template
}}}

对于 [wiki:ZhTracCgi CGI]:
{{{
SetEnv TRAC_ENV_INDEX_TEMPLATE /path/to/template
}}}

对于[ZhTracStandalone Trac独立服务器], 你需要在运行tracd的shell中设置`TRAC_ENV_INDEX_TEMPLATE`环境变量:
 - Unix
   {{{
#!sh
$ export TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}
 - Windows
   {{{
#!sh
$ set TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}

----
原文版本: TracInterfaceCustomization[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracIni Trac配置][[BR]]
See also: TracGuide, TracIni
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracLinks',1,1293980803782000,'trac','127.0.0.1','= Trac链接 =
[[ZhTracGuideToc]]

[ZhTracLinks Trac链接]是Trac的一个基本特征, 因为他们允许在诸如传票, 报表, 变更集, Wiki页面, 里程碑和源文件等(只要是使用[ZhWikiFormatting Wiki格式])的各种实体间流畅的链接.

[ZhTracLinks Trac链接]通常是 ''''''type:id'''''' 形式, ''''id''''代表了项目的号码, 名称或路径, 尽管一些常用项目也有简化符号.

== 在哪里使用Trac链接 ==

你可以在下列地方使用[ZhTracLinks Trac链接]:
 * Subversion的源代码提交消息
 * Wiki页面
 * 传票, 报表和里程碑的详细描述
 
以及其他明确标明支持Wiki格式的文字域.

一些例子:
 * 传票: ''''''!#1'''''' or ''''''!ticket:1''''''
 * 传票评论: ''''''!comment:ticket:1:2'''''' 
 * 报表: ''''''!{1}'''''' or ''''''!report:1''''''
 * 变更集: ''''''!r1'''''', ''''''![1]'''''', ''''''!changeset:1'''''' or (restricted) ''''''![1/trunk]'''''', ''''''!changeset:1/trunk''''''
 * 修订日志: ''''''!r1:3'''''', ''''''![1:3]'''''' or ''''''!log:@1:3'''''', ''''''!log:trunk@1:3''''''
 * 对比 (需0.10以上版本): ''''''!diff:@1:3'''''', ''''''!diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default'''''' or ''''''!diff:trunk/trac@3538//sandbox/vc-refactoring@3539''''''
 * Wiki页面: ''''''!CamelCase'''''' or ''''''!wiki:CamelCase''''''
 * 里程碑: ''''''!milestone:1.0''''''
 * 附件: ''''''!attachment:ticket:944:attachment.1073.diff''''''
 * 文件: ''''''!source:trunk/COPYING''''''
 * 指定版本文件: ''''''!source:/trunk/COPYING@200''''''
 * 指定版本文件行: ''''''!source:/trunk/COPYING@200#L25''''''
显示:
 * 传票: #1 or ticket:1
 * 传票注释: comment:ticket:1:2 
 * 报表: {1} or report:1
 * 变更集: r1, [1], changeset:1, or (restricted) [1/trunk], changeset:1/trunk
 * 检入日志: r1:3, [1:3] or log:@1:3, log:trunk@1:3
 * 对比 (需0.10以上版本): diff:@20:30, diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default or diff:trunk/trac@3538//sandbox/vc-refactoring/trac@3539
 * Wiki页面: CamelCase or wiki:CamelCase
 * 里程碑: milestone:1.0
 * 附件: attachment:ticket:944:attachment.1073.diff
 * 文件: source:trunk/COPYING
 * 指定版本文件: source:/trunk/COPYING@200
 * 指定版本文件行: source:/trunk/COPYING@200#L25

''''注意'''': 很少用到[ZhCamelCase 驼峰式], 但用它来引用那些名称不遵守Wiki页面名称规则的那些页面非常方便, 即, 单个词, 非字母字符等. 更多关于Wiki页面名称的链接的特征, 请见[ZhWikiPageNames Wiki页面名].

使用完整(非简化的)符号的Trac链接, 还可以给它一个类似这样的自定义链接标题:

{{{
[ticket:1 这是一个到传票1号的链接].
}}}

显示:[ticket:1 这是一个到传票1号的链接].

如果省略标题, 只有id(在冒号后面)能显示出来:

{{{
[ticket:1]
}}}

显示: [ticket:1]

如果省略一个完整的链接的名称空间部分(自0.10版本后), 将默认是`wiki`:

{{{
[SandBox the sandbox]
}}}

显示: [SandBox the sandbox]

[ZhTracLinks Trac链接]是一个非常简单的想法, 但实际上可以是一个非常复杂的信息网络. 实践中, 它用起来很直观并且简单, 我们发现''''链接轨迹''''相当有助于更好理解在项目中发生的事情, 或者为何有一个特定的变化.


== TracLinks的高级用法 ==

=== 相当链接 ===

要创建到一个特定锚点的链接, 使用''#'':
{{{
 [#Relativelinks relative 链接]
}}}
显示为:
  [#Relativelinks relative 链接]

提示: 当你将鼠标移到过段落标题时, 会显示出一个''¶''字符. 这就是到此段落的链接, 你可以复制相对链接中的`#...`部分来使用锚点.

== 子Wiki链接 ==
要创建到子Wiki页面的链接, 只需使用''/'':
{{{
 WikiPage/SubWikiPage or ./SubWikiPage
}}}

要链接到父页面, 只需使用''..'':
{{{
  [..]
}}}

要链接到相邻页面, 使用''../'':
{{{
  [../Sibling see next sibling]
}}}

''''(在0.11中的改变)'''' 注意, 在Trac 0.10中, 使用例如 `[../newticket]` 可以链接到/newticket 顶级URL, 但在0.11中, 其将仍然在wiki名字空间中, 链接的是相邻页面. 新语法请参见[#Server-relativelinks].

== [ZhInterWiki 外部Wiki]链接 ==

可以自由地定义指向其他Web应用的资源的前缀. 这些前缀的定义以及相应Web应用的URL被定义在一个特殊的Wiki页面中——[ZhInterMapTxt 链接前缀表]页面. 注意, 虽然它也可被用来创建到其他Trac环境的链接, 但已经有一个比这更特定, 更灵活的方法.

== [ZhInterTrac 外部Trac]链接 ==

这可被看作说一种特别用于其他Trac的[ZhInterWiki 外部Wiki]链接,.

如果用另一个Trac环境的名字作为前缀的话(另一个Trac环境名加冒号":"), 上述所有形式的Trac链接都可引用另一个Trac环境中的资源. 因此, 另一个Trac环境必须在这个Trac环境中注册. 细节请参考[ZhInterTrac 外部Trac].

[ZhInterTrac 外部Trac]相对[ZhInterWiki 外部Wiki]的最大好处是, 这种简化形式的Trac链接通常比[ZhInterTrac 外部Trac]跟容易理解. 例如, Trac传票的链接可以写成#T234 (如果T被设置成Trac的别名), Trac变更集的链接可以写成[trac 1508].

== 服务器相关的链接 ==

通常要求能够链接到没有内置Trac链接机制的服务器的对象, 例如, 静态资源, `/register`页面等. 

只需使用服务器根部的绝对路径或者当前页面的URL的相对链接, 就可以实现(''''在0.11中修改''''):

{{{
[/newticket Create a new ticket]
[/ home]
}}}

显示: [../newticket newticket][[comment(FIXME that''s the 0.10 syntax)]]  [/ home]

要链接到服务器的另一个位置(项目之外), 使用 ''//location'' 链接语法 (''''在0.11中改变''''):

{{{
[//register 在此注册]
}}}

显示: [//register 在此注册]

== 用引号包围Trac链接中的空格 ==

Trac链接的前缀后, 如果目标包含空格, 应使用一对单引号或双引号来包围.

例子:
 * !wiki:"The whitespace convention"
 * !attachment:''the file.txt'' 或
 * !attachment:"the file.txt" 
 * !attachment:"ticket:123:the file.txt" 

== 链接转义 ==

要防止解析一个Trac链接(转义), 可以在前面加一个感叹号''!''.
{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

显示:
 !NoLinkHere.
 ![42] is not a link either.

=== 参数化Trac链接 ===

指向Trac资源的Trac链接, 基于一些附加的参数, 通常有多种渲染方式. 例如, Wiki页面可以接受`version`或`format` 参数, 报表可以使用动态变量, 等等.

所有Trac链接支持任意参数集, 写成它们相应的URL相同的形式. 一些例子:
 - `wiki:WikiStart?format=txt`
 - `ticket:1?version=1`
 - `[/newticket?component=module1 为模块1创建新传票]`


== TracLinks 参考 ==
下列章节详细描述了独立链接类型, 以及几个关于链接高级用法的注解.

== 附件: 链接 ==

附件的链接语法如下所示:
 * !attachment:the_file.txt 创建了一个当前对象的附件the_file.txt的链接
 * !attachment:wiki:MyPage:the_file.txt 创建了一个到!MyPage Wiki页面的附件的链接
* !attachment:ticket:753:the_file.txt 创建了一个传票753的附件文件the_file.txt的链接

=== 查询: 链接 ===

请见 [ZhTracQuery#UsingTracLinks 使用Trac链接] 和 [#ticket:链接].

=== 搜索: 链接 ===

请见 [ZhTracSearch#SearchLinks 搜索链接]

=== 传票: 链接 ===

除了明显的`ticket:id`形式, 也可以指定一系列传票, 甚至传票范围, 而不是`id`. 这会生成包含此固定传票集合的, 到定制查询视图的链接.

例子: 
 - `ticket:5000-6000`
 - `ticket:1,150`

''''(自Trac 0.11)''''

=== 时间线: 链接 ===

可以通过指定ISO:8601格式的日期来创建时间线链接. 日期中可以有时间格式说明. 此时间被解释为UTC时间, 但是你也可以指定为你的当地时间(后面跟你的时区, 如果你不想计算UTC时间的话).

例子:
 - `timeline:2008-01-29`
 - `timeline:2008-01-29T15:48`
 - `timeline:2008-01-29T16:48Z+01`

''''(自Trac 0.11)''''

=== wiki: 链接 ===

参见上述 [ZhWikiPageNames Wiki页面名] 和 [#QuotingspaceinTracLinks 用引号包围Trac链接中的空格].

=== 版本控制相关链接 ===
== 源码: 链接 ==

如果路径指向一个目录的话, source:/some/path链接的默认行为是打开此目录, 否则会打开日志视图. 

也可以直接链接到文件的某个特定修订:
 - `source:/some/file@123` - 链接到文件的修订123
 - `source:/some/file@head` - 链接到文件的最新修订

如果指定了修订号, 甚至可能链接到特定的行号:
 - `source:/some/file@123#L10`
 - `source:/tag/0.10@head#L10`

最后, 也可以高亮任何行:
 - `source:/some/file@123:10-20,100,103#L99` - 高亮10到20行, 和100到103行.
''''(自 0.11)''''

== 输出: 链接 ==

要强制下载仓库中的某个文件, 而不是在浏览器中显示, 使用`export`链接.  可用的几种形式为:
 * `export:/some/file` - 得到指定文件的HEAD修订
 * `export:123:/some/file` - 得到指定文件的修订123
 * `export:/some/file@123` - 得到指定文件的修订123

这对于要正确显示HTML文档(其中的样式表和图像已经被检入仓库中)将非常有用.

如果路径是仓库中的目录而不是文件, 源码游览将用于显示目录(跟`source:/some/dir`的结果一样).

==== 日志: 链接 ====

`log:` 链接可用于显示修订范围. 最简单的形式中, 可链接到指定路径的最新修订, 并且也可以用来显示任意修订集.
 - `log:/` - 始于仓库根目录的最新修订
 - `log:/trunk/tools` - `trunk/tools`最新修订
 - `log:/trunk/tools@10000` - `trunk/tools`中始于10000的修订
 - `log:@20788,20791:20795` - 修订20788和20791到20795的修订范围
 - `log:/trunk/tools@20788,20791:20795` - 指定路径的修订20788和从20791到20795的修订范围

简化形式:
 - `[20788,20791:20795]`
 - `[20788,20791:20795/trunk/tools]`
 - `r20791:20795` (but not `r20788,20791:20795` nor `r20791:20795/trunk`)

最后, 注意上述中, 修订范围可以写成`x:y` 或 `x-y`.

----
原文版本: TracLinks[[BR]]
相关信息: [ZhWikiFormatting Wiki格式], [ZhTracWiki Trac内置Wiki], [ZhWikiPageNames Wiki页面名], [ZhInterTrac 外部Trac], [ZhInterWiki 外部Wiki][[BR]]
See also: WikiFormatting, TracWiki, WikiPageNames, InterTrac, InterWiki
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracLogging',1,1293980803782000,'trac','127.0.0.1','= Trac日志 =
[[ZhTracGuideToc]]

Trac支持使用与Python自带的标准[http://docs.python.org/lib/module-logging.html 日志模块]来记录系统消息.

日志记录在[wiki:TracIni#logging-section trac.ini]的`[logging]`段中进行配置.

== 支持的日志记录方法 ==

记录日志的方法通过使用`log_type`配置选项来设置, 配置选项采用了下列的某个值:

 ''''''none'''':: 禁止所有的日志消息.
 ''''''file'''''':: 将消息记录到一个[wiki:ZhTracIni trac.ini]中log_file`选项指定的文件中.
 ''''''stderr'''''':: 到控制台输出所有的日志(只对[wiki:ZhTracStandalone tracd]起作用).
 ''''''syslog'''''':: (UNIX)通过命名管道`/dev/log`发送消息到本地的syslogd .
 ''''''eventlog'''''':: (Windows)使用系统的NT事件日志为Trac记录日志. 

== 日志等级 ==

日志消息的详细程度可通过用[wiki:ZhTracIni trac.ini]中的''''log_level''''指令来进行设置. 日志等级定义了一个需要记录的消息所需的最低紧急等级. 这些等级有:

 ''''''CRITICAL'''''':: 只记录最重要的错误(一般是致命错误).
 ''''''ERROR'''''':: 记录失败, bug和错误. 
 ''''''WARN'''''':: 记录警告, 不中断的事件等.
 ''''''INFO'''''':: 诊断信息, 关于所有进程的日志信息.
 ''''''DEBUG'''''':: Trace消息, profiling等等.

== 日志格式 ==

从Trac 0.10.4起(见#2844), 已经可以设置日志的输出格式. 通过设置[wiki:TracIni#logging-section trac.ini]中的`log_format`选项. 其格式为包含 [http://docs.python.org/lib/node422.html Python日志格式化变量]的字符串. 另外, 还可以使用下列Trac特定变量:
 ''''''$(basename)s'''''':: 当前环境的路径中的最后一个名字.
 ''''''$(path)s'''''':: 当前环境的绝对路径.
 ''''''$(project)s'''''':: 最初项目名字.

注意, 变量使用(`$(...)s`)来标记, 而不是(`%(...)s`).

缺省格式为:
{{{
log_format = Trac[$(module)s] $(levelname)s: $(message)s
}}}

在多项目环境(所有日志都发送到相同的地方, 比如`syslog`)中, 最好加上项目的名字. 下面例子中, 我们使用`basename` , 因为其通常用于标识一个项目:
{{{
log_format = Trac[$(basename)s:$(module)s] $(levelname)s: $(message)s
}}}

----
原文版本: TracLogging[[BR]]
相关信息: [ZhTracIni Trac配置], [ZhTracGuide Trac导览], [ZhTracEnvironment Trac环境][[BR]]
See also: TracIni, TracGuide, TracEnvironment
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracModPython',1,1293980803792000,'trac','127.0.0.1','= Trac和mod_python =
[[ZhTracGuideToc]]

Trac支持[http://www.modpython.org/ mod_python], 它显著加快了Trac的响应时间, 特别是和[ZhTracCgi CGI]相比, 并允许使用许多[wiki:ZhTracStandalone tracd]/mod_proxy无法使用的Apache特征.

这些指令用于Apache 2; 如果你还在使用Apache 1.3, 你可能需要在[wiki:TracModPython2.7 TracModPython2.7]碰运气了.

== 简单的配置 ==

如果你只安装了mod_python, 你可能还要在Apache配置中添加一行来载入模块:
{{{
LoadModule python_module modules/mod_python.so
}}}

 ''''注意:模块的准确路径取决于HTTPD安装布局.''''
在Debian上使用apt-get
{{{
apt-get install libapache2-mod-python libapache2-mod-python-doc
}}}
(还是在Debian上) 在你安装了mod_python后, 你必须启用apache2中的模块 (跟上面的Load Module指令相同):
{{{
a2enmod mod_python
}}}
在Fedora上使用yum:
{{{
yum install mod_python
}}}
通过增加下面内容到你的httpd.conf中, 你可以测试你的mod_python安装.  当你完成测试后, 基于安全原因, 你应该删除它. 注意: mod_python.testhandler仅仅在mod_python 3.2+才有.
{{{
#!xml
<Location /mpinfo>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler mod_python.testhandler
</Location>
}}}

mod_python上的Trac的一个简单设置如下:

{{{
#!xml
<Location /projects/myproject>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler trac.web.modpython_frontend 
   PythonOption TracEnv /var/trac/myproject
   PythonOption TracUriRoot /projects/myproject
</Location>
}}}

''''''`TracUriRoot`''''''选项可有可无. 试试不带该选项进行配置, 如果Trac构造出的URL看起来是错的或如果Trac似乎不能正确地识别URL, 就添加''''''`TracUriRoot`''''''选项. 你将注意到, `Location`和''''''`TracUriRoot`''''''的路径是相同的.

=== 配置验证 ===

配置密码文件和验证, 跟在[wiki:ZhTracCgi#AddingAuthentication CGI]中一样:
{{{
#!xml
<Location /projects/myproject/login>
  AuthType Basic
  AuthName "myproject"
  AuthUserFile /var/trac/myproject/.htpasswd
  Require valid-user
</Location>
}}}

在Apache中配置mod_ldap验证需要一些技巧(httpd 2.2.x 和 OpenLDAP: slapd 2.3.19)

1. 你需要在Apache httpd.conf中载入下列模块
{{{
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
}}}

2. 你的httpd.conf需要如下这些:

{{{
#!xml
<Location /trac/>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend
  PythonOption TracEnv /home/trac/
  PythonOption TracUriRoot /trac/
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://127.0.0.1/dc=example,dc=co,dc=ke?uid?sub?(objectClass=inetOrgPerson)"
  authzldapauthoritative Off
  require valid-user
</Location>
}}}

或是到Microsoft Active Directory的LDAP接口:

{{{
#!xml
<Location /trac/>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend
  PythonOption TracEnv /home/trac/
  PythonOption TracUriRoot /trac/
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://adserver.company.com:3268/DC=company,DC=com?sAMAccountName?sub?(objectClass=user)"
  AuthLDAPBindDN       ldap-auth-user@company.com
  AuthLDAPBindPassword "the_password"
  authzldapauthoritative Off
  # require valid-user
  require ldap-group CN=Trac Users,CN=Users,DC=company,DC=com
</Location>
}}}

注 1: 这是LDAP搜索得到多个OU的情况, 连接到AD的全局目录服务器部分(注意, 端口是3268, 而不是通常的LDAP 389). GCS基本上为一个"扁平"的树状结构, 允许不知道其所属的OU来搜索用户.

注 2: 访问Active Directory的记录, 要求验证用户/密码 (AuthLDAPBindDN 和 AuthLDAPBindPassword).

注 3: 指令"require ldap-group ..."  指定其成员可以访问的AD组.



=== 设置!PythonPath ===

如果Trac安装包没有安装在你的Python路径中, 你需要使用`PythonPath`指令, 告诉Apache在哪里找到Trac mod_python处理程序:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonPath "sys.path + [''/path/to/trac'']"
  ...
</Location>
}}}

注意一下`PythonPath`指令, ''''不是''''`SetEnv PYTHONPATH`, 因为后者不起作用.

== 设置多个项目 ==

Trac mod_python处理程序有一个类似Subversion的`SvnParentPath`配置选项, 叫做`TracEnvParentDir`:
{{{
#!xml
<Location /projects>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend 
  PythonOption TracEnvParentDir /var/trac
  PythonOption TracUriRoot /projects
</Location>
}}}

当你请求`/projects`URL时, 你会得到在`TracEnvParentDir`中设置的目录下所有Trac环境子目录的列表. 选择列表中的任意项目都会把你带到相应的Trac环境.

如果你不想将子目录列表作为你的项目主页, 你可以使用
{{{
#!xml
<LocationMatch "/.+/">
}}}

它会指导Apache对所有非根目录的位置使用mod_python, 而同时又允许你在文档根目录中放入一个自定义主页.

你还可以通过使用`<LocationMatch>`指令, 对所有的项目使用同样的验证域:

{{{
#!xml
<LocationMatch "/projects/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /var/trac/.htpasswd
  Require valid-user
</LocationMatch>
}}}

== 虚拟机配置 ==

下面的配置例子将trac设置为一个虚拟服务器(即:当你在类似!http://trac.mycompany.com的URL上访问它时):

{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    <Location />
        SetHandler mod_python
        PythonInterpreter main_interpreter
        PythonHandler trac.web.modpython_frontend
        PythonOption TracEnv /var/trac/myproject
        PythonOption TracUriRoot /
    </Location>
    <Location /login>
        AuthType Basic
        AuthName "MyCompany Trac Server"
        AuthUserFile /var/trac/myproject/.htpasswd
        Require valid-user
    </Location>
</VirtualHost>
}}}

如果你有登录的问题, 试试使用`<LocationMatch>`而不是`<Location>`

对于支持多个项目的虚拟机, 将"`TracEnv`" /var/trac/myproject替换为"`TracEnvParentDir`" /var/trac/

== 疑难解答 ==

通常, 如果你收到服务器的错误网页, 你可以查看Apache错误日志, 或者启用`PythonDebug`选项:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonDebug on
</Location>
}}}

对于多个项目, 也试试重启服务器.

=== Expat相关的段错误(segmentation faults) === #expat

该问题大多数发生在使用python 2.4的Unix上.
在Python 2.4中, 使用Expat(一个用C写的XML解析库)的某些版本, 
并且如果Apache使用了另一个版本, 将导致段错误(segmentation faults).
因为Trac 0.11使用的是Genshi, 将间接使用Expat, 该问题
将可能发生, 即使你从前使用Trac 0.10时一切正常.

参见Graham Dumpleton详细的[http://www.dscpl.com.au/wiki/ModPython/Articles/ExpatCausingApacheCrash 解释和解决办法].

=== 表单提交问题 ===

如果你在Trac中提交表单时遇到了问题(通常在提交后, 你被重定向到起始页), 检查{{{DocumentRoot}}}中是否包含一个与映射到mod_python处理器相同路径的目录或文件. 由于某种原因, mod_python映射到一个位置同时又匹配一个静态资源时, 它会很困惑.

=== 虚拟机配置的问题 ===

如果使用<Location />指令, 设置`DocumentRoot`会造成一个''''403 (Forbidden)''''错误. 删除`DocumentRoot`指令, 或确认它指向的访问目录是允许的(在对应的`<Directory>`块中).

与`SetHandler`一起使用<Location />, 使得所有文件都要由mod_python来处理, 从而造成不能下载任何CSS或图片/图标. 我使用<Location /trac> `SetHandler None` </Location>来绕开这个问题, 尽管我不知道这是否是最好的解决办法.

=== 使用 .htaccess ===

尽管看起来可以用.htaccess文件来rewrite上述配置为文档根目录, 但却不起作用. Apache会向每个Trac URL中添加一个"/", 这样会干扰其正常的运行.

用mod_rewrite可能会让它起作用, 但我没有做到. 总之, 比起其价值来太麻烦了, 还是用前面提供的指导吧.:)

=== Win32 问题 ===
如果你在Windows上运行trac和mod_python, 上传附件将不起作用. 这个问题在3.1.4或之后的mod_python版本中得到了解决, 因此请升级mod_python来修复它.

=== OS X 问题 ===

在OS X上使用mod_python, 你无法用`apachectl restart`重启Apache. 这个问题在mod_python3.2中已经修复了, 但还有一个更早版本[http://www.dscpl.com.au/projects/vampire/patches.html here]的可用补丁包.

=== SELinux 问题 ===

如果Trac报告类似''''无法在db.lock获得共享锁'''', 存储库的安全环境需要进行设置:

{{{
chcon -R -h -t httpd_sys_content_t PATH_TO_REPOSITORY
}}}

请参考[[http://subversion.tigris.org/faq.html#reposperms]]

=== FreeBSD 问题 ===

如果你是自己编译安装的apache2, apache将不支持线程 (因为其在FreeBSD上工作欠佳). 你可以强制线程支持, 当运行apache的 ./configure时, 使用 --enable-threads, 但并不推荐这样.
最佳选项[[http://modpython.org/pipermail/mod_python/2006-September/021983.html 看起来是]] 增加 /usr/local/apache2/bin/ennvars行

{{{
export LD_PRELOAD=/usr/lib/libc_r.so
}}}

=== Subversion 问题 ===

如果你只在mod_python下遇到以下Trac错误''''不支持的版本控制系统"svn"'''', 但是在命令行甚至是在[ZhTracStandalone Trac独立服务器]下运行得很好, 有可能是你忘记了用[TracModPython#ConfiguringPythonPath PythonPath]指令添加Python绑定的路径了.(更好的办法是在Python的site-packages目录中, 增加一个到绑定的链接, 或者在该目录中创建一个.pth文件)

你同时需要较新版本的`mod_python`, 以避免源于多子解释器的默认用法导致的运行时错误({{{argument number 2: a ''apr_pool_t *'' is expected}}}). 3.2.8 ''''应该'''' 工作, 然而, 可能的话, 最好使用#3371描述的变通方法, 要想强制使用主解释器:
{{{
PythonInterpreter main_interpreter
}}}
当使用Python的Subversion绑定及mod_python (#2611, #3455)时, 这是推荐处理其他众所周知的问题的变通方法. 参见Graham Dumpleton解释此问题的评论[comment:ticket:3455:9 #3455].

=== 页面布局问题 ===

如果Trac页面格式看起来很古怪, 可能是页面布局的样式表没有被web服务器处理. 试试在apache配置中增加下来几行:
{{{
#!xml
Alias /myproject/css "/usr/share/trac/htdocs/css"
<Location /myproject/css>
    SetHandler None
</Location>
}}}

注意: 要是上述配置起作用, 必须将其放在你的项目根位置的后面, 即, {{{<Location /myproject />}}}.

=== HTTPS问题 ===

如果你想完全使用https运行Trac, 你可能发现其试着重定向到普通http. 这种情况下, 只需在apache配置中增加下列行:
{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    SetEnv HTTPS 1
    ....
</VirtualHost>
}}}

=== Fedora 7问题 ===
确认你安装''python-sqlite2''包, 因为TracModPython(而不是tracd)需要它


=== 使用php5-mhash或其他php5模块的分段错误(Segmentation fault)  ===
你也许遇到分段错误(segfaults) (由debian etch报道), 如果安装了php5-mhash模块. 试试删除它. 参见debian bug report [[http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=411487]]

当使用php5自带的第三方库(而没有用系统库)编译的php5, 一些人也会遇到问题. 请查看此处[[http://www.djangoproject.com/documentation/modpython/#if-you-get-a-segmentation-fault]]

----
原文版本: TracModPython[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracInstall Trac安装], [ZhTracCgi TracCgi], [ZhTracFastCgi TracFastCgi][[BR]]
See also: TracGuide, TracInstall, TracCgi, TracFastCgi
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracNavigation',1,1293980803792000,'trac','127.0.0.1','= Trac导航 =

从Trac 0.11起, 已经可以用基本方式来定制主导航和meta导航栏目.

新的`[mainnav]` 和 `[metanav]` 配置段现在能用于定制导航栏目的文本和链接, 甚至将其禁用.

`[mainnav]`对应''''''main navigation bar'''''', 其中包含比如''''Wiki'''', ''''Timeline'''', ''''Roadmap'''', ''''Browse Source''''等等栏目. 此导航栏用于的访问Trac中启用主模块的默认页面和当前用户的附件.

`[metanav]`对应于''''''meta navigation bar'''''', 默认位于主导航栏的上面, ''''搜索''''框的下面. 包含''''登录'''', ''''注销'''', ''''帮助/指南''''等等栏目. 此导航栏用于访问关于Trac项目和当前用户的某些全局信息.

注意, 仍然不能定制''''''上下文导航栏'''''', 即, 位于主导航栏下面的那个.

=== 例子 ===

下面例子中, 我们将Wiki起始页面更名为"Home", 并且隐藏了"帮助/指南"链接. 
我们同时创建了"查看传票"栏目, 链接至一个特定的报表.

TracIni中的相关配置:
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24

[metanav]
help = disabled
}}}

----
原文版本: TracNavigation[[BR]]
相关信息: [ZhTracInterfaceCustomization Trac界面定制],  TracHacks:NavAddPlugin (增加栏目时仍然需要)[[BR]]
See also: TracInterfaceCustomization, the TracHacks:NavAddPlugin (still needed for adding entries)',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracNotification',1,1293980803802000,'trac','127.0.0.1','= 传票变化的邮件提醒 =
[[ZhTracGuideToc]]

Trac支持通过邮件来提醒传票的变化.

邮件提醒对于让用户时刻了解传票很有帮助, 并且提拱了一个发送所有的传票变化到一个特定邮件列表的便捷方法. 例如, 这是如何创建[http://lists.edgewall.com/archive/trac-tickets/ Trac传票]邮件列表的描述.

默认情况下提醒是禁用的, 可以在[wiki:ZhTracIni trac.ini]中启用并进行配置.

== 接收提醒邮件 ==
当报告一个新的传票或添加一个评论时, 在''''报告者'''', ''''指派到/承担者''''或''''抄送''''栏中输入一个有效邮件地址. 当传票有任何改动时, Trac会自动给你发一封邮件(取决于如何配置提醒).

它还可以帮助你时刻关注你感兴趣的事情.

== 配置SMTP提醒 ==

=== 配置选项 ===
下列时trac.ini中的''''[notification]''''段的可用选项:
 * ''''''smtp_enabled'''''': 启用邮件提醒.
 * ''''''smtp_server'''''': 用于提醒消息的SMTP服务器.
 * ''''''smtp_port'''''': (''''自0.9后'''') SMTP服务器的端口.
 * ''''''smtp_user'''''': (自0.9后)验证SMTP帐户的用户名.
 * ''''''smtp_password'''''': (自0.9后)验证SMTP帐户的密码.
 * ''''''smtp_from'''''': 在提醒邮件中"发件人"的邮件地址.
 * ''''''smtp_from_name'''''': 发送人名称, 用于提醒邮件''''Sender''''标头.
 * ''''''smtp_replyto'''''': 在提醒邮件中"回复至"的邮件地址.
 * ''''''smtp_default_domain'''''': (自0.10后)将指定的域附加到没有包含域的地址中. 完整的地址不会更改. 默认域要附加到所有没有在用户设置中找到邮件地址的用户名中.
 * ''''''smtp_always_cc'''''': 始终发送提醒的邮件地址列表. 通常用于把传票的变化发送到某个特定的邮件列表中.
 * ''''''smtp_always_bcc'''''': (自0.10后)始终发送提醒的邮件地址列表, 但提醒邮件的其他收件人看不见地址.
 * ''''''smtp_subject_prefix'''''': (''''自0.10.1后'''') 插入到邮件主题前的文本. 默认设为"!__default!__".
 * ''''''always_notify_reporter'''''': 始终将提醒发送到报告人域中的所有地址.
 * ''''''always_notify_owner'''''': (自0.9后)始终将提醒发送给承担者域中的地址.
 * ''''''always_notify_updater'''''': (自0.10后)始终向传票的更新者发送提醒.
 * ''''''use_public_cc'''''': (自0.10后)所有的收件人都能看到收件人(所有者, 报告人)和抄送列表中的地址(默认是''''密件抄送:'''' - 隐藏的副本).
 * ''''''use_short_addr'''''': (自0.10后)启用发送提醒到不包含域的地址, 例如不以@<domain.com>作为结尾的域. 该选项对内网很有用, SMTP服务器可以处理本地的地址并把用户名或注册映射到一个本地的邮箱. 请见`smtp_default_domain`. 不要将此选项用于一个公共的SMTP服务器.
 * ''''''use_tls'''''': (''''自0.10后'''') 切换使用[http://en.wikipedia.org/wiki/Transport_Layer_Security TLS], 比如GMail, 发送提醒SMTP服务器 .
 * ''''''mime_encoding'''''': (自0.10后)邮件提醒一直以7位模式发送的. 该选项允许选择MIME编码方案.支持的值有:  
   * `base64`: 默认值, 可用于任何种类的内容. 可能对和一些敏感的反垃圾邮件或反病毒引擎造成麻烦.
   * `qp` or `quoted-printable`: 最适合欧洲语言(比base64更紧凑), 不推荐用于非ASCII文本(没有base64紧凑).
   * ''none'': 不编码.只能用于英语(ASCII)纯文本. 使用非ASCII字符的邮件不能发送.

必须设置''''''smtp_from''''''或''''''smtp_replyto''''''(或两者), 否则Trac拒绝发送提醒邮件.

=== 配置样例 ===

{{{
[notification]
smtp_enabled = true
smtp_server = mail.example.com
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

== 邮件样例 ==
{{{
#42: testing
---------------------------+------------------------------------------------
       Id:  42             |      Status:  assigned                
Component:  report system  |    Modified:  Fri Apr  9 00:04:31 2004
 Severity:  major          |   Milestone:  0.9                     
 Priority:  lowest         |     Version:  0.6                     
    Owner:  anonymous      |    Reporter:  jonas@example.com               
---------------------------+------------------------------------------------
Changes:
  * component:  changset view => search system
  * priority:  low => highest
  * owner:  jonas => anonymous
  * cc:  daniel@example.com =>
         daniel@example.com, jonas@example.com
  * status:  new => assigned

Comment:
I''m interested too!

--
Ticket URL: <http://example.com/trac/ticket/42>
My Project <http://myproj.example.com/>
}}}

== 使用 GMail 作为 SMTP 主机 ==

使用如下配置片段
{{{
[notification]
smtp_enabled = true
use_tls = true
mime_encoding = base64
smtp_server = smtp.gmail.com
smtp_port = 587
smtp_user = user
smtp_password = password
}}}

其中, ''''user'''' 和 ''''password'''' 对应已有的GMail帐户, ''''即'''' 你登录[http://gmail.com]的帐户

或者, 你可以使用 `smtp_port = 25`.[[br]]
你不应使用 `smtp_port = 465`. 这是不起作用的, 你的传票提交可能会死锁. 端口465被保留用于SMTPS协议, 当前不被Trac支持. 详情参见 [comment:ticket:7107:2 #7107].
 
== 过滤自己做的修改的提醒 ==
在Gmail中, 使用过滤器:

{{{
from:(<smtp_from>) (("Reporter: <username>" -Changes) OR "Changes (by <username>)")
}}}

以删除这些提醒.

== 疑难解答 ==

如果你不能发送提醒, 首先要确定是否启用了日志, 然后查看日志是否有任何错误信息被记录. 关于日志特征的帮助, 请参考[ZhTracLogging Trac日志].

由于邮件提醒的错误不能通过Web界面报告, 所以提交修改或者创建传票的用户无法知道发送邮件提醒失败. Trac管理者需要查看日志, 找到错误的的踪迹.

=== ''''拒绝访问''''的错误 ===

典型的错误信息:
{{{
  ...
  File ".../smtplib.py", line 303, in connect
    raise socket.error, msg
  error: (13, ''Permission denied'')
}}}

该错误通常来自服务器上的安全设置, 许多Linux发行版不允许Web服务器将邮件的信息发送到本地的SMTP服务器.

当用户手动尝试连接SMTP服务器取得成功的时候, 他们会很困惑:
{{{
telnet localhost 25
}}}

问题是, 一个正常用户能连接到SMTP服务器上, 但是Web服务器却不能:
{{{
sudo -u www-data telnet localhost 25
}}}

因此, 需要配置你的服务器, 使Web服务器被授权通过SMTP服务器发送邮件. 实际的设置取决于你的Linux发行版和现行的安全策略. 浏览Trac邮件列表文件以获得帮助.

相关邮件列表论坛:
 * [http://article.gmane.org/gmane.comp.version-control.subversion.trac.general/7518 SELinux]
 
=== ''''可疑垃圾邮件''''错误 ===

一些SMTP服务器可能会拒绝Trac发送的提醒邮件.

默认的Trac配置使用Base64编码来发送邮件给收件人. 邮件的整个正文部分都是编码的, 有时会触发对敏感的邮件服务器的''''假阳性''''垃圾邮件监控. 因此, 建议使用`mime_encoding`选项将编码改为"quoted-printable".

"Quoted-printable"编码与使用拉丁语字符集的语言配合很好. 对于亚洲字符集, 建议坚持Base64编码.

----
原文版本: TracNotification[[BR]]
相关信息: [ZhTracTickets Trac传票], [ZhTracIni Trac配置], [ZhTracGuide Trac导览][[BR]]
See also: TracTickets, TracIni, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracPermissions',1,1293980803802000,'trac','127.0.0.1','= Trac权限 =
[[ZhTracGuideToc]]

Trac使用一种简单的权限系统来控制用户能否访问资源.

权限由[wiki:ZhTracAdmin trac-admin]工具管理, 或者web界面''''管理''''中的''''一般 / 权限''''面板.

除了本页中描述的默认权限策略, 可以启用插件来激活附加的权限, 并在[ZhTracIni TracIni]的`[trac] permission_policies` 配置栏目中列出. 详情参见[ZhTracFineGrainedPermissions TracFineGrainedPermissions].

未验证的用户访问系统时, 系统分配给他的名字是"anonymous". 为"anonymous"用户分配权限, 从而可以给匿名/访客身份的用户设置特权. 用户没有特权的Trac部分不会显示在导航中.
除这些特权外, 当用户认证并登录到系统时, 还能得到其他的单独权利. 所有登录的用户属于"authenticated"的组, 他们继承"anonymous"用户的权限.

== 可用的特权 ==

要让用户拥有所有特权, 使用`TRAC_ADMIN`权限. 拥有`TRAC_ADMIN`权限就像是*NIX系统上的一个''''root'''', 它会让你执行任何操作. 

否则, 可以给用户分配用于Trac各个不同功能领域的单独特权(注意, 特权名是区分大小写的).

=== 仓库浏览器 ===

|| `BROWSER_VIEW` || 在[wiki:ZhTracBrowser 仓库浏览器]中查看目录清单 ||
|| `LOG_VIEW` || 在[wiki:ZhTracBrowser 仓库浏览器]中查看文件和目录的修订日志 ||
|| `FILE_VIEW` || 在[wiki:ZhTracBrowser 仓库浏览器]中查看文件 ||
|| `CHANGESET_VIEW` || 查看[wiki:ZhTracChangeset Subversion仓库检入] ||

=== 传票系统 ===
|| `TICKET_VIEW` || 查看现有[wiki:ZhTracTickets 传票]和执行[wiki:TracQuery 传票查询] ||
|| `TICKET_CREATE` || 创建新的[wiki:ZhTracTickets 传票] ||
|| `TICKET_APPEND` || 为[wiki:ZhTracTickets 传票]添加评论或附件 ||
|| `TICKET_CHGPROP` || 更改[wiki:ZhTracTickets 传票]属性, 包括优先级, 指派到, 关键字等等(描述域除外) ||
|| `TICKET_MODIFY` || 包括`TICKET_APPEND`和`TICKET_CHGPROP`. 另外, 允许解决[wiki:TracTickets 传票] ||
|| `TICKET_EDIT_CC` || 更改抄送字段 ||
|| `TICKET_EDIT_DESCRIPTION` || 更改描述字段 ||
|| `TICKET_ADMIN` || 所有`TICKET_*`权限, 还有删除传票附件和描述域的更改 ||

注意: 需要`REPORT_VIEW`权限以显示"查看传票"按钮.

=== 路线图 ===

|| `MILESTONE_VIEW` || 查看里程碑 ||
|| `MILESTONE_CREATE` || 创建一个新里程碑 ||
|| `MILESTONE_MODIFY` || 修改现有里程碑 ||
|| `MILESTONE_DELETE` || 删除里程碑 ||
|| `MILESTONE_ADMIN` || 所有`MILESTONE_*`权限 ||
|| `ROADMAP_VIEW` || 查看[wiki:ZhTracRoadmap 路线图]页面 ||
|| `ROADMAP_ADMIN` || 从#3022中删除, 由MILESTONE_ADMIN替换 ||

=== 报表 ===

|| `REPORT_VIEW` || 查看[wiki:ZhTracReports 报表] ||
|| `REPORT_SQL_VIEW` || 查看[wiki:ZhTracReports 报表]的底层SQL查询 ||
|| `REPORT_CREATE` || 创建新[wiki:ZhTracReports 报表] ||
|| `REPORT_MODIFY` || 更改现有[wiki:ZhTracReports 报表] ||
|| `REPORT_DELETE` || 删除[wiki:ZhTracReports 报表] ||
|| `REPORT_ADMIN` || 所有`REPORT_*`权限 ||

=== Wiki系统 ===

|| `WIKI_VIEW` || 查看现有的[wiki:ZhTracWiki Wiki]页面 ||
|| `WIKI_CREATE` || 创建新的[wiki:ZhTracWiki Wiki]页面 ||
|| `WIKI_MODIFY` || 更改[wiki:ZhTracWiki Wiki]页面 ||
|| `WIKI_DELETE` || 删除[wiki:ZhTracWiki Wiki]页面和附件 ||
|| `WIKI_ADMIN` || 所有`WIKI_*`权限, 和''''只读''''页面的管理 ||

=== 权限 ===

|| `PERMISSION_GRANT` || 增加/授予权限 ||
|| `PERMISSION_REVOKE` || 删除/收回权限 ||
|| `PERMISSION_ADMIN` || 所有`PERMISSION_*`权限 ||


=== 其他 ===

|| `TIMELINE_VIEW` || 查看[wiki:ZhTracTimeline 时间线]页面 ||
|| `SEARCH_VIEW` || 查看和执行[wiki:ZhTracSearch 搜索]查询 ||
|| `CONFIG_VIEW` || 启用''''关于Trac''''的附加页面, 显示现在的配置或已安装插件的列表 ||
|| `EMAIL_VIEW` || 显示邮件地址, 即使[wiki:0.11/TracIni `trac show_email_addresses`配置项是`false`] ||

== 授予特权 ==

你可用[wiki:TracAdmin trac-admin]授予用户特权. 现有的特权集可以用下面命令列出来:
{{{
  $ trac-admin /path/to/projenv permission list
}}}

下面命令允许 ''''bob'''' 删除报表:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

`permission add` 也可以一次增加多个权限:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE WIKI_CREATE
}}}

或增加所有特权:
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

== 权限组合 ==

有两个内置组, "authenticated"和"anonymous".[[BR]]
所有没有登录的用户自动是"anonymous"组.[[BR]]
所有登录的用户自动是"authenticated"组.[[BR]]
"authenticated"组从"anonymous"组继承权限.[[BR]]
例如, 如果"anonymous"组有WIKI_MODIFY权限, 则不需要为"authenticated"增加WIKI_MODIFY permisison权限.

定制组可以定义为从内置组中继承权限.

权限可以按照''''developer'''', ''''admin''''等角色进行分组.
{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

组内成员资格可通过做一个{{{permission list}}}(没有其他更多的参数)来进行核查, 结果会包含组成员资格. 组名应该使用小写字母, 大写字母是保留用于权限的.

== 增加新组和权限 ==
权限组可以通过将一个用户指定到一个组来创建, 然后为那个组指定权限.

下面将''''bob''''增加到名为''''beta_testers''''新组, 然后为那个组指定WIKI_ADMIN权限. (因此, ''''bob''''将继承WIKI_ADMIN 权限)
{{{ 
   $ trac-admin /path/to/projenv permission add bob beta_testers
   $ trac-admin /path/to/projenv permission add beta_testers WIKI_ADMIN

}}}

== 删除权限 ==

通过`remove`命令来删除权限. 例如:

该命令会阻止用户''''bob''''删除报表:
{{{
  $ trac-admin /path/to/projenv permission remove bob REPORT_DELETE
}}}

就像`permission add`, 该命令接受多个特权名.

你还可以删除某个用户的全部特权:
{{{
  $ trac-admin /path/to/projenv permission remove bob ''*''
}}}

或者所有用户的某个特权:
{{{
  $ trac-admin /path/to/projenv permission remove ''*'' REPORT_ADMIN
}}}

== 默认权限 ==

新安装的Trac, 默认的`anonymous`用户将有''''查看''''Trac中所有内容的权限, 但是不能创建或修改.
另一方面, `authenticated`用户将有权限''''创建和修改传票和wiki页面''''.

 ''''''anonymous''''''::
 BROWSER_VIEW 
 CHANGESET_VIEW 
 FILE_VIEW 
 LOG_VIEW 
 MILESTONE_VIEW 
 REPORT_SQL_VIEW 
 REPORT_VIEW 
 ROADMAP_VIEW 
 SEARCH_VIEW 
 TICKET_VIEW 
 TIMELINE_VIEW
 WIKI_VIEW 

 ''''''authenticated''''''::
 TICKET_CREATE 
 TICKET_MODIFY 
 WIKI_CREATE 
 WIKI_MODIFY  

----
原文版本: TracPermissions[[BR]]
相关信息: [ZhTracAdmin Trac管理], [ZhTracGuide Trac导览][[BR]]
See also: TracAdmin, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracPlugins',1,1293980803802000,'trac','127.0.0.1','= Trac插件 =
[[ZhTracGuideToc]]

自0.9后, Trac支持插件来扩展内置功能. 插件的功能是基于[http://trac.edgewall.org/wiki/TracDev/ComponentArchitecture 组件架构]的.

== 要求 ==

要在Trac中使用基于egg的插件, 你需要安装[http://peak.telecommunity.com/DevCenter/setuptools setuptools](version 0.6).

要安装`setuptools`, 下载bootstrap模块[http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py], 并执行:
{{{
$ python ez_setup.py
}}}

如果脚本不能安装setuptools版本, 你可以从[http://www.python.org/pypi/setuptools PyPI]上下载它, 然后手动安装.

插件也可以只有一个`.py`文件, 位于环境或者全局的`plugins`目录中''''(自[milestone:0.10])''''.

== 安装Trac插件 ==

=== 单独项目 ===

插件打包成[http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. 意味着, 他们是ZIP文件, 文件扩展名是`.egg`. 如果你已下载了一个插件的源代码, 你可以运行:

如果你已经下载了插件的源代码, 并想要生成一个`.egg`文件, 使用下列指令:
 * 解开源码包. 其中应有一个setup.py文件. 
 * 运行:
{{{
$ python setup.py bdist_egg
}}}

然后, 你将有了一个*.egg文件. 查看运行的输出以找到其位置.

一旦你有插件文件, 你需要将其复制到[wiki:ZhTracEnvironment Trac环境]的''''plugins''''目录, 并且确认Web服务器有足够的权限来读取插件egg.

要卸载这种方式安装的插件, 从`plugins`目录中删除egg文件, 然后重启web服务器.

注意, 创建了egg的Python版本必须匹配运行Trac的Python版本. 比如, 你在Python2.3下运行Trac, 但已将你的独立Python升级到2.4, eggs就不被识别了.

注意, 在多项目方式的安装中, Python解释器的实例池将按需动态定位, 由于插件占据了Python模块系统的一个位置, 因此第一个载入的插件版本将用于所有项目. 换句话说, 在多项目方式中, 你不能在两个项目中使用插件的不同版本. 为所有项目安装插件(见下述), 然后基于项目来选择性启用插件则是安全的.

=== 用于所有项目 ===

==== 用.egg文件 ====

一些插件(例如[trac:SpamFilter SpamFilter])可以作为`.egg`文件进行下载, 可以和`easy_install`程序一起安装:
{{{
easy_install TracSpamFilter
}}}

如果`easy_install`不在你的系统上, 请参考上节中的''''要求''''来安装. Windows用户还需要将Python安装包的''''Scripts''''目录, 例如`C:\Python23\Scripts`, 添加到`PATH`环境变量中. 更多信息, 请参考[http://peak.telecommunity.com/DevCenter/EasyInstall#windows-notes easy_install Windows说明].

如果安装完一个egg后, Trac报告权限错误, 而你不想为Web服务器提供一个可写的egg缓存目录, 你只需解压这个egg来绕开这个问题. 使用`--always-unzip`选项:
{{{
easy_install --always-unzip TracSpamFilter-0.2.1dev_r5943-py2.4.egg
}}}

你应该用与egg相同的名字作为目录名(包括结尾的`.egg`), 目录中是解压后的内容.

Trac也会搜索全局安装的插件''''(自0.10版本后)'''', 参见 TracIni#GlobalConfiguration.

==== 从源代码 ====

`easy_install`从源代码的快照安装. 只需要Subversion的URL或者源代码的压缩包(tarball/zip):
{{{
easy_install http://svn.edgewall.com/repos/trac/sandbox/spam-filter
}}}

==== 启用插件 ====

不像只安装在环境目录中的那些插件, 你需要通过[wiki:ZhTracIni trac.ini]来启用全局安装的插件. 这是在配置文件的`[components]`段中完成的, 例如:
{{{
[components]
tracspamfilter.* = enabled
}}}

选项名是插件的Python安装包. 插件的相应文档中应该明确指定, 但通过查看源代码轻易找到(找包含`__init__.py`的顶级目录).

注意:安装完插件后, 你还需要重启Apache.

==== 卸载 ====

`easy_install` 或 `python setup.py` 还没有卸载功能. 然而, 删除全局安装插件egg的方法通常是:
 1. 运行`easy_install -m [plugin name]` 来从 `$PYTHONLIB/site-packages/easy-install.pth` 中删除用setuptools安装的插件.
 1. 从`/usr/bin`, `/usr/local/bin` 或 `C:\\Python*\Scripts`删除执行文件. 要搜索可执行文件的位置, 你可以查看`setup.py`的`[console-script]`段.
 1.从安装位置中 删除.egg文件或文件夹, 通常位于`$PYTHONLIB/site-packages/`.
 1. 重启web服务器.

如果你对egg的位置不确定, 这里有一个小技巧来定位egg(或任意包) - 用插件使用的名字空间(跟启用插件一样)替换:
{{{
>>> import myplugin
>>> print myplugin.__file__
/opt/local/python24/lib/site-packages/myplugin-0.4.2-py2.4.egg/myplugin/__init__.pyc
}}}

== 创建插件缓存 ==

一些插件需要被Python egg的运行时(`pkg_resources`)提取出来, 因此他们的内容是文件系统上的真实文件. 提取的目录默认是用户的home目录, 这可能是也可能不是个问题. 但你可以用环境变量`PYTHON_EGG_CACHE`覆盖默认位置.

要在Apache实现, 如下使用`SetEnv`指令:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

无论你使用[wiki:ZhTracCgi CGI]或[wiki:ZhTracModPython mod_python]前端, 该指令都起作用. 将该指令放在你设置[wiki:ZhTracEnvironment Trac环境]路径的旁边, 也就是说, 在同一个`<Location>`块内.

例子 (对于CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

或者(对于mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

 ''''注意: 这要求`mod_env`模块''''

对于[wiki:ZhTracFastCgi FastCGI], 你需要''''-initial-env''''选项, 或你的Web服务器提供的环境变量设置.

 ''''注意: 如果你已经使用 -initial-env 设置了项目目录(单个项目或项目父目录), 你需要在trac.fcgi中添加一个在[wiki:ZhTracFastCgi TracFastCgi]的例子中所示的环境变量.

=== 关于hook脚本 ===

如果你创建了调用Trac引擎的Subversion hook脚本(例如`/contrib`目录中提供的post-commit hook脚本), 确保你在这些脚本中也定义了`PYTHON_EGG_CACHE`环境变量.

== 疑难解答 ==

=== 安装工具安装好了吗? ===

从命令行试试:
{{{
$ python -c "import pkg_resources"
}}}

如果你没有得到输出, 则是安装好的. 否则, 你需要先安装它.

=== 你得到Python egg的正确版本了吗? ===

Python egges在他们的文件名中包含了Python的版本号. 例如, `MyPlugin-1.0-py2.4.egg`是一个Python2.4的egg, 如果你在运行一个不同的Python版本, 比如说2.3或2.5, 它无法被加载进来.

还有, 验证你下载的egg文件实际是一个ZIP文件. 如果你从一个Trac网站上下载的它, 你可能只是下载了一个HTML的预览网页.

=== 插件启用了吗? ===

如果你安装了一个全局插件(即: 不是在Trac项目环境的''''plugins''''目录中), 你需要在[ZhTracIni trac.ini]中启用它. 确认以下几个事情:
 * 事实上你向`[components]`段添加了必要的行
 * 事实上你向`[components]`段添加了必要的行
 * 值是"enabled", 而不是"enable"

 
=== 查看egg文件的权限 ===

Trac当然必须能够读取文件.

=== 查看日志文件 ===

启用Trac中的[ZhTracLogging 日志], 设置日志等级为`DEBUG`, 然后查看日志中关于加载插件的信息.

=== 检查你有正确的权限 ===

一些插件要求你有特定的权限以使用它们. 例如WebAdmin, 要求用户有TRAC_ADMIN权限以显示在导航栏中.

=== 是否载入了版本错误的插件? ===

如果你将插件放在plugins目录中, 并且如果你有多个项目, 你需要确认载入了正确版本的插件. 这些是基本规则:
 * 每个运行的Trac服务器只载入插件的一个版本(即, 每个Python进程). Python名字空间和模块列表是共享的, 它不能重复. 是否`启用`或者`禁用`插件不会有任何分别.
 * 全局安装的插件(典型用`setup.py install`安装的) 将覆盖全局中任何版本, 或者项目的插件目录. 全局目录中的插件将先于任何项目插件目录被使用.
 * 如果你的Trac服务器运行了多个项目(使用`TRAC_ENV_PARENT_DIR`设置), 那么两个不同项目使用不同版本的插件, 结果是不确定的. 它们中仅有一个被载入, 被载入的插件将在两个项目中共享. Trac将载入第一个找到的 - 基本上是第一个收到请求的项目.
 * 在Python site-packages中有多个版本是可以的(即, 用`setup.py install`安装的) - setuptools将确认你得到的是最新版本. 然而, 不要在全局或者项目的plugins目录中存储多个版本 - 版本号或者安装日期都是. 当Trac搜索目录以寻找插件是, 没有办法判断使用哪一个.

=== 如果上面都失败了 ===

OK, 日志中没提到插件, egg是可读的, python版本是正确的''''并且''''egg已经被全局安装了(在trac.ini中也启用了), 但是它还是不能工作, 或者给出错误信息, 或者其它表示? 去IrcChannel问问吧.

----
原文版本: TracPlugins[[BR]]
相关信息: [ZhTracGuide Trac导览], [http://trac.edgewall.org/wiki/PluginList 插件列表], [http://trac.edgewall.org/wiki/TracDev/ComponentArchitecture 组件架构][[BR]]
See also: TracGuide, [http://trac.edgewall.org/wiki/PluginList plugin list], [http://trac.edgewall.org/wiki/TracDev/ComponentArchitecture component architecture]
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracQuery',1,1293980803812000,'trac','127.0.0.1','= Trac传票查询 =
[[ZhTracGuideToc]]

除[wiki:ZhTracReports 报表]之外, Trac支持''''自定义传票查询'''', 用于显示满足特定条件的传票列表.

要配置和执行一个自定义查询, 从导航栏切换到''''传票检索''''模块, 然后选择''''自定义查询''''链接.

== 过滤器 ==
当你首次访问查询页面时, 默认的过滤器会显示所有打开的传票. 如果你登录了, 它会显示分配给你的打开的传票. 单击右侧有减号标志的标签, 可以将当前过滤器删除掉. 通过过滤框右下角的折叠菜单可以添加新的过滤器. 带有文本框或下拉菜单的过滤器可被多次添加来生成一个''''or''''条件.

你可以用过滤框下方的字段, 来按照某个字段对结果进行分组, 或者显示每个传票的完整描述.

一旦你编辑了过滤器, 点击更新按钮来刷新结果.

== 传票导航 ==
单击某个查询结果会将你带到该传票处. 你可以通过单击主菜单栏下方的''''下一传票''''或''''上一传票''''链接在结果中浏览, 或者是单击''''回到查询''''链接返回到查询页面.

你能安全的编辑, 保存这些传票, 然后继续在结果中浏览(使用''''下一传票''''或''''上一传票''''). 当你返回查询, 所有被编辑过的传票将显示成斜体字. 如果其中有些传票被编辑后不再匹配查询条件, 其文字将是灰色的. 最后, 如果有新创建的匹配传票, 将被显示为粗体字.

再次单击''''更新''''按钮, 可以刷新查询结果并清除掉这些状态提示符.

== 保存查询 ==

虽然Trac还不能允许保存一个命名的查询(由此能将其放在导航列表中), 你可以在Wiki中保存对查询的引用, 如下所示.

=== 使用Trac链接 ===

你可能需要保存查询结果以供下次使用. 你可以在任何Wiki页面中通过链接到查询页面实现.
{{{
[query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]
}}}

显示为:
  [query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]

下面使用简单的查询语句 (查看 [wiki:ZhTracQuery#QueryLanguage 查询语言]).

可以复制查询语句, 并粘贴到Wiki链接中(包括前面的问号"?")
{{{
[query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]
}}}

显示为:
  [query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]

=== 使用`[[TicketQuery]]`宏 ===

`[[TicketQuery]]`宏使你能在任何可以使用[ZhWikiFormatting Wiki格式]的地方显示符合条件的传票列表.

例如:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate)]]
}}}

显示为:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate)]]

就像[wiki:ZhTracQuery#UsingTracLinks query: wiki links], 宏的参数是符合简单 [wiki:ZhTracQuery#QueryLanguage 传票查询语言]格式的查询字符串.

更紧凑的, 没有传票概要的方法:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]
}}}

显示为:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]

最后, 如果你希望只收到匹配查询的defects的数量, 使用``count``参数.

{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]
}}}

显示为:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]


=== 查询语言 ===

`query:`Trac链接`和[[TicketQuery]]`宏都使用一个迷你查询语言来指定查询过滤器. 基本上, 过滤器由&符号(`&`)隔开. 每个过滤器包含传票字段名, 一个操作符和一个以上的值. 值之间被(`|`)分隔, 表示匹配任一值. 

可用的运算符是:
|| ''''''='''''' || 精确匹配其中某个值的字段内容 ||
|| ''''''~='''''' || 字段内容包含一个或多个值 ||
|| ''''''!^='''''' || 字段内容以某个或某几个值开始 ||
|| ''''''$='''''' || 字段内容以某个或某几个值结尾 ||

所有这些运算符还可以取反:
|| ''''''!='''''' || 字段内容不匹配任何值 ||
|| ''''''!~='''''' || 字段内容不包含任何值 ||
|| ''''''!!^='''''' || 字段内容不以任何值开始 ||
|| ''''''!$='''''' || 字段内容不以任何值结尾 ||

----
原文版本: TracQuery[[BR]]
相关信息: [ZhTracTickets Trac传票], [ZhTracReports Trac报表], [ZhTracGuide Trac导览][[BR]]
See also: TracTickets, TracReports, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracReports',1,1293980803812000,'trac','127.0.0.1','= Trac报表 =
[[ZhTracGuideToc]]

Trac报表模块提供了一个简单却强大的报表工具, 来展示Trac数据库中传票的信息.

[ZhTracReports Trac报表]采用标准的SQL ''''SELECT''''语句来自定义报表, 而不是自己的报表定义格式.

  ''''注意:在现有的形式中, 报表模块会渐渐淘汰, 因为它严重限制了Trac团队调整底层数据库结构的能力. 我们相信[wiki:ZhTracQuery 查询模块]是个更好的替代品, 可以提供更灵活性和更好的功能. 然而, 有一些报表还不能用查询模块来处理, 我们打算进一步加强它, 这样报表模块可以完全删除掉. 这也就是说报表模块不再有增强.''''

  ''''你可以在[wiki:ZhTracIni trac.ini]中, 用查询模块来替代报表模块.''''
  {{{
  [components]
  trac.ticket.report.* = disabled
  }}}
  ''''它会使查询模块成为查看传票导航的默认处理器. 我们鼓励你尝试该配置, 并告诉我们你还希望增加哪些报表的特性.''''

  ''''''''''绝大多数时候, 你需要重启你的httpd服务器.''''''''''

一个报表包含下列基本部分:
 * ''''''ID'''''' -- 唯一的(顺序增长)标识
 * ''''''标题''''''  -- 描述性的标题
 * ''''''描述''''''  -- 报表的简要描述([ZhWikiFormatting Wiki格式]).
 * ''''''报表正文'''''' -- 报表查询的结果列表, 格式参照下列描述的方法.
 * ''''''页脚'''''' -- 包含该报表可选下载格式的链接.

== 修改报表序号 ==
如果你想要修改报表的序号, 比如想要重新组织报表, 目前只能修改trac数据库来实现. ''''report''''表有下列定义(以0.10为例):
 * id integer PRIMARY KEY
 * author text
 * title text
 * query text
 * description text
修改ID, 将改变''''可用报表''''列表中报表的顺序和序号及报表的链接. 运行类似下列的命令:
{{{
update report set id=5 where id=3;
}}}
注意保证数据的完整性(即, ID必须是唯一的, 你也不能超过其最大值, 因为其是由SQLite来管理的).

== 改变排序顺序 ==
简单报表(没有分组的报表): 可通过单击列标题, 按列进行排序.

如果一个列标题是一个链接(红色的), 单击你想要排序的列. 再次点击同样的标题反转顺序.

== 传票导航 ==
点击报表结果将将你带到传票处. 你可以通过点击位于主菜单栏下面的''''下一传票''''或者''''上一传票''''链接来在结果中导航, 或者点击''''返回报表''''链接以返回报表页面.


你能安全的编辑, 保存这些传票, 然后继续在结果中浏览(使用''''下一传票''''或''''上一传票''''). 当你返回报表, 将没有任何有变化的提示, 而如果你是从查询获得的结果中导航,则会有变化(见 ZhTracQuery#NavigatingTickets). ''''(自 0.11)''''

== 可选的下载格式 ==
除了默认的HTML视图, 报表还可以用许多其他格式导出. 
在报表页的底部, 你会发现一个现有数据格式的列表. 
单击想要的链接, 用此报表格式下载.

=== 逗号分隔的 - CSV (逗号分隔的值) ===
报表导出为纯文本, 每列用逗号分隔开. ''''''注意:'''''' 回车, 换行和逗号会从列数据中抽离出来, 以保护CSV结构.

=== Tab分隔的 ===
像上述的一样, 但是用tab(\t)而不是逗号.

=== RSS - XML内容聚合 ===
所有的报表支持通过XML/RSS 2.0进行聚合. 要订阅RSS, 单击页面底部的橙色''''XML''''图标. 想知道Trac中RSS支持的一般说明, 请参见[ZhTracRss Trac的RSS].

----

== 创建自定义报表 ==
''''创建一个自定义报表要求对SQL有足够的了解.''''

一个报表基本上是一个命名的SQL查询, 由Trac执行并输出执行结果. 可以从Web界面中直接查看和创建报表自定义的SQL表达式. 

一个报表通常由一个查询ticket表的SELECT表达式构成, 可以选择所有可用的列, 按你想要的方式排序.

== 传票的列 ==
ticket表有如下的列字段:
 * id
 * type
 * time
 * changetime
 * component
 * severity  
 * priority 
 * owner
 * reporter
 * cc
 * version
 * milestone
 * status
 * resolution
 * summary
 * description
 * keywords

关于列字段的详细描述, 请见[ZhTracTickets Trac传票].

`所有的活动传票, 按照优先级和时间进行排序.`

`例子`: ''''所有的活动传票, 按照优先级和时间进行排序.''''
{{{
SELECT id AS ticket, status, severity, priority, owner, 
       time as created, summary FROM ticket 
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY priority, time
}}}


----


== 高级报表: 动态变量 ==
Trac支持在报表SQL语句中使用''''动态变量''''. 简而言之, 动态变量是进行查询前被自定义数据替换的特定字符串.

=== 在查询中使用变量 ===

动态变量的语法是很简单的, 任何以''$''及大写字母的为开头的词都被当作一个变量.

例如:
{{{
SELECT id AS ticket,summary FROM ticket WHERE priority=$PRIORITY
}}}

查看报表时, 需要为$PRIORITY指定一个值, 你应该将其定义为报表URL中的一个参数, 不考虑开头的''$''符号.

例如:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high
}}}

要使用多个变量, 用''&''进行分隔.

例如:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high&SEVERITY=critical
}}}


=== 特殊变量或常量 ===
有一个''''魔法''''动态变量, 其值将自动设置, 不需要修改URL.

 * $USER -- 登录用户的用户名.

例如 (''''列出所有给我的传票''''):
{{{
SELECT id AS ticket,summary FROM ticket WHERE owner=$USER
}}}


----


== 高级报表: 自定义格式 ==
Trac还可以生成更高级的报表, 包括自定义版式, 结果分组和用户自定义CSS样式. 要创建这样的报表, 我们要用专门的SQL语句来控制Trac报表引擎的输出.

== 特殊列 ==
要格式化报表, [ZhTracReports Trac报表]在查询结果中寻找''魔法''列名. 对这些''魔法''名称的处理将影响报表的最终版式和样式.

=== 自动格式化的列 ===
 * ''''''ticket'''''' -- 传票ID号, 作为该传票的链接.
 * ''''''created, modified, date, time'''''' -- 按日期或时间格式格式化单元格.
 * ''''''description'''''' -- 传票的描述字段, 可以被Wiki引擎转换为HTML格式.
 
''''''例子:''''''
{{{
SELECT id as ticket, created, status, summary FROM ticket 
}}}

=== 自定义格式列 ===
名字的开头和结尾是两个下划线的列, 例如(__color__), 是格式化提示, 将影响行的外观.
 
 * ''''''`__group__`'''''' -- 将结果按照值的大小在该列中进行分组. 每一组都有他们自己的标题和表格.
 * ''''''`__color__`'''''' -- 从1到5的值中选择一个定义好的颜色. 一般按照事务的优先级着色.
{{{
#!html
<div style="margin-left:7.5em">Defaults: 
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fdc; border-color: #e88; color: #a22">Color 1</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #ffb; border-color: #eea; color: #880">Color 2</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fbfbfb; border-color: #ddd; color: #444">Color 3</span>
<span style="border: none; color: #333; background: transparent; font-size: 85%; background: #e7ffff; border-color: #cee; color: #099">Color 4</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #e7eeff; border-color: #cde; color: #469">Color 5</span>
</div>
}}}
 * ''''''`__style__`'''''' -- A custom CSS style expression to use for the current row. 

''''''例子:'''''' ''''列举活动传票, 按照里程碑进行分组, 按照优先级进行着色.''''
{{{
SELECT p.value AS __color__,
     t.milestone AS __group__,
     (CASE owner WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' ELSE '''' END) AS __style__,
       t.id AS ticket, summary
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}


`注意`: 使用了一个表连接(table join), 以表示传票的优先级及其在''''enum''''表中对应的数字值.

=== 改变报表的行的版式 ===

默认情况下, 每行的所有列都显示在HTML报表的一行中, 格式如上所述. 然而, 还可以创建多行的报表项.

 * ''''''`column_`'''''' -- ''''在其之后分行''''.通过向列名中添加一个下划线(''_''), 剩下的列会在的第二行继续.
 * ''''''`_column_`'''''' -- ''''整行''''. 通过在列名的开头和结尾添加一个下划线(''_''), 数据会显示在单独的一行.
 * ''''''`_column`''''''  --  ''''隐藏数据''''. 给一个列名添加一个下划线(''_''), 指导Trac隐藏HTML输出的内容. 它只对用其他格式下载的信息有用. 这些格式包括CSV或RSS/XML.

''''''例子:'''''' ''''列举活动传票, 按里程碑进行分组, 按优先级进行着色, 还有描述以及多行版式.''''

{{{
SELECT p.value AS __color__,
       t.milestone AS __group__,
       (CASE owner 
          WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' 
          ELSE '''' END) AS __style__,
       t.id AS ticket, summary AS summary_,             -- ## Break line here
       component,version, severity, milestone, status, owner,
       time AS created, changetime AS modified,         -- ## Dates are formatted
       description AS _description_,                    -- ## Uses a full row
       changetime AS _changetime, reporter AS _reporter -- ## Hidden from HTML output
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

=== 关于报表的自定义字段 ===

如果你的传票中添加了自定义字段(0.8版本中的实验性的特征, 参见[ZhTracTicketsCustomFields 传票自定义字段]), 你可以写一个包含他们的SQL查询. 你需要一个对ticket_custom表的连接, 但这不是那么容易.

如果声明trac.ini中的额外字段之前, 在ticket_custom表中就不能有相关数据. 要绕开这个问题, 可使用SQL的"LEFT OUTER JOIN"语句. 参见[http://trac.edgewall.org/wiki/TracIniReportCustomFieldSample TracIniReportCustomFieldSample]中的一些例子.

''''''注意, 你需要有权限以显示出增加或编辑报表的按钮.''''''

----
原文版本: TracReports[[BR]]
相关信息: [ZhTracTickets Trac传票], [ZhTracQuery Trac查询], [ZhTracGuide Trac导览][[BR]]
See also: TracTickets, TracQuery, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracRevisionLog',1,1293980803812000,'trac','127.0.0.1','= 查看修订日志 =
[[ZhTracGuideToc]]

当你浏览仓库时, 你可以查询对应目前正在查看的路径的''''修订日志''''视图. 它会显示一个最近的变更集的列表, 该变更集包含当前路径及其下所有路径的更改.

== 修订日志表单 ==

通过设置''''查看日志始于''''域, 可以将修订设置在修订日志起始处. 空值或''''head''''值指最新的变更集.

通过设置''''返回到''''域, 还可以将修订设置在指定日志结束处. 默认为空, 意味最多列举100处修订.

修订日志的操作还有三种形式.

默认情况下, 修订日志''''在副本处停止'''', 即只要有''''添加'''', ''''复制''''或''''重命名''''等操作, 都不会显示更早的版本. 这在查看分支时非常方便, 因为你只看到对应分支的历史记录.

还可以通过选择''''跟随副本''''模式, 查看在''''复制''''或''''重命名''''前发生了什么. 这样将涵盖所有复制或重命名的变化. 路径名的每次改变都会增加一级缩进. 通过按不同路径进行分组, 可以很容易看出其中的变化.

甚至还可以回朔到''''添加''''操作前, 以查看在这条路径上的这次''''添加''''操作前, 是否曾经有过''''删除''''操作. 相应的模式叫做''''只显示添加, 移动和删除''''模式. 请注意, 虽然该操作有时相当有用, 但是却非常耗费资源.

最后, 还有一个''''显示全部日志消息''''的复选框, 控制是否显示提交日志消息的完整内容, 还是只显示其简化版本.

== 修订日志信息 ==

每个修订日志条目都有7列:

 1. 第一列包含了一对单选按钮, 用来选择查看新旧版本的[wiki:ZhTracRevisionLog#viewingtheactualchanges 查看实际改变].
 2. 一个颜色代码(类似于[wiki:ZhTracChangeset#ChangesetHeader 变更集]中用到的代码)指示了更改的种类. 单击此列刷新该修订日志, 以用此更改重新开始.
 3. 变更发生的''''''日期''''''.
 4. ''''''修订''''''号(显示为`@xyz`), 是以此修订起始的, 指向[ZhTracBrowser Trac游览]的链接.   
 5. ''''''变更集''''''号(显示为`[xyz]`), 是指向[ZhTracChangeset Trac变更集]视图的一个链接.   
 6. 此更改的''''''作者''''''.
 7. ''''''日志消息'''''', 包含了提交日志摘要或完整消息(取决于上面表格中的"显示全部日志消息"复选框的值).   
    

== 检查修订间的改变 ==

''''查看改变...''''按钮(位于改变列表的上下方, 左侧)在[ZhTracChangeset Trac变更集]中, 会显示从旧(第一个按钮)到新(第二个按钮)版本的总变化.

注意, 实际上, ''''旧''''版本并不需要比''''新''''版本早, 它只是作为比较的一个基准. 因此通过反转指定的修订范围, 完全作一个''''颠倒比较''''.

最后, 如果两个版本是相同的, 将显示对应的变更集(与点击第5列的效果一样).

== 替代的格式 ==

=== 变更日志文本 ===

页面底部有一个''''变更日志''''链接, 显示了当前显示的修订的范围, 是与常用的!ChangeLog文件一样的简单的文本.

=== RSS支持 ===

修订日志还提供了一个监视变更的RSS源. 要订阅某个文件或目录的RSS源, 在浏览器中打开其修订日志, 然后点击页面底部的橙色图标. 更多关于Trac中的RSS支持, 请见[ZhTracRss Trac的RSS].

----
原文版本: TracRevisionLog[[BR]]
相关信息: [ZhTracBrowser Trac游览], [ZhTracChangeset Trac变更集], [ZhTracGuide Trac导览][[BR]]
See also: TracBrowser, TracChangeset, TracGuide',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracRoadmap',1,1293980803812000,'trac','127.0.0.1','= Trac路线图 =
[[ZhTracGuideToc]]

路线图提供了查看[wiki:ZhTracTickets Trac传票]的一个视图, 帮助你规划和管理项目的未来开发.

== 路线图视图 ==

基本上, 路线图只是一个未来的里程碑的列表. 你可以为里程碑添加描述(用[ZhWikiFormatting Wiki格式]), 例如描述主要目标. 另外, 以某个里程碑为目标的传票被集合起来, 并且现有传票和已处理传票间的比率, 将显示为里程碑进度条.

== 里程碑视图 ==

通过进入一个里程碑页面, 可以查看简单的统计信息. 默认情况下, 现有/已处理传票的比率是按照组件来分组和显示的. 你也可以按照其他的标准来重组他们, 例如传票的承担者或者严重程度. 传票号码链接到显示对应的传票的[wiki:ZhTracQuery 定制查询].

== 管理路线图 ==

可以通过[ZhTracAdmin Trac管理]或者Web界面添加, 修改和删除里程碑.

''''''注意:'''''' 里程碑描述当前只能从web界面中编辑. 拥有相应的许可, 你可以在路线图和里程碑页面中看见里程碑管理按钮.

== iCalendar支持 ==

路线图支持从你最爱的日历软件中, 用[http://www.ietf.org/rfc/rfc2445.txt iCalendar]格式, 来跟踪计划内的里程碑和相关传票. 支持iCalendar规范的日历程序包括[http://www.apple.com/ical/ Apple iCal](适用于Mac OS X)和跨平台的[http://www.mozilla.org/projects/calendar/ Mozilla Calendar].[http://kdepim.kde.org/components/korganizer.php Korganizer] ([http://www.kde.org/ KDE]项目的日历程序), [http://www.novell.com/de-de/products/desktop/features/evolution.html Evolution]也支持iCalendar.

要订阅路线图, 从路线图(在页面的底部)中复制iCalendar链接. 在你的日历程序中, 选择''''订阅远程的日历''''(或类似的行为), 然后插入刚刚复制的URL.

''''''注意'''''': 要想把传票作为日历中的任务, 你需要登录后再复制链接. 你只能看到指派给你的, 与某个里程碑相关的传票.

关于更多关于iCalendar的信息可以访问[http://en.wikipedia.org/wiki/ICalendar Wikipedia].
----
原文版本: TracRoadmap[[BR]]
相关信息: [ZhTracTickets Trac传票], [ZhTracReports Trac报表], [ZhTracQuery Trac查询], [ZhTracGuide Trac导览][[BR]]
See also: TracTickets, TracReports, TracQuery, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracRss',1,1293980803822000,'trac','127.0.0.1','= 在Trac中使用RSS =
[[ZhTracGuideToc]]

Trac的好几个模块都支持使用RSS XML格式的内容聚合. 使用Trac中的RSS订阅功能, 你可以轻松地监控项目的进度, 一系列事件, 甚至是某个文件的更改.

下列各项支持RSS源:

 * Trac时间线 -- 使用RSS源来''''''订阅项目的事件''''''.[[br]] 在你喜爱的RSS阅读器中监控项目的总体进度. 
 * [ZhTracTickets Trac传票], [ZhTracReports Trac报表]和[ZhTracQuery Trac查询] -- 允许报表和传票查询结果的聚合.[[br]] 获得对重要传票和相关事务的提醒.
 * [ZhTracBrowser Trac游览] [ZhTracRevisionLog 修订日志]-- 文件更改的聚合.[[br]] 保持指定文件或目录最新的更改.

== 如何访问RSS数据 ==
在Trac中, 任何可用RSS的地方, 你会发现一个小的橙色''''''XML''''''标志, 一般位于网页的底部. 单击该标志可以访问该资源的RSS源.

''''''注意'''''': 不同的模块的RSS源中提供不同的数据. 通常, 聚合信息与当前视图对应. 例如, 如果你在一个报表页面中单击RSS链接, 则是基于该报表的源. 你可以把RSS源看作是当前显示数据的另一种视图.

== 链接 ==
 * http://blogs.law.harvard.edu/tech/rss -- RSS 2.0规范
 * http://www.mozilla.org/products/firefox/ -- Mozilla Firefox使用RSS支持 [http://www.mozilla.org/products/firefox/live-bookmarks.html 活动书签]
 * http://sage.mozdev.org -- 用于Mozilla Firefox的Sage RSS和Atom源
 * http://pim.kde.org/users.php -- [http://kde.org KDE]Linux/BSD/*n*x系统的RSS阅读器
 * http://www.rssreader.com/ -- 免费又强大的Windows系统的RSS阅读器
 * http://liferea.sourceforge.net/ -- Linux系统的开源GTK2 RSS阅读器
 * http://akregator.sourceforge.net/ -- 开源KDE RSS阅读器(属于KDE-PIM的一部分)
 * http://www.sharpreader.net/ -- Windows系统的一款用.NET编写的RSS阅读器
 * http://ranchero.com/netnewswire/ -- Mac OS X的一个优秀的RSS阅读器(有免费版和付费版)]
 * http://www.utsire.com/shrook/ -- Max OS X 上的RSS阅读器, 支持https (甚至有自签名的认证)和认证feeds.
 * http://vienna-rss.sourceforge.net/ -- 开源RSS阅读器 for Mac OS X, 支持智能目录
 * http://www.wizzrss.com/Welcome.php -- WizzRSS Feed阅读器 for Firefox
----
原文版本: TracRss[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracTimeline Trac时间线], [ZhTracReports Trac报表], [ZhTracBrowser Trac游览][[BR]]
See also: TracGuide, TracTimeline, TracReports, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracSearch',1,1293980803822000,'trac','127.0.0.1','= 使用搜索 =

Trac有一个内置的搜索引擎, 可以查找Wiki页面, 传票和变更集描述中的关键字和子字符串.

使用Trac搜索工具相当直接, 而且大多数用户也很熟悉其界面.

除了[search: 搜索模块]之外, 你总会在导航栏上方发现一个小的搜索栏. 它在所有页面中都提供了方便的搜索入口.

== "快速跳转"搜索 ==
要快速访问各种项目资源, 在快速搜索栏输入一个[ZhTracLinks Wiki链接], 将把你直接带到该链接连接的资源.

例如:

 * ![42] -- 打开变更集42
 * !#42 -- 打开42号传票
 * !{1} -- 打开报表1
 * /trunk -- 浏览trunk目录

== 高级 ==

=== 禁用快速跳转 ===
要禁用搜索每个搜索关键字的快速跳转特征, 比如说当搜索文字!TracGuide时, 以一个感叹号(!)开始此查询.

=== 搜索链接 ===
在Wiki中, 使用''''search:''''链接, 可以链接到某个具体的搜索:
 * `search:?q=crash` 会搜索字符串"crash"
 * `search:?q=trac+link&wiki=on` 会只在Wiki页面中搜索"trac"和"link"
 
----
原文版本: TracSearch[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracLinks Trac链接], [ZhTracQuery Trac查询][[BR]]
See also: TracGuide, TracLinks, TracQuery',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracStandalone',1,1293980803822000,'trac','127.0.0.1','= Tracd =

Tracd是一个独立的Web服务器. 多数情况下, 它比[wiki:ZhTracCgi CGI脚本]更容易设置, 运行更快.

== 优点 ==

 * 更独立: 你不需要安装Apache或其他Web服务器.
 * 快: 应该几乎和[wiki:ZhTracModPython mod_python]版本一样快, 并且比[wiki:ZhTracCgi CGI]快得多.
 * 自动重新载入: 在开发时, Tracd可工作在''''auto_reload''''模式中, 这样无论何时你改变代码(Trac或插件中), 它会自动重启服务器.

== 缺点 ==

 * 特性更少: Tracd的定位是一个非常简单的Web服务器, 没有象Apache HTTPD那样的可配置性或可伸缩性.
 * 不支持本地HTTPS: 可用[http://www.rickk.com/sslwrap/ sslwrap]来代替, 或者 [http://trac.edgewall.org/wiki/STunnelTracd stunnel -- 在tracd中使用管道的教程] 或者在Apache中使用mod_proxy.

== 例子 ==

在端口8080上的单个项目.(http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
严格来讲, 这将使你的Trac可以被你的网络上的所有人访问到, 而不是 ''''仅仅localhost''''. 要想真正限制, 使用 ''''--hostname'''' 选项.
{{{
 $ tracd --hostname=localhost -p 8080 /path/to/project
}}}
多个项目.(http://localhost:8080/project1/ 和 http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}

各项目路径的最后一部分不能完全相同, 因为Trac使用该名字来区别不同项目的URL. 因此, 如果你使用`/project1/path/to`和`/project2/path/to`, 你只能看到第二个项目.

另一种服务多个项目的方法是指定一个父目录, 其中每个子目录是一个Trac项目, 使用`-e`选项. 上面的例子可以改写为:
{{{
 $ tracd -p 8080 -e /path/to
}}}

== 使用验证 ==

使用tracd及Apache .htpasswd文件:

使用htpasswd来创建.htpasswd文件:

{{{
sudo htpasswd -c /path/to/env/.htpasswd username
}}}
然后增加的用户:
{{{
sudo htpasswd /var/www/html/.htpasswd-users username2
}}}
然后启动tracd:
{{{
tracd -p 8080 --basic-auth=environmentname,/fullpath/environmentname/.htpasswd,/fullpath/environmentname /fullpath/environmentname
}}}

Tracd支持Basic和Digest验证. 默认是使用Digest, 要使用Basic验证, 在下面的例子中将`--auth`替换为`--basic-auth`, 如下列所示. (你必须指定一个"realm", 其可以是BASICAUTH逗号后面的一个空的字符串.)

  ''''在0.9版本中添加了对Basic验证支持''''

使用验证的一般格式是:

{{{
 $ tracd -p port --auth=base_project_dir,password_file_path,realm project_path
}}}

其中:

 * ''''''base_project_dir'''''' 项目的基目录; 注意: 这不是指的项目名称, 而且在windows环境中也是大小写敏感的
 * ''''''password_file_path'''''' 密码文件的路径
 * ''''''realm'''''' realm
 * ''''''project_path'''''' 项目的路径

例子:

{{{
 $ tracd -p 8080 \
   --auth=project1,/path/to/users.htdigest,mycompany.com /path/to/project1
}}}
当然, digest文件可以被多个项目共享:
{{{
 $ tracd -p 8080 \
   --auth=project1,/path/to/users.htdigest,mycompany.com \
   --auth=project2,/path/to/users.htdigest,mycompany.com \
   /path/to/project1 /path/to/project2
}}}

另一个共享digest文件的方法是将项目名称指定为"*":
{{{
 $ tracd -p 8080 \
   --auth=*,/path/to/users.htdigest,mycompany.com \
   /path/to/project1 /path/to/project2
}}}

== 如何创建一个htdigest口令文件 ==

如果你有Apache, 你可以使用htdigest命令来创建口令文件. 键入''htdigest''以得到使用说明或者阅读摘自Apache手册的[http://httpd.apache.org/docs/2.0/programs/htdigest.html 页面]得到准确的指导. 你要为创建的每个用户输入密码. 口令文件的名字可以是任何你想要的名字. 但是如果你使用类似`users.htdigest`这样的名字, 它会提醒你该文件包含的内容. 建议将它和[ZhTracIni trac.ini]文件放在你的<projectname>/conf文件夹中.

注意, 你可以不使用--auth参数来启动tracd, 但如果你单击''''Login''''链接, 你将得到一个错误.

== 不用Apache创建密码 ==

如果你没有Apache, 你可以使用这个简单的Python脚本来创建你的密码:

{{{
#!python
from optparse import OptionParser
import md5

# build the options
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-u", "--username",action="store", dest="username", type = "string",
                  help="the username for whom to generate a password")
parser.add_option("-p", "--password",action="store", dest="password", type = "string",
                  help="the password to use")
(options, args) = parser.parse_args()

# check options
if (options.username is None) or (options.password is None):
   parser.error("You must supply both the username and password")
   
# Generate the string to enter into the htdigest file
realm = ''trac''
kd = lambda x: md5.md5('':''.join(x)).hexdigest()
print '':''.join((options.username, realm, kd([options.username, realm, options.password])))
}}}

注意:如果你使用上述脚本, 你必须使用--auth选项, 而不是--basic-auth, 并且你必须在 --auth值中设置域(没有引号). 例如(假设你将脚本保存为trac-digest.py):

{{{
python trac-digest.py -u username -p password >> c:\digest.txt
tracd --port 8000 --auth=proj_name,c:\digest.txt,trac c:\path\to\proj_name
}}}

注意: 如果你要使用 --basic-auth, 你需要使用apache服务器的htpasswd工具来生成.htpasswd文件. 剩下的都很类似, 但是确认使用的是空realm (即, 路径中逗号后的). 当使用Windows时, 请确认使用-m选项(没有在*nix上测试, 所以不确定是否也这样). 如果你没有Apache, [trac:source:/tags/trac-0.11b2/contrib/htpasswd.py htpasswd.py] 也许有帮助.  (注意, 这要求 `crypt` 或 `fcrypt` 模块; 详情参见源代码中的注释.)

可以使用md5sum工具来生成 digest-password 文件:
{{{
echo -e "${user}:trac:${password}\c" | md5sum - >>to-file
}}}
并从行尾手工删除" -", 并从''to-file''增加 "${user}:trac:" 到行首. 详情参见 attachment:trac-digest-corrected.sh.

== 提示 ==

=== 服务静态的内容 ===

如果`tracd`是该项目的唯一Web服务器, 它还可以用于分发静态内容(tarballs, Doxygen文档, 等)

该静态内容应放在`$TRAC_ENV/htdocs`文件夹中, 并且通过类似`<project_URL>/chrome/site/...`的URL来访问.

例子: 假设一个`$TRAC_ENV/htdocs/software-0.1.tar.gz`文件, 对应的URL应该是`/<project_name>/chrome/site/software-0.1.tar.gz`, 可以使用wiki`[/<project_name>/chrome/site/software-0.1.tar.gz]`中的相关链接语法来编写.

Trac的开发版本支持一个新的`htdocs:`Trac链接语法. 这样, 上面例子中的链接可以简化为`htdocs:software-0.1.tar.gz`.

=== 使用apache rewrite规则 ===
某些情况下, 当你选择在apache后端使用tracd时, 你可能遇到重定向的问题, 比如被重定向到错误的主机或协议上. 这种情况下(而且只能是这种情况), 设置`[trac] use_base_url_for_redirect`为`true`也许可以解决, 因为这将强制Trac使用`[trac] base_url`的值来做重定向.

=== 通过/服务不同的基路径 ===
Tracd支持使用不同的基URL服务多个项目/<project>. 要修改的参数是
{{{
tracd --base-path=/some/path
}}}

----
原文版本: TracStandalone[[BR]]
相关信息: [ZhTracInstall Trac安装], [ZhTracCgi TracCgi], [ZhTracModPython TracModPython], [ZhTracGuide Trac导览][[BR]]
See also: TracInstall, TracCgi, TracModPython, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracSupport',1,1293980803832000,'trac','127.0.0.1','= Trac支持 =

一如大多数[http://www.opensource.org/ 开源项目], ''''免费的''''Trac支持首先是由社区本身来实现, 主要是通过[http://trac.edgewall.org/wiki/MailingList 邮件列表]和项目Wiki.

还有一个[http://trac.edgewall.org/wiki/IrcChannel IRC聊天频道], 在那里人们互相帮助. 很多的''''现场''''开发讨论都在那里发生.

在你请求新的支持前, 请确认你已经进行了恰当的搜索:
 * 在项目的[http://trac.edgewall.org/wiki/TracFaq FAQ]中
 * 在Trac[http://blog.gmane.org/gmane.comp.version-control.subversion.trac.general?set_user_css=http%3A%2F%2Fwww.edgewall.com%2Fcss%2Fgmane.css&do_set_user_css=t 邮件列表]的已有信息中.
 * 在Trac传票系统中, 使用[http://trac.edgewall.org/search?q=&ticket=on&wiki=on 全文检索]或[http://trac.edgewall.org/query?summary=~&keywords=~" 传票检索].

请''''''不要''''''在这个Trac中创建有关Trac支持的传票. 仅仅在你遇到''''''真正''''''并且''''''全新''''''的Trac的bug时才如此, 并在这样做前, 仔细阅读 NewTicketGuidelines. 错误报告或功能请求的越符合这些指导, 修复或实现的机会将越迅速!

----
原文版本: TracSupport[[BR]]
相关信息: [http://trac.edgewall.org/wiki/MailingList 邮件列表], [http://trac.edgewall.org/wiki/CommercialServices 社区][[BR]]
See also: [http://trac.edgewall.org/wiki/MailingList MailingList], [http://trac.edgewall.org/wiki/CommercialServices CommercialServices]
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracSyntaxColoring',1,1293980803832000,'trac','127.0.0.1','= 源代码的颜色高亮显示 =
Trac支持[wiki:ZhWikiFormatting Wiki格式]和[wiki:ZhTracBrowser Trac游览]中特定语言的源代码语法高亮显示.

为了实现大量编程语言的语法高亮显示, Trac使用外部程序库.

目前Trac支持语法高亮显示使用下列其中一个或多个安装包:

 * [http://www.codento.com/people/mtr/genscript/ GNU Enscript] 
 * [http://silvercity.sourceforge.net/ SilverCity]
 * [http://pygments.pocoo.org/ Pygments] (但是对于0.10, 需要安装插件, 参见 [#AboutPygments 下面])

要激活语法高亮显示, 只需安装其中一个(或一个以上)的安装包. 不需要进行额外的配置, 但要更改颜色, 请看`trac/htdocs/css/code.css`.

如果你不知道为何trac不检测已安装的库, 请试着打开trac的日志. 它将显示出Trac是由于SilverCity 0.9.6而中断的. 使用当前的 0.9.7 或者旧一些的 0.9.5 http://trac.edgewall.org/wiki/TracFaq#why-is-my-css-code-not-being-highlighted-even-though-i-have-silvercity-installed

当可用时, Trac自动会尽可能优于Enscript使用!SilverCity, (见下面的注释). 

如果没有可用的安装包, Trac会将数据显示为纯文本.

''''''注意'''''': Enscript支持很多语言, 但总的说来!SilverCity更快, 因为它是一个程序库, 并且不在外部进程中执行.

=== 关于SilverCity ===
!SilverCity使用[http://www.scintilla.org/ Scintilla]中的词法分析程序. Scintilla比!SilverCit支持更多语言. 添加一种Scintilla支持的语言到!SilverCity中并非很困难. 请见[http://projects.edgewall.com/trac/wiki/SilverCityAddLanguage 添加语言到SilverCity].

=== 关于Pygments ===

从trac 0.11开始, [http://pygments.org/ pygments]将是新的默认语法高亮器. 它是用纯python实现的高亮库, 非常快, 容易扩展和 [http://pygments.org/docs/ 有良好的文档]. 虽然它不象 Enscript 和 Scintilla 支持那么多语言, 其整体输出质量却要好得多.

要想在trac 0.11使用 pygments，你只需要安装 pygments 0.5.1 及其更高版本. 如果你也想在trac 0.10中使用, 你需要从trac hacks中安装 [http://trac-hacks.org/wiki/TracPygmentsPlugin TracPygmentsPlugin]. 如果你遇到任何缺陷, 请在[http://dev.pocoo.org/projects/pygments/ pygments trac]中创建一张针对Pygments的传票.

由于pygments支持的语言每星期都在增长, 下面的列表极可能是已经过时了. 请在pygments网站上查看[http://pygments.org/docs/lexers/ 支持字典]页面.


== 语法颜色高亮支持 ==

|| || !SilverCity || Enscript || Pygments ||
|| Ada      ||   || X || ||
|| Asm      ||   || X || ||
|| Apache Conf (htaccess)) || || || X ||
|| * ASP    || X || X || ||
|| * C      || X || X || X ||
|| * C#     ||   || X(2) || X ||
|| * C++    || X || X || X ||
|| * Java   || X(4)|| X || X ||
|| Awk      ||   || X || ||
|| Boo || || || X ||
|| CSS      || X ||   || X ||
|| Python Doctests || || || X ||
|| Diff     ||   || X || X ||
|| Eiffel   ||   || X || ||
|| Elisp    ||   || X || ||
|| Fortran  ||   || X(3) || ||
|| Haskell  ||   || X || X ||
|| Genshi || || || X ||
|| HTML     || X || X || X ||
|| IDL      ||   || X || ||
|| INI || || || X ||
|| Javascript || X || X || X ||
|| Lua || || || X ||
|| m4       ||   || X || ||
|| Makefile ||   || X || X ||
|| Mako || || || X ||
|| Matlab   ||   || X (5) || ||
|| Mygthy || || || X ||
|| Objective-C|| || X || ||
|| OCaml    ||   ||   || X ||
|| Pascal   ||   || X || X ||
|| * Perl   || X || X || X ||
|| * PHP    || X ||   || X ||
|| PSP      || X ||   || ||
|| Pyrex    ||   || X || ||
|| * Python || X || X || X ||
|| * Ruby   || X || X (1) || X ||
|| Scheme   ||   || X || X ||
|| Shell    ||   || X || X ||
|| Smarty || || || X ||
|| SQL      || X || X || X ||
|| Troff    ||   || X || X ||
|| TCL      ||   || X || ||
|| Tex      ||   || X || X ||
|| Verilog  || X(4) || X || ||
|| VHDL     ||   || X || ||
|| Visual Basic |||| X || X ||
|| VRML     ||   || X || ||
|| XML      || X ||  || X ||

''''(*) 支持在[wiki:ZhWikiFormatting Wiki文本]中使用[WikiProcessors Wiki解析器]的内嵌代码块.''''

''''(1) 在Enscript发行版中不包含Ruby高亮显示. Ruby的高亮显示规则可以从http://neugierig.org/software/ruby/得到.''''

''''(2) 在Enscript发行版中不包含C#高亮显示. C#的高亮显示规则可以从http://wiki.hasno.info/index.php/Csharp.st得到.''''

''''(3) Fortran: Enscript安装包仅仅支持固定的源码形式. Fortran 90x/2003的高亮规则可能从此处获得: http://wiki.hasno.info/index.php/F90.st

''''(4) 从2006-11-23发布的Silvercity 0.9.7起

''''(5) 默认`.m`文件被认为是Objective-C文件. 要将`.m`文件处理为MATLAB文件, 在[wiki:TracIni#mimeviewer-section "trac.ini的[mimeviewer]段"]中, 往"mime_map"设置中增加"text/x-matlab:m".

== 附加软件hn ==
 * GNU Enscript -- http://directory.fsf.org/GNU/enscript.html
 * GNU Enscript for Windows -- http://gnuwin32.sourceforge.net/packages/enscript.htm
 * !SilverCity -- http://silvercity.sf.net/
 * Pygments -- http://pygments.org/

----
原文版本: TracSyntaxColoring[[BR]]
相关信息: [ZhWikiProcessors Wiki解析器], [ZhWikiFormatting Wiki格式], [ZhTracWiki Trac内置Wiki], [ZhTracBrowser Trac游览][[BR]]
See also: WikiProcessors, WikiFormatting, TracWiki, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracTickets',1,1293980803832000,'trac','127.0.0.1','= Trac传票系统 =
[[ZhTracGuideToc]]

传票数据库提拱了简单高效的事务和bug的追踪服务.

作为Trac的核心项目管理元素, 传票用于''''''项目任务'''''', ''''''特性需求'''''', ''''''bug报告''''''和''''''软件支持''''''事务.

和[ZhTracWiki Trac内置Wiki]一样, 该子系统以尽量简化用户贡献和参与为设计目标. 它应是尽可能简化报告bug, 提问和改进建议的活动.

一个事务被指派到一个人, 他必须处理该问题, 或者重新指派到其他人. 所有的传票可以在任何时候进行编辑, 评注, 指派, 设置优先级以及讨论.

== 传票字段 ==

 * ''''''报告人'''''' - 传票的作者.
 * ''''''类型'''''' - 传票的本性, 例如缺陷或功能增强的需求.

 * ''''''组件'''''' - 该传票涉及的项目模块或子系统.
 * ''''''版本'''''' - 该传票所属项目的版本.
 * ''''''关键字'''''' - 标记一个传票的关键字.对于搜索和生成报表很有用.

 * ''''''优先级'''''' - 该传票的重要性, 从''''无关紧要''''到''''阻塞'''' .
 * ''''''里程碑'''''' - 该传票应解决的最迟时间.
 * ''''''指派到/承担者'''''' - 处理传票的主要负责人.
 * ''''''抄送'''''' - 其他相关人员的列表.''''注意, 该列表不暗示任何责任或其他政策.''''
 
 * ''''''解决'''''' - 关闭传票的原因.{{{fixed}}}, {{{invalid}}}, {{{wontfix}}}, {{{duplicate}}}, {{{worksforme}}}其中之一.
 * ''''''状态'''''' - 当前状态是什么?{{{new}}}, {{{assigned}}}, {{{closed}}}, {{{reopened}}}其中之一.
 * ''''''概要'''''' - 总结问题或传票的一个简短介绍.
 * ''''''描述'''''' - 传票的正文.一个好的描述应该是明确的, 清楚的, 扼要的.

''''''注意'''''': 0.9版本之前的Trac没有''''类型''''字段, 但却提供了''''严重性''''字段和''''优先级''''字段的不同默认值.该改变通过删掉一些''''严重性''''和''''优先级''''之间模糊的差别, 而简化了传票模型. 然而, 如果你愿意, 旧模型仍然可用: 只需增加/删除''''优先级'''' 和''''严重度''''的默认值, 并通过[wiki:ZhTracAdmin trac-admin]删除所有可用值, 可选地隐藏''''类型''''字段.

''''''注意:'''''' [wiki:ZhTicketTypes 类型], [wiki:ZhTicketComponent 组件], 版本, 优先级和严重性字段都可以通过[wiki:ZhTracAdmin trac-admin]或者WebAdmin插件来管理.

''''''注意:'''''' 内置''''优先级''''值的描述参见[wiki:ZhTicketTypes#Whyistheseverityfieldgone]

== 更改和评论传票 ==

当一个传票加入Trac中, 你随时可通过''''评论''''bug来更改信息.就是说该传票的更改和评论都作为传票本身的一部分记录在案.

查看传票时, 在传票主体下方是更改的历史记录.

''''在Trac项目中, 我们使用传票评论来讨论事务和任务.这使得在以后返回再看的时候, 更加容易理解在其设计或实现背后的动机.''''

''''''注意'''''': 一个重要的特性是可以在传票描述和评论中使用[ZhTracLinks Trac链接]和[ZhWikiFormatting Wiki格式]. 用[ZhTracLinks Trac链接]来引用其它事务, 变更集或文件, 将使你的传票更具体, 也更易理解.

''''''注意'''''': 关于如何配置传票变化的邮件提醒 , 请参见[ZhTracNotification Trac提醒 ].

''''''注意:'''''' 关于状态转换(传票生命周期), 及如果定制工作流, 参见 [ZhTracWorkflow TracWorkflow].

== 下拉字段的默认值 ==

在[wiki:ZhTracIni trac.ini]的`[ticket]`节中, 设置各下拉字段的默认选项:

 * `default_component`: 默认选择的组件名
 * `default_milestone`: 默认里程碑名
 * `default_priority`: 默认优先级值
 * `default_severity`: 默认严重性值
 * `default_type`: 默认传票类型
 * `default_version`: 默认版本名

如果省略以上任一选项, 默认值可能是列表中的第一个值, 或一个空值, 取决于是否必须设置该字段.


== 隐藏字段和添加自定义字段 ==

许多默认传票字段可以在传票Web界面上隐藏, 只需用[wiki:ZhTracAdmin trac-admin]删除所有可能的值即可. 该操作当然只适用于下拉字段, 例如, ''''类型'''', ''''优先级'''', ''''严重性'''', ''''组件'''', ''''版本''''和''''里程碑''''.

Trac也允许你添加定制的传票字段. 参见[ZhTracTicketsCustomFields 定制传票字段]


== 使"指派到"成为下拉列表 ==

如果可能的传票所有者数量不多, 你可以将''''指派到''''字段从文字输入改为下拉列表. 通过将[wiki:ZhTracIni trac.ini]的`[ticket]`段中的`restrict_owner`选项设置为''''true''''来实现. 这时, Trac将使用所有登录并设置了邮件地址的用户列表来生成下拉列表.

要出现在下拉列表中, 用户必须在项目中注册(即, 数据库中一定要有该用户的会话). 该会话是用户第一次在项目中提交更改时, 在数据库中自动创建的. 例如, 在''''设置''''页中编辑用户的详细信息时. 而且, 用户必须有`TICKET_MODIFY` [ZhTracPermissions 权限].

== 新建传票的预设值 ==

要创建一个有预设值的新建传票的链接, 你需要在调用`/newticket?`时, 在URL中添加''变量=值''的列表, 并用&分隔各个变量.

可能的变量有:

 * ''''''type'''''' - 类型下拉列表
 * ''''''reporter'''''' - 报告人的名字或邮件地址
 * ''''''summary '''''' - 传票概要
 * ''''''description'''''' - 传票详细描述
 * ''''''component'''''' - 组件下拉列表
 * ''''''version'''''' - 版本下拉列表
 * ''''''severity'''''' - 严重度下拉列表
 * ''''''keywords'''''' - 关键字 
 * ''''''priority'''''' - 优先级下拉列表
 * ''''''milestone'''''' - 里程碑下拉列表
 * ''''''owner'''''' - 传票负责人
 * ''''''cc'''''' - 传票更改的提醒 邮件列表

''''''例子:'''''' ''''/trac/newticket?summary=Compile%20Error&version=1.0&component=gui''''

----
原文版本: TracTickets[[BR]]
相关信息: [ZhTracGuide Trac游览], [ZhTracWiki Trac内置Wiki], [ZhTracNotification Trac提醒][[BR]]
See also: TracGuide, TracWiki,  TracNotification
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracTicketsCustomFields',1,1293980803842000,'trac','127.0.0.1','= 自定义传票字段 =
Trac支持向传票模型中添加自定义的字段. 使用自定义的字段, 你可以向传票中添加项目特有的属性.

== 配置 ==
自定义传票字段是在[wiki:ZhTracIni trac.ini]文件中配置的. 所有字段定义应位于`[ticket-custom]`段中.

字段定义的语法:
{{{
 FIELD_NAME = TYPE
 (FIELD_NAME.OPTION = VALUE)
 ...
}}}

=== 可用字段类型和选项 ===
 * ''''''text'''''': 简单文字字段(一行).
   * label: 描述性标签.
   * value: 默认值.
   * order: 排序位置.(在表单中决定与其他定制字段的相对位置)
 * ''''''checkbox'''''': 复选框(布尔值).
   * label: 描述性标签.
   * value: 默认值 (0 或 1).
   * order: 排序位置.
 * ''''''select'''''': 下拉选择框(值的列表).
   * label: 描述性标签.
   * options: 值的列表, 用''''''|''''''分隔.
   * value: 默认值 (条目号, 从0开始).
   * order: 排序位置.
 * ''''''radio'''''': 单选按钮, 实质上跟''''''select''''''一样.
   * label: 描述性标签.
   * options: 值的列表, 用''''''|''''''分隔
   * value: 默认值 (条目号, 从0开始).
   * order: 排序位置.
 * ''''''textarea'''''': 多行文本字段.
   * label: 描述性标签.
   * value: 默认文本.
   * cols: 列宽.
   * rows: 行高.
   * order: 排序位置.

=== 配置范例 ===
{{{
[ticket-custom]

test_one = text
test_one.label = Just a text box

test_two = text
test_two.label = Another text-box
test_two.value = Just a default value

test_three = checkbox
test_three.label = Some checkbox
test_three.value = 1

test_four = select
test_four.label = My selectbox
test_four.options = one|two|third option|four
test_four.value = two

test_five = radio
test_five.label = Radio buttons are fun
test_five.options = uno|dos|tres|cuatro|cinco
test_five.value = 1

test_six = textarea
test_six.label = This is a large textarea
test_six.value = Default text
test_six.cols = 60
test_six.rows = 30
}}}

''''''注意'''''': 要使`select`类型的字段可输入文字, 需要在`fieldname.options`选项中加上前导的`|`

=== 与报表相关的自定义字段 ===
自定义报表字段存储在`ticket_custom`表中, 而不是在`ticket`表中. 因此, 要在报表中显示自定义字段的值, 你将需要联合2个表. 让我们用自定义字段`progress`举例说明.

{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, owner, c.value AS progress
  FROM ticket t, enum p, ticket_custom c
  WHERE status IN (''assigned'') AND t.id = c.ticket AND c.name = ''progress''
AND p.name = t.priority AND p.type = ''priority''
  ORDER BY p.value
}}}
''''''注意'''''' 这将仅仅显示有progress字段的传票, 跟''''''显示所有传票不同''''''. 如果你创建此自定义传票字段在你的已有传票''''之后'''', 这些传票将没有此字段, 因此它们将不会出现在查询结果中. 如果你返回并修改这些传票, 将生成此字段, 也就会出现在查询结果中. 如果这是你想要的结果, 那你做到了.

然而, 如果你想显示所有传票(有或没有progress字段), 你需要在查询中为每个自定义字段使用`JOIN`.
{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, component, version, milestone, severity,
   (CASE status WHEN ''assigned'' THEN owner||'' *'' ELSE owner END) AS owner,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter,
  (CASE WHEN c.value = ''0'' THEN ''None'' ELSE c.value END) AS progress
  FROM ticket t
     LEFT OUTER JOIN ticket_custom c ON (t.id = c.ticket AND c.name = ''progress'')
     JOIN enum p ON p.name = t.priority AND p.type=''priority''
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY p.value, milestone, severity, time
}}}

特别注意此处的`LEFT OUTER JOIN`.

=== 更新数据库 ===

如上所述, 在自定义字段被定义之前创建的所有传票都没有此字段的值. 这里有一些SQL(用SQLite测试过), 可以直接在Trac数据库上运行, 来设置自定义字段的初始值. 所有没有自定义字段''request_source''值的传票插入缺省值''None'':

{{{
#!sql
INSERT INTO ticket_custom
   (ticket, name, value)
   SELECT 
      id AS ticket,
      ''request_source'' AS name,
      ''None'' AS value
   FROM ticket 
   WHERE id NOT IN (
      SELECT ticket FROM ticket_custom
   );
}}}

如果你在不同时间点增加了多个自定义字段, 你应该通过在查询中增加此自定义字段名, 以{{{ticket}}}表的子查询中更具体指定:

{{{
#!sql
INSERT INTO ticket_custom
   (ticket, name, value)
   SELECT 
      id AS ticket,
      ''request_source'' AS name,
      ''None'' AS value
   FROM ticket 
   WHERE id NOT IN (
      SELECT ticket FROM ticket_custom WHERE name = ''request_source''
   );
}}}

----
原文版本: TracTicketsCustomFields[[BR]]
相关信息: [ZhTracTickets Trac传票], [ZhTracIni Trac配置][[BR]]
See also: TracTickets, TracIni
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracTimeline',1,1293980803842000,'trac','127.0.0.1','= Trac时间线 =
[[ZhTracGuideToc]]

时间线在一个列表中提供了项目的历史视图.

它列举了所有的以时间顺序发生的Trac事件, 对每个事件的简短描述, 还尽可能包含更改的负责人.

时间线列举了如下事件:
 * ''''''Wiki页面事件'''''' -- 创建和更改
 * ''''''传票事件'''''' -- 创建和解决/结束(以及任意的其他更改)
 * ''''''源代码更改 '''''' -- 检入仓库
 * ''''''里程碑 '''''' -- 里程碑结束

每个事件条目都包含正在讨论的指定事件的链接, 如可能, 还包含评论或文字的简短摘录.

关于时间线的配置选项, 请参见[wiki:ZhTracIni#timeline Trac配置].

== RSS支持 ==

时间线支持使用RSS2.0进行订阅. 要订阅项目的事件, 单击网页下方的橙色''''''XML''''''标志. 关于更多Trac中的RSS支持请见[ZhTracRss Trac的RSS].

----
原文版本: TracTimeline[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracWiki Trac内置Wiki], [ZhWikiFormatting Wiki格式], [ZhTracRss Trac的RSS], [ZhTracNotification Trac提醒][[BR]]
See also: TracGuide, TracWiki, WikiFormatting, TracRss, TracNotification
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracUnicode',1,1293980803842000,'trac','127.0.0.1','= Trac中的Unicode支持 =
[[ZhTracGuideToc]]

Trac使用UTF-8编码储存所有文字, 包括传票和wiki页面的文字. 内部使用Unicode来实际处理文字.

因此, 它能支持大多数(可能是所有的?)常用的字符编码.

如果你使用的不是UTF-8编码, 你可以使用[wiki:TracModPython mod_python]来处理.  例如, 如果你的本地编码是gbk, 你可以设置
   default_charset = gbk
(在trac.ini中).

你也必须确认你的[wiki:DatabaseBackend 数据库后端] 使用UTF-8存储数据; 否则将发生奇怪的事情.

要将你的数据库转成UTF-8, 最简单的方法是dump数据库, 转换dump为UTF-8, 然后将转换后的dump导入回数据库.[[BR]]
你可以使用[http://www.gnu.org/software/libiconv/documentation/libiconv/iconv.1.html iconv]来转换dump.


== 例子 ==

=== Arabic ===
تراك يقوم بحفظ كل الكلمات باستخدام صيغة UTF-8، بما في ذلك الكلمات المستخدمة في صفحات  التيكت والويكي.

=== Bulgarian ===
Българският език работи ли?

=== Česky ===
Čeština v kódování UTF-8, žádný problém.

=== Chinese ===
Traditional: 繁體中文, 漢字測試; Simplified: 简体中文, 汉字测试

=== Croatian ===
Ako podržava srpski i slovenski mora podržavati i Hrvatski - čćžšđ ČĆŽŠĐ 

=== English ===
Yes indeed, Trac supports English. Fully.

=== Français ===
Il est possible d''écrire en Français : à, ç, û, ...

=== German ===
Trac-Wiki muß auch deutsche Umlaute richtig anzeigen: ö, ä, ü, Ä, Ö, Ü; und das scharfe ß

=== Greek ===
Τα Ελληνικά υποστηρίζονται επαρκώς επίσης.

=== Hebrew ===
אני יכול לאכול זכוכית וזה לא מזיק לי

=== Hindi ===
अब हिन्दी में।

=== Hungarian ===
Árvíztűrő tükörfúrógép

=== Icelandic ===
Ævar sagði við ömmu sína: Sjáðu hvað ég er stór!

=== Japanese ===
漢字 ひらがな カタカナ ﾊﾝｶｸｶﾅ 日本語試験

=== Korean ===
이번에는 한글로 써보겠습니다. 잘 보이나요? 한글

=== Latvian ===

Latviešu valoda arī strādā!

=== Lithuanian ===
Sudalyvaukime ir mes. Ar veikia lietuviškos raidės? ąčęėįšųūž ĄČĘĖĮŠŲŪŽ Žinoma, kad veikia :)
Kas tie mes?

=== Persian (Farsi) ===
این یک متن فارسی است ولی امکان نوشتن مستقیم فارسی نیست چون حالت متن از راست به چپ و جود ندارد برای فارسی نوشتن باید از HTML استفاده کنید.
{{{
#!html
<div dir="rtl">
}}}
این نمونه یک متن از راست به چپ فارسی است که در HTML نوشته شده تا اعداد 12345 و حروف لاتین ABCDEF در محل خودشان نمایش داده شوند.
{{{
#!html
</div>
}}}

=== Polish ===
Pchnąć w tę łódź jeża lub osiem skrzyń fig; Nocna gżegżółka zawsze dzienną przekuka.

=== Portuguese ===
É possível guardar caracteres especias da língua portuguesa, incluindo o símbolo da moeda européia ''€'', trema ''ü'', crase ''à'', agudos ''áéíóú'', circunflexos ''âêô'', til ''ãõ'', cedilha ''ç'', ordinais ''ªº'', grau ''°¹²³''.

=== Russian ===
Проверка русского языка: кажется работает... И буква "ё" есть...

=== Serbian ===
Podržan, uprkos činjenici da se za njegovo pisanje koriste чак два алфабета.

=== Slovenian ===
Ta suhi škafec pušča vodo že od nekdaj!

=== Spanish ===
Esto es un pequeño texto en Español, ahora una con acentó

=== Swedish ===
Räven raskar över isen med luva på.

=== Thai ===
Trac แสดงภาษาไทยได้อย่างถูกต้อง!

=== Ukrainian ===
Перевірка української мови...

=== Urdu ===
ٹریک اردو بھی سپورٹ کرتا ہے۔

=== Vietnamese ===
Viết tiếng Việt cũng được. Nhưng search từ tiếng Việt thì không bôi vàng được. (Keyword(s) in Vietnamese search result can not be hightlighted !!!!).

----
原文版本: TracUnicode[[BR]]
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracUpgrade',1,1293980803852000,'trac','127.0.0.1','= 升级指南 =
[[ZhTracGuideToc]]

在使用Trac 0.11版本时, 需要升级[ZhTracEnvironment Trac环境]. 本文档描述了升级环境必需的步骤.

除非特别强调, 否则没有必要为次要版本进行升级. 


== 总体介绍 ==

一般, 将Trac升级到一个新版本需要四个步骤:

=== 更新Trac代码 ===

按照TracInstall的描述取得新版本, 或是按照你的操作系统特定的过程.

如果你手工升级(非操作系统特定), 你也可以通过从Python的`lib/site-packages`目录中删除`trac`目录, 来删除现有的Trac代码.

site-packages目录的位置取决于操作系统和安装的是哪个Python. 然而, 通常是下列位置:
 * Linux: /usr/lib/python2.X/site-packages
 * Windows: C:\Python2.X\lib\site-packages
 * MacOSX: /Library/Python2.X/site-packages

你也可以删除Trac的`cgi-bin`, `htdocs`, `templates`和`wiki-default`目录, 通常位于叫做`share/trac`的目录 (具体的位置跟你的平台有关).

> 如果你安装了webadmin插件, 现在你可以卸载它, 因为它现在是trac的一部分了.


=== 升级Trac环境 ===

重启后, Trac应当显示需要手工升级, 通过自动升级脚本可以减轻这个过程的负担. 这些脚本用[ZhTracAdmin trac-admin]运行:
{{{
trac-admin /path/to/projenv upgrade
}}}

如果环境已经是最新的了, 该命令不起任何作用.

注意, 如果你使用的是PostgreSQL数据库, 该命令会失败. 失败的消息会是''''只有当你使用SQLite数据库时, 才能备份环境.'''' 这意味着, 你必须手动备份仓库和数据库. 然后, 要进行实际升级, 运行
{{{
trac-admin /path/to/projenv upgrade --no-backup
}}}

=== 更新Trac文档 ===

每个[wiki:ZhTracEnvironment Trac环境]包含了一份安装版本的Trac文档副本. 因为你可能想要使文档与安装的Trac版本保持同步, [wiki:ZhTracAdmin trac-admin]提供了一个升级文档的命令:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

注意, 该程序绝不会改动你的`WikiStart`页面.

=== Trac宏, 插件 ===
Trac宏将需要调整, 因为老式的wiki宏不再被支持(由于放弃了ClearSilver和HDF); 它们需要转换为新式的宏, 见[ZhTracWikiMacros TracWikiMacros].


=== 重启Web服务器 ===
要重新加载新的Trac代码, 你需要重启你的Web服务器. 注意, 对[wiki:ZhTracCgi CGI]不需要.

== 已知问题 ==
=== 父目录 ===
如果你使用trac父目录环境配置, 并且其中一个项目的某个插件无法工作, 所有子项目都将无法工作.
=== 无法载入某些核心模块 === 
这种情况仅仅在Windows上的Python2.3, 在没有先卸载的情况下升级发生.
某些模块原先是大写开头的, 后来变成小写, 例如, trac/About.py变成trac/about.py. 你会在Trac日志中找到类似信息:
{{{
ERROR: Skipping "trac.about = trac.about": (can''t import "No module named about")
}}}
删除`Lib/site-packages/trac`目录并重新安装.


== 变更数据库后端 ==
== SQLite到PostgreSQL ==

[http://trac-hacks.org trac-hacks.org]的[http://trac-hacks.org/wiki/SqliteToPgScript sqlite2pg]脚本可以用来辅助迁移SQLite数据库到PostgreSQL数据库

== 更老版本 ==

关于从更老版本升级, 参见wiki:0.10/TracUpgrade.

-----
原文版本: TracUpgrade[[BR]]
相关信息: [ZhTracGuide Trac导览], [ZhTracInstall Trac安装][[BR]]
See also: TracGuide, TracInstall
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracWiki',1,1293980803852000,'trac','127.0.0.1','= Trac的Wiki引擎 =
[[ZhTracGuideToc]]

Trac有一个内置的Wiki引擎, 用于系统中的文本和文档. [ZhWikiFormatting Wiki格式]用在[wiki:ZhTitleIndex Wiki页面], [wiki:ZhTracTickets 传票]和[wiki:ZhTracChangeset 检入日志消息]中. 因此在所有Trac模块中, 都可以使用格式化文本和超链接.

编辑Wiki文本很简单, 使用任意Web浏览器和简单的[ZhWikiFormatting Wiki格式], 而不是那些复杂的标记语言(如HTML). 背后的设计理念是, HTML有太多的嵌套的标签, 太复杂, 无法实现快节奏的编辑, 并且使网页的实际内容分散. 注意, Trac也支持[wiki:ZhWikiHtml HTML], [wiki:ZhWikiRestructuredText 结构化文本]和 [http://www.textism.com/tools/textile/ Textile], 作为替换的内容格式.

Wiki的主要目标是使编辑文字的过程变得更简单, 以及鼓励人们贡献和评论项目的文字内容.

Wiki本身并不强制任何结构, 而像一些白纸. 在那里你可以按照你的意愿组织信息和文档, 需要时可以再重组它们.

更多关于编辑Wiki文本的帮助, 请参考这些网页:
 * [ZhWikiFormatting  Wiki格式]
 * [ZhWikiPageNames Wiki页面名字]
 * [ZhWikiNewPage 创建Wiki页面]
 * [ZhTracLinks Trac链接]
 * [ZhWikiMacros Wiki宏]
 * [ZhWikiProcessors Wiki解析器]
 * [ZhPageTemplates PageTemplates]

如果你想练习, 请使用[ZhSandBox 沙箱].

Web上更多关于Wiki的信息:
 * http://wikipedia.org/wiki/Wiki
 * http://c2.com/cgi/wiki?WikiHistory
 * http://www.usemod.com/cgi-bin/mb.pl?WhyWikiWorks

----
原文版本: TracWiki[[BR]]
相关信息: [ZhTracGuide Trac导览][[BR]]
See also: TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhTracWorkflow',1,1293980803852000,'trac','127.0.0.1','= Trac传票工作流系统 =
[[ZhTracGuideToc]]

Trac事务数据库提供了可配置的工作流.

== 默认传票工作流 ==
=== 从0.10升级的环境 ===
当你运行`trac-admin <env> upgrade`, 你的`trac.ini` 将被修改, 以包括`[ticket-workflow]`段.
这种情况下配置的工作流是原始工作流, 传票将和它们在0.10中那样工作.

图形看起来象这样:

[[Image(htdocs:../common/guide/original-workflow.png)]]

其中有一些重要的"warts"; 比如接受传票设置其为''assigned''状态, 指定一个传票设置其为''new''状态.  非常明显, 是吧?
因此, 你将可能想迁移到"基本"工作流; `contrib/workflow/migrate_original_to_basic.py`应该有帮助.

=== 用0.11创建的环境 ===
当创建了一个新环境后, 在你的trac.ini中就配置了默认工作流. 此工作流是基本工作流(`basic-workflow.ini`描述), 与0.10发行版有些不同.

图形看起来象这样:

[[Image(htdocs:../common/guide/basic-workflow.png)]]

== 附加传票工作流 ==

有几个工作流的例子, 在Trac源码中提供; 查看`contrib/workflow`的`.ini`配置段.  它们其中可能正好符合你的需求. 可以直接粘贴到你的`trac.ini`文件的`[ticket-workflow]`段.

== 基本传票工作流定制 ==

在`trac.ini`中创建一个`[ticket-workflow]`段.
在此段中, 每个条目就是一个传票上可以采取的动作. 
例如, 考虑在`simple-workflow.ini`中的`accept`动作:
{{{
accept = new,accepted -> accepted
accept.permissions = TICKET_MODIFY
accept.operations = set_owner_to_self
}}}
例子中的第一行定义了`accept`动作, 及该动作有效时的状态(`new`和`accepted`), 及当动作发生(`accepted`)后的新状态. `accept.permissions`行指定了使用该动作的用户所需权限.
`accept.operations`行指定动作发生后, 对传票做的操作, 及状态的变化. 在这种情况下, 当用户点击`accept`, 传票承担者字段将更新为登录的用户.  可以用逗号分割列出多个操作.

有效操作为:
 - del_owner -- 清楚承担者字段.
 - set_owner -- 设置承担者为选择或输入的承担者.
   - ''''actionname''''`.set_owner` 可选为逗号分割的列表或单个值.
 - set_owner_to_self -- 设置承担者为登录的用户.
 - del_resolution -- 删除决议字段
 - set_resolution -- 设置决议为选择的值.
   - ''''actionname''''`.set_resolution` 可选为逗号分割的列表或单个值.
{{{
例如:

resolve_new = new -> closed
resolve_new.name = resolve
resolve_new.operations = set_resolution
resolve_new.permissions = TICKET_MODIFY
resolve_new.set_resolution = invalid,wontfix
}}}
 - leave_status -- 显示 "保持 为 <当前状态>" 并不对传票做修改.
''''''注意:'''''' 指定冲突的操作 (例如`set_owner` 和 `del_owner`) 将有不可预计的结果.

{{{
resolve_accepted = accepted -> closed
resolve_accepted.name = resolve
resolve_accepted.permissions = TICKET_MODIFY
resolve_accepted.operations = set_resolution
}}}

此例中, 我们看见使用了`.name`属性.  此处的动作是`resolve_accepted`, 但它给用户显示的是`resolve`.

对于要在所有状态中都有效的动作, 可以使用`*`表示所有状态.  上例中的是`leave`动作:
{{{
leave = * -> *
leave.operations = leave_status
leave.default = 1
}}}
这也显示`.default`属性的用法.  此值应该是个整数, 决定了动作的排列顺序.  有最高`.default`值的动作首先列出,  并且默认被选上.  剩余的动作按照`.default`值降序排列.
如果没有为一个动作指定, `.default`为0.  值可以是负数.

工作流中有一些硬编码的限制.  特别地, 传票用状态`new`创建, 并且传票应该有一个`closed`状态.  另外, 默认报表/查询把所以非`closed`的状态都认为是打开状态.

当创建或修改传票工作流时, `contrib/workflow/workflow_parser.py`也许很有用.  它可以创建`.dot`文件, [http://www.graphviz.org GraphViz]可以解读来生成一个工作流可视描述.

使用下面指令(你的安装路径应该不同).
{{{
cd /var/local/trac_devel/contrib/workflow/
sudo ./showworkflow /srv/trac/PlannerSuite/conf/trac.ini
}}}
然后, 打开脚本创建的结果`trac.pdf`文件(它将位于`trac.ini`文件相同的目录中).

当改变了工作流后, 你需要重启apache以使其生效. 这非常重要, 因为当你运行你的脚本时修改仍然显示, 但是所有旧工作流仍将保持到服务器重启.


== 例子: 增加可选的测试工作流 ==

通过在trac.ini的[ticket-workflow]节增加下列内容, 你将获得可选的测试工作流. 当传票处于new, accepted或needs_work状态时, 你可以选择提交测试. 当它处在testing状态是, 用户将有reject选项, 并将其发返为needs_work状态, 或者, 通过测试并将其关闭. 如果他们接受, 此传票将自动标记为closed, 解决设为fixed. 由于保留了原所有工作流, 传票可以跳过整个这段.

{{{
testing = new,accepted,needs_work -> testing
testing.name = Submit to reporter for testing
testing.permissions = TICKET_MODIFY

reject = testing -> needs_work
reject.name = Failed testing, return to developer

pass = testing -> closed
pass.name = Passes Testing
pass.operations = set_resolution
pass.set_resolution = fixed
}}}

== 例子: 限制新传票的可选解决选项 ==

上述resolve_new操作允许你设置新传票的可选解决选项. 通过修改现有解决动作, 并从`->`前删除new状态, 我们将得到两个解决动作. 一个是新传票的有限制的解决, 另一个是一旦传票被接受后的通常那个.

{{{
resolve_new = new -> closed
resolve_new.name = resolve
resolve_new.operations = set_resolution
resolve_new.permissions = TICKET_MODIFY
resolve_new.set_resolution = invalid,wontfix,duplicate

resolve = assigned,accepted,reopened -> closed
resolve.operations = set_resolution
resolve.permissions = TICKET_MODIFY
}}}

== 传票工作流的高级定制 ==

如果上述定制还不能符合的的扩展需要, 你可使用插件来扩展工作流.  这些插件可以提供工作流的额前操作, (例如代码审查), 或者实现动作的附加效果(例如触发一次构建), 而不是一次单纯的状态改变. 查看`sample-plugins/workflow`的一个简单例子.

但是如果这还不足够, 你可以禁用!ConfigurableTicketWorkflow组件, 而创建一个插件来完全替换它.

----
原文版本: TracWorkflow[[BR]]
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiDeletePage',1,1293980803882000,'trac','127.0.0.1','= 删除Wiki页面 =

通过Wiki页面底部的''''删除此页面''''或''''删除该版本''''按钮, 可以彻底的删除现有的Wiki页面. 这些按钮只对那些拥有`WIKI_DELETE`权限的用户是可见的.

注意: 删除一个Wiki页面是不可撤销的操作.

通常, 建议创建重定向页面而不是完全删除旧页面. 这样可以避免访问者通过某个搜索引擎访问到该网站时, 发现链接已经失效而感到无奈. 一个重定向网页是包含了类似''''请看其他网页! ''''链接的简短网页. 然而, 删掉某些版本, 甚至整个页面的内容, 有助于删除垃圾信息或其他不良的页面.

----
原文版本: WikiDeletePage[[BR]]
现关信息: [ZhTracWiki Trac内置维基], [ZhTracPermissions Trac权限][[BR]]
See also: TracWiki, TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiFormatting',1,1293980803882000,'trac','127.0.0.1','= Wiki格式 =
[[ZhTracGuideToc]]

Wiki标记是Trac的一个核心特征, 和其它所有部分紧密结合, 组成一个灵活强大的整体.

Trac有一个内置的小巧强大的Wiki渲染引擎. 该Wiki引擎实现了来自其他Wiki的持续增长的命令子集, 尤其是[http://moinmoin.wikiwikiweb.de/ MoinMoin].

该页演示了[WikiFormatting Wiki格式]的语法.

== 字体样式 ==

Trac的Wiki支持下列字体样式:
{{{
 * ''''''粗体'''''', ''''''!'''''' 一样加粗'''''', 以及 ''''''! ''''''
 * ''''斜体''''
 * ''''''''''粗斜体''''''''''
 * __下划线__
 * {{{块引用}}} 或是 `行引用`
 * ~~中划线~~
 * ^上标^ 
 * ,,下标,,
}}}

显示:
 * ''''''粗体'''''', ''''''!'''''' 一样加粗'''''', 以及 ''''''! ''''''
 * ''''斜体''''
 * ''''''''''粗斜体''''''''''
 * __下划线__
 * {{{块引用}}} 或是 `行引用`
 * ~~中划线~~
 * ^上标^ 
 * ,,下标,,

注意:
 * `{{{...}}}`和{{{`...`}}}命令不仅使用等宽字体, 而且会原封不动地显示其内容. 就是说, 这些文本将不会被Wiki处理.
 * {{{ ! }}}告诉Wiki解析器不要将下列字符当作Wiki格式, 因此注意在!后加入一个空格. 
 
== 标题 ==

你可在一行的开头用1到5个等号("=")来创建标题, 等号后是一个空格, 然后是标题文字. 该行应该以一个空格结束, 后面是同样数量的等号("="). 标题可后面跟一个显式的id, 否则, 将隐含创建一个不容易记忆的id.

例子:
{{{
= 标题 =
== 副标 ==
=== 有''''关'''' ===
=== 详标号 === #using-explicit-id-in-heading
}}}

显示:
= 标题 =
== 副标 ==
=== 有''''关'''' ===
=== 详标号 === #using-explicit-id-in-heading
[[BR]]
== 段落 ==

只要两块文字间有一行以上空行时, 就产生了一个新的段落.

要强制分行, 使用下列代码:
{{{
Line 1[[BR]]Line 2
}}}

显示:

Line 1[[BR]]Line 2


== 列表 ==

Wiki支持有序的/编号的列表和无序列表.

例子:
{{{
 * 条目 1
   * 条目 1.1
 * 条目 2

 1. 条目 1
   a. 条目 1.a
   a. 条目 1.b
      i. 条目 1.b.i
      i. 条目 1.b.ii
 1. 条目 2
编号列表还可给予一个明显的编号:
 3. 条目 3
}}}

显示:
 * 条目 1
   * 条目 1.1
 * 条目 2

 1. 条目 1
   a. 条目 1.a
   a. 条目 1.b
      i. 条目 1.b.i
      i. 条目 1.b.ii
 1. 条目 2
编号列表还可给予一个明显的编号:
 3. 条目 3

注意在列表符号前必须有一个以上空格, 否则该列表会被当作一个普通的段落.

== 定义列表 ==


Wiki也支持定义列表.

例子:
{{{
 羊驼::
   一种哺乳动物,有头发
 蠎::
   一种爬行动物,没有头发
   (你可辨认它们?)
}}}

显示:
 羊驼::
   一种哺乳动物,有头发
 蠎::
   一种爬行动物,没有头发
   (你可辨认它们?)

注意, 在定义的术语前你需要一个空格.

== 预格式的文本 ==

代码块包含了源代码片断, 注解和例子的预格式的文本. 用三个花括号来定义. 花括号要在单独的行上. 

  
例子:
{{{
 {{{
  def HelloWorld():
      print "Hello World"
 }}}
}}}

显示:
{{{
 def HelloWorld():
     print "Hello World"
}}}


== 块引用 ==

要将一个段落标记为一个块引用, 将该段缩进两个空格.

例子:
{{{
  此文本是种块级引用
}}}

显示:
  此文本是种块级引用

== 讨论引用 ==

要在一个正在进行的讨论贴中定义一个引用, 例如在传票的评论区域, 可以用类似邮件中的引用标记, 例如">",  ">>", 等等.

例子:
{{{
>> 某人的原话
> 某人的回复
俺的回复
}}}

显示:
>> 某人的原话
> 某人的回复
俺的回复

''''注意: 一些[ZhWikiFormatting Wiki格式]元素, 例如列表和预格式的文本, 在引用区域中消失了. 可以重新组织格式以创建清晰的引用.''''

== 表格 ==

如下方式创建简单的表格:
{{{
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}

显示:
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||

注意, 可以用[wiki:ZhWikiRestructuredText#BiggerReSTExample 新结构化文本]创建更复杂的表格.

== 链接 ==

[ZhWikiPageNames Wiki页面名]和URL的超链接是自动创建的. 如果前面加入一个感叹号"!", 可禁用Wiki页面链接.

例子:
{{{
 TitleIndex, http://www.edgewall.com/, !NotAlink
}}}

显示:
 TitleIndex, http://www.edgewall.com/, !NotAlink

通过在该链接后面增加空格和一个标题, 可以给链接一个更具描述性的标题, 所有内容都被一对方括号包围. 如果省略描述性的标题, 而该链接又不是一个外部链接的话, 显式的前缀被删掉. 对于不符合[ZhWikiPageNames Wiki页面名]协定的Wiki页面尤其有用.

例子:
{{{
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
 * [wiki:ISO9000]
}}}

显示:
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
 * [wiki:ISO9000]

=== Trac链接 ===

Wiki页面可以直接链接到Trac系统的其他部分. 页面可以引用传票, 报表, 变更集, 里程碑, 源文件和其他使用下列符号的Wiki页面:
{{{
 * 传票: #1 or ticket:1
 * 报表: {1} or report:1
 * 变更集: r1, [1] or changeset:1
 * ...
}}}

显示:
 * 传票: #1 or ticket:1
 * 报表: {1} or report:1
 * 变更集: r1, [1] or changeset:1
 * ...

想知道更深入的信息, 请参考[ZhTracLinks Trac链接].


== 转义链接和Wiki页面名称 ==

如果表达式前面加入一个感叹号"!", 你可以避免链接应用[ZhTracLinks Trac链接].
例子:
{{{
 !NoHyperLink
 !#42 is not a link
}}}

显示:
 !NoHyperLink

 !#42 is not a link


== 图像 ==

不再将以`.png`, `.gif`或`.jpg`结尾的URL自动解释为图像链接, 并转换为`<img>`标签.

现在你必须使用![[Image]]宏. 请看下面.

除了当前页, 还可以引用其他资源:
 * `[[Image(wiki:WikiFormatting:picture.gif)]]` (引用其他页面的附件)
 * `[[Image(ticket:1:picture.gif)]]` (引用传票的附件)
 * `[[Image(htdocs:picture.gif)]]` (引用项目的htdocs中的一个文件)
 * `[[Image(source:/trunk/trac/htdocs/trac_logo_mini.png)]]` (仓库中的一个文件)

示例显示: [[Image(htdocs:../common/trac_logo_mini.png)]]


关于`[[Image()]]`宏的更多信息参见 [[ZhWikiMacros Wiki宏]].

== Wiki宏 ==

Wiki宏是在一个页面中插入动态内容的''''自定义函数''''.

例子:
{{{
 [[RecentChanges(Trac,3)]]
}}}

显示:
 [[RecentChanges(Trac,3)]]

更多信息请见[ZhWikiMacros Wiki宏]和已安装的宏的列表.


== 解析器 ==

Trac支持使用Wiki解析器的标记格式. 例如, 用[wiki:ZhWikiRestructuredText 新结构化文本]或[wiki:ZhWikiHtml HTML]解析器来写页面.

例子1:
{{{
#!html
<pre class="wiki">{{{
#!html
&lt;h1 style="text-align: right; color: blue"&gt;HTML Test&lt;/h1&gt;
}}}</pre>
}}}

显示:
{{{
#!html
<h1 style="text-align: right; color: blue">HTML Test</h1>
}}}

例子:
{{{
#!html
<pre class="wiki">{{{
#!python
class Test:

    def __init__(self):
        print "Hello World"
if __name__ == ''__main__'':
   Test()
}}}</pre>
}}}

显示:
{{{
#!python
class Test:
    def __init__(self):
        print "Hello World"
if __name__ == ''__main__'':
   Test()
}}}

Perl:
{{{
#!perl
my ($test) = 0;
if ($test > 0) {
    print "hello";
}
}}}

更多信息见[ZhWikiProcessors Wiki解析器].


== 评论 ==

可以在纯文本中增加评论. 这些评论将不会被渲染, 而且不会在纯文本之外显示出来.
{{{
{{{
#!comment
Your comment here
}}}
}}}


== 杂项 ==

四个以上的破折号将生成一个水平线(<HR>)

例子:
{{{
 ----
}}}

显示:
----



----
原文版本: WikiFormatting[[BR]]
相关信息:[ZhTracLinks Trac链接处理], [ZhTracGuide Trac导览], [ZhWikiHtml html], [ZhWikiMacros Wiki宏], [ZhWikiProcessors Wiki解析器], [ZhTracSyntaxColoring 语法高亮]. [[BR]]
See also: TracLinks, TracGuide, WikiHtml, WikiMacros, WikiProcessors, TracSyntaxColoring
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiHtml',1,1293980803892000,'trac','127.0.0.1','= 在Wiki中使用HTML =


Trac支持向任意 Wiki文字中插入HTML, 通过使用HTML [wiki:ZhWikiProcessors Wiki解析器]来完成.

支持HTML是内置的功能, 不需要安装任何其他软件包.

== 如何使用HTML ==

要告诉 Wiki引擎, 这段文字应被当作HTML, 请使用''''html''''解析器声明.

例子:
{{{
#!html
<pre class="wiki">{{{
#!html
&lt;h1 style="text-align: right; color: blue"&gt;HTML Test&lt;/h1&gt;
}}}</pre>
}}}

结果:
{{{
#!html
<h1 style="text-align: right; color: blue">HTML Test</h1>
}}}

注意, 在显示你的HTML代码前, Trac做了一些清理工作. 就是说, 如果你想使用一些可能有危险的代码, 例如Javascript事件处理代码, 这些代码都会从输出中被自动删除掉.

自从0.11, 过滤器使用Genshi实现, 因此, 生成的输出将是格式良好的HTML片段. 换句话说, 这意味着你不能再使用两个HTML块, 一个用于打开<div>, 第二个用于关闭它, 以封装任意的wiki文本.
要实现此目的, 现在你需要使用''''div'''' Wiki处理器:

{{{
{{{
#!div class=important style="border: 2pt solid; text-align: center"
This is the ''''only'''' way to go in Trac 0.11
}}}
}}}

结果:
{{{
#!div class=important style="border: 2pt solid; text-align: center"
This is the ''''only'''' way to go in Trac 0.11
}}}

对于span, 你应当使用宏语法:
{{{
 Hello [[span(''''WORLD'''' (click [#world-anchor here]), style=color: green; font-size: 120%, id=world-anchor)]]!
}}}

结果:
 Hello [[span(''''WORLD'''' (click [#world-anchor here]), style=color: green; font-size: 120%, id=world-anchor)]]!

== 更多信息 ==

 * http://www.w3.org/ -- World Wide Web Consortium
 * http://www.w3.org/MarkUp/ -- HTML Markup Home Page

----
原文版本: WikiHtml[[BR]]
相关信息: [ZhWikiProcessors Wiki解析器], [ZhWikiFormatting Wiki格式], [ZhWikiRestructuredText 新结构化文本][[BR]]
See also: WikiProcessors, WikiFormatting, WikiRestructuredText
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiMacros',1,1293980803892000,'trac','127.0.0.1','=  Wiki宏 =

[[PageOutline]]

Trac宏是用Python编写的定制''函数''以扩展Trac引擎的插件. 宏可以在任意上下文中插入支持[ZhWikiFormatting Wiki格式]的动态HTML数据.

另一种宏是[ZhWikiProcessors Wiki解析器]. 它们通常处理替换的标记格式, 展示大块信息(就像源代码语法高亮).

== 使用宏 ==

宏的调用是放在两个''''方括号''''中. 像Python函数一样, 宏可以有参数(括号内用逗号分隔的列表).

Trac宏也可以写成[ZhTracPlugins Trac插件]. 这赋予其宏所不具有的某些能力, 例如直接访问HTTP请求.

=== 例子 ===

列出3个最新修改过的以''Trac''开头的wiki页面:

{{{
 [[RecentChanges(Trac,3)]]
}}}

显示:
 [[RecentChanges(Trac,3)]]

== 可用的宏 ==

''''注意, 如果你没有启用`-OO`优化或设置[wiki:TracModPython mod_python]的!PythonOptimize选项, 下面的列表将只包括宏文档.''''

[[MacroList]]

== 来自世界各地的宏 ==

[http://trac-hacks.org/ Trac Hacks]网站汇集了丰富的宏,以及Trac社区贡献的其他[TracPlugins Trac插件]. 如果你要找新的宏, 或写了一个想和全世界分享的宏, 请不要犹豫马上访问该网站.

== 开发定制宏 ==
宏, 像Trac本身, 是用[http://www.python.org/ Python编程语言]写的. 他们是很简单的模块, 通过文件名来标识, 并且只包含了一个`execute()`函数. Trac会在宏被调用的地方, 在wiki页面的HTML表示中插入宏的返回值.

关于开发宏的更多信息, 参见项目主站上的[wiki:TracDev 开发资源].


== 实现 ==

下面是2个简单的例子, 关于如何使用[wiki:0.11 Trac 0.11]创建宏. 看看source:trunk/sample-plugins/Timestamp.py的例子, 显示出老式与新式宏之间的区别, 也看看source:trunk/wiki-macros/README, 其中提供了更深入的转换信息.

=== 不带参数的宏 ===
下例应该保存为`TimeStamp.py`, 因为Trac使用模块名作为宏的名字
{{{
#!python
from datetime import datetime
# Note: since Trac 0.11, datetime objects are used internally

from genshi.builder import tag

from trac.util.datefmt import format_datetime, utc
from trac.wiki.macros import WikiMacroBase

class TimestampMacro(WikiMacroBase):
    """Inserts the current time (in seconds) into the wiki page."""

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, args):
        t = datetime.now(utc)
        return tag.b(format_datetime(t, ''%c''))
}}}

=== 不带参数的宏 ===
下例应该保存为`HelloWorld.py` (在plugins/目录中),  因为Trac使用模块名作为宏的名字
{{{
#!python
from trac.wiki.macros import WikiMacroBase

class HelloWorldMacro(WikiMacroBase):
    """Simple HelloWorld macro.

    Note that the name of the class is meaningful:
     - it must end with "Macro"
     - what comes before "Macro" ends up being the macro name

    The documentation of the class (i.e. what you''re reading)
    will become the documentation of the macro, as shown by
    the !MacroList macro (usually used in the TracWikiMacros page).
    """

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, args):
        """Return some output that will be displayed in the Wiki content.

        `name` is the actual name of the macro (no surprise, here it''ll be
        `''HelloWorld''`),
        `args` is the text enclosed in parenthesis at the call of the macro.
          Note that if there are ''''no'''' parenthesis (like in, e.g.
          [[HelloWorld]]), then `args` is `None`.
        """
        return ''Hello World, args = '' + unicode(args)
    
    # Note that there''s no need to HTML escape the returned data,
    # as the template engine (Genshi) will do it for us.
}}}


=== {{{expand_macro}}} 详情 ===
{{{expand_macro}}} 应该返回或者是一个简单的Python字符串(解释为HTML), 或者最好是一个标记(Markup)对象(使用{{{from trac.util.html import Markup}}}).  {{{Markup(string)}}} 仅包装字符串, 以便渲染器将HTML字符串原样(不转义)渲染.

如果你的宏创建标记而不是HTML, 你可以将其转换为HTML:

{{{
#!python
  text = "whatever wiki markup you want, even containing other macros"
  # Convert Wiki markup to HTML, new style
  out = StringIO()
  Formatter(formatter.context).format(text, out)
  return Markup(out.getvalue())
}}}

----
原文版本: TracWikiMacros[[BR]]
相关信息: [ZhWikiProcessors Wiki解析器], [ZhWikiFormatting Wiki格式], [ZhTracGuide Trac导览][[BR]]
See also: WikiProcessors, WikiFormatting, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiNewPage',1,1293980803892000,'trac','127.0.0.1','= 添加一个新Wiki页面的步骤 =
[[ZhTracGuideToc]]

 1. 为你的新页面选择一个名字. 关于命名约定, 参考[ZhWikiPageNames Wiki页面名] .
 2. 编辑一个现有页面(或其他支持[ZhWikiFormatting Wiki格式]的资源), 并添加一个到你的新页面的[ZhTracLinks Trac链接] 比如说:`FooPage`, 保存你的修改.
 3. 点击你插入的''''新页面''''链接,来到''''新页面''''. Trac会显示"创建 `FooPage`"信息. 
 4. 单击''''创建页面''''按钮来编辑和添加内容, 并保存你的修改.
 5. 全部完成, 你的''''新页面''''(`FooPage`)已经发布了.

你也可以在页面的顶端的快速搜索栏中,输入该页的[ZhCamelCase 驼峰式]名字, 从而跳过第二步. 但注意, 除非你从其他别的地方链接到此页, 否则该页会成为''''''孤悬页面''''''
(即没有和任何网页发送关系只能通过搜索访问到的页面).

----
原文版本: WikiNewPage[[BR]]
相关信息: [ZhTracWiki Trac内置Wiki], [ZhWikiFormatting Wiki格式], [ZhTracLinks Trac链接], [ZhWikiDeletePage 删除Wiki页面][[BR]]
See also: TracWiki, WikiFormatting, TracLinks, WikiDeletePage
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiPageNames',1,1293980803892000,'trac','127.0.0.1','= Wiki页面名 =
[[ZhTracGuideToc]]

Wiki页面名主要使用[ZhCamelCase 驼峰式]规则. 在Wiki文本中, 所有[ZhCamelCase 驼峰式]的词都自动变成一个用此名字的超链接.

[ZhCamelCase 驼峰式]的页面名称必须遵循以下规则:

 1. 名字必须''''''仅字母符号''''''. 不允许有小数点, 空格, 标点符号或下划线.
 2. 名字必须至少有两个大写字母.
 3. 第一个字符必须是大写的.
 4. 每个大写字母后面必须有一个及以上的小写字母.
 5. 在页面名中允许使用斜线(/)(可表示层次关系).

如果你想创建一个不遵循驼峰式规则的Wiki页面, 使用以下语法:
{{{
 * [wiki:Wiki_page], [wiki:ISO9000]
 * [wiki:"Space Matters"] 有空格的页面名
 * 或者是简单的方式: ["WikiPageName"] (!MoinMoin的内部自由链接方式)
}}}

它会被渲染为:

 * [wiki:Wiki_page], [wiki:ISO9000]
 * [wiki:"Space Matters"] 有空格的页面名
 * 或者是简单的方式: ["WikiPageName"] (!MoinMoin的内部自由链接样式)

从Trac 0.11起, 也可以链接到Wiki页面的特定''''版本'''', 就像指定一个文件版本一样, 例如: WikiStart@1.

请参见[wiki:ZhTracLinks#用引号包围Trac链接中的空格 用引号包围Trac链接中的空格]

最后, 如上面的例子, 为了链接到该页中一个特定的章节, 你可以在wiki页面名添加一个锚点. 把鼠标放在章节的标题上, 很容易看到这个锚点, 然后单击其尾部的[[html(&para;)]]标志. 这个锚点通常是自动生成的, 也很容易明确指定, 请参见[ZhWikiFormatting#using-explicit-id-in-heading Wiki格式]
----
原文版本: WikiPageNames[[BR]]
相关信息: [ZhWikiNewPage 新建Wiki页面], [ZhWikiFormatting Wiki格式], [ZhTracWiki Trac内置Wiki], [ZhTracLinks 链接],[ZhCamelCase 驼峰式][[BR]]
See also: WikiNewPage, WikiFormatting, TracWiki, TracLinks , CamelCase

',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiProcessors',1,1293980803902000,'trac','127.0.0.1','= Wiki解析器 =

解析器是指为[TracWiki Wiki引擎]提供内容格式而设计的[ZhWikiMacros Wiki宏]声明, 解析器可以理解为''''根据用户文字的格式进行HTML输出处理的宏函数''''.

Wiki引擎使用解析器, 使Trac中的所有Wiki文本, 可以分别使用[wiki:ZhWikiRestructuredText 新结构化文本], [wiki:ZhWikiHtml raw HTML]和 [http://www.textism.com/tools/textile/ textile] 格式来进行内容组织.


== 使用解析器 ==

要在一个文本块上套用解析器, 在Wiki代码块 ''''shebang notation''''部分(大多数UNIX用户应该很熟悉)中声明一个解析器.

''''例1'''' (在wiki文本中插入HTML)

{{{
#!html
<pre class="wiki">{{{
#!html
&lt;h1 style="color: orange"&gt;This is raw HTML&lt;/h1&gt;
}}}</pre>
}}}

''''''结果:''''''
{{{
#!html
<h1 style="color: orange">This is raw HTML</h1>
}}}

----

''''例2'''' (在wiki文字中插入新结构化文本):

{{{
#!html
<pre class="wiki">{{{
#!rst
A header
--------
这是有脚注的 **文字** [*]_.

.. [*] 这是脚注.
}}}</pre>
}}}

''''''结果:''''''
{{{
#!rst
A header
--------
这是有脚注的 **文字** [*]_.


.. [*] 这是脚注.
}}}

----

''''例3'''' (在Wiki文本中插入一段C源代码):

{{{
#!html
<pre class="wiki">{{{
#!c
int main(int argc, char *argv[])
{
  printf("Hello World\n");
  return 0;
}
}}}</pre>
}}}

''''''结果:''''''
{{{
#!c
int main(int argc, char *argv[])
{
  printf("Hello World\n");
  return 0;
}
}}}

----

== 可用解析器 ==
下列解析器包含在Trac发行版中:
 * ''''''html'''''' -- 在Wiki页面中插入自定义HTML. 见[ZhWikiHtml WikiHtml].
 * ''''''div'''''' -- 在一个<div>元素中包装任意Wiki内容 (''''自0.11''''). 参见 [ZhWikiHtml WikiHtml].
 * ''''''span'''''' -- 在一个<span>元素中包装任意Wiki内容 (''''自0.11''''). 参见 [ZhWikiHtml WikiHtml].
 * ''''''rst'''''' -- Trac支持新结构化文本. 见[wiki:ZhWikiRestructuredText  新结构化文本].
 * ''''''textile'''''' -- 如果安装了[http://dealmeida.net/projects/textile/ Textile]则支持. 请见[http://hobix.com/textile/ Textile参考手册].
 * ''''''comment'''''' -- 在此段中不解析文本 (即, 只出现在原文中 - 不出现在渲染后的页面中).

=== 代码语法高亮显示支持 ===
Trac包含的解析器支持下列语言的内嵌[wiki:ZhTracSyntaxColoring 语法高亮]:
 * ''''''c'''''' -- C
 * ''''''cpp'''''' -- C++
 * ''''''python'''''' -- Python
 * ''''''perl'''''' -- Perl
 * ''''''ruby'''''' -- Ruby
 * ''''''php'''''' -- PHP
 * ''''''asp'''''' --- ASP
 * ''''''java'''''' -- Java
 * ''''''js'''''' -- Javascript
 * ''''''sql'''''' -- SQL
 * ''''''xml'''''' -- XML
 * ''''''sh'''''' -- Bourne/Bash shell
''''''注意:'''''' ''''Trac的语法高亮依赖外部软件包. 更多信息参见[wiki:ZhTracSyntaxColoring 语法高亮].''''

通过将MIME类型作为解析器来使用, 在浏览源代码时, 同样可以支持语法高亮显示. 例如, 你可以写:
{{{
{{{
#!text/html
<h1>text</h1>
}}}
}}}

结果会是语法高亮显示的HTML代码. 同样也适用于其他支持的mime类型.


要想了解更多用户开发和贡献的解析器宏, 请访问:
 * [trac:ProcessorBazaar]
 * [trac:MacroBazaar]
 * [th:WikiStart Trac Hacks] community site


== 高级话题: 开发解析器宏 ==
开发解析器和[ZhWikiMacros Wiki宏]并没有不同之处. 事实上他们以同样的方式运行, 只是使用语法有些不同而已. 更多信息请见[ZhWikiMacros Wiki宏].


----
原文版本: WikiProcessors[[BR]]
相关信息:[ZhWikiMacros Wiki宏], [ZhWikiHtml WikiHtml], [ZhWikiRestructuredText 新结构化文本], [ZhTracSyntaxColoring 语法高亮], [ZhWikiFormatting Wiki格式], [ZhTracGuide Trac导览][[BR]]
See also: WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiRestructuredText',1,1293980803902000,'trac','127.0.0.1','= Trac中新结构化文本支持 =

Trac支持在[ZhWikiFormatting Wiki格式]文本中使用''''新结构化文本''''(RST)作为Wiki标记的替代使用.

摘自新结构化文本网页:
 "''''新结构化文本是一种容易阅读, WYTIWYG~''''''所想即所得''''''纯文本标记语法和解析系统. 它用于内嵌程序文档(例如Python的docstring),  快速创建简单网页, 以及独立文档."新结构化文本是为扩展特定应用领域而设计的."''''

=== 要求 ===
注意, 要激活Trac中的RST支持, 必须安装python docutils安装包. 如果你的操作系统尚没有此安装包, 你可以从[http://docutils.sourceforge.net/rst.html RST网站]下载.

=== 更多关于RST信息 ===

 * 新结构化文本网站 -- http://docutils.sourceforge.net/rst.html
 * RST快速参考手册 -- http://docutils.sourceforge.net/docs/rst/quickref.html

----

== 在Trac中使用RST ==
要指定RST来解析某一段文本, 使用'''' rst'''' 处理器标记.

=== 新结构化文本中的Trac链接 ===

 * Trac提供一个自定义的RST参考指令''trac''以允许RST文本内使用[ZhTracLinks Trac链接].

 例子:
 {{{
 {{{
 #!rst
 This is a reference to |a ticket|

 .. |a ticket| trac:: #42
 }}}
 }}}

 关于所有"trac''''指令的完整的例子, 请看[ZhWikiRestructuredTextLinks 新结构化文本中的Trac链接].

 * 可以用更简单的方法在RST中创建[ZhTracLinks Trac链接]:通过使用自定义'''':trac:''''链接命名方案.

 例子:
 {{{
 {{{
 #!rst
 This is a reference to ticket `#12`:trac:

 To learn how to use Trac,  see `TracGuide`:trac:
 }}}
 }}}

=== 新结构化文本中的语法高亮显示 ===

在ReST中也有一个关于如何实现[ZhTracSyntaxColoring Trac语法高亮显示]的指令, 该指令叫做code-block.

例子:

{{{
{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}
}}}

会生成如下结果.

{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}

=== 新结构化文本中的Wiki宏 ===

要在ReST中执行[ZhWikiMacros Wiki宏], 你可以使用与语法高亮显示相同的指令, 即code-block. 要使其起作用, 你必须使用应用#801的trac版本.

=== Wiki宏实例 ===

{{{
{{{
#!rst

.. code-block:: RecentChanges

   Trac,3

}}}
}}}

会生成如下结果.

     [[RecentChanges(Trac,3)]]

或更准确的WikiMacro(例如: 语法):

{{{
{{{
#!rst

:code-block:`RecentChanges:Trac,3`
}}}
}}}

=== 更多的ReST例子 ===

下面的例子大部分应该是无需说明的:


{{{
#!html
<pre class="wiki">{{{
#!rst
表头
=============
新结构化文档 是种 **美妙的体验**. 官网_.

表格:

=====  =====  ========
   输入        输出
------------  --------
 甲     乙     甲 戓 乙
=====  =====  ========
徦      徦      徦
真      徦      真
徦      真      真
真      真      真
=====  =====  ========

新结构化文本Trac链接
--------------------

参考传票 `#42`:trac:.

.. _官网: http://docutils.sourceforge.net/rst.html}}}</pre>
}}}


会生成如下结果.

{{{
#!rst
表头
=============
新结构化文档 是种 **美妙的体验**. 官网_.

表格:

=====  =====  ========
   输入        输出
------------  --------
 甲     乙     甲 戓 乙
=====  =====  ========
徦      徦      徦
真      徦      真
徦      真      真
真      真      真
=====  =====  ========

新结构化文本Trac链接
--------------------

参考传票 `#42`:trac:.

.. _官网: http://docutils.sourceforge.net/rst.html
}}}


----
原文版本: WikiRestructuredText[[BR]]
相关信息: [ZhWikiRestructuredTextLinks 新结构化文本中的Trac链接], [ZhWikiProcessors Wiki解析器], [ZhWikiFormatting Wiki格式][[BR]]
See also: WikiRestructuredTextLinks, WikiProcessors, WikiFormatting
',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiRestructuredTextLinks',1,1293980803902000,'trac','127.0.0.1','= 新结构化文本中的Trac链接 =

本文阐明了如何在新结构化文本中使用``..trac::``指令. 该页如下:

{{{
{{{
#!rst 

例子:
 * Tickets: :trac:`#1` or :trac:`ticket:1`
 * Ticket comments: :trac:`comment:ticket:1:2`
 * Reports: :trac:`{1}` or :trac:`report:1`
 * Changesets: :trac:`r1`, :trac:`[1]` or :trac:`changeset:1`
 * Revision log: :trac:`r1:3`, :trac:`[1:3]` or :trac:`log:@1:3`, :trac:`log:trunk@1:3`
 * Diffs (since version 0.10): :trac:`diff:@20:30`, :trac:`diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` or :trac:`diff:trunk/trac@3538//sandbox/vc-refactoring/trac@3539`
 * Wiki pages: :trac:`CamelCase` or :trac:`wiki:CamelCase`
 * Milestones: :trac:`milestone:1.0`
 * Attachment: :trac:`attachment:ticket:944:attachment.1073.diff`
 * Files: :trac:`source:trunk/COPYING`
 * A specific file revision: :trac:`source:/trunk/COPYING@200`
 * A particular line of a specific file revision: :trac:`source:/trunk/COPYING@200#L25`

}}}
}}}

如果你安装了docutils, 上段代码可以渲染为:
----
{{{
#!rst 

例子:
 * Tickets: :trac:`#1` or :trac:`ticket:1`
 * Ticket comments: :trac:`comment:ticket:1:2`
 * Reports: :trac:`{1}` or :trac:`report:1`
 * Changesets: :trac:`r1`, :trac:`[1]` or :trac:`changeset:1`
 * Revision log: :trac:`r1:3`, :trac:`[1:3]` or :trac:`log:@1:3`, :trac:`log:trunk@1:3`
 * Diffs (since version 0.10): :trac:`diff:@20:30`, :trac:`diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` or :trac:`diff:trunk/trac@3538//sandbox/vc-refactoring/trac@3539`
 * Wiki pages: :trac:`CamelCase` or :trac:`wiki:CamelCase`
 * Milestones: :trac:`milestone:1.0`
 * Attachment: :trac:`attachment:ticket:944:attachment.1073.diff`
 * Files: :trac:`source:trunk/COPYING`
 * A specific file revision: :trac:`source:/trunk/COPYING@200`
 * A particular line of a specific file revision: :trac:`source:/trunk/COPYING@200#L25`

}}}
----

请注意, 上述每个都可以用另一种语法来写:
{{{
{{{
#!rst

See _`ticket:123`

 .. trac:: ticket:123 Ticket 123
}}}
}}}
----

{{{
#!rst

See _`ticket:123`

.. trac:: ticket:123 Ticket 123
}}}

----
上面的格式有一个额外的好处, 你可以为链接明确指定一个标签.

----

原文版本: WikiRestructuredTextLinks[[BR]]相关信息: [ZhWikiRestructuredText 新结构化文本], [ZhTracLinks Trac链接][[BR]]See also: WikiRestructuredText, TracLinks

',NULL,NULL);
INSERT INTO "wiki" VALUES('ZhWikiStart',1,1293980803912000,'trac','127.0.0.1','= 欢迎使用Trac =

Trac是一个''''''最轻量级别''''''的''''''基于Web''''''的软件项目管理环境.它的目的是简化追踪/处理软件开发事务,进而改进整体软件过程.

Trac是围绕''''''"帮助开发者写出伟大的软件"''''''这一最终目标进行设计的,''''''尽量不影响''''''一个团队已经拥有的良好项目过程和文化.

像所有的Wiki网页一样,本页是可编辑的,这就是说你只需通过浏览器就能更改本页的内容.只需点击底部的''''编辑页面''''链接.[ZhWikiFormatting 维基格式]中你可以查阅现有Wiki格式的详细描述.

使用"[wiki:ZhTracAdmin trac-admin] ''''path/to/your/env/dir'''' initenv" 命令,可以立即创建一个全新的Trac环境,默认已包含了一批Wiki文章和一些样例数据.这个新创建的环境还包含了丰富的[wiki:ZhTracGuide 帮助文档],帮助你开始管理你的项目.

你可以使用[wiki:ZhTracAdmin trac-admin]来配置[http://trac.edgewall.org/ Trac]从而更好地适应你的项目,特别是关于''''组件'''',''''版本''''和''''里程碑''''方面.

总之''''''[ZhTracGuide 帮助文档]''''''是个开始学习的好地方.

享受Trac 的轻快吧! [[BR]]
''''Trac 团队''''
 
== 起点 ==

 * [ZhTracGuide Trac导览]
 * [http://trac.edgewall.org/ Trac项目官网]
 * [http://trac.edgewall.org/wiki/TracFaq Trac常见问答]
 * [ZhTracSupport Trac技术支持]

本地Wiki网页的完整目录,请参见[ZhTitleIndex 标题索引].

原文版本: WikiStart
',NULL,NULL);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',1,1293989452548000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',2,1293989493938000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication Request - 请求
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',3,1293989621612000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',4,1293989640108000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication + Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',5,1293989675880000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication 和 Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',6,1293990416875000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',7,1293990514696000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication + Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',8,1293990585708000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication ++ Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',9,1293990710277000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication +++ Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',10,1293990748442000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication +和+ Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',11,1293990938305000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication ++ Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',12,1293990967347000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication 和 Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',13,1293991742141000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',14,1293991910963000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication 和 Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',15,1293992033049000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',16,1293992065375000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication 和 Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',17,1293992174152000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication - Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',18,1293992189274000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
Alice -> Bob: Authentication 和 Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',19,1293992465180000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
张三 -> 李四: Authentication Request
@enduml
}}}
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',20,1293993047037000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
  张三 -> 李四: Authentication Request
  Bob --> Alice: Authentication Response
  Alice -> Bob: Another authentication Request
  Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',21,1293993089067000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
  张三 -> 李四: 认证请求
  李四 --> 张三: 认证响应
  Alice -> Bob: Another authentication Request
  Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/PlantUML',22,1293993219485000,'admin','10.0.2.2','{{{
#!PlantUML
@startuml
  张三 -> 李四: 认证请求(Authentication Request)
  李四 --> 张三: 认证响应(Authentication Response)
  Alice -> Bob: Another authentication Request
  Alice <-- Bob: another authentication Response
@enduml
}}}
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',1,1294028520165000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',2,1294030224786000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone2)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',3,1294030591343000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',4,1294040140708000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone1)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',5,1294040153326000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',6,1294040195847000,'admin','10.0.2.2','[[TracJSGanttChart()]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',7,1294040217186000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2)]]

[[TracJSGanttChart(milestone=milestone1)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',8,1294042124394000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy-mm-dd)]]

[[TracJSGanttChart(milestone=milestone1)]]','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',9,1294043177451000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy-mm-dd)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',10,1294043289442000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy/mm/dd)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',11,1294043308609000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy-mm-dd)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',12,1294047802010000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=mm-dd)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',13,1294047826044000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy-mm-dd, startDate=0, endDate=0)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',14,1294048760935000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy-mm-dd, startDate=1, endDate=0)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/JSGantt',15,1294048776027000,'admin','10.0.2.2','[[TracJSGanttChart(milestone=milestone1|milestone2, dateDisplay=yyyy-mm-dd, startDate=1, endDate=1)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',1,1294052638852000,'admin','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=priority,format=table,col=resolution|summary|owner|reporter,rows=description)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',2,1294052698027000,'admin','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=priority,format=table,col=resolution|summary|owner|reporter)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',3,1294052813052000,'admin','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=priority,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|type|priority|milestone|component|version)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',4,1294052892196000,'admin','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign|priority,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|type|priority|milestone|component|version)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',5,1294052967274000,'zzj','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign|priority,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',6,1294053075460000,'zzj','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign+priority,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',7,1294053092785000,'zzj','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign&priority,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',8,1294053112082000,'zzj','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',9,1294053659720000,'admin','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
----
[query:status!=closed&owner=$USER&col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone Active tickets against 1.0]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',10,1294053786793000,'admin','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
----
[query:status!=closed&owner=$USER&col=summary|status|due_assign|due_close|complete|priority|milestone|parents|blockedby|blocking 管理任务计划]
|
[query:status!=closed&owner=$USER&col=summary|status|parents|blockedby|blocking|priority|milestone|due_assign|due_close|complete 管理任务关系]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',11,1294053974162000,'zzj','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
----
[query:status!=closed&owner=$USER&col=summary|status|due_assign|due_close|complete|priority|milestone|parents|blockedby|blocking&order=due_assign 管理任务计划]
|
[query:status!=closed&owner=$USER&col=summary|status|parents|blockedby|blocking|priority|milestone|due_assign|due_close|complete&order=parents 管理任务关系]
','',0);
INSERT INTO "wiki" VALUES('SandBox/TracQuery',12,1294054028951000,'zzj','10.0.2.2','[[TicketQuery(status!=closed&owner=$USER,order=due_assign,format=table,col=summary|status|due_assign|due_close|complete|parents|blockedby|blocking|priority|milestone)]]
----
[query:status!=closed&owner=$USER&col=summary|status|parents|due_assign|due_close|complete|priority|milestone|blockedby|blocking&order=due_assign 管理任务计划]
|
[query:status!=closed&owner=$USER&col=summary|status|parents|blockedby|blocking|priority|milestone|due_assign|due_close|complete&order=parents 管理任务关系]
','',0);
INSERT INTO "wiki" VALUES('WikiStart',2,1294067411451000,'admin','10.0.2.2','[[IncludePages(ZhWikiStart)]]','',1);
INSERT INTO "wiki" VALUES('SandBox',1,1294067739042000,'admin','10.0.2.2','= The Sandbox =
This is just a page to practice and learn WikiFormatting.

Go ahead, edit it freely.
','',0);
INSERT INTO "wiki" VALUES('SandBox',2,1309617955482000,'trac','127.0.0.1','= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.',NULL,NULL);
INSERT INTO "wiki" VALUES('TracAdmin',2,1309617955522000,'trac','127.0.0.1','= TracAdmin =
[[TracGuideToc]]

Trac is distributed with a powerful command-line configuration tool. This tool can be used  to configure and customize your Trac-installation to better fit your needs.

Some of those operations can also be performed via the ''''Admin'''' web interface, an updated version of the [trac:WebAdmin] plugin now integrated within Trac (since version 0.11).

== Usage ==

For nearly every `trac-admin` command, you''ll need to specify the path to the TracEnvironment that you want to administer as the first argument, for example:
{{{
trac-admin /path/to/projenv wiki list
}}}

The only exception is for the `help` command, but even in this case if you omit the environment, you''ll only get a very succinct list of commands (`help` and `initenv`), the same list you''d get when invoking `trac-admin` alone.
Also, `trac-admin --version` will tell you about the Trac version (e.g. 0.12) corresponding to the program.

If you want to get a comprehensive list of the available commands and sub-commands, you need to specify an existing environment:
{{{
trac-admin /path/to/projenv help
}}}

Some commands have a more detailed help, which you can access by specifying the command''s name as a subcommand for `help`:

{{{
trac-admin /path/to/projenv help <command>
}}}

=== `trac-admin <targetdir> initenv` === #initenv

This subcommand is very important as it''s the one used to create a TracEnvironment in the specified `<targetdir>`. That directory must not exist prior to the call.

[[TracAdminHelp(initenv)]]

It supports an extra `--inherit` option, which can be used to specify a global configuration file which can be used share settings between several environments. You can also inherit from a shared configuration afterwards, by setting the `[inherit] file` option in the `conf/trac.ini` file in your newly created environment, but the advantage of specifying the inherited configuration file at environment creation time is that only the options ''''not'''' already specified in the global configuration file will be written in the created environment''s `conf/trac.ini` file.
See TracIni#GlobalConfiguration.

Note that in version 0.11 of Trac, `initenv` lost an extra last argument `<templatepath>`, which was used in previous versions to point to the `templates` folder. If you are using the one-liner ''`trac-admin /path/to/trac/ initenv <projectname> <db> <repostype> <repospath>`'' in the above and getting an error that reads ''''''''`Wrong number of arguments to initenv: 4`'''''''', then this is because you''re using a `trac-admin` script from an ''''''older'''''' version of Trac.

== Interactive Mode ==

When passing the environment path as the only argument, `trac-admin` starts in interactive mode.
Commands can then be executed on the selected environment using the prompt, which offers tab-completion
(on non-Windows environments, and when the Python `readline` module is available) and automatic repetition of the last command issued.

Once you''re in interactive mode, you can also get help on specific commands or subsets of commands:

For example, to get an explanation of the `resync` command, run:
{{{
> help resync
}}}

To get help on all the Wiki-related commands, run:
{{{
> help wiki
}}}

== Full Command Reference ==

You''ll find below the detailed help for all the commands available by default in `trac-admin`. Note that this may not match the list given by `trac-admin <yourenv> help`, as the commands  pertaining to components disabled in that environment won''t be available and conversely some plugins activated in the environment can add their own commands.

[[TracAdminHelp()]]

----
See also: TracGuide, TracBackup, TracPermissions, TracEnvironment, TracIni, [trac:TracMigrate TracMigrate]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracFastCgi',2,1309617955572000,'trac','127.0.0.1','= Trac with FastCGI =

[http://www.fastcgi.com/ FastCGI] interface allows Trac to remain resident much like with [wiki:TracModPython mod_python]. It is faster than external CGI interfaces which must start a new process for each request. However, unlike mod_python, FastCGI supports [http://httpd.apache.org/docs/suexec.html Apache SuEXEC], i.e. run with different permissions than web server. Additionally, it is supported by much wider variety of web servers.

''''''Note for Windows:'''''' Trac''s FastCGI does not run under Windows, as Windows does not implement `Socket.fromfd`, which is used by `_fcgi.py`. If you want to connect to IIS, you may want to try [trac:TracOnWindowsIisAjp AJP].

== Simple Apache configuration ==

There are two FastCGI modules commonly available for Apache: `mod_fastcgi` and
`mod_fcgid` (preferred). The latter is more up-to-date.

==== setup with `mod_fastcgi` ====
`mod_fastcgi` uses `FastCgiIpcDir` and `FastCgiConfig` directives that should be added to an appropriate Apache configuration file:
{{{
# Enable fastcgi for .fcgi files
# (If you''re using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}
Setting `FastCgiIpcDir` is optional if the default is suitable. Note that the `LoadModule` line must be after the `IfModule` group.

Configure `ScriptAlias` or similar options as described in TracCgi, but
calling `trac.fcgi` instead of `trac.cgi`.

You can set up the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Or you can serve multiple Trac projects in a directory like:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

==== setup with `mod_fcgid` ====
Configure `ScriptAlias` (see TracCgi for details), but call `trac.fcgi`
instead of `trac.cgi`. Note that slash at the end - it is important.
{{{
ScriptAlias /trac /path/to/www/trac/cgi-bin/trac.fcgi/
}}}

To setup Trac environment for `mod_fcgid` it is necessary to use
`DefaultInitEnv` directive. It cannot be used in `Directory` or
`Location` context, so if you need to support multiple projects, try
alternative environment setup below.

{{{
DefaultInitEnv TRAC_ENV /path/to/env/trac/
}}}

==== alternative environment setup ====
A better method to specify path to Trac environment it to embed the path
into `trac.fcgi` script itself. That doesn''t require configuration of server
environment variables, works for both FastCgi modules
(and for [http://www.lighttpd.net/ lighttpd] and CGI as well):
{{{
import os
os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}
or
{{{
import os
os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

With this method different projects can be supported by using different
`.fcgi` scripts with different `ScriptAliases`.

See [https://coderanger.net/~coderanger/httpd/fcgi_example.conf this fcgid example config] which uses a !ScriptAlias directive with trac.fcgi with a trailing / like this:
{{{
ScriptAlias / /srv/tracsite/cgi-bin/trac.fcgi/
}}}

== Simple Cherokee Configuration ==

The configuration on Cherokee''s side is quite simple. You will only need to know that you can spawn Trac as an SCGI process.
You can either start it manually, or better yet, automatically by letting Cherokee spawn the server whenever it is down.
First set up an information source in cherokee-admin with a local interpreter.

{{{
Host:
localhost:4433

Interpreter:
/usr/bin/tracd —single-env —daemonize —protocol=scgi —hostname=localhost —port=4433 /path/to/project/
}}}

If the port was not reachable, the interpreter command would be launched. Note that, in the definition of the information source, you will have to manually launch the spawner if you use a ''''Remote host'''' as ''''Information source'''' instead of a ''''Local interpreter''''.

After doing this, we will just have to create a new rule managed by the SCGI handler to access Trac. It can be created in a new virtual server, trac.example.net for instance, and will only need two rules. The ''''''default'''''' one will use the SCGI handler associated to the previously created information source.
The second rule will be there to serve the few static files needed to correctly display the Trac interface. Create it as ''''Directory rule'''' for ''''/chrome/common'''' and just set it to the ''''Static files'''' handler and with a ''''Document root'''' that points to the appropriate files: ''''/usr/share/trac/htdocs/''''

Note:\\
If the tracd process fails to start up, and cherokee displays a 503 error page, you might be missing the [http://trac.saddi.com/flup python-flup] package.\\
Python-flup is a dependency which provides trac with SCGI capability. You can install it on debian based systems with:
{{{
sudo apt-get install python-flup
}}}

== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd is a secure, fast, compliant and very flexible web-server that has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi`(prior to 0.11) / fcgi_frontend.py (0.11) with lighttpd add the following to your lighttpd.conf:
{{{
#var.fcgi_binary="/usr/bin/python /path/to/fcgi_frontend.py" # 0.11 if installed with easy_setup, it is inside the egg directory
var.fcgi_binary="/path/to/cgi-bin/trac.fcgi" # 0.10 name of prior fcgi executable
fastcgi.server = ("/trac" =>
   
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described above,
and you may set one of the two in `trac.fcgi` instead of in `lighttpd.conf`
using `bin-environment` (as in the section above on Apache configuration).

Note that lighttpd has a bug related to ''SCRIPT_NAME'' and ''PATH_INFO'' when the uri of fastcgi.server is ''/'' instead of ''/trac'' in this example, see #Trac2418. This should be fixed since lighttpd 1.4.23, and you may need to add `"fix-root-scriptname" => "enable"` as parameter of fastcgi.server.

For using two projects with lighttpd add the following to your `lighttpd.conf`:
{{{
fastcgi.server = ("/first" =>
                   ("first" =>
                    ("socket" => "/tmp/trac-fastcgi-first.sock",
                     "bin-path" => fcgi_binary,
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-first")
                    )
                  ),
                  "/second" =>
                    ("second" =>
                    ("socket" => "/tmp/trac-fastcgi-second.sock",
                     "bin-path" => fcgi_binary,
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-second")
                    )
                  )
                )
}}}
Note that field values are different.  If you prefer setting the environment
variables in the `.fcgi` scripts, then copy/rename `trac.fcgi`, e.g., to
`first.fcgi` and `second.fcgi`, and reference them in the above settings.
Note that the above will result in different processes in any event, even
if both are running from the same `trac.fcgi` script.
{{{
#!div class=important
''''''Note'''''' It''s very important the order on which server.modules are loaded, if mod_auth is not loaded ''''''BEFORE'''''' mod_fastcgi, then the server will fail to authenticate the user.
}}}
For authentication you should enable mod_auth in lighttpd.conf ''server.modules'', select auth.backend and auth rules:
{{{
server.modules              = (
...
  "mod_auth",
...
)

auth.backend               = "htpasswd"

# Separated password files for each project
# See "Conditional Configuration" in
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/configuration.txt

$HTTP["url"] =~ "^/first/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-first/htpasswd.htaccess"
}
$HTTP["url"] =~ "^/second/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-second/htpasswd.htaccess"
}

# Enable auth on trac URLs, see
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/authentication.txt

auth.require = ("/first/login" =>
                ("method"  => "basic",
                 "realm"   => "First project",
                 "require" => "valid-user"
                ),
                "/second/login" =>
                ("method"  => "basic",
                 "realm"   => "Second project",
                 "require" => "valid-user"
                )
               )


}}}
Note that lighttpd (I use version 1.4.3) stopped if password file doesn''t exist.

Note that lighttpd doesn''t support ''valid-user'' in versions prior to 1.3.16.

Conditional configuration is also useful for mapping static resources, i.e. serving out images and CSS directly instead of through FastCGI:
{{{
# Aliasing functionality is needed
server.modules += ("mod_alias")

# Setup an alias for the static resources
alias.url = ("/trac/chrome/common" => "/usr/share/trac/htdocs")

# Use negative lookahead, matching all requests that ask for any resource under /trac, EXCEPT in
# /trac/chrome/common, and use FastCGI for those
$HTTP["url"] =~ "^/trac(?!/chrome/common)" {
# Even if you have other fastcgi.server declarations for applications other than Trac, do NOT use += here
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}
}}}
The technique can be easily adapted for use with multiple projects by creating aliases for each of them, and wrapping the fastcgi.server declarations inside conditional configuration blocks.
Also there is another way to handle multiple projects and it''s to use TRAC_ENV_PARENT_DIR instead of TRAC_ENV and use global auth, let''s see an example:
{{{
#  This is for handling multiple projects
  alias.url       = ( "/trac/" => "/path/to/trac/htdocs/" )

  fastcgi.server += ("/projects"  =>
                      ("trac" =>
                        (
                          "socket" => "/tmp/trac.sock",
                          "bin-path" => fcgi_binary,
                          "check-local" => "disable",
                          "bin-environment" =>
                            ("TRAC_ENV_PARENT_DIR" => "/path/to/parent/dir/of/projects/" )
                        )
                      )
                    )
#And here starts the global auth configuration
  auth.backend = "htpasswd"
  auth.backend.htpasswd.userfile = "/path/to/unique/htpassword/file/trac.htpasswd"
  $HTTP["url"] =~ "^/projects/.*/login$" {
    auth.require = ("/" =>
                     (
                       "method"  => "basic",
                       "realm"   => "trac",
                       "require" => "valid-user"
                     )
                   )
  }
}}}

Changing date/time format also supported by lighttpd over environment variable LC_TIME
{{{
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv",
                        "LC_TIME" => "ru_RU")
                     )
                   )
                 )
}}}
For details about languages specification see [trac:TracFaq TracFaq] question 2.13.

Other important information like [http://trac.lighttpd.net/trac/wiki/TracInstall this updated TracInstall page], [wiki:TracCgi#MappingStaticResources and this] are useful for non-fastcgi specific installation aspects.

If you use trac-0.9, read [http://lists.edgewall.com/archive/trac/2005-November/005311.html about small bug]

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

Note about running lighttpd with reduced permissions:

  If nothing else helps and trac.fcgi doesn''t start with lighttpd settings `server.username = "www-data"`, `server.groupname = "www-data"`, then in the `bin-environment` section set `PYTHON_EGG_CACHE` to the home directory of `www-data` or some other directory accessible to this account for writing.


== Simple !LiteSpeed Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.litespeedtech.com/ LiteSpeed].

!LiteSpeed web server is an event-driven asynchronous Apache replacement designed from the ground-up to be secure, scalable, and operate with minimal resources. !LiteSpeed can operate directly from an Apache config file and is targeted for business-critical environments.

=== Setup ===

 1. Please make sure you have first have a working install of a Trac project. Test install with “tracd” first.

 2. Create a Virtual Host for this setup. From now on we will refer to this vhost as !TracVhost. For this tutorial we will be assuming that your trac project will be accessible via:

{{{
http://yourdomain.com/trac/
}}}

 3. Go “!TracVhost → External Apps” tab and create a new “External Application”.

{{{
Name: MyTracFCGI	
Address: uds://tmp/lshttpd/mytracfcgi.sock
Max Connections: 10
Environment: TRAC_ENV=/fullpathto/mytracproject/ <--- path to root folder of trac project
Initial Request Timeout (secs): 30
Retry Timeout (secs): 0
Persistent Connection	Yes
Connection Keepalive Timeout: 30
Response Bufferring: No	
Auto Start: Yes
Command: /usr/share/trac/cgi-bin/trac.fcgi  <--- path to trac.fcgi
Back Log: 50
Instances: 10
}}}

 4. Optional. If you need to use htpasswd based authentication. Go to “!TracVhost → Security” tab and create a new security “Realm”.

{{{
DB Type: Password File
Realm Name: MyTracUserDB               <--- any name you wish and referenced later
User DB Location: /fullpathto/htpasswd <--- path to your htpasswd file
}}}

If you don’t have a htpasswd file or don’t know how to create the entries within one, go to http://sherylcanter.com/encrypt.php, to generate the user:password combos.

 5. Go to “!PythonVhost → Contexts” and create a new “FCGI Context”.

{{{
URI: /trac/                              <--- URI path to bind to python fcgi app we created	
Fast CGI App: [VHost Level] MyTractFCGI  <--- select the trac fcgi extapp we just created
Realm: TracUserDB                        <--- only if (4) is set. select realm created in (4)
}}}

 6. Modify `/fullpathto/mytracproject/conf/trac.ini`

{{{
#find/set base_rul, url, and link variables
base_url = http://yourdomain.com/trac/ <--- base url to generate correct links to
url = http://yourdomain.com/trac/      <--- link of project
link = http://yourdomain.com/trac/     <--- link of graphic logo
}}}

 7. Restart !LiteSpeed, “lswsctrl restart”, and access your new Trac project at: 

{{{
http://yourdomain.com/trac/
}}}

== Simple Nginx Configuration ==

 1. Nginx configuration snippet - confirmed to work on 0.6.32
{{{
    server {
        listen       10.9.8.7:443;
        server_name  trac.example;

        ssl                  on;
        ssl_certificate      /etc/ssl/trac.example.crt;
        ssl_certificate_key  /etc/ssl/trac.example.key;

        ssl_session_timeout  5m;

        ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers   on;

        # (Or ``^/some/prefix/(.*)``.
        if ($uri ~ ^/(.*)) {
             set $path_info /$1;
        }

        # You can copy this whole location to ``location [/some/prefix]/login``
        # and remove the auth entries below if you want Trac to enforce
        # authorization where appropriate instead of needing to authenticate
        # for accessing the whole site.
        # (Or ``location /some/prefix``.)
        location / {
            auth_basic            "trac realm";
            auth_basic_user_file /home/trac/htpasswd;

            # socket address
            fastcgi_pass   unix:/home/trac/run/instance.sock;

            # python - wsgi specific
            fastcgi_param HTTPS on;

            ## WSGI REQUIRED VARIABLES
            # WSGI application name - trac instance prefix.
	    # (Or ``fastcgi_param  SCRIPT_NAME  /some/prefix``.)
            fastcgi_param  SCRIPT_NAME        "";
            fastcgi_param  PATH_INFO          $path_info;

            ## WSGI NEEDED VARIABLES - trac warns about them
            fastcgi_param  REQUEST_METHOD     $request_method;
            fastcgi_param  SERVER_NAME        $server_name;
            fastcgi_param  SERVER_PORT        $server_port;
            fastcgi_param  SERVER_PROTOCOL    $server_protocol;
            fastcgi_param  QUERY_STRING     $query_string;

            # for authentication to work
            fastcgi_param  AUTH_USER          $remote_user;
            fastcgi_param  REMOTE_USER        $remote_user;
        }
    }
}}}

 2. Modified trac.fcgi:

{{{
#!/usr/bin/env python
import os
sockaddr = ''/home/trac/run/instance.sock''
os.environ[''TRAC_ENV''] = ''/home/trac/instance''

try:
     from trac.web.main import dispatch_request
     import trac.web._fcgi

     fcgiserv = trac.web._fcgi.WSGIServer(dispatch_request, 
          bindAddress = sockaddr, umask = 7)
     fcgiserv.run()

except SystemExit:
    raise
except Exception, e:
    print ''Content-Type: text/plain\r\n\r\n'',
    print ''Oops...''
    print
    print ''Trac detected an internal error:''
    print
    print e
    print
    import traceback
    import StringIO
    tb = StringIO.StringIO()
    traceback.print_exc(file=tb)
    print tb.getvalue()

}}}

 3. reload nginx and launch trac.fcgi like that:

{{{
trac@trac.example ~ $ ./trac-standalone-fcgi.py 
}}}

The above assumes that:
 * There is a user named ''trac'' for running trac instances and keeping trac environments in its home directory.
 * `/home/trac/instance` contains a trac environment
 * `/home/trac/htpasswd` contains authentication information
 * `/home/trac/run` is owned by the same group the nginx runs under
  * and if your system is Linux the `/home/trac/run` has setgid bit set (`chmod g+s run`)
  * and patch from ticket #T7239 is applied, or you''ll have to fix the socket file permissions every time

Unfortunately nginx does not support variable expansion in fastcgi_pass directive. 
Thus it is not possible to serve multiple trac instances from one server block. 

If you worry enough about security, run trac instances under separate users. 

Another way to run trac as a FCGI external application is offered in ticket #T6224

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI ModWSGI], [wiki:TracCgi CGI], [wiki:TracModPython ModPython], [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracGuide',2,1309617955592000,'trac','127.0.0.1','= The Trac User and Administration Guide =
[[TracGuideToc]]

The TracGuide is meant to serve as a starting point for all documentation regarding Trac usage and development. The guide is a free document, a collaborative effort, and a part of the [http://trac.edgewall.org Trac Project] itself.

== Table of Contents ==

Currently available documentation:
 * ''''''User Guide''''''
   * TracWiki — How to use the built-in Wiki.
   * TracTimeline — The timeline provides a historic perspective on a project.
   * TracRss — RSS content syndication in Trac.
   * ''''The Version Control Subsystem''''
     * TracBrowser — Browsing source code with Trac.
     * TracChangeset — Viewing changes to source code.
     * TracRevisionLog — Viewing change history.
   * ''''The Ticket Subsystem''''
     * TracTickets — Using the issue tracker.
     * TracReports — Writing and using reports.
     * TracQuery — Executing custom ticket queries.
     * TracRoadmap — The roadmap helps tracking project progress.
 * ''''''Administrator Guide''''''
   * TracInstall — How to install and run Trac.
   * TracUpgrade — How to upgrade existing installations.
   * TracAdmin — Administering a Trac project.
   * TracImport — Importing tickets from other bug databases.
   * TracIni — Trac configuration file reference. 
   * TracPermissions — Access control and permissions.
   * TracInterfaceCustomization — Customizing the Trac interface.
   * TracPlugins — Installing and managing Trac extensions.
   * TracLogging — The Trac logging facility.
   * TracNotification — Email notification.
   * TracWorkflow — Configurable Ticket Workflow.
   * TracRepositoryAdmin — Management of Source Code Repositories.
 * [trac:TracFaq Trac FAQ] — A collection of Frequently Asked Questions (on the project website).
 * [trac:TracDev Trac Developer Documentation] — Developer documentation

== Support and Other Sources of Information ==
If you are looking for a good place to ask a question about Trac, look no further than the [http://trac.edgewall.org/wiki/MailingList MailingList]. It provides a friendly environment to discuss openly among Trac users and developers.

See also the TracSupport page for more information resources.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracIni',2,1309617955622000,'trac','127.0.0.1','= The Trac Configuration File =

[[TracGuideToc]]

Trac configuration is done by editing the ''''''`trac.ini`'''''' config file, located in `<projectenv>/conf/trac.ini`.  Changes to the configuration are usually reflected immediately, though changes to the `[components]` or `[logging]` sections will require restarting the web server. You may also need to restart the web server after creating a global configuration file when none was previously present.

The `trac.ini` configuration file should be writable by the web server, as Trac currently relies on the possibility to trigger a complete environment reload to flush its caches.

== Global Configuration ==

In versions prior to 0.11, the global configuration was by default located in `$prefix/share/trac/conf/trac.ini` or /etc/trac/trac.ini, depending on the distribution. If you''re upgrading, you may want to specify that file to inherit from.  Literally, when you''re upgrading to 0.11, you have to add an `[inherit]` section to your project''s `trac.ini` file. Additionally, you have to move your customized templates and common images from `$prefix/share/trac/...` to the new location.

Global options will be merged with the environment-specific options, where local options override global options. The options file is specified as follows:
{{{
[inherit]
file = /path/to/global/trac.ini
}}}
Multiple files can be specified using a comma-separated list.

Note that you can also specify a global option file when creating a new project,  by adding the option `--inherit=/path/to/global/trac.ini` to [TracAdmin#initenv trac-admin]''s `initenv` command.  If you do not do this but nevertheless intend to use a global option file with your new environment, you will have to go through the newly generated `conf/trac.ini` file and delete the entries that will otherwise override those set in the global file.

There are two more entries in the [[#inherit-section| [inherit] ]] section, `templates_dir` for sharing global templates and `plugins_dir`, for sharing plugins. Those entries can themselves be specified in the shared configuration file, and in fact, configuration files can even be chained if you specify another `[inherit] file` there.

Note that the templates found in the `templates/` directory of the TracEnvironment have precedence over those found in `[inherit] templates_dir`. In turn, the latter have precedence over the installed templates, so be careful about what you put there, notably if you override a default template be sure to refresh your modifications when you upgrade to a new version of Trac (the preferred way to perform TracInterfaceCustomization being still to write a custom plugin doing an appropriate `ITemplateStreamFilter` transformation).

== Reference for settings

This is a brief reference of available configuration options, and their default settings.

[[TracIni]]

== Reference for special sections
[[PageOutline(3,,inline)]]

=== [components] === #components-section
This section is used to enable or disable components provided by plugins, as well as by Trac itself. The component to enable/disable is specified via the name of the option. Whether its enabled is determined by the option value; setting the value to `enabled` or `on` will enable the component, any other value (typically `disabled` or `off`) will disable the component.

The option name is either the fully qualified name of the components or the module/package prefix of the component. The former enables/disables a specific component, while the latter enables/disables any component in the specified package/module.

Consider the following configuration snippet:
{{{
[components]
trac.ticket.report.ReportModule = disabled
webadmin.* = enabled
}}}

The first option tells Trac to disable the [wiki:TracReports report module]. The second option instructs Trac to enable all components in the `webadmin` package. Note that the trailing wildcard is required for module/package matching.

See the ''''Plugins'''' page on ''''About Trac'''' to get the list of active components (requires `CONFIG_VIEW` [wiki:TracPermissions permissions].)

See also: TracPlugins

=== [milestone-groups] === #milestone-groups-section
''''(since 0.11)''''

As the workflow for tickets is now configurable, there can be many ticket states,
and simply displaying closed tickets vs. all the others is maybe not appropriate 
in all cases. This section enables one to easily create ''''groups'''' of states 
that will be shown in different colors in the milestone progress bar.

Example configuration (the default only has closed and active):
{{{
closed = closed
# sequence number in the progress bar
closed.order = 0
# optional extra param for the query (two additional columns: created and modified and sort on created)
closed.query_args = group=resolution,order=time,col=id,col=summary,col=owner,col=type,col=priority,col=component,col=severity,col=time,col=changetime
# indicates groups that count for overall completion percentage
closed.overall_completion = true

new = new
new.order = 1
new.css_class = new
new.label = new

# one catch-all group is allowed
active = *
active.order = 2
# CSS class for this interval
active.css_class = open
# Displayed label for this group
active.label = in progress
}}}

The definition consists in a comma-separated list of accepted status.
Also, ''*'' means any status and could be used to associate all remaining
states to one catch-all group.

The CSS class can be one of: new (yellow), open (no color) or
closed (green). New styles can easily be added using the following
selector:  `table.progress td.<class>`

=== [repositories] === #repositories-section

(''''since 0.12'''' multirepos)

One of the alternatives for registering new repositories is to populate the `[repositories]` section of the trac.ini.

This is especially suited for setting up convenience aliases, short-lived repositories, or during the initial phases of an installation.

See [TracRepositoryAdmin#Intrac.ini TracRepositoryAdmin] for details about the format adopted for this section and the rest of that page for the other alternatives.

=== [svn:externals] === #svn:externals-section
''''(since 0.11)''''

The TracBrowser for Subversion can interpret the `svn:externals` property of folders.
By default, it only turns the URLs into links as Trac can''t browse remote repositories.

However, if you have another Trac instance (or an other repository browser like [http://www.viewvc.org/ ViewVC]) configured to browse the target repository, then you can instruct Trac which other repository browser to use for which external URL.

This mapping is done in the `[svn:externals]` section of the TracIni

Example:
{{{
[svn:externals]
1 = svn://server/repos1                       http://trac/proj1/browser/$path?rev=$rev
2 = svn://server/repos2                       http://trac/proj2/browser/$path?rev=$rev
3 = http://theirserver.org/svn/eng-soft       http://ourserver/viewvc/svn/$path/?pathrev=25914
4 = svn://anotherserver.com/tools_repository  http://ourserver/tracs/tools/browser/$path?rev=$rev
}}}
With the above, the `svn://anotherserver.com/tools_repository/tags/1.1/tools` external will be mapped to `http://ourserver/tracs/tools/browser/tags/1.1/tools?rev=` (and `rev` will be set to the appropriate revision number if the external additionally specifies a revision, see the [http://svnbook.red-bean.com/en/1.4/svn.advanced.externals.html SVN Book on externals] for more details).

Note that the number used as a key in the above section is purely used as a place holder, as the URLs themselves can''t be used as a key due to various limitations in the configuration file parser.

Finally, the relative URLs introduced in [http://subversion.tigris.org/svn_1.5_releasenotes.html#externals Subversion 1.5] are not yet supported.

=== [ticket-custom] === #ticket-custom-section

In this section, you can define additional fields for tickets. See TracTicketsCustomFields for more details.

=== [ticket-workflow] === #ticket-workflow-section
''''(since 0.11)''''

The workflow for tickets is controlled by plugins. 
By default, there''s only a `ConfigurableTicketWorkflow` component in charge. 
That component allows the workflow to be configured via this section in the trac.ini file.
See TracWorkflow for more details.

----
See also: TracGuide, TracAdmin, TracEnvironment
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracInstall',2,1309617955632000,'trac','127.0.0.1','= Trac Installation Guide for 0.12 = 
[[TracGuideToc]]

Trac is written in the Python programming language and needs a database, [http://sqlite.org/ SQLite], [http://www.postgresql.org/ PostgreSQL], or [http://mysql.com/ MySQL]. For HTML rendering, Trac uses the [http://genshi.edgewall.org Genshi] templating system.

Since version 0.12, Trac can also be localized, and there''s probably a translation available for your language. If you want to be able to use the Trac interface in other languages, then make sure you **first** have installed the optional package [#OtherPythonPackages Babel]. Lacking Babel, you will only get the default english version, as usual. If you install Babel later on, you will need to re-install Trac.

If you''re interested in contributing new translations for other languages or enhance the existing translations, then please have a look at [trac:wiki:TracL10N TracL10N].

What follows are generic instructions for installing and setting up Trac and its requirements. While you may find instructions for installing Trac on specific systems at TracInstallPlatforms on the main Trac site, please be sure to ''''''first read through these general instructions'''''' to get a good understanding of the tasks involved.

[[PageOutline(2-3,Installation Steps,inline)]]

== Dependencies ==
=== Mandatory Dependencies
To install Trac, the following software packages must be installed:

 * [http://www.python.org/ Python], version >= 2.4 and < 3.0
   (note that we dropped the support for Python 2.3 in this release)
 * [http://peak.telecommunity.com/DevCenter/setuptools setuptools], version >= 0.6
 * [http://genshi.edgewall.org/wiki/Download Genshi], version >= 0.6

You also need a database system and the corresponding python bindings.
The database can be either SQLite, PostgreSQL or MySQL.

==== For the SQLite database #ForSQLite

If you''re using Python 2.5 or 2.6, you already have everything you need.

If you''re using Python 2.4 and need pysqlite, you can download from 
[http://code.google.com/p/pysqlite/downloads/list google code] the Windows installers or the tar.gz archive for building from source: 
{{{
$ tar xvfz <version>.tar.gz 
$ cd <version> 
$ python setup.py build_static install 
}}}
 
This will extract the SQLite code and build the bindings. 

To install SQLite, your system may require the development headers. Without these you will get various GCC related errors when attempting to build:

{{{
$ apt-get install libsqlite3-dev
}}}

SQLite 2.x is no longer supported, and neither is !PySqlite 1.1.x.

A known bug !PySqlite versions 2.5.2-4 prohibits upgrade of trac databases
from 0.11.x to 0.12. Please use versions 2.5.5 and newer or 2.5.1 and
older. See [trac:#9434] for more detail.

See additional information in [trac:PySqlite].

==== For the PostgreSQL database #ForPostgreSQL

You need to install the database and its Python bindings:
 * [http://www.postgresql.org/ PostgreSQL], version 8.0 or later
 * [http://pypi.python.org/pypi/psycopg2 psycopg2]

See [trac:DatabaseBackend#Postgresql DatabaseBackend] for details.


==== For the MySQL database #ForMySQL

Trac can now work quite well with MySQL, provided you follow the guidelines.

 * [http://mysql.com/ MySQL], version 5.0 or later
 * [http://sf.net/projects/mysql-python MySQLdb], version 1.2.2 or later

It is ''''''very'''''' important to read carefully the  [trac:MySqlDb] page before creating the database.

=== Optional Dependencies

==== Version Control System ====

===== Subversion =====
 * [http://subversion.apache.org/ Subversion], 1.5.x or 1.6.x and the ''''''''''corresponding'''''''''' Python bindings. Older versions starting from 1.4.0, etc. should still work. For troubleshooting information, check the [trac:TracSubversion#Troubleshooting TracSubversion] page. Versions prior to 1.4.0 won''t probably work since trac uses svn core functionality (e.g. svn_path_canonicalize) that is not implemented in the python swig wrapper in svn <= 1.3.x (although it exists in the svn lib itself).

There are [http://subversion.apache.org/packages.html pre-compiled SWIG bindings] available for various platforms. (Good luck finding precompiled SWIG bindings for any Windows package at that listing. TracSubversion points you to [http://alagazam.net Algazam], which works for me under Python 2.6.)

Note that Trac ''''''doesn''t'''''' use [http://pysvn.tigris.org/ PySVN], neither does it work yet with the newer `ctype`-style bindings. [Is there a ticket for implementing ctype bindings?]


''''''Please note:'''''' if using Subversion, Trac must be installed on the ''''''same machine''''''. Remote repositories are currently [trac:ticket:493 not supported].


===== Others =====

Support for other version control systems is provided via third-parties. See [trac:PluginList] and [trac:VersioningSystemBackend].

==== Web Server ====
A web server is optional because Trac is shipped with a server included, see the [#RunningtheStandaloneServer Running the Standalone Server ] section below.

Alternatively you configure Trac to run in any of the following environments.
 * [http://httpd.apache.org/ Apache] with 
   - [http://code.google.com/p/modwsgi/ mod_wsgi], see [wiki:TracModWSGI] and 
     http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac
   - [http://modpython.org/ mod_python 3.3.1], deprecated: see TracModPython)
 * a [http://www.fastcgi.com/ FastCGI]-capable web server (see TracFastCgi)
 * an [http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html AJP]-capable web
   server (see [trac:TracOnWindowsIisAjp])
 * a CGI-capable web server (see TracCgi), ''''''but usage of Trac as a cgi script 
   is highly discouraged'''''', better use one of the previous options. 
   

==== Other Python Packages ====

 * [http://babel.edgewall.org Babel], version >= 0.9.5, 
   needed for localization support[[BR]]
   ''''Note: '''' If you want to be able to use the Trac interface in other languages, then make sure you first have installed the optional package Babel. Lacking Babel, you will only get the default english version, as usual. If you install Babel later on, you will need to re-install Trac. 
 * [http://docutils.sourceforge.net/ docutils], version >= 0.3.9 
   for WikiRestructuredText.
 * [http://pygments.pocoo.org Pygments] for 
   [wiki:TracSyntaxColoring syntax highlighting].
   [http://silvercity.sourceforge.net/ SilverCity] and/or 
   [http://gnu.org/software/enscript/enscript.html Enscript] may still be used
   but are deprecated and you really should be using Pygments.
 * [http://pytz.sf.net pytz] to get a complete list of time zones,
   otherwise Trac will fall back on a shorter list from 
   an internal time zone implementation.

''''''Attention'''''': The various available versions of these dependencies are not necessarily interchangable, so please pay attention to the version numbers above. If you are having trouble getting Trac to work please double-check all the dependencies before asking for help on the [trac:MailingList] or [trac:IrcChannel].

Please refer to the documentation of these packages to find out how they are best installed. In addition, most of the [trac:TracInstallPlatforms platform-specific instructions] also describe the installation of the dependencies. Keep in mind however that the information there ''''probably concern older versions of Trac than the one you''re installing'''' (there are even some pages that are still talking about Trac 0.8!).


== Installing Trac ==
=== Using `easy_install`
One way to install Trac is using [http://pypi.python.org/pypi/setuptools setuptools].
With setuptools you can install Trac from the subversion repository; 

A few examples:

 - first install of the latest stable version Trac 0.12.1, with i18n support:
   {{{
   easy_install Babel==0.9.5 Genshi==0.6
   easy_install Trac
   }}}
   ''''It''s very important to run the two `easy_install` commands separately, otherwise the message catalogs won''t be generated.''''

 - upgrade to the latest stable version of Trac:
   {{{
   easy_install -U Trac
   }}}

 - upgrade to the latest trunk development version (0.13dev):
   {{{
   easy_install -U Trac==dev
   }}}

For upgrades, reading the TracUpgrade page is mandatory, of course.

=== From source
If you want more control, you can download the source in archive form, or do a checkout from one of the official [[Trac:TracRepositories|source code repositories]].

Be sure to have the prerequisites already installed. You can also obtain the Genshi and Babel source packages from http://www.edgewall.org and follow for them a similar installation procedure, or you can just easy_install those, see [#Usingeasy_install above].

Once you''ve unpacked the Trac archive or performed the checkout, move in the top-level folder and do:
{{{
$ python ./setup.py install
}}}

''''You''ll need root permissions or equivalent for this step.''''

This will byte-compile the python source code and install it as an .egg file or folder in the `site-packages` directory
of your Python installation. The .egg will also contain all other resources needed by standard Trac, such as htdocs and templates.

The script will also install the [wiki:TracAdmin trac-admin] command-line tool, used to create and maintain [wiki:TracEnvironment project environments], as well as the [wiki:TracStandalone tracd] standalone server.

If you install from source and want to make Trac available in other languages, make sure  Babel is installed. Only then, perform the `install` (or simply redo the `install` once again afterwards if you realize Babel was not yet installed):
{{{
$ python ./setup.py install
}}}
Alternatively, you can do a `bdist_egg` and copy the .egg from dist/ to the place of your choice, or you can create a Windows installer (`bdist_wininst`).

=== Advanced Options ===

To install Trac to a custom location, or find out about other advanced installation options, run:
{{{
easy_install --help
}}}

Also see [http://docs.python.org/inst/inst.html Installing Python Modules] for detailed information.

Specifically, you might be interested in:
{{{
easy_install --prefix=/path/to/installdir
}}}
or, if installing Trac to a Mac OS X system:
{{{
easy_install --prefix=/usr/local --install-dir=/Library/Python/2.5/site-packages
}}}
Note: If installing on Mac OS X 10.6 running {{{ easy_install http://svn.edgewall.org/repos/trac/trunk }}} will install into {{{ /usr/local }}} and {{{ /Library/Python/2.6/site-packages }}} by default

The above will place your `tracd` and `trac-admin` commands into `/usr/local/bin` and will install the Trac libraries and dependencies into `/Library/Python/2.5/site-packages`, which is Apple''s preferred location for third-party Python application installations.

=== Using `pip`
''pip'' is an easy_install replacement that is very useful to quickly install python packages.
To get a trac installation up and running in less than 5 minutes:

Assuming you want to have your entire pip installation in /opt/user/trac:

 - 
{{{
pip -E /opt/user/trac install trac psycopg2 
}}}
or
 - 
{{{
pip -E /opt/user/trac install trac mysql-python 
}}}

Make sure your OS specific headers are available for pip to automatically build PostgreSQL (libpq-dev) or MySQL (libmysqlclient-dev) bindings.

pip will automatically resolve all dependencies (like Genshi, pygments, etc.) and download the latest packages on pypi.python.org and create a self contained installation in /opt/user/trac .

All commands (tracd, trac-admin) are available in /opt/user/trac/bin. This can also be leveraged for mod_python (using !PythonHandler directive) and mod_wsgi (using WSGIDaemonProcess directive)

Additionally, you can install several trac plugins (listed [http://pypi.python.org/pypi?:action=search&term=trac&submit=search here]) through pip.



== Creating a Project Environment ==

A [TracEnvironment Trac environment] is the backend storage where Trac stores information like wiki pages, tickets, reports, settings, etc. An environment is basically a directory that contains a human-readable [TracIni configuration file], and various other files and directories.

A new environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ trac-admin /path/to/myproject initenv
}}}

[TracAdmin trac-admin] will prompt you for the information it needs to create the environment, such as the name of the project and the [TracEnvironment#DatabaseConnectionStrings database connection string]. If you''re not sure what to specify for one of these options, just press `<Enter>` to use the default value. 

Using the default database connection string in particular will always work as long as you have SQLite installed.
For the other [DatabaseBackend database backends] you should plan ahead and already have a database ready to use at this point.

Since 0.12, Trac doesn''t ask for a [TracEnvironment#SourceCodeRepository source code repository] anymore when creating an environment. Repositories can be [TracRepositoryAdmin added] afterward, or the version control support can be disabled completely if you don''t need it.

Also note that the values you specify here can be changed later by directly editing the [TracIni conf/trac.ini] configuration file.

Finally, make sure the user account under which the web front-end runs will have ''''''write permissions'''''' to the environment directory and all the files inside. This will be the case if you run `trac-admin ... initenv` as this user. If not, you should set the correct user afterwards. For example on Linux, with the web server running as user `apache` and group `apache`, enter:
{{{
# chown -R apache.apache /path/to/myproject
}}}

{{{#!div class=important
''''''Warning:'''''' Please only use ASCII-characters for account name and project path, unicode characters are not supported there.
}}}


== Running the Standalone Server ==

After having created a Trac environment, you can easily try the web interface by running the standalone server [wiki:TracStandalone tracd]:
{{{
$ tracd --port 8000 /path/to/myproject
}}}

Then, fire up a browser and visit `http://localhost:8000/`. You should get a simple listing of all environments that `tracd` knows about. Follow the link to the environment you just created, and you should see Trac in action. If you only plan on managing a single project with Trac you can have the standalone server skip the environment list by starting it like this:
{{{
$ tracd -s --port 8000 /path/to/myproject
}}}

== Running Trac on a Web Server ==

Trac provides various options for connecting to a "real" web server: [wiki:TracCgi CGI], [wiki:TracFastCgi FastCGI], [wiki:TracModWSGI mod_wsgi] and [wiki:TracModPython mod_python]. For decent performance, it is recommended that you use either FastCGI or mod_wsgi.

Trac also supports [trac:TracOnWindowsIisAjp AJP] which may be your choice if you want to connect to IIS.

==== Generating the Trac cgi-bin directory ====

In order for Trac to function properly with FastCGI you need to have a `trac.fcgi` file and for mod_wsgi a `trac.wsgi` file. These are Python scripts which load the appropriate Python code. They can be generated using the `deploy` option of [wiki:TracAdmin trac-admin].

There is, however, a bit of a chicken-and-egg problem. The [wiki:TracAdmin trac-admin] command requires an existing environment to function, but complains if the deploy directory already exists. This is a problem, because environments are often stored in a subdirectory of the deploy. The solution is to do something like this:
{{{
mkdir -p /usr/share/trac/projects/my-project
trac-admin /usr/share/trac/projects/my-project initenv
trac-admin /usr/share/trac/projects/my-project deploy /tmp/deploy
mv /tmp/deploy/* /usr/share/trac
}}}

==== Setting up the Plugin Cache ====

Some Python plugins need to be extracted to a cache directory. By default the cache resides in the home directory of the current user. When running Trac on a Web Server as a dedicated user (which is highly recommended) who has no home directory, this might prevent the plugins from starting. To override the cache location you can set the PYTHON_EGG_CACHE environment variable. Refer to your server documentation for detailed instructions on how to set environment variables.

== Configuring Authentication ==

The process of adding, removing, and configuring user accounts for authentication depends on the specific way you run Trac. The basic procedure is described in the [wiki:TracCgi#AddingAuthentication "Adding Authentication"] section on the TracCgi page. To learn how to setup authentication for the frontend you''re using, please refer to one of the following pages:

 * TracStandalone if you use the standalone server, `tracd`.
 * TracCgi if you use the CGI or FastCGI web front ends.
 * [wiki:TracModWSGI] if you use the Apache mod_wsgi web front end.
 * TracModPython if you use the Apache mod_python web front end.


== Automatic reference to the SVN changesets in Trac tickets ==

You can configure SVN to automatically add a reference to the changeset into the ticket comments, whenever changes are committed to the repository. The description of the commit needs to contain one of the following formulas:
 * ''''''`Refs #123`'''''' - to reference this changeset in `#123` ticket
 * ''''''`Fixes #123`'''''' - to reference this changeset and close `#123` ticket with the default status ''''fixed''''

This functionality requires a post-commit hook to be installed as described in [wiki:TracRepositoryAdmin#ExplicitSync TracRepositoryAdmin], and enabling the optional commit updater components by adding the following line to the `[components]` section of your [wiki:TracIni#components-section trac.ini], or enabling the components in the "Plugins" admin panel.
{{{
tracopt.ticket.commit_updater.* = enabled
}}}
For more information, see the documentation of the `CommitTicketUpdater` component in the "Plugins" admin panel.

== Using Trac ==

Once you have your Trac site up and running, you should be able to create tickets, view the timeline, browse your version control repository if configured, etc.

Keep in mind that anonymous (not logged in) users can by default access most but not all of the features. You will need to configure authentication and grant additional [wiki:TracPermissions permissions] to authenticated users to see the full set of features.

'''' Enjoy! ''''

[trac:TracTeam The Trac Team]

----
See also: [trac:TracInstallPlatforms TracInstallPlatforms], TracGuide, TracCgi, TracFastCgi, TracModPython, [wiki:TracModWSGI], TracUpgrade, TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracInterfaceCustomization',2,1309617955652000,'trac','127.0.0.1','= Customizing the Trac Interface =
[[TracGuideToc]]

== Introduction ==
This page is meant to give users suggestions on how they can customize the look of Trac.  Topics on this page cover editing the HTML templates and CSS files, but not the program code itself.  The topics are intended to show users how they can modify the look of Trac to meet their specific needs.  Suggestions for changes to Trac''s interface applicable to all users should be filed as tickets, not listed on this page.

== Project Logo and Icon ==
The easiest parts of the Trac interface to customize are the logo and the site icon.  Both of these can be configured with settings in [wiki:TracIni trac.ini].

The logo or icon image should be put in a folder named "htdocs" in your project''s environment folder.  (''''Note: in projects created with a Trac version prior to 0.9 you will need to create this folder'''')

 ''''Note: you can actually put the logo and icon anywhere on your server (as long as it''s accessible through the web server), and use their absolute or server-relative URLs in the configuration.''''

Now configure the appropriate section of your [wiki:TracIni trac.ini]:

=== Logo ===
Change the `src` setting to `site/` followed by the name of your image file.  The `width` and `height` settings should be modified to match your image''s dimensions (the Trac chrome handler uses "`site/`" for files within the project directory `htdocs` and "`common/`" for the common ones). Note that ''site/'' is not a placeholder for your project name, it is the actual prefix that should be used (literally). For example, if your project is named ''sandbox'', and the image file is ''red_logo.gif'' then the ''src'' setting would be ''site/red_logo.gif'', not ''sandbox/red_logo.gif''.

{{{
[header_logo]
src = site/my_logo.gif
alt = My Project
width = 300
height = 100
}}}

=== Icon ===
Icons should be a 16x16 image in `.gif` or `.ico` format.  Change the `icon` setting to `site/` followed by the name of your icon file.  Icons will typically be displayed by your web browser next to the site''s URL and in the `Bookmarks` menu.

{{{
[project]
icon = site/my_icon.ico
}}}

Note though that this icon is ignored by Internet Explorer, which only accepts a file named ``favicon.ico`` at the root of the host. To make the project icon work in both IE and other browsers, you can store the icon in the document root of the host, and reference it from ``trac.ini`` as follows:

{{{
[project]
icon = /favicon.ico
}}}

Should your browser have issues with your favicon showing up in the address bar, you may put a "?" (less the quotation marks) after your favicon file extension. 

{{{
[project]
icon = /favicon.ico?
}}}

== Custom Navigation Entries ==
The new [mainnav] and [metanav] can now be used to customize the text and link used for the navigation items, or even to disable them (but not for adding new ones).

In the following example, we rename the link to the Wiki start "Home", and hide the "Help/Guide". We also make the "View Tickets" entry link to a specific report .
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24

[metanav]
help = disabled
}}}

See also TracNavigation for a more detailed explanation of the mainnav and metanav terms.

== Site Appearance == #SiteAppearance

Trac is using [http://genshi.edgewall.org Genshi] as the templating engine. Documentation is yet to be written, in the meantime the following tip should work.

Say you want to add a link to a custom stylesheet, and then your own
header and footer. Save the following content as ''site.html'' inside your projects templates directory (each Trac project can have their own site.html), e.g. {{{/path/to/env/templates/site.html}}}:

{{{
#!xml
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      py:strip="">

  <!--! Add site-specific style sheet -->
  <head py:match="head" py:attrs="select(''@*'')">
    ${select(''*|comment()|text()'')}
    <link rel="stylesheet" type="text/css"
          href="${href.chrome(''site/style.css'')}" />
  </head>

  <body py:match="body" py:attrs="select(''@*'')">
    <!--! Add site-specific header -->
    <div id="siteheader">
      <!--! Place your header content here... -->
    </div>

    ${select(''*|text()'')}

    <!--! Add site-specific footer -->
    <div id="sitefooter">
      <!--! Place your footer content here... -->
    </div>
  </body>
</html>
}}}

Those who are familiar with XSLT may notice that Genshi templates bear some similarities. However, there are some Trac specific features - for example ''''''${href.chrome(''site/style.css'')}'''''' attribute references template placed into environment''s ''''htdocs/''''  In a similar fashion ''''''${chrome.htdocs_location}'''''' is used to specify common ''''htdocs/'''' directory from Trac installation.

`site.html` is one file to contain all your modifications. It usually works by the py:match (element or attribute), and it allows you to modify the page as it renders - the matches hook onto specific sections depending on what it tries to find
and modify them.
See [http://groups.google.com/group/trac-users/browse_thread/thread/70487fb2c406c937/ this thread] for a detailed explanation of the above example `site.html`.
A site.html can contain any number of such py:match sections for whatever you need to modify. This is all [http://genshi.edgewall.org/ Genshi], so the docs on the exact syntax can be found there.


Example snippet of adding introduction text to the new ticket form (hide when preview):

{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)">
    <p>Please make sure to search for existing tickets before reporting a new one!</p>
  </py:if>
  ${select(''*'')} 
</form>
}}}

This example illustrates a technique of using ''''''`req.environ[''PATH_INFO'']`'''''' to limit scope of changes to one view only. For instance, to make changes in site.html only for timeline and avoid modifying other sections - use  ''''`req.environ[''PATH_INFO''] == ''/timeline''`'''' condition in <py:if> test.

More examples snippets for `site.html` can be found at [trac:wiki:CookBook/SiteHtml CookBook/SiteHtml].

Example snippets for `style.css` can be found at [trac:wiki:CookBook/SiteStyleCss CookBook/SiteStyleCss].

If the environment is upgraded from 0.10 and a `site_newticket.cs` file already exists, it can actually be loaded by using a workaround - providing it contains no ClearSilver processing. In addition, as only one element can be imported, the content needs some sort of wrapper such as a `<div>` block or other similar parent container. The XInclude namespace must be specified to allow includes, but that can be moved to document root along with the others:
{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')"
        xmlns:xi="http://www.w3.org/2001/XInclude">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)"> 
    <xi:include href="site_newticket.cs"><xi:fallback /></xi:include>
  </py:if>
  ${select(''*'')} 
</form>
}}}

Also note that the `site.html` (despite its name) can be put in a common templates directory - see the `[inherit] templates_dir` option. This could provide easier maintainence (and a migration path from 0.10 for larger installations) as one new global `site.html` file can be made to include any existing header, footer and newticket snippets.

== Project List == #ProjectList

You can use a custom Genshi template to display the list of projects if you are using Trac with multiple projects.  

The following is the basic template used by Trac to display a list of links to the projects.  For projects that could not be loaded it displays an error message. You can use this as a starting point for your own index template.

{{{
#!text/html
<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <head>
    <title>Available Projects</title>
  </head>
  <body>
    <h1>Available Projects</h1>
    <ul>
      <li py:for="project in projects" py:choose="">
        <a py:when="project.href" href="$project.href"
           title="$project.description">$project.name</a>
        <py:otherwise>
          <small>$project.name: <em>Error</em> <br /> ($project.description)</small>
        </py:otherwise>
      </li>
    </ul>
  </body>
</html>
}}}

Once you''ve created your custom template you will need to configure the webserver to tell Trac where the template is located (pls verify ... not yet changed to 0.11):

For [wiki:TracModWSGI mod_wsgi]:
{{{
os.environ[''TRAC_ENV_INDEX_TEMPLATE''] = ''/path/to/template''
}}}

For [wiki:TracFastCgi FastCGI]:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects \
              -initial-env TRAC_ENV_INDEX_TEMPLATE=/path/to/template
}}}

For [wiki:TracModPython mod_python]:
{{{
PythonOption TracEnvParentDir /parent/dir/of/projects
PythonOption TracEnvIndexTemplate /path/to/template
}}}

For [wiki:TracCgi CGI]:
{{{
SetEnv TRAC_ENV_INDEX_TEMPLATE /path/to/template
}}}

For [wiki:TracStandalone], you''ll need to set up the `TRAC_ENV_INDEX_TEMPLATE` environment variable in the shell used to launch tracd:
 - Unix
   {{{
#!sh
$ export TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}
 - Windows
   {{{
#!sh
$ set TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}

== Project Templates ==

The appearance of each individual Trac environment (that is, instance of a project) can be customized independently of other projects, even those hosted by the same server. The recommended way is to use a `site.html` template (see [#SiteAppearance]) whenever possible. Using `site.html` means changes are made to the original templates as they are rendered, and you should not normally need to redo modifications whenever Trac is upgraded. If you do make a copy of `theme.html` or any other Trac template, you need to migrate your modifiations to the newer version - if not, new Trac features or bug fixes may not work as expected.

With that word of caution, any Trac template may be copied and customized. The default Trac templates are located inside the installed Trac egg (`/usr/lib/pythonVERSION/site-packages/Trac-VERSION.egg/trac/templates, .../trac/ticket/templates, .../trac/wiki/templates, ++`). The [#ProjectList] template file is called `index.html`, while the template responsible for main layout is called `theme.html`. Page assets such as images and CSS style sheets are located in the egg''s `trac/htdocs` directory.

However, do not edit templates or site resources inside the Trac egg - installing Trac again can completely delete your modifications. Instead use one of two alternatives:
 * For a modification to one project only, copy the template to project `templates` directory.
 * For a modification shared by several projects, copy the template to a shared location and have each project point to this location using the `[inherit] templates_dir =` trac.ini option.

Trac resolves requests for a template by first looking inside the project, then in any inherited templates location, and finally inside the Trac egg.

Trac caches templates in memory by default to improve performance. To apply a template you need to restart the server.

----
See also TracGuide, TracIni
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracLinks',2,1309617955672000,'trac','127.0.0.1','= Trac Links =
[[TracGuideToc]]

TracLinks are a fundamental feature of Trac, because they allow easy hyperlinking between the various entities in the system—such as tickets, reports, changesets, Wiki pages, milestones, and source files—from anywhere WikiFormatting is used.

TracLinks are generally of the form ''''''type:id'''''' (where ''''id'''' represents the
number, name or path of the item) though some frequently used kinds of items
also have short-hand notations.

== Where to use TracLinks ==
You can use TracLinks in:

 * Source code (Subversion) commit messages
 * Wiki pages
 * Full descriptions for tickets, reports and milestones

and any other text fields explicitly marked as supporting WikiFormatting.

== Overview ==

||= Wiki Markup =||= Display =||
{{{#!td
 Wiki pages :: `CamelCase` or `wiki:CamelCase`
 Parent page :: `[..]`
 Tickets :: `#1` or `ticket:1`
 Ticket comments :: `comment:1:ticket:2`
 Reports :: `{1}` or `report:1`
 Milestones :: `milestone:1.0`
 Attachment :: `attachment:example.tgz` (for current page attachment), `attachment:attachment.1073.diff:ticket:944` (absolute path)
 Changesets :: `r1`, `[1]`, `changeset:1` or (restricted) `[1/trunk]`, `changeset:1/trunk`
 Revision log :: `r1:3`, `[1:3]` or `log:@1:3`, `log:trunk@1:3`, `[2:5/trunk]`
 Diffs :: `diff:@1:3`, `diff:plugins/0.12/mercurial-plugin@9128:9953`,
          `diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` 
          or `diff:trunk/trac@3538//sandbox/vc-refactoring@3539`
 Files :: `source:trunk/COPYING`, `source:/trunk/COPYING@200` (at version 200), `source:/trunk/COPYING@200#L25` (at version 200, line 25)
}}}
{{{#!td
 Wiki pages :: CamelCase or wiki:CamelCase
 Parent page :: [..]
 Tickets :: #1 or ticket:1
 Ticket comments :: comment:1:ticket:2 
 Reports :: {1} or report:1
 Milestones :: milestone:1.0
 Attachment :: attachment:example.tgz (for current page attachment), attachment:attachment.1073.diff:ticket:944 (absolute path)
 Changesets :: r1, [1], changeset:1 or (restricted) [1/trunk], changeset:1/trunk
 Revision log :: r1:3, [1:3] or log:@1:3, log:trunk@1:3, [2:5/trunk]
 Diffs :: diff:@1:3, diff:plugins/0.12/mercurial-plugin@9128:9953,
          diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default 
          or diff:trunk/trac@3538//sandbox/vc-refactoring@3539
 Files :: source:trunk/COPYING, source:/trunk/COPYING@200 (at version 200), source:/trunk/COPYING@200#L25 (at version 200, line 25)
}}}

''''''Note:'''''' The wiki:CamelCase form is rarely used, but it can be convenient to refer to
pages whose names do not follow WikiPageNames rules, i.e., single words,
non-alphabetic characters, etc. See WikiPageNames for more about features specific
to links to Wiki page names.


{{{#!table class=""
|||| Trac links using the full (non-shorthand) notation can also be given a custom link title like this: ||
{{{#!td
{{{
[ticket:1 This is a link to ticket number one] or
[[ticket:1|This is another link to ticket number one]].
}}}
}}}
{{{#!td
[ticket:1 This is a link to ticket number one] or
[[ticket:1|This is another link to ticket number one]].
}}}
|--------------------------------------------------------------------------------------
|||| If the title is omitted, only the id (the part after the colon) is displayed:  ||
{{{#!td
{{{
[ticket:1] or [[ticket:2]]
}}}
}}}
{{{#!td
[ticket:1] or [[ticket:2]]
}}}
|--------------------------------------------------------------------------------------
|||| `wiki` is the default if the namespace part of a full link is omitted:  || 
{{{#!td
{{{
[SandBox the sandbox] or
[[SandBox|the sandbox]]
}}}
}}}
{{{#!td
[SandBox the sandbox] or
[[SandBox|the sandbox]]
}}}
|--------------------------------------------------------------------------------------
|||| The short form ''''realm:target'''' can also be wrapped within a <...> pair, [[br]] which allow for arbitrary characters (i.e. anything but >)  ||
{{{#!td
{{{
<wiki:Strange(page@!)>
}}}
}}}
{{{#!td
<wiki:Strange(page@!)>
}}}
}}}

TracLinks are a very simple idea, but actually allow quite a complex network of information. In practice, it''s very intuitive and simple to use, and we''ve found the "link trail" extremely helpful to better understand what''s happening in a project or why a particular change was made.


== Advanced use of TracLinks ==

=== Relative links ===

To create a link to a specific anchor in a page, use ''#'':
{{{
 [#Relativelinks relative links] or [[#Relativelinks|relative links]]
}}}
Displays:
  [#Relativelinks relative links] or [[#Relativelinks|relative links]]

Hint: when you move your mouse over the title of a section, a ''¶'' character will be displayed. This is a link to that specific section and you can use this to copy the `#...` part inside a relative link to an anchor.

To create a link to a [trac:SubWiki SubWiki]-page just use a ''/'':
{{{
 WikiPage/SubWikiPage or ./SubWikiPage
}}}

To link from a [trac:SubWiki SubWiki] page to a parent, simply use a ''..'':
{{{
  [..] or [[..]]
}}}
  [..] or [[..]]

To link from a [trac:SubWiki SubWiki] page to a [=#sibling sibling] page, use a ''../'':
{{{
  [../Sibling see next sibling] or [[../Sibling|see next sibling]]
}}}
  [../Sibling see next sibling] or [[../Sibling|see next sibling]]

But in practice you often won''t need to add the `../` prefix to link to a sibling page.
For resolving the location of a wiki link, it''s the target page closest in the hierarchy
to the page where the link is written which will be selected. So for example, within 
a sub-hierarchy, a sibling page will be targeted in preference to a toplevel page.
This makes it easy to copy or move pages to a sub-hierarchy by [[WikiNewPage#renaming|renaming]] without having to adapt the links.

In order to link explicitly to a [=#toplevel toplevel] Wiki page,
use the `wiki:/` prefix.
Be careful **not** to use the `/` prefix alone, as this corresponds to the
[#Server-relativelinks] syntax and with such a link you will lack the `/wiki/` 
part in the resulting URL.

''''(Changed in 0.11)'''' Note that in Trac 0.10, using e.g. `[../newticket]`  may have worked for linking to the `/newticket` top-level URL, but since 0.11, such a link will stay in the wiki namespace and therefore link to a sibling page. 
See [#Server-relativelinks] for the new syntax.

=== InterWiki links ===

Other prefixes can be defined freely and made to point to resources in other Web applications. The definition of those prefixes as well as the URLs of the corresponding Web applications is defined in a special Wiki page, the InterMapTxt page. Note that while this could be used to create links to other Trac environments, there''s a more specialized way to register other Trac environments which offers greater flexibility.

=== InterTrac links ===

This can be seen as a kind of InterWiki link specialized for targeting other Trac projects.

Any type of Trac link can be written in one Trac environment and actually refer to resources in another Trac environment. All that is required is to prefix the Trac link with the name of the other Trac environment followed by a colon. The other Trac environment must be registered on the InterTrac page. 

A distinctive advantage of InterTrac links over InterWiki links is that the shorthand form of Trac links (e.g. `{}`, `r`, `#`) can also be used. For example if T was set as an alias for Trac, links to Trac tickets can be written #T234, links to Trac changesets can be written [trac 1508].
See InterTrac for the complete details. 

=== Server-relative links ===

It is often useful to be able to link to objects in your project that
have no built-in Trac linking mechanism, such as static resources, `newticket`,
a shared `/register` page on the server, etc.

To link to resources inside the project, use either an absolute path from the project root, 
or a relative link from the URL of the current page (''''Changed in 0.11''''):

{{{
[/newticket Create a new ticket] or [[//newticket|Create a new ticket]]
[/ home] or [[/|home]]
}}}

Display: [/newticket Create a new ticket] or [[//newticket|Create a new ticket]]
[/ home] or [[/|home]]

To link to another location on the server (possibly outside the project but on the same host), use the `//` prefix (''''Changed in 0.11''''):

{{{
[//register Register Here] or [[//register|Register Here]]
}}}

Display: [//register Register Here] or [[//register|Register Here]]

=== Quoting space in TracLinks ===

Immediately after a TracLinks prefix, targets containing space characters should
be enclosed in a pair of quotes or double quotes.
Examples:
 * !wiki:"The whitespace convention"
 * !attachment:''the file.txt'' or
 * !attachment:"the file.txt" 
 * !attachment:"the file.txt:ticket:123" 

Note that by using [trac:WikiCreole] style links, it''s quite natural to write links containing spaces:
 * ![[The whitespace convention]]
 * ![[attachment:the file.txt]]

=== Escaping Links ===

To prevent parsing of a !TracLink, you can escape it by preceding it with a ''!'' (exclamation mark).
{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

Display:
 !NoLinkHere.
 ![42] is not a link either.


=== Parameterized Trac links ===

Many Trac resources have more than one way to be rendered, depending on some extra parameters. For example, a Wiki page can accept a `version` or a `format` parameter, a report can make use of dynamic variables, etc.

Trac links can support an arbitrary set of parameters, written in the same way as they would be for the corresponding URL. Some examples:
 - `wiki:WikiStart?format=txt`
 - `ticket:1?version=1`
 - `[/newticket?component=module1 create a ticket for module1]`
 - `[/newticket?summary=Add+short+description+here create a ticket with URL with spaces]`


== TracLinks Reference ==
The following sections describe the individual link types in detail, as well as notes on advanced usage of links.

=== attachment: links ===

The link syntax for attachments is as follows:
 * !attachment:the_file.txt creates a link to the attachment the_file.txt of the current object
 * !attachment:the_file.txt:wiki:MyPage creates a link to the attachment the_file.txt of the !MyPage wiki page
 * !attachment:the_file.txt:ticket:753 creates a link to the attachment the_file.txt of the ticket 753

Note that the older way, putting the filename at the end, is still supported: !attachment:ticket:753:the_file.txt.

If you''d like to create a direct link to the content of the attached file instead of a link to the attachment page, simply use `raw-attachment:` instead of `attachment:`.

This can be useful for pointing directly to an HTML document, for example. Note that for this use case, you''d have to allow the web browser to render the content by setting `[attachment] render_unsafe_content = yes` (see TracIni#attachment-section). Caveat: only do that in environments for which you''re 100% confident you can trust the people who are able to attach files, as otherwise this would open up your site to [wikipedia:Cross-site_scripting cross-site scripting] attacks.

See also [#export:links].

=== comment: links ===

When you''re inside a given ticket, you can simply write e.g. !comment:3 to link to the third change comment.
It is possible to link to a comment of a specific ticket from anywhere using one of the following syntax:
 - `comment:3:ticket:123` 
 - `ticket:123#comment:3` (note that you can''t write `#123#!comment:3`!)
It is also possible to link to the ticket''s description using one of the following syntax:
 - `comment:description` (within the ticket)
 - `comment:description:ticket:123`
 - `ticket:123#comment:description`

=== query: links ===

See TracQuery#UsingTracLinks and [#ticket:links].

=== search: links ===

See TracSearch#SearchLinks 

=== ticket: links ===
 ''''alias:'''' `bug:`

Besides the obvious `ticket:id` form, it is also possible to specify a list of tickets or even a range of tickets instead of the `id`. This generates a link to a custom query view containing this fixed set of tickets.

Example: 
 - `ticket:5000-6000`
 - `ticket:1,150`

''''(since Trac 0.11)''''

=== timeline: links ===

Links to the timeline can be created by specifying a date in the ISO:8601 format. The date can be optionally followed by a time specification. The time is interpreted as being UTC time, but alternatively you can specify your local time, followed by your timezone if you don''t want to compute the UTC time.

Examples:
 - `timeline:2008-01-29`
 - `timeline:2008-01-29T15:48`
 - `timeline:2008-01-29T15:48Z`
 - `timeline:2008-01-29T16:48+01`

''''(since Trac 0.11)''''

=== wiki: links ===

See WikiPageNames and [#QuotingspaceinTracLinks quoting space in TracLinks] above.

=== Version Control related links ===

It should be noted that multiple repository support works by creating a kind of virtual namespace for versioned files in which the toplevel folders correspond to the repository names. Therefore, in presence of multiple repositories, a ''''/path'''' specification in the syntax of links detailed below should start with the name of the repository. If omitted, the default repository is used. In case a toplevel folder of the default repository has the same name as a repository, the latter "wins". One can always access such folder by fully qualifying it (the default repository can be an alias of a named repository, or conversely, it is always possible to create an alias for the default repository, ask your Trac administrator).

For example, `source:/trunk/COPYING` targets the path `/trunk/COPYING` in the default repository, whereas `source:/projectA/trunk/COPYING` targets the path `/trunk/COPYING` in the repository named `projectA`. This can be the same file if `''projectA''` is an alias to the default repository or if `''''` (the default repository) is an alias to `''projectA''`.

==== source: links ====
 ''''aliases:'''' `browser:`, `repos:`

The default behavior for a source:/some/path link is to open the browser in that directory directory 
if the path points to a directory or to show the latest content of the file.

It''s also possible to link directly to a specific revision of a file like this:
 - `source:/some/file@123` - link to the file''s revision 123
 - `source:/some/file@head` - link explicitly to the latest revision of the file

If the revision is specified, one can even link to a specific line number:
 - `source:/some/file@123#L10`
 - `source:/tag/0.10@head#L10`

Finally, one can also highlight an arbitrary set of lines:
 - `source:/some/file@123:10-20,100,103#L99` - highlight lines 10 to 20, and lines 100 and 103.
   ''''(since 0.11)''''

Note that in presence of multiple repositories, the name of the repository is simply integrated in the path you specify for `source:` (e.g. `source:reponame/trunk/README`). ''''(since 0.12)''''

==== export: links ====

To force the download of a file in the repository, as opposed to displaying it in the browser, use the `export` link.  Several forms are available:
 * `export:/some/file` - get the HEAD revision of the specified file
 * `export:123:/some/file` - get revision 123 of the specified file
 * `export:/some/file@123` - get revision 123 of the specified file

This can be very useful for displaying XML or HTML documentation with correct stylesheets and images, in case that has been checked in into the repository. Note that for this use case, you''d have to allow the web browser to render the content by setting `[browser] render_unsafe_content = yes` (see TracIni#browser-section), otherwise Trac will force the files to be downloaded as attachments for security concerns. 

If the path is to a directory in the repository instead of a specific file, the source browser will be used to display the directory (identical to the result of `source:/some/dir`).

==== log: links ====

The `log:` links are used to display revision ranges. In its simplest form, it can link to the latest revisions of the specified path, but it can also support displaying an arbitrary set of revisions.
 - `log:/` - the latest revisions starting at the root of the repository
 - `log:/trunk/tools` - the latest revisions in `trunk/tools`
 - `log:/trunk/tools@10000` - the revisions in `trunk/tools` starting from  revision 10000
 - `log:@20788,20791:20795` - list revision 20788 and the revisions from 20791 to 20795 
 - `log:/trunk/tools@20788,20791:20795` - list revision 20788 and the revisions from 20791 to 20795 which affect the given path

There are short forms for revision ranges as well:
 - `[20788,20791:20795]`
 - `[20788,20791:20795/trunk/tools]`
 - `r20791:20795` (but not `r20788,20791:20795` nor `r20791:20795/trunk`)

Finally, note that in all of the above, a revision range can be written either as `x:y` or `x-y`.

In the presence of multiple repositories, the name of the repository should be specified as the first part of the path, e.g. `log:repos/branches` or `[20-40/repos]`.

----
See also: WikiFormatting, TracWiki, WikiPageNames, InterTrac, InterWiki
 
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracModPython',2,1309617955692000,'trac','127.0.0.1','= Trac and mod_python =
[[TracGuideToc]]

Trac supports [http://www.modpython.org/ mod_python], which speeds up Trac''s response times considerably, especially compared to [TracCgi CGI], and permits use of many Apache features not possible with [wiki:TracStandalone tracd]/mod_proxy.

These instructions are for Apache 2; if you are still using Apache 1.3, you may have some luck with [trac:wiki:TracModPython2.7 TracModPython2.7].

== A Word of Warning ==

As of 16^th^ June 2010, the mod_python project is officially dead.  If you are considering using mod_python for a new installation, ''''''please don''t''''''!  There are known issues which will not be fixed and there are now better alternatives.  Check out the main TracInstall pages for your target version for more information.

== Simple configuration ==

If you just installed mod_python, you may have to add a line to load the module in the Apache configuration:
{{{
LoadModule python_module modules/mod_python.so
}}}

''''Note: The exact path to the module depends on how the HTTPD installation is laid out.''''

On Debian using apt-get
{{{
apt-get install libapache2-mod-python libapache2-mod-python-doc
}}}
(Still on Debian) after you have installed mod_python, you must enable the modules in apache2 (equivalent of the above Load Module directive):
{{{
a2enmod python
}}}
On Fedora use, using yum:
{{{
yum install mod_python
}}}
You can test your mod_python installation by adding the following to your httpd.conf.  You should remove this when you are done testing for security reasons. Note: mod_python.testhandler is only available in mod_python 3.2+.
{{{
#!xml
<Location /mpinfo>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler mod_python.testhandler
   Order allow,deny
   Allow from all
</Location>
}}}

A simple setup of Trac on mod_python looks like this:
{{{
#!xml
<Location /projects/myproject>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler trac.web.modpython_frontend 
   PythonOption TracEnv /var/trac/myproject
   PythonOption TracUriRoot /projects/myproject
   Order allow,deny
   Allow from all
</Location>
}}}

The option ''''''`TracUriRoot`'''''' may or may not be necessary in your setup. Try your configuration without it; if the URLs produced by Trac look wrong, if Trac does not seem to recognize URLs correctly, or you get an odd "No handler matched request to..." error, add the ''''''`TracUriRoot`'''''' option.  You will notice that the `Location` and ''''''`TracUriRoot`'''''' have the same path.

The options available are
{{{
    # For a single project
    PythonOption TracEnv /var/trac/myproject
    # For multiple projects
    PythonOption TracEnvParentDir /var/trac/myprojects
    # For the index of multiple projects
    PythonOption TracEnvIndexTemplate /srv/www/htdocs/trac/project_list_template.html
    # A space delimitted list, with a "," between key and value pairs.
    PythonOption TracTemplateVars key1,val1 key2,val2
    # Useful to get the date in the wanted order
    PythonOption TracLocale en_GB.UTF8
    # See description above        
    PythonOption TracUriRoot /projects/myproject
}}}

=== Python Egg Cache ===

Compressed python eggs like Genshi are normally extracted into a directory named `.python-eggs` in the users home directory. Since apache''s home usually is not writable an alternate egg cache directory can be specified like this:
{{{
PythonOption PYTHON_EGG_CACHE /var/trac/myprojects/egg-cache
}}}

or you can uncompress the Genshi egg to resolve problems extracting from it.
=== Configuring Authentication ===

Creating password files and configuring authentication works similar to the process for [wiki:TracCgi#AddingAuthentication CGI]:
{{{
#!xml
<Location /projects/myproject/login>
  AuthType Basic
  AuthName "myproject"
  AuthUserFile /var/trac/myproject/.htpasswd
  Require valid-user
</Location>
}}}

Configuration for mod_ldap authentication in Apache is a bit tricky (httpd 2.2.x and OpenLDAP: slapd 2.3.19)

1. You need to load the following modules in Apache httpd.conf
{{{
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
}}}

2. Your httpd.conf also needs to look something like:

{{{
#!xml
<Location /trac/>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend
  PythonOption TracEnv /home/trac/
  PythonOption TracUriRoot /trac/
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://127.0.0.1/dc=example,dc=co,dc=ke?uid?sub?(objectClass=inetOrgPerson)"
  authzldapauthoritative Off
  require valid-user
</Location>
}}}

Or the LDAP interface to a Microsoft Active Directory:

{{{
#!xml
<Location /trac/>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend
  PythonOption TracEnv /home/trac/
  PythonOption TracUriRoot /trac/
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://adserver.company.com:3268/DC=company,DC=com?sAMAccountName?sub?(objectClass=user)"
  AuthLDAPBindDN       ldap-auth-user@company.com
  AuthLDAPBindPassword "the_password"
  authzldapauthoritative Off
  # require valid-user
  require ldap-group CN=Trac Users,CN=Users,DC=company,DC=com
</Location>
}}}

Note 1: This is the case where the LDAP search will get around the multiple OUs, conecting to Global Catalog Server portion of AD (Notice the port is 3268, not the normal LDAP 389). The GCS is basically a "flattened" tree which allows searching for a user without knowing to which OU they belong.

Note 2: Active Directory requires an authenticating user/password to access records (AuthLDAPBindDN and AuthLDAPBindPassword).

Note 3: The directive "require ldap-group ..."  specifies an AD group whose members are allowed access.


=== Setting the Python Egg Cache ===

If the Egg Cache isn''t writeable by your Web server, you''ll either have to change the permissions, or point Python to a location where Apache can write. This can manifest itself as a ''''500 internal server error'''' and/or a complaint in the syslog. 

{{{
#!xml
<Location /projects/myproject>
  ...
  PythonOption PYTHON_EGG_CACHE /tmp 
  ...
</Location>
}}}


=== Setting the !PythonPath ===

If the Trac installation isn''t installed in your Python path, you''ll have to tell Apache where to find the Trac mod_python handler  using the `PythonPath` directive:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonPath "sys.path + [''/path/to/trac'']"
  ...
</Location>
}}}

Be careful about using the !PythonPath directive, and ''''not'''' `SetEnv PYTHONPATH`, as the latter won''t work.

== Setting up multiple projects ==

The Trac mod_python handler supports a configuration option similar to Subversion''s `SvnParentPath`, called `TracEnvParentDir`:
{{{
#!xml
<Location /projects>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend 
  PythonOption TracEnvParentDir /var/trac
  PythonOption TracUriRoot /projects
</Location>
}}}

When you request the `/projects` URL, you will get a listing of all subdirectories of the directory you set as `TracEnvParentDir` that look like Trac environment directories. Selecting any project in the list will bring you to the corresponding Trac environment.

If you don''t want to have the subdirectory listing as your projects home page you can use a
{{{
#!xml
<LocationMatch "/.+/">
}}}

This will instruct Apache to use mod_python for all locations different from root while having the possibility of placing a custom home page for root in your !DocumentRoot folder.

You can also use the same authentication realm for all of the projects using a `<LocationMatch>` directive:
{{{
#!xml
<LocationMatch "/projects/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /var/trac/.htpasswd
  Require valid-user
</LocationMatch>
}}}

== Virtual Host Configuration ==

Below is the sample configuration required to set up your trac as a virtual server (i.e. when you access it at the URLs like
!http://trac.mycompany.com):

{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    <Location />
        SetHandler mod_python
        PythonInterpreter main_interpreter
        PythonHandler trac.web.modpython_frontend
        PythonOption TracEnv /var/trac/myproject
        PythonOption TracUriRoot /
    </Location>
    <Location /login>
        AuthType Basic
        AuthName "MyCompany Trac Server"
        AuthUserFile /var/trac/myproject/.htpasswd
        Require valid-user
    </Location>
</VirtualHost>
}}}

This does not seem to work in all cases. What you can do if it does not:
 * Try using `<LocationMatch>` instead of `<Location>`
 * <Location /> may, in your server setup, refer to the complete host instead of simple the root of the server. This means that everything (including the login directory referenced below) will be sent to python and authentication does not work (i.e. you get the infamous Authentication information missing error). If this applies to you, try using a sub-directory for trac instead of the root (i.e. /web/ and /web/login instead of / and /login).
 * Depending on apache''s `NameVirtualHost` configuration, you may need to use `<VirtualHost *:80>` instead of `<VirtualHost *>`.

For a virtual host that supports multiple projects replace "`TracEnv`" /var/trac/myproject with "`TracEnvParentDir`" /var/trac/

Note: !DocumentRoot should not point to your Trac project env. As Asmodai wrote on #trac: "suppose there''s a webserver bug that allows disclosure of !DocumentRoot they could then leech the entire Trac environment".

== Troubleshooting ==

In general, if you get server error pages, you can either check the Apache error log, or enable the `PythonDebug` option:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonDebug on
</Location>
}}}

For multiple projects, try restarting the server as well.

=== Expat-related segmentation faults === #expat

This problem will most certainly hit you on Unix when using Python 2.4.
In Python 2.4, some version of Expat (an XML parser library written in C) is used, 
and if Apache is using another version, this results in segmentation faults.
As Trac 0.11 is using Genshi, which will indirectly use Expat, that problem
can now hit you even if everything was working fine before with Trac 0.10.

See Graham Dumpleton''s detailed [http://www.dscpl.com.au/wiki/ModPython/Articles/ExpatCausingApacheCrash explanation and workarounds] for the issue.

=== Form submission problems ===

If you''re experiencing problems submitting some of the forms in Trac (a common problem is that you get redirected to the start page after submission), check whether your {{{DocumentRoot}}} contains a folder or file with the same path that you mapped the mod_python handler to. For some reason, mod_python gets confused when it is mapped to a location that also matches a static resource.

=== Problem with virtual host configuration ===

If the <Location /> directive is used, setting the `DocumentRoot` may result in a ''''403 (Forbidden)'''' error. Either remove the `DocumentRoot` directive, or make sure that accessing the directory it points is allowed (in a corresponding `<Directory>` block).

Using <Location /> together with `SetHandler` resulted in having everything handled by mod_python, which leads to not being able download any CSS or images/icons. I used <Location /trac> `SetHandler None` </Location> to circumvent the problem, though I do not know if this is the most elegant solution.

=== Problem with zipped egg ===

It''s possible that your version of mod_python will not import modules from zipped eggs. If you encounter an `ImportError: No module named trac` in your Apache logs but you think everything is where it should be, this might be your problem. Look in your site-packages directory; if the Trac module appears as a ''''file'''' rather than a ''''directory'''', then this might be your problem. To rectify, try installing Trac using the `--always-unzip` option, like this:

{{{
easy_install --always-unzip Trac-0.12b1.zip
}}}

=== Using .htaccess ===

Although it may seem trivial to rewrite the above configuration as a directory in your document root with a `.htaccess` file, this does not work. Apache will append a "/" to any Trac URLs, which interferes with its correct operation.

It may be possible to work around this with mod_rewrite, but I failed to get this working. In all, it is more hassle than it is worth. Stick to the provided instructions. :)

A success story: For me it worked out-of-box, with following trivial config:
{{{
SetHandler mod_python
PythonInterpreter main_interpreter
PythonHandler trac.web.modpython_frontend 
PythonOption TracEnv /system/path/to/this/directory
PythonOption TracUriRoot /path/on/apache

AuthType Basic
AuthName "ProjectName"
AuthUserFile /path/to/.htpasswd
Require valid-user
}}}

The `TracUriRoot` is obviously the path you need to enter to the browser to get to the trac (e.g. domain.tld/projects/trac)

=== Additional .htaccess help ===

If you are using the .htaccess method you may have additional problems if your trac directory is inheriting .htaccess directives from another.  This may also help to add to your .htaccess file:

{{{
<IfModule mod_rewrite.c>
  RewriteEngine Off
</IfModule>
}}}


=== Win32 Issues ===
If you run trac with mod_python < 3.2 on Windows, uploading attachments will ''''''not'''''' work. This problem is resolved in mod_python 3.1.4 or later, so please upgrade mod_python to fix this.


=== OS X issues ===

When using mod_python on OS X you will not be able to restart Apache using `apachectl restart`. This is apparently fixed in mod_python 3.2, but there''s also a patch available for earlier versions [http://www.dscpl.com.au/projects/vampire/patches.html here].

=== SELinux issues ===

If Trac reports something like: ''''Cannot get shared lock on db.lock''''
The security context on the repository may need to be set:

{{{
chcon -R -h -t httpd_sys_content_t PATH_TO_REPOSITORY
}}}

See also [http://subversion.tigris.org/faq.html#reposperms]

=== FreeBSD issues ===
Pay attention to the version of the installed mod_python and sqlite packages. Ports have both the new and old ones, but earlier versions of pysqlite and mod_python won''t integrate as the former requires threaded support in python, and the latter requires a threadless install.

If you compiled and installed apache2, apache wouldn´t support threads (cause it doesn´t work very well on FreeBSD). You could force thread support when running ./configure for apache, using --enable-threads, but this isn´t recommendable.
The best option [http://modpython.org/pipermail/mod_python/2006-September/021983.html seems to be] adding to /usr/local/apache2/bin/ennvars the line 

{{{
export LD_PRELOAD=/usr/lib/libc_r.so
}}}

=== Subversion issues ===

If you get the following Trac Error `Unsupported version control system "svn"` only under mod_python, though it works well on the command-line and even with TracStandalone, chances are that you forgot to add the path to the Python bindings with the [TracModPython#ConfiguringPythonPath PythonPath] directive. (The better way is to add a link to the bindings in the Python `site-packages` directory, or create a `.pth` file in that directory.)

If this is not the case, it''s possible that you''re using Subversion libraries that are binary incompatible with the apache ones (an incompatibility of the `apr` libraries is usually the cause). In that case, you also won''t be able to use the svn modules for Apache (`mod_dav_svn`).

You also need a recent version of `mod_python` in order to avoid a runtime error ({{{argument number 2: a ''apr_pool_t *'' is expected}}}) due to the default usage of multiple sub-interpreters. 3.2.8 ''''should'''' work, though it''s probably better to use the workaround described in [trac:#3371 #3371], in order to force the use of the main interpreter:
{{{
PythonInterpreter main_interpreter
}}}
This is anyway the recommended workaround for other well-known issues seen when using the Python bindings for Subversion within mod_python ([trac:#2611 #2611], [trac:#3455 #3455]). See in particular Graham Dumpleton''s comment in [trac:comment:9:ticket:3455 #3455] explaining the issue.

=== Page layout issues ===

If the formatting of the Trac pages look weird chances are that the style sheets governing the page layout are not handled properly by the web server. Try adding the following lines to your apache configuration:
{{{
#!xml
Alias /myproject/css "/usr/share/trac/htdocs/css"
<Location /myproject/css>
    SetHandler None
</Location>
}}}

Note: For the above configuration to have any effect it must be put after the configuration of your project root location, i.e. {{{<Location /myproject />}}}.

Also, setting `PythonOptimize On` seems to mess up the page headers and footers, in addition to hiding the documentation for macros and plugins (see #Trac8956). Considering how little effect the option has, it is probably a good idea to leave it `Off`.

=== HTTPS issues ===

If you want to run Trac fully under https you might find that it tries to redirect to plain http. In this case just add the following line to your apache configuration:
{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    SetEnv HTTPS 1
    ....
</VirtualHost>
}}}

=== Fedora 7 Issues ===
Make sure you install the ''python-sqlite2'' package as it seems to be required for TracModPython but not for tracd


=== Segmentation fault with php5-mhash or other php5 modules ===
You may encounter segfaults (reported on debian etch) if php5-mhash module is installed. Try to remove it to see if this solves the problem. See debian bug report [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=411487]

Some people also have troubles when using php5 compiled with its own 3rd party libraries instead of system libraries. Check here [http://www.djangoproject.com/documentation/modpython/#if-you-get-a-segmentation-fault]

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI ModWSGI], [wiki:TracFastCgi FastCGI],  [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracNavigation',2,1309617955712000,'trac','127.0.0.1','= Trac Navigation =

Starting with Trac 0.11, it is now possible to customize the main and meta navigation entries in some basic ways.

The new `[mainnav]` and `[metanav]` configuration sections can now be used to customize the text and link used for the navigation items, or even to disable them.

=== `[mainnav]` #mainnav-bar
`[mainnav]` corresponds to the ''''''main navigation bar'''''', the one containing entries such as ''''Wiki'''', ''''Timeline'''', ''''Roadmap'''', ''''Browse Source'''' and so on. This navigation bar is meant to access the default page of the main modules enabled in Trac and accessible for the current user.


** [=#Example Example] ** 

In the following example, we rename the link to the Wiki start "Home", and hide the "!Help/Guide" link. 
We also make the "View Tickets" entry link to a specific report.

Relevant excerpt from the TracIni:
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24
}}}

=== `[metanav]` #metanav-bar
`[metanav]` corresponds to the ''''''meta navigation bar'''''', by default positioned above the main navigation bar and below the ''''Search'''' box. It contains the ''''Log in'''', ''''Logout'''', ''''!Help/Guide'''' etc. entries. This navigation bar is meant to access some global information about the Trac project and the current user.

There is one special entry in the  `[metanav]` section: `logout.redirect` is the page the user sees after hitting the logout button. 
[[comment(see also #Trac3808)]]

** Example ** 

{{{
[metanav]
help = disabled
logout.redirect = wiki/Logout
}}}


=== Notes
Possible URL formats (for `.href` or `.redirect`):
|| ''''''config'''''' || ''''''redirect to'''''' ||
|| `wiki/Logout` || `/projects/env/wiki/Logout` ||
|| `http://hostname/` || `http://hostname/` ||
|| `/projects` || `/projects` ||


Note that it is still not possible to customize the ''''''contextual navigation bar'''''', i.e. the one usually placed below the main navigation bar.


----
See also: TracInterfaceCustomization, and the [http://trac-hacks.org/wiki/NavAddPlugin TracHacks:NavAddPlugin] or [http://trac-hacks.org/wiki/MenusPlugin TracHacks:MenusPlugin] (still needed for adding entries)
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracPermissions',2,1309617955732000,'trac','127.0.0.1','= Trac Permissions =
[[TracGuideToc]]

Trac uses a simple, case sensitive, permission system to control what users can and can''t access.

Permission privileges are managed using the [TracAdmin trac-admin] tool or (new in version 0.11) the ''''General / Permissions'''' panel in the ''''Admin'''' tab of the web interface.

In addition to the default permission policy described in this page, it is possible to activate additional permission policies by enabling plugins and listing them in the `[trac] permission_policies` configuration entry in the TracIni. See TracFineGrainedPermissions for more details.

Non-authenticated users accessing the system are assigned the name "anonymous". Assign permissions to the "anonymous" user to set privileges for anonymous/guest users. The parts of Trac that a user does not have the privileges for will not be displayed in the navigation.
In addition to these privileges, users can be granted additional individual rights in effect when authenticated and logged into the system. All logged in users belong to the virtual group "authenticated", which inherits permissions from "anonymous".

== Graphical Admin Tab ==
''''This feature is new in version 0.11.''''

To access this tab, a user must have `TRAC_ADMIN privileges`. This can be performed as follows (more on the trac-admin script below):
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

Then, the user `bob` will be able to see the Admin tab, and can then access the permissions menu. This menu will allow you to perform all the following actions, but from the browser without requiring root access to the server (just the correct permissions for your user account).   ''''''Use at least one lowercase character in user names, as all-uppercase names are reserved for permissions.''''''

 1. [[Image(htdocs:../common/guide/admin.png)]]
 1. [[Image(htdocs:../common/guide/admin-permissions.png)]]
 1. [[Image(htdocs:../common/guide/admin-permissions-TICKET_ADMIN.png)]]

An easy way to quickly secure a new Trac install is to run the above command on the anonymous user, install the [http://trac-hacks.org/wiki/AccountManagerPlugin AccountManagerPlugin], create a new admin account graphically and then remove the TRAC_ADMIN permission from the anonymous user.

== Available Privileges ==

To enable all privileges for a user, use the `TRAC_ADMIN` permission. Having `TRAC_ADMIN` is like being `root` on a *NIX system: it will allow you to perform any operation.

Otherwise, individual privileges can be assigned to users for the various different functional areas of Trac (''''''note that the privilege names are case-sensitive''''''):

=== Repository Browser ===

|| `BROWSER_VIEW` || View directory listings in the [wiki:TracBrowser repository browser] ||
|| `LOG_VIEW` || View revision logs of files and directories in the [wiki:TracBrowser repository browser] ||
|| `FILE_VIEW` || View files in the [wiki:TracBrowser repository browser] ||
|| `CHANGESET_VIEW` || View [wiki:TracChangeset repository check-ins] ||

=== Ticket System ===

|| `TICKET_VIEW` || View existing [wiki:TracTickets tickets] and perform [wiki:TracQuery ticket queries] ||
|| `TICKET_CREATE` || Create new [wiki:TracTickets tickets] ||
|| `TICKET_APPEND` || Add comments or attachments to [wiki:TracTickets tickets] ||
|| `TICKET_CHGPROP` || Modify [wiki:TracTickets ticket] properties (priority, assignment, keywords, etc.) with the following exceptions: edit description field, add/remove other users from cc field when logged in, and set email to pref ||
|| `TICKET_MODIFY` || Includes both `TICKET_APPEND` and `TICKET_CHGPROP`, and in addition allows resolving [wiki:TracTickets tickets]. Tickets can be assigned to users through a [TracTickets#Assign-toasDrop-DownList drop-down list] when the list of possible owners has been restricted. ||
|| `TICKET_EDIT_CC` || Full modify cc field ||
|| `TICKET_EDIT_DESCRIPTION` || Modify description field ||
|| `TICKET_EDIT_COMMENT` || Modify comments ||
|| `TICKET_ADMIN` || All `TICKET_*` permissions, plus the deletion of ticket attachments and modification of the reporter and description fields. It also allows managing ticket properties in the WebAdmin panel. ||

Attention: the "view tickets" button appears with the `REPORT_VIEW` permission.

=== Roadmap ===

|| `MILESTONE_VIEW` || View milestones and assign tickets to milestones. ||
|| `MILESTONE_CREATE` || Create a new milestone ||
|| `MILESTONE_MODIFY` || Modify existing milestones ||
|| `MILESTONE_DELETE` || Delete milestones ||
|| `MILESTONE_ADMIN` || All `MILESTONE_*` permissions ||
|| `ROADMAP_VIEW` || View the [wiki:TracRoadmap roadmap] page, is not (yet) the same as MILESTONE_VIEW, see [trac:#4292 #4292] ||
|| `ROADMAP_ADMIN` || to be removed with [trac:#3022 #3022], replaced by MILESTONE_ADMIN ||

=== Reports ===

|| `REPORT_VIEW` || View [wiki:TracReports reports], i.e. the "view tickets" link. ||
|| `REPORT_SQL_VIEW` || View the underlying SQL query of a [wiki:TracReports report] ||
|| `REPORT_CREATE` || Create new [wiki:TracReports reports] ||
|| `REPORT_MODIFY` || Modify existing [wiki:TracReports reports] ||
|| `REPORT_DELETE` || Delete [wiki:TracReports reports] ||
|| `REPORT_ADMIN` || All `REPORT_*` permissions ||

=== Wiki System ===

|| `WIKI_VIEW` || View existing [wiki:TracWiki wiki] pages ||
|| `WIKI_CREATE` || Create new [wiki:TracWiki wiki] pages ||
|| `WIKI_MODIFY` || Change [wiki:TracWiki wiki] pages ||
|| `WIKI_RENAME` || Rename [wiki:TracWiki wiki] pages ||
|| `WIKI_DELETE` || Delete [wiki:TracWiki wiki] pages and attachments ||
|| `WIKI_ADMIN` || All `WIKI_*` permissions, plus the management of ''''readonly'''' pages. ||

=== Permissions ===

|| `PERMISSION_GRANT` || add/grant a permission ||
|| `PERMISSION_REVOKE` || remove/revoke a permission ||
|| `PERMISSION_ADMIN` || All `PERMISSION_*` permissions ||

=== Others ===

|| `TIMELINE_VIEW` || View the [wiki:TracTimeline timeline] page ||
|| `SEARCH_VIEW` || View and execute [wiki:TracSearch search] queries ||
|| `CONFIG_VIEW` || Enables additional pages on ''''About Trac'''' that show the current configuration or the list of installed plugins ||
|| `EMAIL_VIEW` || Shows email addresses even if [trac:wiki:0.11/TracIni trac show_email_addresses configuration option is false] ||

== Creating New Privileges ==

To create custom permissions, for example to be used in a custom workflow, enable the optional `tracopt.perm.config_perm_provider.ExtraPermissionsProvider` component in the "Plugins" admin panel, and add the desired permissions to the `[extra-permissions]` section in your [wiki:TracIni#extra-permissions-section trac.ini]. For more information, please refer to the documentation of the component in the admin panel.

== Granting Privileges ==

You grant privileges to users using [wiki:TracAdmin trac-admin]. The current set of privileges can be listed with the following command:
{{{
  $ trac-admin /path/to/projenv permission list
}}}

This command will allow the user ''''bob'''' to delete reports:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

The `permission add` command also accepts multiple privilege names:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE WIKI_CREATE
}}}

Or add all privileges:
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

== Permission Groups ==

There are two built-in groups, "authenticated" and "anonymous".
Any user who has not logged in is automatically in the "anonymous" group.
Any user who has logged in is also in the "authenticated" group.
The "authenticated" group inherits permissions from the "anonymous" group.
For example, if the "anonymous" group has permission WIKI_MODIFY, 
it is not necessary to add the WIKI_MODIFY permission to the "authenticated" group as well.

Custom groups may be defined that inherit permissions from the two built-in groups.

Permissions can be grouped together to form roles such as ''''developer'''', ''''admin'''', etc.
{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

Group membership can be checked by doing a {{{permission list}}} with no further arguments; the resulting output will include group memberships. ''''''Use at least one lowercase character in group names, as all-uppercase names are reserved for permissions''''''.

== Adding a New Group and Permissions ==
Permission groups can be created by assigning a user to a group you wish to create, then assign permissions to that group.

The following will add ''''bob'''' to the new group called ''''beta_testers'''' and then will assign WIKI_ADMIN permissions to that group. (Thus, ''''bob'''' will inherit the WIKI_ADMIN permission)
{{{ 
   $ trac-admin /path/to/projenv permission add bob beta_testers
   $ trac-admin /path/to/projenv permission add beta_testers WIKI_ADMIN

}}}

== Removing Permissions ==

Permissions can be removed using the ''remove'' command. For example:

This command will prevent the user ''''bob'''' from deleting reports:
{{{
  $ trac-admin /path/to/projenv permission remove bob REPORT_DELETE
}}}

Just like `permission add`, this command accepts multiple privilege names.

You can also remove all privileges for a specific user:
{{{
  $ trac-admin /path/to/projenv permission remove bob ''*''
}}}

Or one privilege for all users:
{{{
  $ trac-admin /path/to/projenv permission remove ''*'' REPORT_ADMIN
}}}

== Default Permissions ==

By default on a new Trac installation, the `anonymous` user will have ''''view'''' access to everything in Trac, but will not be able to create or modify anything.
On the other hand, the `authenticated` users will have the permissions to ''''create and modify tickets and wiki pages''''.

''''''anonymous''''''
{{{
 BROWSER_VIEW 
 CHANGESET_VIEW 
 FILE_VIEW 
 LOG_VIEW 
 MILESTONE_VIEW 
 REPORT_SQL_VIEW 
 REPORT_VIEW 
 ROADMAP_VIEW 
 SEARCH_VIEW 
 TICKET_VIEW 
 TIMELINE_VIEW
 WIKI_VIEW
}}}

''''''authenticated''''''
{{{
 TICKET_CREATE 
 TICKET_MODIFY 
 WIKI_CREATE 
 WIKI_MODIFY  
}}}
----
See also: TracAdmin, TracGuide and TracFineGrainedPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracPlugins',2,1309617955752000,'trac','127.0.0.1','= Trac Plugins =
[[TracGuideToc]]

Trac is extensible with [trac:PluginList plugins] since version 0.9. The plugin functionality is based on the [trac:TracDev/ComponentArchitecture component architecture] with peculiarities described at [TracDev/PluginDevelopment plugin development] page.

== Plugin discovery ==

From the user point of view a Plugin is either standalone .py file or an .egg package. Trac looks for Plugins in a global shared plugins directory (see [TracIni#GlobalConfiguration Global Configuration]) and in `plugins` directory of local TracEnvironment. Components defined in globally installed plugins should be explicitly enabled in the [[TracIni#components-section| [components] ]] section of the trac.ini file.

== Requirements for Trac eggs  ==

To use egg based plugins in Trac, you need to have [http://peak.telecommunity.com/DevCenter/setuptools setuptools] (version 0.6) installed.

To install `setuptools`, download the bootstrap module [http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py] and execute it as follows:
{{{
$ python ez_setup.py
}}}

If the `ez_setup.py` script fails to install the setuptools release, you can download it from [http://www.python.org/pypi/setuptools PyPI] and install it manually.

Plugins can also consist of a single `.py` file dropped directly into the root of environment''s or into shared `plugins` directory.

== Installing a Trac Plugin ==

=== For a Single Project ===

Plugins are packaged as [http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. That means they are ZIP archives with the file extension `.egg`. 

If you have downloaded a source distribution of a plugin, and want to build the `.egg` file, follow this instruction:
 * Unpack the source. It should provide a setup.py. 
 * Run:
{{{
$ python setup.py bdist_egg
}}}

Then you will have a *.egg file. Examine the output of running python to find where this was created.

Once you have the plugin archive, you need to copy it into the `plugins` directory of the [wiki:TracEnvironment project environment]. Also, make sure that the web server has sufficient permissions to read the plugin egg. Then, restart the web server (this requirement was not previously mentioned in this document, but in my tests it began working only after I did so).

To uninstall a plugin installed this way, remove the egg from `plugins` directory and restart web server.

Note that the Python version that the egg is built with must
match the Python version with which Trac is run.  If for
instance you are running Trac under Python 2.5, but have
upgraded your standalone Python to 2.6, the eggs won''t be
recognized.

Note also that in a multi-project setup, a pool of Python interpreter instances will be dynamically allocated to projects based on need, and since plugins occupy a place in Python''s module system, the first version of any given plugin to be loaded will be used for all the projects. In other words, you cannot use different versions of a single plugin in two projects of a multi-project setup. It may be safer to install plugins for all projects (see below) and then enable them selectively on a project-by-project basis.

=== For All Projects ===

==== With an .egg file ====

Some plugins (such as [trac:SpamFilter SpamFilter]) are downloadable as a `.egg` file which can be installed with the `easy_install` program:
{{{
easy_install TracSpamFilter
}}}

If `easy_install` is not on your system see the Requirements section above to install it.  Windows users will need to add the `Scripts` directory of their Python installation (for example, `C:\Python24\Scripts`) to their `PATH` environment variable (see [http://peak.telecommunity.com/DevCenter/EasyInstall#windows-notes easy_install Windows notes] for more information).

If Trac reports permission errors after installing a zipped egg and you would rather not bother providing a egg cache directory writable by the web server, you can get around it by simply unzipping the egg. Just pass `--always-unzip` to `easy_install`:
{{{
easy_install --always-unzip TracSpamFilter-0.4.1_r10106-py2.6.egg
}}}
You should end up with a directory having the same name as the zipped egg (complete with `.egg` extension) and containing its uncompressed contents.

Trac also searches for plugins installed in the shared plugins directory ''''(since 0.10)'''', see TracIni#GlobalConfiguration. This is a convenient way to share the installation of plugins across several but not all environments.

==== From source ====

`easy_install` makes installing from source a snap. Just give it the URL to either a Subversion repository or a tarball/zip of the source:
{{{
easy_install http://svn.edgewall.com/repos/trac/plugins/0.12/spam-filter-captcha
}}}

==== Enabling the plugin ====
Unlike plugins installed per-environment, you''ll have to explicitly enable globally installed plugins via [wiki:TracIni trac.ini]. This also applies to plugins installed in shared plugins directory, i.e. the path specified in the `[inherit] plugins_dir` configuration option. 

This is done in the `[components]` section of the configuration file, for example:
{{{
[components]
tracspamfilter.* = enabled
}}}

The name of the option is the Python package of the plugin. This should be specified in the documentation of the plugin, but can also be easily discovered by looking at the source (look for a top-level directory that contains a file named `__init__.py`.)

Note: After installing the plugin, you need to restart your web server.

==== Uninstalling ====

`easy_install` or `python setup.py` does not have an uninstall feature. Hower, it is usually quite trivial to remove a globally installed egg and reference:
 1. Do `easy_install -m [plugin name]` to remove references from `$PYTHONLIB/site-packages/easy-install.pth` when the plugin installed by setuptools.
 1. Delete executables from `/usr/bin`, `/usr/local/bin` or `C:\\Python*\Scripts`. For search what executables are there, you may refer to `[console-script]` section of `setup.py`.
 1. Delete the .egg file or folder from where it is installed, usually inside `$PYTHONLIB/site-packages/`.
 1. Restart web server.

If you are uncertain about the location of the egg, here is a small tip to help locate an egg (or any package) - replace `myplugin` with whatever namespace the plugin uses (as used when enabling the plugin):
{{{
>>> import myplugin
>>> print myplugin.__file__
/opt/local/python24/lib/site-packages/myplugin-0.4.2-py2.4.egg/myplugin/__init__.pyc
}}}

== Setting up the Plugin Cache ==

Some plugins will need to be extracted by the Python eggs runtime (`pkg_resources`), so that their contents are actual files on the file system. The directory in which they are extracted defaults to ''.python-eggs'' in the home directory of the current user, which may or may not be a problem. You can however override the default location using the `PYTHON_EGG_CACHE` environment variable.

To do this from the Apache configuration, use the `SetEnv` directive as follows:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

This works whether you are using the [wiki:TracCgi CGI] or the [wiki:TracModPython mod_python] front-end. Put this directive next to where you set the path to the [wiki:TracEnvironment Trac environment], i.e. in the same `<Location>` block.

For example (for CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

or (for mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

 ''''Note: !SetEnv requires the `mod_env` module which needs to be activated for Apache. In this case the !SetEnv directive can also be used in the `mod_python` Location block.''''

For [wiki:TracFastCgi FastCGI], you''ll need to `-initial-env` option, or whatever is provided by your web server for setting environment variables. 

 ''''Note: that if you already use -initial-env to set the project directory for either a single project or parent you will need to add an additional -initial-env directive to the !FastCgiConfig directive. I.e.

{{{
FastCgiConfig -initial-env TRAC_ENV=/var/lib/trac -initial-env PYTHON_EGG_CACHE=/var/lib/trac/plugin-cache
}}}

=== About hook scripts ===

If you have set up some subversion hook scripts that call the Trac engine - such as the post-commit hook script provided in the `/contrib` directory - make sure you define the `PYTHON_EGG_CACHE` environment variable within these scripts as well.

== Troubleshooting ==

=== Is setuptools properly installed? ===

Try this from the command line:
{{{
$ python -c "import pkg_resources"
}}}

If you get ''''''no output'''''', setuptools ''''''is'''''' installed. Otherwise, you''ll need to install it before plugins will work in Trac.

=== Did you get the correct version of the Python egg? ===

Python eggs have the Python version encoded in their filename. For example, `MyPlugin-1.0-py2.5.egg` is an egg for Python 2.5, and will ''''''not'''''' be loaded if you''re running a different Python version (such as 2.4 or 2.6).

Also, verify that the egg file you downloaded is indeed a ZIP archive. If you downloaded it from a Trac site, chances are you downloaded the HTML preview page instead.

=== Is the plugin enabled? ===


If you install a plugin globally (i.e. ''''not'''' inside the `plugins` directory of the Trac project environment) you will have to explicitly enable it in [TracIni trac.ini]. Make sure that:
 * you actually added the necessary line(s) to the `[components]` section
 * the package/module names are correct
 * the value is “enabled", not e.g. “enable”

=== Check the permissions on the egg file ===

Trac must be able to read the file. 

=== Check the log files ===

Enable [wiki:TracLogging logging] and set the log level to `DEBUG`, then watch the log file for messages about loading plugins.

=== Verify you have proper permissions ===

Some plugins require you have special permissions in order to use them. [trac:WebAdmin WebAdmin], for example, requires the user to have TRAC_ADMIN permissions for it to show up on the navigation bar.

=== Is the wrong version of the plugin loading? ===

If you put your plugins inside plugins directories, and certainly if you have more than one project, you need to make sure that the correct version of the plugin is loading. Here are some basic rules:
 * Only one version of the plugin can be loaded for each running Trac server (ie. each Python process). The Python namespaces and module list will be shared, and it cannot handle duplicates. Whether a plugin is `enabled` or `disabled` makes no difference.
 * A globally installed plugin (typically `setup.py install`) will override any version in global or project plugins directories. A plugin from the global plugins directory will be located before any project plugins directory.
 * If your Trac server hosts more than one project (as with `TRAC_ENV_PARENT_DIR` setups), then having two versions of a plugin in two different projects will give uncertain results. Only one of them will load, and the one loaded will be shared by both projects. Trac will load the first found - basically from the project that receives the first request.
 * Having more than one version listed inside Python site-packages is fine (ie. installed with `setup.py install`) - setuptools will make sure you get the version installed most recently. However, don''t store more than one version inside a global or project plugins directory - neither version number nor installed date will matter at all. There is no way to determine which one will be located first when Trac searches the directory for plugins.

=== If all of the above failed ===

OK, so the logs don''t mention plugins, the egg is readable, the python version is correct ''''and'''' the egg has been installed globally (and is enabled in the trac.ini) and it still doesn''t work or give any error messages or any other indication as to why? Hop on the [trac:IrcChannel IrcChannel] and ask away.

----
See also TracGuide, [trac:PluginList plugin list], [trac:TracDev/ComponentArchitecture component architecture]',NULL,NULL);
INSERT INTO "wiki" VALUES('TracQuery',2,1309617955762000,'trac','127.0.0.1','= Trac Ticket Queries =
[[TracGuideToc]]

In addition to [wiki:TracReports reports], Trac provides support for ''''custom ticket queries'''', used to display lists of tickets meeting a specified set of criteria. 

To configure and execute a custom query, switch to the ''''View Tickets'''' module from the navigation bar, and select the ''''Custom Query'''' link.

== Filters ==

When you first go to the query page the default filter will display tickets relevant to you:
 * If logged in then all open tickets it will display open tickets assigned to you.
 * If not logged in but you have specified a name or email address in the preferences then it will display all open tickets where your email (or name if email not defined) is in the CC list.
 * If not logged and no name/email defined in the preferences then all open issues are displayed.

Current filters can be removed by clicking the button to the left with the minus sign on the label.  New filters are added from the pulldown lists at the bottom corners of the filters box (''And'' conditions on the left, ''Or'' conditions on the right).  Filters with either a text box or a pulldown menu of options can be added multiple times to perform an ''''or'''' of the criteria.

You can use the fields just below the filters box to group the results based on a field, or display the full description for each ticket.

Once you''ve edited your filters click the ''''Update'''' button to refresh your results.

== Navigating Tickets ==
Clicking on one of the query results will take you to that ticket.  You can navigate through the results by clicking the ''''Next Ticket'''' or ''''Previous Ticket'''' links just below the main menu bar, or click the ''''Back to Query'''' link to return to the query page.  

You can safely edit any of the tickets and continue to navigate through the results using the ''''!Next/Previous/Back to Query'''' links after saving your results.  When you return to the query ''''any tickets which were edited'''' will be displayed with italicized text.  If one of the tickets was edited such that [[html(<span style="color: grey">it no longer matches the query criteria </span>)]] the text will also be greyed. Lastly, if ''''''a new ticket matching the query criteria has been created'''''', it will be shown in bold. 

The query results can be refreshed and cleared of these status indicators by clicking the ''''Update'''' button again.

== Saving Queries ==

Trac allows you to save the query as a named query accessible from the reports module. To save a query ensure that you have ''''Updated'''' the view and then click the ''''Save query'''' button displayed beneath the results.
You can also save references to queries in Wiki content, as described below.

''''Note:'''' one way to easily build queries like the ones below, you can build and test the queries in the Custom report module and when ready - click ''''Save query''''. This will build the query string for you. All you need to do is remove the extra line breaks.

=== Using TracLinks ===

You may want to save some queries so that you can come back to them later.  You can do this by making a link to the query from any Wiki page.
{{{
[query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]
}}}

Which is displayed as:
  [query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]

This uses a very simple query language to specify the criteria (see [wiki:TracQuery#QueryLanguage Query Language]).

Alternatively, you can copy the query string of a query and paste that into the Wiki link, including the leading `?` character:
{{{
[query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]
}}}

Which is displayed as:
  [query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]

=== Using the `[[TicketQuery]]` Macro ===

The [trac:TicketQuery TicketQuery] macro lets you display lists of tickets matching certain criteria anywhere you can use WikiFormatting.

Example:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate)]]

Just like the [wiki:TracQuery#UsingTracLinks query: wiki links], the parameter of this macro expects a query string formatted according to the rules of the simple [wiki:TracQuery#QueryLanguage ticket query language].

A more compact representation without the ticket summaries is also available:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]

Finally, if you wish to receive only the number of defects that match the query, use the ``count`` parameter.

{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]

=== Customizing the ''''table'''' format ===
You can also customize the columns displayed in the table format (''''format=table'''') by using ''''col=<field>'''' - you can specify multiple fields and what order they are displayed by placing pipes (`|`) between the columns like below:

{{{
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter)]]
}}}

This is displayed as:
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter)]]

==== Full rows ====
In ''''table'''' format you can also have full rows by using ''''rows=<field>'''' like below:

{{{
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter,rows=description)]]
}}}

This is displayed as:
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter,rows=description)]]


=== Query Language ===

`query:` TracLinks and the `[[TicketQuery]]` macro both use a mini “query language” for specifying query filters. Basically, the filters are separated by ampersands (`&`). Each filter then consists of the ticket field name, an operator, and one or more values. More than one value are separated by a pipe (`|`), meaning that the filter matches any of the values. To include a literal `&` or `|` in a value, escape the character with a backslash (`\`).

The available operators are:
|| ''''''`=`'''''' || the field content exactly matches one of the values ||
|| ''''''`~=`'''''' || the field content contains one or more of the values ||
|| ''''''`^=`'''''' || the field content starts with one of the values ||
|| ''''''`$=`'''''' || the field content ends with one of the values ||

All of these operators can also be negated:
|| ''''''`!=`'''''' || the field content matches none of the values ||
|| ''''''`!~=`'''''' || the field content does not contain any of the values ||
|| ''''''`!^=`'''''' || the field content does not start with any of the values ||
|| ''''''`!$=`'''''' || the field content does not end with any of the values ||

The date fields `created` and `modified` can be constrained by using the `=` operator and specifying a value containing two dates separated by two dots (`..`). Either end of the date range can be left empty, meaning that the corresponding end of the range is open. The date parser understands a few natural date specifications like "3 weeks ago", "last month" and "now", as well as Bugzilla-style date specifications like "1d", "2w", "3m" or "4y" for 1 day, 2 weeks, 3 months and 4 years, respectively. Spaces in date specifications can be left out to avoid having to quote the query string. 
|| ''''''`created=2007-01-01..2008-01-01`'''''' || query tickets created in 2007 ||
|| ''''''`created=lastmonth..thismonth`'''''' || query tickets created during the previous month ||
|| ''''''`modified=1weekago..`'''''' || query tickets that have been modified in the last week ||
|| ''''''`modified=..30daysago`'''''' || query tickets that have been inactive for the last 30 days ||

----
See also: TracTickets, TracReports, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracReports',2,1309617955782000,'trac','127.0.0.1','= Trac Reports =
[[TracGuideToc]]

The Trac reports module provides a simple, yet powerful reporting facility
to present information about tickets in the Trac database.

Rather than have its own report definition format, TracReports relies on standard SQL
`SELECT` statements for custom report definition. 

  ''''''Note:'''''' ''''The report module is being phased out in its current form because it seriously limits the ability of the Trac team to make adjustments to the underlying database schema. We believe that the [wiki:TracQuery query module] is a good replacement that provides more flexibility and better usability. While there are certain reports that cannot yet be handled by the query module, we intend to further enhance it so that at some point the reports module can be completely removed. This also means that there will be no major enhancements to the report module anymore.''''

  ''''You can already completely replace the reports module by the query module simply by disabling the former in [wiki:TracIni trac.ini]:''''
  {{{
  [components]
  trac.ticket.report.* = disabled
  }}}
  ''''This will make the query module the default handler for the “View Tickets” navigation item. We encourage you to try this configuration and report back what kind of features of reports you are missing, if any.''''


A report consists of these basic parts:
 * ''''''ID'''''' — Unique (sequential) identifier 
 * ''''''Title'''''' — Descriptive title
 * ''''''Description'''''' — A brief description of the report, in WikiFormatting text.
 * ''''''Report Body'''''' — List of results from report query, formatted according to the methods described below.
 * ''''''Footer'''''' — Links to alternative download formats for this report.

== Changing Sort Order ==
Simple reports - ungrouped reports to be specific - can be changed to be sorted by any column simply by clicking the column header. 

If a column header is a hyperlink (red), click the column you would like to sort by. Clicking the same header again reverses the order.

== Changing Report Numbering ==
There may be instances where you need to change the ID of the report, perhaps to organize the reports better. At present this requires changes to the trac database. The ''''report'''' table has the following schema ''''(since 0.10)'''':
 * id integer PRIMARY KEY
 * author text
 * title text
 * query text
 * description text
Changing the ID changes the shown order and number in the ''''Available Reports'''' list and the report''s perma-link. This is done by running something like:
{{{
update report set id=5 where id=3;
}}}
Keep in mind that the integrity has to be maintained (i.e., ID has to be unique, and you don''t want to exceed the max, since that''s managed by SQLite someplace).

You may also need to update or remove the report number stored in the report or query.

== Navigating Tickets ==
Clicking on one of the report results will take you to that ticket. You can navigate through the results by clicking the ''''Next Ticket'''' or ''''Previous Ticket'''' links just below the main menu bar, or click the ''''Back to Report'''' link to return to the report page.

You can safely edit any of the tickets and continue to navigate through the results using the ''''!Next/Previous/Back to Report'''' links after saving your results, but when you return to the report, there will be no hint about what has changed, as would happen if you were navigating a list of tickets obtained from a query (see TracQuery#NavigatingTickets). ''''(since 0.11)''''

== Alternative Download Formats ==
Aside from the default HTML view, reports can also be exported in a number of alternative formats.
At the bottom of the report page, you will find a list of available data formats. Click the desired link to 
download the alternative report format.

=== Comma-delimited - CSV (Comma Separated Values) ===
Export the report as plain text, each row on its own line, columns separated by a single comma ('','').
''''''Note:'''''' The output is fully escaped so carriage returns, line feeds, and commas will be preserved in the output.

=== Tab-delimited ===
Like above, but uses tabs (\t) instead of comma.

=== RSS - XML Content Syndication ===
All reports support syndication using XML/RSS 2.0. To subscribe to an RSS feed, click the orange ''XML'' icon at the bottom of the page. See TracRss for general information on RSS support in Trac.

----

== Creating Custom Reports ==

''''Creating a custom report requires a comfortable knowledge of SQL.''''

A report is basically a single named SQL query, executed and presented by
Trac.  Reports can be viewed and created from a custom SQL expression directly
in the web interface.

Typically, a report consists of a SELECT-expression from the ''ticket'' table,
using the available columns and sorting the way you want it.

== Ticket columns ==
The ''''ticket'''' table has the following columns:
 * id
 * type
 * time
 * changetime
 * component
 * severity  
 * priority 
 * owner
 * reporter
 * cc
 * version
 * milestone
 * status
 * resolution
 * summary
 * description
 * keywords

See TracTickets for a detailed description of the column fields.

Example: ''''''All active tickets, sorted by priority and time''''''
{{{
SELECT id AS ticket, status, severity, priority, owner, 
       time AS created, summary FROM ticket 
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY priority, time
}}}

---

== Advanced Reports: Dynamic Variables ==
For more flexible reports, Trac supports the use of ''''dynamic variables'''' in report SQL statements. 
In short, dynamic variables are ''''special'''' strings that are replaced by custom data before query execution.

=== Using Variables in a Query ===
The syntax for dynamic variables is simple, any upper case word beginning with ''$'' is considered a variable.

Example:
{{{
SELECT id AS ticket,summary FROM ticket WHERE priority=$PRIORITY
}}}

To assign a value to $PRIORITY when viewing the report, you must define it as an argument in the report URL, leaving out the leading ''$''.

Example:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high
}}}

To use multiple variables, separate them with an ''&''.

Example:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high&SEVERITY=critical
}}}


=== !Special/Constant Variables ===
There is one dynamic variable whose value is set automatically (the URL does not have to be changed) to allow practical reports. 

 * $USER — Username of logged in user.

Example (''''List all tickets assigned to me''''):
{{{
SELECT id AS ticket,summary FROM ticket WHERE owner=$USER
}}}


----


== Advanced Reports: Custom Formatting ==
Trac is also capable of more advanced reports, including custom layouts,
result grouping and user-defined CSS styles. To create such reports, we''ll use
specialized SQL statements to control the output of the Trac report engine.

== Special Columns ==
To format reports, TracReports looks for ''magic'' column names in the query
result. These ''magic'' names are processed and affect the layout and style of the 
final report.

=== Automatically formatted columns ===
 * ''''''ticket'''''' — Ticket ID number. Becomes a hyperlink to that ticket. 
 * ''''''id'''''' — same as ''''''ticket'''''' above when ''''''realm'''''' is not set
 * ''''''realm'''''' — together with ''''''id'''''', can be used to create links to other resources than tickets (e.g. a realm of ''''wiki'''' and an ''''id'''' to a page name will create a link to that wiki page)
 * ''''''created, modified, date, time'''''' — Format cell as a date and/or time.
 * ''''''description'''''' — Ticket description field, parsed through the wiki engine.

''''''Example:''''''
{{{
SELECT id AS ticket, created, status, summary FROM ticket 
}}}

Those columns can also be defined but marked as hidden, see [#column-syntax below].

See trac:wiki/CookBook/Configuration/Reports for some example of creating reports for realms other than ''''ticket''''.

=== Custom formatting columns ===
Columns whose names begin and end with 2 underscores (Example: ''''''`__color__`'''''') are
assumed to be ''''formatting hints'''', affecting the appearance of the row.
 
 * ''''''`__group__`'''''' — Group results based on values in this column. Each group will have its own header and table.
 * ''''''`__grouplink__`'''''' — Make the header of each group a link to the specified URL. The URL is taken from the first row of each group.
 * ''''''`__color__`'''''' — Should be a numeric value ranging from 1 to 5 to select a pre-defined row color. Typically used to color rows by issue priority.
{{{
#!html
<div style="margin-left:7.5em">Defaults: 
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fdc; border-color: #e88; color: #a22">Color 1</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #ffb; border-color: #eea; color: #880">Color 2</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fbfbfb; border-color: #ddd; color: #444">Color 3</span>
<span style="border: none; color: #333; background: transparent; font-size: 85%; background: #e7ffff; border-color: #cee; color: #099">Color 4</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #e7eeff; border-color: #cde; color: #469">Color 5</span>
</div>
}}}
 * ''''''`__style__`'''''' — A custom CSS style expression to use for the current row. 

''''''Example:'''''' ''''List active tickets, grouped by milestone, group header linked to milestone page, colored by priority''''
{{{
SELECT p.value AS __color__,
     t.milestone AS __group__,
     ''../milestone/'' || t.milestone AS __grouplink__,
     (CASE owner WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' ELSE '''' END) AS __style__,
       t.id AS ticket, summary
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

''''''Note:'''''' A table join is used to match ''''ticket'''' priorities with their
numeric representation from the ''''enum'''' table.

=== Changing layout of report rows === #column-syntax
By default, all columns on each row are display on a single row in the HTML
report, possibly formatted according to the descriptions above. However, it''s
also possible to create multi-line report entries.

 * ''''''`column_`'''''' — ''''Break row after this''''. By appending an underscore (''_'') to the column name, the remaining columns will be continued on a second line.

 * ''''''`_column_`'''''' — ''''Full row''''. By adding an underscore (''_'') both at the beginning and the end of a column name, the data will be shown on a separate row.

 * ''''''`_column`'''''' — ''''Hide data''''. Prepending an underscore (''_'') to a column name instructs Trac to hide the contents from the HTML output. This is useful for information to be visible only if downloaded in other formats (like CSV or RSS/XML).
   This can be used to hide any kind of column, even important ones required for identifying the resource, e.g. `id as _id` will hide the ''''''Id'''''' column but the link to the ticket will be present.

''''''Example:'''''' ''''List active tickets, grouped by milestone, colored by priority, with  description and multi-line layout''''

{{{
SELECT p.value AS __color__,
       t.milestone AS __group__,
       (CASE owner 
          WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' 
          ELSE '''' END) AS __style__,
       t.id AS ticket, summary AS summary_,             -- ## Break line here
       component,version, severity, milestone, status, owner,
       time AS created, changetime AS modified,         -- ## Dates are formatted
       description AS _description_,                    -- ## Uses a full row
       changetime AS _changetime, reporter AS _reporter -- ## Hidden from HTML output
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

=== Reporting on custom fields ===

If you have added custom fields to your tickets (a feature since v0.8, see TracTicketsCustomFields), you can write a SQL query to cover them. You''ll need to make a join on the ticket_custom table, but this isn''t especially easy.

If you have tickets in the database ''''before'''' you declare the extra fields in trac.ini, there will be no associated data in the ticket_custom table. To get around this, use SQL''s "LEFT OUTER JOIN" clauses. See [trac:TracIniReportCustomFieldSample TracIniReportCustomFieldSample] for some examples.

''''''Note that you need to set up permissions in order to see the buttons for adding or editing reports.''''''

----
See also: TracTickets, TracQuery, TracGuide, [http://www.sqlite.org/lang_expr.html Query Language Understood by SQLite]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRepositoryAdmin',2,1309617955802000,'trac','127.0.0.1','= Repository Administration =
[[PageOutline(2-3)]]

== Quick start == #QuickStart

 * Manage repositories in the "Repository" admin panel, with `trac-admin` or in the `[repositories]` section of [wiki:TracIni#repositories-section trac.ini].
 * Set up a call to `trac-admin $ENV changeset added $REPO $REV` in the post-commit hook of each repository. Additionally, add a call to `trac-admin $ENV changeset modified $REPO $REV` in the post-revprop-change hook of repositories allowing revision property changes.
 * Set the `[trac] repository_sync_per_request` option to an empty value to disable per-request syncing.
 * Make sure the user under which your Subversion hooks are run has write access to the Trac environment, or use a tool like `sudo` to temporarily elevate privileges.

== Specifying repositories == #Repositories
Starting with 0.12, Trac can handle more than one repository per environment. The pre-0.12 way of specifying the repository with the `repository_dir` and `repository_type` options in the `[trac]` section of [wiki:TracIni trac.ini] is still supported, but two new mechanisms allow including additional repositories into an environment.

It is also possible to define aliases of repositories, that act as "pointers" to real repositories. This can be useful when renaming a repository, to avoid breaking all the links to the old name.

A number of attributes can be associated with each repository, which define the repository''s location, type, name and how it is displayed in the source browser. The following attributes are supported:

||=''''''Attribute'''''' =||=''''''Description'''''' =||
||`alias` ||\
||A repository having an `alias` attribute is an alias to a real repository. All TracLinks referencing the alias resolve to the aliased repository. Note that multiple indirection is not supported, so an alias must always point to a real repository. The `alias` and `dir` attributes are mutually exclusive. ||
||`description` ||\
||The text specified in the `description` attribute is displayed below the top-level entry for the repository in the source browser. It supports WikiFormatting. ||
||`dir` ||\
||The `dir` attribute specifies the location of the repository in the filesystem. It corresponds to the value previously specified in the option `[trac] repository_dir`. The `alias` and `dir` attributes are mutually exclusive. ||
||`hidden` ||When set to `true`, the repository is hidden from the repository index page in the source browser. Browsing the repository is still possible, and links referencing the repository remain valid. ||
||`name` ||The `name` attribute specifies the leading path element to the repository. ||
||`type` ||The `type` attribute sets the type of version control system used by the repository. Trac supports Subversion out-of-the-box, and plugins add support for many other systems. If `type` is not specified, it defaults to the value of the `[trac] repository_type` option. ||
||`url` ||The `url` attribute specifies the root URL to be used for checking out from the repository. When specified, a "Repository URL" link is added to the context navigation links in the source browser, that can be copied into the tool used for creating the working copy. ||

The `name` attribute and one of `alias` or `dir` are mandatory. All others are optional.

After adding a repository, the cache for that repository must be re-synchronized once with the `trac-admin $ENV repository resync` command.

 `repository resync <repos>`::
   Re-synchronize Trac with a repository.


=== In `trac.ini` === #ReposTracIni
Repositories and repository attributes can be specified in the `[repositories]` section of [wiki:TracIni#repositories-section trac.ini]. Every attribute consists of a key structured as `{name}.{attribute}` and the corresponding value separated with an equal sign (`=`). The name of the default repository is empty.

The main advantage of specifying repositories in `trac.ini` is that they can be inherited from a global configuration (see the [wiki:TracIni#GlobalConfiguration global configuration] section of TracIni). One drawback is that, due to limitations in the `ConfigParser` class used to parse `trac.ini`, the repository name is always all-lowercase.

The following example defines two Subversion repositories named `project` and `lib`, and a hidden alias to `project` as the default repository. This is a typical use case where a Trac environment previously had a single repository (the `project` repository), and was converted to multiple repositories. The alias ensures that links predating the change continue to resolve to the `project` repository.
{{{
#!ini
[repositories]
project.dir = /var/repos/project
project.description = This is the ''''main'''' project repository.
project.type = svn
project.url = http://example.com/svn/project
lib.dir = /var/repos/lib
lib.description = This is the secondary library code.
lib.type = svn
lib.url = http://example.com/svn/lib
.alias = project
.hidden = true
}}}
Note that `name.alias = target` makes `name` an alias for the `target` repo, not the other way around.

=== In the database === #ReposDatabase
Repositories can also be specified in the database, using either the "Repositories" admin panel under "Version Control", or the `trac-admin $ENV repository` commands.

The admin panel shows the list of all repositories defined in the Trac environment. It allows adding repositories and aliases, editing repository attributes and removing repositories. Note that repositories defined in `trac.ini` are displayed but cannot be edited.

The following [wiki:TracAdmin trac-admin] commands can be used to perform repository operations from the command line.

 `repository add <repos> <dir> [type]`::
   Add a repository `<repos>` located at `<dir>`, and optionally specify its type.

 `repository alias <name> <target>`::
   Create an alias `<name>` for the repository `<target>`.

 `repository remove <repos>`::
   Remove the repository `<repos>`.

 `repository set <repos> <key> <value>`::
   Set the attribute `<key>` to `<value>` for the repository `<repos>`. 

Note that the default repository has an empty name, so it will likely need to be quoted when running `trac-admin` from a shell. Alternatively, the name "`(default)`" can be used instead, for example when running `trac-admin` in interactive mode.


== Repository synchronization == #Synchronization
Prior to 0.12, Trac synchronized its cache with the repository on every HTTP request. This approach is not very efficient and not practical anymore with multiple repositories. For this reason, explicit synchronization through post-commit hooks was added. 

There is also new functionality in the form of a repository listener extension point ''''(IRepositoryChangeListener)'''' that is triggered by the post-commit hook when a changeset is added or modified, and can be used by plugins to perform actions on commit.

=== Mercurial Repositories ===
Please note that at the time of writing, no initial resynchronization or any hooks are necessary for Mercurial repositories - see [trac:#9485] for more information. 

=== Explicit synchronization === #ExplicitSync
This is the preferred method of repository synchronization. It requires setting the `[trac]  repository_sync_per_request` option in [wiki:TracIni#trac-section trac.ini] to an empty value, and adding a call to `trac-admin` in the post-commit hook of each repository. Additionally, if a repository allows changing revision metadata, a call to `trac-admin` must be added to the post-revprop-change hook as well.

 `changeset added <repos> <rev> [...]`::
   Notify Trac that one or more changesets have been added to a repository.

 `changeset modified <repos> <rev> [...]`::
   Notify Trac that metadata on one or more changesets in a repository has been modified.

The `<repos>` argument can be either a repository name (use "`(default)`" for the default repository) or the path to the repository.

Note that you may have to set the environment variable PYTHON_EGG_CACHE to the same value as was used for the web server configuration before calling trac-admin, if you changed it from its default location. See [wiki:TracPlugins Trac Plugins] for more information.

The following examples are complete post-commit and post-revprop-change scripts for Subversion. They should be edited for the specific environment, marked executable (where applicable) and placed in the `hooks` directory of each repository. On Unix (`post-commit`):
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
/usr/bin/trac-admin /path/to/env changeset added "$1" "$2"
}}}
On Windows (`post-commit.cmd`):
{{{#!application/x-dos-batch
@C:\Python26\Scripts\trac-admin.exe C:\path\to\env changeset added "%1" "%2"
}}}

The post-revprop-change hook for Subversion is very similar. On Unix (`post-revprop-change`):
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
/usr/bin/trac-admin /path/to/env changeset modified "$1" "$2"
}}}
On Windows (`post-revprop-change.cmd`):
{{{#!application/x-dos-batch
@C:\Python26\Scripts\trac-admin.exe C:\path\to\env changeset modified "%1" "%2"
}}}

The Unix variants above assume that the user running the Subversion commit has write access to the Trac environment, which is the case in the standard configuration where both the repository and Trac are served by the web server. If you access the repository through another means, for example `svn+ssh://`, you may have to run `trac-admin` with different privileges, for example by using `sudo`.

Note that calling `trac-admin` in your Subversion hooks can slow down the commit and log editing operations on the client side. You might want to use the [trac:source:trunk/contrib/trac-svn-hook contrib/trac-svn-hook] script which starts `trac-admin` in an asynchronous way. The script also comes with a number of safety checks and usage advices which should make it easier to set up and test your hooks. There''s no equivalent `trac-svn-hook.bat` for Windows yet, but the script can be run by Cygwin''s bash.

See the [http://svnbook.red-bean.com/en/1.5/svn.reposadmin.create.html#svn.reposadmin.create.hooks section about hooks] in the Subversion book for more information. Other repository types will require different hook setups. Please see the plugin documentation for specific instructions.

=== Per-request synchronization === #PerRequestSync
If the post-commit hooks are not available, the environment can be set up for per-request synchronization. In that case, the `[trac] repository_sync_per_request` option in [wiki:TracIni#trac-section trac.ini] must be set to a comma-separated list of repository names to be synchronized.

Note that in this case, the changeset listener extension point is not called, and therefore plugins using it will not work correctly.


== Migration from a single-repository setup (Subversion) == #Migration
The following procedure illustrates a typical migration from a Subversion single-repository setup to multiple repositories.

 1. Remove the default repository specification from the `[trac] repository_dir` option.
 1. Add the "main" repository as a named repository.
 1. Re-synchronize the main repository.
 1. Set up post-commit and post-revprop-change hooks on the main repository, and set `[trac] repository_sync_per_request` to an empty value.
 1. Add a hidden alias to the main repository as the default repository. This ensures that all links predating the migration still resolve to the main repository.
 1. Repeat steps 2, 3 and 4 to add other (named) repositories as needed.

== Migration from a single-repository setup (Mercurial) == #MigrationMercurial
The following procedure illustrates a typical migration from a Mercurial single-repository setup to multiple repositories. Please note that at the time of writing, no initial resynchronization or any hooks are necessary for Mercurial repositories - see #9485 for more information.

 1. Upgrade to the latest version of the TracMercurial plugin.
 1. Remove the default repository specification from the `[trac] repository_dir` option.
 1. Add the "main" repository as a named repository.
 1. Add a hidden alias to the main repository as the default repository. This ensures that all links predating the migration still resolve to the main repository.
 1. Repeat step 3 to add other (named) repositories as needed.

== Troubleshooting ==

=== My trac-post-commit-hook doesn''t work anymore === #trac-post-commit-hook

You must now use the optional components from `tracopt.ticket.commit_updater.*`, which you can activate through the Plugins panel in the Administrative part of the web interface, or by directly modifying the [TracIni#components-section "[components]"] section in the trac.ini. Be sure to use [#ExplicitSync explicit synchronization] as explained above.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRevisionLog',2,1309617955812000,'trac','127.0.0.1','= Viewing Revision Logs =
[[TracGuideToc]]

When you browse the repository, it''s always possible to query the 
''''Revision Log'''' view corresponding to the path you''re currently seeing.
This will display a list of the most recent changesets in which the 
current path or any other path below it has been modified.

== The Revision Log Form ==

It''s possible to set the revision at which the revision log should
start, using the ''''View log starting at'''' field. An empty value
or a value of ''''head'''' is taken to be the newest changeset. 

It''s also possible to specify the revision at which the log should
stop, using the ''''back to'''' field. By default, it''s left empty, 
which means the revision log will stop as soon as 100 revisions have 
been listed.

Also, there are three modes of operation of the revision log.

By default, the revision log ''''stops on copy'''', which means that 
whenever an ''''Add'''', ''''Copy'''' or ''''Rename'''' operation is detected, 
no older revision will be shown. That''s very convenient when working
with branches, as one only sees the history corresponding to what
has been done on the branch.

It''s also possible to indicate that one wants to see what happened
before a ''''Copy'''' or ''''Rename'''' change, by selecting the 
''''Follow copies'''' mode. This will cross all copies or renames changes.
Each time the name of the path changes, there will be an additional
indentation level. That way, the changes on the different paths
are easily grouped together visually.

It''s even possible to go past an ''''Add'''' change, in order to see 
if there has been a ''''Delete'''' change on that path, before 
that ''''Add''''. This mode corresponds to the mode called 
''''Show only adds, moves and deletes''''. 
While quite useful at times, be aware that this operation is quite 
resource intensive.

Finally, there''s also a checkbox ''''Show full log messages'''',
which controls whether the full content of the commit log message
should be displayed for each change, or only a shortened version of it.

== The Revision Log Information ==

For each revision log entry, there are 7 columns:
 1. The first column contains a pair of radio buttons and should be used 
    for selecting the ''''old'''' and the ''''new'''' revisions that will be 
    used for [wiki:TracRevisionLog#viewingtheactualchanges viewing the actual changes].
 1. A color code (similar to the one used for the
    [wiki:TracChangeset#ChangesetHeader changesets]) indicating kind of change.
    Clicking on this column refreshes the revision log so that it restarts
    with this change.
 1. The ''''''Revision'''''' number, displayed as `@xyz`.
    This is a link to the TracBrowser, using the displayed revision as the base line.
 Next to it, you can see a little "wheel" icon [[Image(htdocs:../common/changeset.png)]],  which is clickable and leads to the TracChangeset view for that revision.
 1. The ''''''Date'''''' at which the change was made.
    The date is displayed as the time elapsed from the date of the revision. The time
    elapsed is displayed as the number of hours, days, weeks, months, or years.
 1. The ''''''Author'''''' of the change.
 1. The ''''''Log Message'''''', which contains either the truncated or full commit 
    log message, depending on the value of the ''''Show full log messages'''' 
    checkbox in the form above.
    

== Inspecting Changes Between Revisions ==

The ''''View changes...'''' buttons (placed above and below the list
of changes, on the left side) will show the set of differences
corresponding to the aggregated changes starting from the ''''old''''
revision (first radio-button) to the ''''new'''' revision (second
radio-button), in the TracChangeset view.

Note that the ''''old'''' revision doesn''t need to be actually 
''''older'''' than the ''''new'''' revision: it simply gives a base
for the diff. It''s therefore entirely possible to easily 
generate a ''''reverse diff'''', for reverting what has been done
in the given range of revisions.

Finally, if the two revisions are identical, the corresponding
changeset will be shown (same effect as clicking on the !ChangeSet number).

== Alternative Formats ==

=== The !ChangeLog Text ===

At the bottom of the page, there''s a ''''!ChangeLog'''' link
that will show the range of revisions as currently shown,
but as a simple text, matching the usual conventions for
!ChangeLog files.

=== RSS Support ===

The revision log also provides a RSS feed to monitor the changes.
To subscribe to a RSS feed for a file or directory, open its
revision log in the browser and click the orange ''XML'' icon at the bottom
of the page. For more information on RSS support in Trac, see TracRss.

----
See also: TracBrowser, TracChangeset, TracGuide',NULL,NULL);
INSERT INTO "wiki" VALUES('TracStandalone',2,1309617955842000,'trac','127.0.0.1','= Tracd =

Tracd is a lightweight standalone Trac web server.
It can be used in a variety of situations, from a test or development server to a multiprocess setup behind another web server used as a load balancer.

== Pros ==

 * Fewer dependencies: You don''t need to install apache or any other web-server.
 * Fast: Should be almost as fast as the [wiki:TracModPython mod_python] version (and much faster than the [wiki:TracCgi CGI]), even more so since version 0.12 where the HTTP/1.1 version of the protocol is enabled by default
 * Automatic reloading: For development, Tracd can be used in ''''auto_reload'''' mode, which will automatically restart the server whenever you make a change to the code (in Trac itself or in a plugin).

== Cons ==

 * Fewer features: Tracd implements a very simple web-server and is not as configurable or as scalable as Apache httpd.
 * No native HTTPS support: [http://www.rickk.com/sslwrap/ sslwrap] can be used instead,
   or [http://trac.edgewall.org/wiki/STunnelTracd stunnel -- a tutorial on how to use stunnel with tracd] or Apache with mod_proxy.

== Usage examples ==

A single project on port 8080. (http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
Stricly speaking this will make your Trac accessible to everybody from your network rather than ''''localhost only''''. To truly limit it use ''''--hostname'''' option.
{{{
 $ tracd --hostname=localhost -p 8080 /path/to/project
}}}
With more than one project. (http://localhost:8080/project1/ and http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}

You can''t have the last portion of the path identical between the projects since Trac uses that name to keep the URLs of the
different projects unique. So if you use `/project1/path/to` and `/project2/path/to`, you will only see the second project.

An alternative way to serve multiple projects is to specify a parent directory in which each subdirectory is a Trac project, using the `-e` option. The example above could be rewritten:
{{{
 $ tracd -p 8080 -e /path/to
}}}

To exit the server on Windows, be sure to use {{{CTRL-BREAK}}} -- using {{{CTRL-C}}} will leave a Python process running in the background.

== Installing as a Windows Service ==

=== Option 1 ===
To install as a Windows service, get the [http://www.google.com/search?q=srvany.exe SRVANY] utility and run:
{{{
 C:\path\to\instsrv.exe tracd C:\path\to\srvany.exe
 reg add HKLM\SYSTEM\CurrentControlSet\Services\tracd\Parameters /v Application /d "\"C:\path\to\python.exe\" \"C:\path\to\python\scripts\tracd-script.py\" <your tracd parameters>"
 net start tracd
}}}

''''''DO NOT'''''' use {{{tracd.exe}}}.  Instead register {{{python.exe}}} directly with {{{tracd-script.py}}} as a parameter.  If you use {{{tracd.exe}}}, it will spawn the python process without SRVANY''s knowledge.  This python process will survive a {{{net stop tracd}}}.

If you want tracd to start automatically when you boot Windows, do:
{{{
 sc config tracd start= auto
}}}

The spacing here is important.

{{{#!div
Once the service is installed, it might be simpler to run the Registry Editor rather than use the `reg add` command documented above.  Navigate to:[[BR]]
`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\tracd\Parameters`

Three (string) parameters are provided:
||!AppDirectory ||C:\Python26\ ||
||Application ||python.exe ||
||!AppParameters ||scripts\tracd-script.py -p 8080 ... ||

Note that, if the !AppDirectory is set as above, the paths of the executable ''''and'''' of the script name and parameter values are relative to the directory.  This makes updating Python a little simpler because the change can be limited, here, to a single point.
(This is true for the path to the .htpasswd file, as well, despite the documentation calling out the /full/path/to/htpasswd; however, you may not wish to store that file under the Python directory.)
}}}

For Windows 7 User, srvany.exe may not be an option, so you can use [http://www.google.com/search?q=winserv.exe WINSERV] utility and run:
{{{
"C:\path\to\winserv.exe" install tracd -displayname "tracd" -start auto "C:\path\to\python.exe" c:\path\to\python\scripts\tracd-script.py <your tracd parameters>"

net start tracd
}}}

=== Option 2 ===

Use [http://trac-hacks.org/wiki/WindowsServiceScript WindowsServiceScript], available at [http://trac-hacks.org/ Trac Hacks]. Installs, removes, starts, stops, etc. your Trac service.

== Using Authentication ==

Tracd provides support for both Basic and Digest authentication. Digest is considered more secure. The examples below use Digest; to use Basic authentication, replace `--auth` with `--basic-auth` in the command line.

The general format for using authentication is:
{{{
 $ tracd -p port --auth="base_project_dir,password_file_path,realm" project_path
}}}
where:
 * ''''''base_project_dir'''''': the base directory of the project specified as follows:
   * when serving multiple projects: ''''relative'''' to the `project_path`
   * when serving only a single project (`-s`): the name of the project directory
 Don''t use an absolute path here as this won''t work. ''''Note:'''' This parameter is case-sensitive even for environments on Windows.
 * ''''''password_file_path'''''': path to the password file
 * ''''''realm'''''': the realm name (can be anything)
 * ''''''project_path'''''': path of the project

 * **`--auth`** in the above means use Digest authentication, replace `--auth` with `--basic-auth` if you want to use Basic auth.  Although Basic authentication does not require a "realm", the command parser does, so the second comma is required, followed directly by the closing quote for an empty realm name.

Examples:

{{{
 $ tracd -p 8080 \
   --auth="project1,/path/to/passwordfile,mycompany.com" /path/to/project1
}}}

Of course, the password file can be be shared so that it is used for more than one project:
{{{
 $ tracd -p 8080 \
   --auth="project1,/path/to/passwordfile,mycompany.com" \
   --auth="project2,/path/to/passwordfile,mycompany.com" \
   /path/to/project1 /path/to/project2
}}}

Another way to share the password file is to specify "*" for the project name:
{{{
 $ tracd -p 8080 \
   --auth="*,/path/to/users.htdigest,mycompany.com" \
   /path/to/project1 /path/to/project2
}}}

=== Basic Authorization: Using a htpasswd password file ===
This section describes how to use `tracd` with Apache .htpasswd files.

To create a .htpasswd file use Apache''s `htpasswd` command (see [#GeneratingPasswordsWithoutApache below] for a method to create these files without using Apache):
{{{
 $ sudo htpasswd -c /path/to/env/.htpasswd username
}}}
then for additional users:
{{{
 $ sudo htpasswd /path/to/env/.htpasswd username2
}}}

Then to start `tracd` run something like this:
{{{
 $ tracd -p 8080 --basic-auth="projectdirname,/fullpath/environmentname/.htpasswd,realmname" /fullpath/environmentname
}}}

For example:
{{{
 $ tracd -p 8080 --basic-auth="testenv,/srv/tracenv/testenv/.htpasswd,My Test Env" /srv/tracenv/testenv
}}}
''''Note:'''' You might need to pass "-m" as a parameter to htpasswd on some platforms (OpenBSD).

=== Digest authentication: Using a htdigest password file ===

If you have Apache available, you can use the htdigest command to generate the password file. Type ''htdigest'' to get some usage instructions, or read [http://httpd.apache.org/docs/2.0/programs/htdigest.html this page] from the Apache manual to get precise instructions.  You''ll be prompted for a password to enter for each user that you create.  For the name of the password file, you can use whatever you like, but if you use something like `users.htdigest` it will remind you what the file contains. As a suggestion, put it in your <projectname>/conf folder along with the [TracIni trac.ini] file.

Note that you can start tracd without the --auth argument, but if you click on the ''''Login'''' link you will get an error.

=== Generating Passwords Without Apache ===

Basic Authorization can be accomplished via this [http://www.4webhelp.net/us/password.php online HTTP Password generator].  Copy the generated password-hash line to the .htpasswd file on your system.

You can use this simple Python script to generate a ''''''digest'''''' password file:

{{{
#!python
from optparse import OptionParser
# The md5 module is deprecated in Python 2.5
try:
    from hashlib import md5
except ImportError:
    from md5 import md5
realm = ''trac''

# build the options
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-u", "--username",action="store", dest="username", type = "string",
                  help="the username for whom to generate a password")
parser.add_option("-p", "--password",action="store", dest="password", type = "string",
                  help="the password to use")
parser.add_option("-r", "--realm",action="store", dest="realm", type = "string",
                  help="the realm in which to create the digest")
(options, args) = parser.parse_args()

# check options
if (options.username is None) or (options.password is None):
   parser.error("You must supply both the username and password")
if (options.realm is not None):
   realm = options.realm
   
# Generate the string to enter into the htdigest file
kd = lambda x: md5('':''.join(x)).hexdigest()
print '':''.join((options.username, realm, kd([options.username, realm, options.password])))
}}}

Note: If you use the above script you must set the realm in the `--auth` argument to ''''''`trac`''''''. Example usage (assuming you saved the script as trac-digest.py):

{{{
 $ python trac-digest.py -u username -p password >> c:\digest.txt
 $ tracd --port 8000 --auth=proj_name,c:\digest.txt,trac c:\path\to\proj_name
}}}

==== Using `md5sum`
It is possible to use `md5sum` utility to generate digest-password file:
{{{
 $ printf "${user}:trac:${password}" | md5sum - >>user.htdigest
}}}
and manually delete " -" from the end and add "${user}:trac:" to the start of line from ''to-file''.

== Reference ==

Here''s the online help, as a reminder (`tracd --help`):
{{{
Usage: tracd [options] [projenv] ...

Options:
  --version             show program''s version number and exit
  -h, --help            show this help message and exit
  -a DIGESTAUTH, --auth=DIGESTAUTH
                        [projectdir],[htdigest_file],[realm]
  --basic-auth=BASICAUTH
                        [projectdir],[htpasswd_file],[realm]
  -p PORT, --port=PORT  the port number to bind to
  -b HOSTNAME, --hostname=HOSTNAME
                        the host name or IP address to bind to
  --protocol=PROTOCOL   http|scgi|ajp
  -q, --unquote         unquote PATH_INFO (may be needed when using ajp)
  --http10              use HTTP/1.0 protocol version (default)
  --http11              use HTTP/1.1 protocol version instead of HTTP/1.0
  -e PARENTDIR, --env-parent-dir=PARENTDIR
                        parent directory of the project environments
  --base-path=BASE_PATH
                        the initial portion of the request URL''s "path"
  -r, --auto-reload     restart automatically when sources are modified
  -s, --single-env      only serve a single project without the project list
}}}

== Tips ==

=== Serving static content ===

If `tracd` is the only web server used for the project, 
it can also be used to distribute static content 
(tarballs, Doxygen documentation, etc.)

This static content should be put in the `$TRAC_ENV/htdocs` folder,
and is accessed by URLs like `<project_URL>/chrome/site/...`.

Example: given a `$TRAC_ENV/htdocs/software-0.1.tar.gz` file,
the corresponding relative URL would be `/<project_name>/chrome/site/software-0.1.tar.gz`, 
which in turn can be written as `htdocs:software-0.1.tar.gz` (TracLinks syntax) or `[/<project_name>/chrome/site/software-0.1.tar.gz]` (relative link syntax). 

 ''''Support for `htdocs:` TracLinks syntax was added in version 0.10''''

=== Using tracd behind a proxy

In some situations when you choose to use tracd behind Apache or another web server.

In this situation, you might experience issues with redirects, like being redirected to URLs with the wrong host or protocol. In this case (and only in this case), setting the `[trac] use_base_url_for_redirect` to `true` can help, as this will force Trac to use the value of `[trac] base_url` for doing the redirects.

If you''re using the AJP protocol to connect with `tracd` (which is possible if you have flup installed), then you might experience problems with double quoting. Consider adding the `--unquote` parameter.

See also [trac:TracOnWindowsIisAjp], [trac:TracNginxRecipe].

=== Serving a different base path than / ===
Tracd supports serving projects with different base urls than /<project>. The parameter name to change this is
{{{
 $ tracd --base-path=/some/path
}}}

----
See also: TracInstall, TracCgi, TracModPython, TracGuide, [trac:TracOnWindowsStandalone#RunningTracdasservice Running tracd.exe as a Windows service]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSupport',2,1309617955852000,'trac','127.0.0.1','= Trac Support =

Like in most [http://www.opensource.org/ open source projects], "free" Trac support is available primarily through the community itself, mainly through the [trac:MailingList mailing list] and the [trac: project wiki].

There is also an [trac:IrcChannel IRC channel], where people might be able to help out. Much of the ''live'' development discussions also happen there.

Before you start a new support query, make sure you''ve done the appropriate searching:
 * in the project''s [trac:TracFaq FAQ]
 * in past messages to the [http://groups.google.com/group/trac-users Trac Users Mailing List]
 * in the Trac ticket system, using either a [trac:search:?q=&ticket=on&wiki=on full search] or a [trac:query: ticket query].

Please ''''''don''t'''''' create a ticket in trac.egdewall.org for asking a support question about Trac. Only use it when you face a ''''real'''' and ''''new'''' bug in Trac, and do so only after having read the [trac:NewTicketGuidelines NewTicketGuidelines]. The more a bug report or enhancement request complies with those guidelines, the higher the chances are that it will be fixed or implemented promptly!

----
See also: [trac:MailingList], [trac:TracTroubleshooting], [trac:CommercialServices]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracTickets',2,1309617955872000,'trac','127.0.0.1','= The Trac Ticket System =
[[TracGuideToc]]

The Trac ticket database provides simple but effective tracking of issues and bugs within a project.

As the central project management element of Trac, tickets are used for ''''''project tasks'''''', ''''''feature requests'''''', ''''''bug reports'''''' and ''''''software support issues''''''. 

As with the TracWiki, this subsystem has been designed with the goal of making user contribution and participation as simple as possible. It should be as easy as possible to report bugs, ask questions and suggest improvements.

An issue is assigned to a person who must resolve it or reassign the ticket to someone else.
All tickets can be edited, annotated, assigned, prioritized and discussed at any time.

== Ticket Fields ==

A  ticket contains the following information attributes:
 
 * ''''''Reporter'''''' — The author of the ticket.
 * ''''''Type'''''' — The nature of the ticket (for example, defect or enhancement request)

 * ''''''Component'''''' — The project module or subsystem this ticket concerns.
 * ''''''Version'''''' — Version of the project that this ticket pertains to.
 * ''''''Keywords'''''' — Keywords that a ticket is marked with.  Useful for searching and report generation.

 * ''''''Priority'''''' — The importance of this issue, ranging from ''''trivial'''' to ''''blocker''''.
 * ''''''Milestone'''''' — When this issue should be resolved at the latest.
 * ''''''Assigned to/Owner'''''' — Principal person responsible for handling the issue.
 * ''''''Cc'''''' — A comma-separated list of other users or E-Mail addresses to notify. ''''Note that this does not imply responsiblity or any other policy.''''
 
 * ''''''Resolution'''''' — Reason for why a ticket was closed. One of {{{fixed}}}, {{{invalid}}}, {{{wontfix}}}, {{{duplicate}}}, {{{worksforme}}}.
 * ''''''Status'''''' — What is the current status? One of {{{new}}}, {{{assigned}}}, {{{closed}}}, {{{reopened}}}.
 * ''''''Summary'''''' — A brief description summarizing the problem or issue.
 * ''''''Description'''''' — The body of the ticket. A good description should be specific, descriptive and to the point.

''''''Note:'''''' Versions of Trac prior to 0.9 did not have the ''''type'''' field, but instead provided a ''''severity'''' field and different default values for the ''''priority'''' field. This change was done to simplify the ticket model by removing the somewhat blurry distinction between ''''priority'''' and ''''severity''''. However, the old model is still available if you prefer it: just add/modify the default values of the ''''priority'''' and ''''severity'''', and optionally hide the ''''type'''' field by removing all the possible values through [wiki:TracAdmin trac-admin].

''''''Note:'''''' the [trac:TicketTypes type], [trac:TicketComponent component], version, priority and severity fields can be managed with [wiki:TracAdmin trac-admin] or with the [trac:WebAdmin WebAdmin] plugin.

''''''Note:'''''' Description of the builtin ''''priority'''' values is available at [trac:TicketTypes#Whyistheseverityfieldgone TicketTypes]

== Changing and Commenting Tickets ==

Once a ticket has been entered into Trac, you can at any time change the
information by ''''''annotating'''''' the bug. This means changes and comments to
the ticket are logged as a part of the ticket itself.

When viewing a ticket, the history of changes will appear below the main ticket area.

''''In the Trac project, we use ticket comments to discuss issues and tasks. This makes
understanding the motivation behind a design- or implementation choice easier,
when returning to it later.''''

''''''Note:'''''' An important feature is being able to use TracLinks and
WikiFormatting in ticket descriptions and comments. Use TracLinks to refer to
other issues, changesets or files to make your ticket more specific and easier
to understand.

''''''Note:'''''' See TracNotification for how to configure email notifications of ticket changes.

''''''Note:'''''' See TracWorkflow for information about the state transitions (ticket lifecycle), and how this workflow can be customized.

== Default Values for Drop-Down Fields ==

The option selected by default for the various drop-down fields can be set in [wiki:TracIni trac.ini], in the `[ticket]` section:

 * `default_component`: Name of the component selected by default
 * `default_milestone`: Name of the default milestone
 * `default_priority`: Default priority value
 * `default_severity`: Default severity value
 * `default_type`: Default ticket type
 * `default_version`: Name of the default version
 * `default_owner`: Name of the default owner, ''''if no owner for the component has been set''''

If any of these options are omitted, the default value will either be the first in the list, or an empty value, depending on whether the field in question is required to be set.  Some of these can be chosen through the [trac:WebAdmin WebAdmin] plugin in the "Ticket System" section (others in the "trac.ini" section).  The default owner for a ticket will be the component owner, if that is set, or `default_owner`, if not.


== Hiding Fields and Adding Custom Fields ==

Many of the default ticket fields can be hidden from the ticket web interface simply by removing all the possible values through [wiki:TracAdmin trac-admin]. This of course only applies to drop-down fields, such as ''''type'''', ''''priority'''', ''''severity'''', ''''component'''', ''''version'''' and ''''milestone''''.

Trac also lets you add your own custom ticket fields. See TracTicketsCustomFields for more information.


== Assign-to as Drop-Down List ==

If the list of possible ticket owners is finite, you can change the ''''assign-to'''' ticket field from a text input to a drop-down list. This is done by setting the `restrict_owner` option of the `[ticket]` section in [wiki:TracIni trac.ini] to “true”. In that case, Trac will use the list of all users who have accessed the project to populate the drop-down field.

To appear in the dropdown list, a user needs be registered with the project, ''''i.e.'''' a user session should exist in the database. Such an entry is automatically created in the database the first time the user submits a change in the project, for example when editing the user''s details in the ''''Settings'''' page, or simply by authenticating if the user has a login. Also, the user must have `TICKET_MODIFY` [TracPermissions permissions].

''''''Note:'''''' See [http://pacopablo.com/wiki/pacopablo/blog/set-assign-to-drop-down Populating Assign To Drop Down] on how to add user entries at database level

''''''Note 2:'''''' If you need serious flexibility and aren''t afraid of a little plugin coding of your own, see [http://trac-hacks.org/wiki/FlexibleAssignToPlugin FlexibleAssignTo] (disclosure: I''m the author)

''''''Note 3:'''''' Activating this option may cause some performance degradation, read more about this in the [trac:TracPerformance#Configuration Trac performance] page.

== Preset Values for New Tickets ==

To create a link to the new-ticket form filled with preset values, you need to call the `/newticket?` URL with variable=value separated by &. 

Possible variables are :

 * ''''''type'''''' — The type droplist
 * ''''''reporter'''''' — Name or email of the reporter
 * ''''''summary'''''' — Summary line for the ticket
 * ''''''description'''''' — Long description of the ticket
 * ''''''component'''''' — The component droplist
 * ''''''version'''''' — The version droplist
 * ''''''severity'''''' — The severity droplist
 * ''''''keywords'''''' — The keywords 
 * ''''''priority'''''' — The priority droplist
 * ''''''milestone'''''' — The milestone droplist
 * ''''''owner'''''' — The person responsible for the ticket
 * ''''''cc'''''' — The list of emails for notifying about the ticket change

''''''Example:'''''' ''''/trac/newticket?summary=Compile%20Error&version=1.0&component=gui''''[[BR]]

----
See also:  TracGuide, TracWiki, TracTicketsCustomFields, TracNotification, TracReports, TracQuery
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracUpgrade',2,1309617955902000,'trac','127.0.0.1','= Upgrade Instructions =
[[TracGuideToc]]

== Instructions ==

Typically, there are seven steps involved in upgrading to a newer version of Trac:

=== 1. Update the Trac Code === #UpdatetheTracCode

Get the new version as described in TracInstall, or your operating system specific procedure.

If you already have a 0.11 version of Trac installed via `easy_install`, it might be easiest to also use `easy_install` to upgrade your Trac installation:

{{{
# easy_install --upgrade Trac==0.12
}}}

If you do a manual (not operating system-specific) upgrade, you should also stop any running Trac servers before the installation. Doing "hot" upgrades is not advised, especially on Windows ([trac:#7265]).

You may also want to remove the pre-existing Trac code by deleting the `trac` directory from the Python `lib/site-packages` directory, or remove Trac `.egg` files from former versions.
The location of the site-packages directory depends on the operating system and the location in which Python was installed. However, the following locations are typical:
 * on Linux: `/usr/lib/python2.X/site-packages`
 * on Windows: `C:\Python2.X\lib\site-packages`
 * on MacOSX: `/Library/Python/2.X/site-packages`

You may also want to remove the Trac `cgi-bin`, `htdocs`, `templates` and `wiki-default` directories that are commonly found in a directory called `share/trac`. (The exact location depends on your platform.)

This cleanup is not mandatory, but makes it easier to troubleshoot issues later on, as you won''t waste your time looking at code or templates from a previous release that are not being used anymore... As usual, make a backup before actually deleting things.

=== 2. Upgrade the Trac Environment === #UpgradetheTracEnvironment

Environment upgrades are not necessary for minor version releases unless otherwise noted. 

After restarting, Trac should show the instances which need a manual upgrade via the automated upgrade scripts to ease the pain. These scripts are run via [TracAdmin trac-admin]:
{{{
trac-admin /path/to/projenv upgrade
}}}

This command will do nothing if the environment is already up-to-date.

Note that a backup of your database will be performed automatically prior to the upgrade. 
This feature is relatively new for the PostgreSQL or MySQL database backends, so if it fails, you will have to backup the database manually. Then, to perform the actual upgrade, run:
{{{
trac-admin /path/to/projenv upgrade --no-backup
}}}

=== 3. Update the Trac Documentation === #UpdatetheTracDocumentation

Every [TracEnvironment Trac environment] includes a copy of the Trac documentation for the installed version. As you probably want to keep the included documentation in sync with the installed version of Trac, [TracAdmin trac-admin] provides a command to upgrade the documentation:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

Note that this procedure will leave your `WikiStart` page intact.

=== 4. Resynchronize the Trac Environment Against the Source Code Repository ===

Each [TracEnvironment Trac environment] must be resynchronized against the source code repository in order to avoid errors such as "[http://trac.edgewall.org/ticket/6120 No changeset ??? in the repository]" while browsing the source through the Trac interface:

{{{
trac-admin /path/to/projenv repository resync ''*''
}}}

=== 5. Refresh static resources ===

If you have set up a web server to give out static resources directly (accessed using the `/chrome/` URL) then you will need to refresh them using the same command:
{{{
trac-admin /path/to/env deploy /deploy/path
}}}
this will extract static resources and CGI scripts (`trac.wsgi`, etc) from new Trac version and its plugins into `/deploy/path`.

Some web browsers cache CSS and Javascript files persistently, so you may need to instruct your users to manually erase the contents of their browser''s cache.

=== 6. Steps specific to a given Trac version  ===
==== Upgrading from Trac 0.11 to Trac 0.12 ====
===== Python 2.3 no longer supported =====
The minimum supported version of python is now 2.4

===== SQLite v3.x required =====
SQLite v2.x is no longer supported. If you still use a Trac database of this format, you''ll need to convert it to SQLite v3.x first. See [trac:PySqlite#UpgradingSQLitefrom2.xto3.x] for details.

===== PySqlite 2 required =====
PySqlite 1.1.x is no longer supported. Please install 2.5.5 or later if possible (see [#Tracdatabaseupgrade Trac database upgrade] below).

===== Multiple Repository Support =====
The latest version includes support for multiple repositories. If you plan to add more repositories to your Trac instance, please refer to TracRepositoryAdmin#Migration.

This may be of interest to users with only one repository, since there''s now a way to avoid the potentially costly resync check at every request.

===== Improved repository synchronization =====
In addition to supporting multiple repositories, there is now a more efficient method for synchronizing Trac and your repositories.

While you can keep the same synchronization as in 0.11 adding the post-commit hook as outlined in TracRepositoryAdmin#Synchronization and TracRepositoryAdmin#ExplicitSync will allow more efficient synchronization and is more or less required for multiple repositories.

Note that if you were using the `trac-post-commit-hook`, ''''you''re strongly advised to upgrade it'''' to the new hook documented in the above references, as the old hook will not work with anything else than the default repository and even for this case, it won''t trigger the appropriate notifications.

===== Authz permission checking =====
The authz permission checking has been migrated to a fine-grained permission policy. If you use authz permissions (aka `[trac] authz_file` and `authz_module_name`), you must add `AuthzSourcePolicy` in front of your permission policies in `[trac] permission_policies`. You must also remove `BROWSER_VIEW`, `CHANGESET_VIEW`, `FILE_VIEW` and `LOG_VIEW` from your global permissions (with `trac-admin $ENV permission remove` or the "Permissions" admin panel).

===== Microsecond timestamps =====
All timestamps in database tables (except the `session` table) have been changed from "seconds since epoch" to "microseconds since epoch" values. This change should be transparent to most users, except for custom reports. If any of your reports use date/time columns in calculations (e.g. to pass them to `datetime()`), you must divide the values retrieved from the database by 1''000''000. Similarly, if a report provides a calculated value to be displayed as a date/time (i.e. with a column named "time", "datetime", "changetime", "date", "created" or "modified"), you must provide a microsecond timestamp, that is, multiply your previous calculation with 1''000''000.

==== Upgrading from Trac 0.10 to Trac 0.11 ====
===== Site Templates and Styles =====
The templating engine has changed in 0.11 to Genshi, please look at TracInterfaceCustomization for more information.

If you are using custom CSS styles or modified templates in the `templates` directory of the TracEnvironment, you will need to convert them to the Genshi way of doing things. To continue to use your style sheet, follow the instructions at TracInterfaceCustomization#SiteAppearance.

===== Trac Macros, Plugins =====
The Trac macros will need to be adapted, as the old-style wiki-macros are not supported anymore (due to the drop of [trac:ClearSilver] and the HDF); they need to be converted to the new-style macros, see WikiMacros. When they are converted to the new style, they need to be placed into the plugins directory instead and not wiki-macros, which is no longer scanned for macros or plugins.

===== For FCGI/WSGI/CGI users =====
For those who run Trac under the CGI environment, run this command in order to obtain the trac.*gi file:
{{{
trac-admin /path/to/env deploy /deploy/directory/path
}}}

This will create a deploy directory with the following two subdirectories: `cgi-bin` and `htdocs`. Then update your Apache configuration file `httpd.conf` with this new `trac.cgi` location and `htdocs` location.

===== Web Admin plugin integrated =====
If you had the webadmin plugin installed, you can uninstall it as it is part of the Trac code base since 0.11.

=== 7. Restart the Web Server === #RestarttheWebServer

If you are not running [wiki:TracCgi CGI], reload the new Trac code by restarting your web server.

== Known Issues ==

=== parent dir ===
If you use a trac parent env configuration and one of the plugins in one child does not work, none of the children work.

=== Wiki Upgrade ===
`trac-admin` will not delete or remove default wiki pages that were present in a previous version but are no longer in the new version.

=== Trac database upgrade ===

A known issue in some versions of PySqlite (2.5.2-2.5.4) prevents the trac-admin upgrade script from successfully upgrading the database format. It is advised to use either a newer or older version of the sqlite python bindings to avoid this error. For more details see ticket [trac:#9434].

== Upgrading Python ==

Upgrading Python to a newer version will require reinstallation of Python packages: Trac of course; also [http://pypi.python.org/pypi/setuptools easy_install], if you''ve been using that.  Assuming you''re using Subversion, you''ll also need to upgrade the Python bindings for svn.

=== Windows and Python 2.6 ===

If you''ve been using !CollabNet''s Subversion package, you may need to uninstall that in favor of [http://alagazam.net/ Algazam], which has the Python bindings readily available (see TracSubversion).  The good news is, that works with no tweaking.

== Changing Database Backend ==
=== SQLite to PostgreSQL ===

The [http://trac-hacks.org/wiki/SqliteToPgScript sqlite2pg] script on [http://trac-hacks.org trac-hacks.org] has been written to assist in migrating a SQLite database to a PostgreSQL database

== Older Versions ==

For upgrades from versions older than Trac 0.10, refer first to [trac:wiki:0.10/TracUpgrade#SpecificVersions].

-----
See also: TracGuide, TracInstall
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiFormatting',2,1309617955932000,'trac','127.0.0.1','= WikiFormatting =
[[TracGuideToc]]

Wiki markup is a core feature in Trac, tightly integrating all the other parts of Trac into a flexible and powerful whole.

Trac has a built in small and powerful wiki rendering engine. This wiki engine implements an ever growing subset of the commands from other popular Wikis,
especially [http://moinmo.in/ MoinMoin] and [trac:WikiCreole].


This page will give you an in-depth explanation of the wiki markup available anywhere WikiFormatting is allowed.

The ''''Cheat sheet'''' below gives you a quick overview for the most common syntax, each link in the ''''Category'''' column will lead you to the more detailed explanation later in this page.

A few other wiki pages present the advanced features of the Trac wiki markup in more depth: 
 - TracLinks covers all the possible ways to refer precisely to any Trac resource or parts thereof,
 - WikiPageNames talks about the various names a wiki page can take, CamelCase or not
 - WikiMacros lists the macros available for generating dynamic content,
 - WikiProcessors and WikiHtml details how parts of the wiki text can be processed in special ways


== Cheat sheet ==

||= ''''''Category'''''' =||= ''''''Wiki Markup'''''' =||= ''''''Display'''''' =||
|-----------------------------------------------------------
{{{#!th rowspan=3
[#FontStyles Font Styles]
}}}
|| `''''''bold''''''`, `''''italic''''`, `''''''''''Wikipedia style''''''''''` || \
|| ''''''bold'''''', ''''italic'''', ''''''''''Wikipedia style'''''''''' ||
|| {{{`monospaced and ''''nowiki''''`}}} || \
|| `monospaced and ''''nowiki''''` ||
|| `**bold**`, `//italic//`, `**//!WikiCreole style//**` || \
|| **bold**, //italic//, **//!WikiCreole style//** ||
|-----------------------------------------------------------
||= [#Headings Headings] =||\
{{{#!td 
 {{{
 == Level 2 ==
 === Level 3 ^([#hn note])^
 }}}
}}}
{{{#!td style="padding-left: 2em"
== Level 2 ==
=== Level 3 ^([#hn note])^
}}}
|-----------------------------------------------------------
||= [#Paragraphs Paragraphs]  =||\
{{{#!td
 {{{
 First paragraph
 on multiple lines.

 Second paragraph.
 }}}
}}}
{{{#!td
First paragraph
on multiple lines.

Second paragraph.
}}}
|-----------------------------------------------------------
||= [#Lists Lists] =||\
{{{#!td
 {{{
 * bullets list
   on multiple lines
   1. nested list
     a. different numbering 
        styles
 }}}
}}}
{{{#!td
* bullets list
  on multiple lines
  1. nested list
    a. different numbering
       styles
}}}
|-----------------------------------------------------------
{{{#!th
[#DefinitionLists Definition Lists]
}}}
{{{#!td
 {{{
  term:: definition on
         multiple lines
 }}}
}}}
{{{#!td
 term:: definition on
        multiple lines
}}}
|-----------------------------------------------------------
||= [#PreformattedText Preformatted Text] =||\
{{{#!td
 {{{
 {{{
 multiple lines, ''''no wiki''''
       white space respected
 }}}
 }}}
}}}
{{{#!td
 {{{
 multiple lines, ''''no wiki''''
       white space respected
 }}}
}}}
|-----------------------------------------------------------
||= [#Blockquotes Blockquotes] =||\
{{{#!td
 {{{
   if there''s some leading
   space the text is quoted
 }}}
}}}
{{{#!td
 if there''s some leading
 space the text is quoted
}}}
|-----------------------------------------------------------
||= [#DiscussionCitations Discussion Citations] =||\
{{{#!td
 {{{
 >> ... (I said)
 > (he replied)
 }}}
}}}
{{{#!td
>>... (I said)
> (he replied)
}}}
|-----------------------------------------------------------
||= [#Tables Tables] =||\
{{{#!td
 {{{
 ||= Table Header =|| Cell ||
 ||||  (details below)  ||
 }}}
}}}
{{{#!td
||= Table Header =|| Cell ||
||||  (details below)  ||
}}}
|-----------------------------------------------------------
{{{#!th rowspan=2
[#Links Links]
}}}
|| `http://trac.edgewall.org` ||\
|| http://trac.edgewall.org ||
|| `WikiFormatting (CamelCase)` ||\
|| WikiFormatting (CamelCase) ||
|-----------------------------------------------------------
{{{#!th rowspan=5
[#TracLinks TracLinks]
}}}
|| `wiki:WikiFormatting`, `wiki:"WikiFormatting"` ||\
|| wiki:WikiFormatting, wiki:"WikiFormatting" ||
|| `#1 (ticket)`, `[1] (changeset)`, `{1} (report)` ||\
|| #1 (ticket), [1] (changeset), {1} (report) ||
|| `ticket:1, ticket:1#comment:1` ||\
|| ticket:1, ticket:1#comment:1 ||
|| `Ticket [ticket:1]`, `[ticket:1 ticket one]` ||\
|| Ticket [ticket:1], [ticket:1 ticket one] ||
|| `Ticket [[ticket:1]]`, `[[ticket:1|ticket one]]` ||\
|| Ticket [[ticket:1]], [[ticket:1|ticket one]] ||
|-----------------------------------------------------------
{{{#!th rowspan=2 
[#SettingAnchors Setting Anchors]
}}}
|| `[=#point1 (1)] First...` ||\
|| [=#point1 (1)] First... ||
|| `see [#point1 (1)]` ||\
|| see [#point1 (1)] ||
|-----------------------------------------------------------
{{{#!th rowspan=3
[#Escaping Escaping Markup]
}}}
|| `!'''' doubled quotes` ||\
|| !'''' doubled quotes ||
|| `!wiki:WikiFormatting`, `!WikiFormatting` ||\
|| !wiki:WikiFormatting, !WikiFormatting ||
|| `{{{-}}} curly brackets` ||\
|| {{{-}}} curly brackets ||
|-----------------------------------------------------------
||= [#Images Images] =|| `[[Image(`''''link''''`)]]` || [[Image(htdocs:../common/trac_logo_mini.png)]] ||
|-----------------------------------------------------------
{{{#!th rowspan=2
[#Macros Macros]
}}}
|| `[[MacroList(*)]]` ||  ''''(short list of all available macros)''''  ||
|| `[[Image?]]` ||  ''''(help for the Image macro)''''  ||
|-----------------------------------------------------------
||= [#Processors Processors] =||\
{{{#!td
 {{{
 {{{
 #!div style="font-size: 80%"
 Code highlighting:
   {{{#!python
   hello = lambda: "world"
   }}}
 }}}
 }}}
}}}
{{{#!td style="padding-left: 2em"
 {{{
 #!div style="font-size: 80%"
 Code highlighting:
   {{{#!python 
   hello = lambda: "world"
   }}}
 }}}
}}}
|-----------------------------------------------------------
||= [#Comments Comments] =||\
{{{#!td
 {{{
 {{{#!comment
 Note to Editors: ...
 }}}
 }}}
}}}
{{{#!td style="padding-left: 2em"
 {{{#!comment
 Note to Editors: ...
 }}}
}}}
|-----------------------------------------------------------
||= [#Miscellaneous Miscellaneous] =||\
{{{#!td
 {{{
 Line [[br]] break 
 Line \\ break
 ----
 }}}
}}}
{{{#!td style="padding-left: 2em"
Line [[br]] break
Line \\ break
----
}}}


== Font Styles ==

The Trac wiki supports the following font styles:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * ''''''bold'''''', 
     '''''' triple quotes !'''''' 
     can be bold too if prefixed by ! '''''', 
   * ''''italic''''
   * ''''''''''bold italic'''''''''' or ''''italic and
     '''''' italic bold '''''' ''''
   * __underline__
   * {{{monospace}}} or `monospace`
     (hence `{{{` or {{{`}}} quoting)
   * ~~strike-through~~
   * ^superscript^ 
   * ,,subscript,,
   * **also bold**, //italic as well//, 
     and **'''' bold italic **'''' //(since 0.12)//
  }}}
}}}
{{{#!td
 * ''''''bold'''''', 
   '''''' triple quotes !'''''' 
   can be bold too if prefixed by ! '''''', 
 * ''''italic''''
 * ''''''''''bold italic'''''''''' or ''''italic and
   '''''' italic bold '''''' ''''
 * __underline__
 * {{{monospace}}} or `monospace`
   (hence `{{{` or {{{`}}} quoting)
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,
 * **also bold**, //italic as well//, 
   and **'''' bold italic **'''' //(since 0.12)//
}}}

Notes:
 * `{{{...}}}` and {{{`...`}}} commands not only select a monospace font, but also treat their content as verbatim text, meaning that no further wiki processing is done on this text.
 * {{{ ! }}} tells wiki parser to not take the following characters as wiki format, so pay attention to put a space after !, e.g. when ending bold.
 * all the font styles marks have to be used in opening/closing pairs, 
   and they must nest properly (in particular, an `''''` italic can''t be paired 
   with a `//` one, and `''''''` can''t be paired with `**`)


== Headings ==

You can create heading by starting a line with one up to six ''''equal'''' characters ("=")
followed by a single space and the headline text. 

[=#hn]
The headline text can be followed by the same number of "=" characters, but this is no longer mandatory.

Finally, the heading might optionally be followed by an explicit id. If not, an implicit but nevertheless readable id will be generated.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  = Heading =
  == Subheading
  === About ''''this'''' ===
  === Explicit id === #using-explicit-id-in-heading
  == Subheading #sub2
}}}
}}}
{{{#!td style="padding: 1em;"
  {{{
  #!div
  = Heading =
  == Subheading
  === About ''''this'''' ===
  === Explicit id === #using-explicit-id-in-heading
  == Subheading #sub2
  }}}
}}}

== Paragraphs ==

A new text paragraph is created whenever two blocks of text are separated by one or more empty lines.

A forced line break can also be inserted, using:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Line 1[[BR]]Line 2
  }}}
  {{{
  Paragraph
  one

  Paragraph 
  two
  }}}
}}}
{{{#!td
  Line 1[[BR]]Line 2

  Paragraph 
  one

  Paragraph 
  two
}}}

== Lists ==

The wiki supports both ordered/numbered and unordered lists.

Example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * Item 1
     * Item 1.1
        * Item 1.1.1   
        * Item 1.1.2
        * Item 1.1.3
     * Item 1.2
   * Item 2
  - items can start at the beginning of a line
    and they can span multiple lines
    - be careful though to continue the line 
    with the appropriate indentation, otherwise
  that will start a new paragraph...
  
   1. Item 1
     a. Item 1.a
     a. Item 1.b
        i. Item 1.b.i
        i. Item 1.b.ii
   1. Item 2
  And numbered lists can also be restarted
  with an explicit number:
   3. Item 3
  }}}
}}}
{{{#!td
 * Item 1
   * Item 1.1
      * Item 1.1.1   
      * Item 1.1.2
      * Item 1.1.3
   * Item 1.2
 * Item 2
- items can start at the beginning of a line
  and they can span multiple lines
  - be careful though to continue the line 
  with the appropriate indentation, otherwise
that will start a new paragraph...

 1. Item 1
   a. Item 1.a
   a. Item 1.b
      i. Item 1.b.i
      i. Item 1.b.ii
 1. Item 2
And numbered lists can also be restarted with an explicit number:
 3. Item 3
}}}


== Definition Lists ==

The wiki also supports definition lists.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   llama::
     some kind of mammal, with hair
   ppython::
     some kind of reptile, without hair
     (can you spot the typo?)
  }}}
}}}
{{{#!td
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)
}}}

Note that you need a space in front of the defined term.


== Preformatted Text ==

Block containing preformatted text are suitable for source code snippets, notes and examples. Use three ''''curly braces'''' wrapped around the text to define a block quote. The curly braces need to be on a separate line.
  
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  def HelloWorld():
      print ''''''Hello World''''''
  }}}
  }}}
}}}
{{{#!td
  {{{
  def HelloWorld():
      print ''''''Hello World''''''
  }}}
}}}

Note that this kind of block is also used for selecting lines that should be processed through WikiProcessors.

== Blockquotes ==

In order to mark a paragraph as blockquote, indent that paragraph with two spaces.

||= Wiki Markup =||= Display =||
{{{#!td
{{{
Paragraph
  This text is a quote from someone else.
}}}
}}}
{{{#!td
Paragraph
  This text is a quote from someone else.
}}}

== Discussion Citations ==

To delineate a citation in an ongoing discussion thread, such as the ticket comment area, e-mail-like citation marks (">", ">>", etc.) may be used.  

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  >> Someone''s original text
  > Someone else''s reply text
  >  - which can be any kind of Wiki markup
  My reply text
  }}}
}}}
{{{#!td
>> Someone''s original text
> Someone else''s reply text
>  - which can be any kind of Wiki markup
My reply text
}}}


== Tables ==
=== Simple Tables ===
Simple tables can be created like this:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||Cell 1||Cell 2||Cell 3||
  ||Cell 4||Cell 5||Cell 6||
  }}}
}}}
{{{#!td style="padding: 2em;"
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}

Cell headings can be specified by wrapping the content in a pair of ''='' characters.
Note that the ''='' characters have to stick to the cell separators, like this:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||        ||= stable =||= latest =||
  ||= 0.10 =||  0.10.5  || 0.10.6dev||
  ||= 0.11 =||  0.11.6  || 0.11.7dev||
  }}}
}}}
{{{#!td style="padding: 2em;"
||        ||= stable =||= latest =||
||= 0.10 =||  0.10.5  || 0.10.6dev||
||= 0.11 =||  0.11.6  || 0.11.7dev||
}}}

Finally, specifying an empty cell means that the next non empty cell will span the empty cells. For example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  || 1 || 2 || 3 ||
  |||| 1-2 || 3 ||
  || 1 |||| 2-3 ||
  |||||| 1-2-3 ||
  }}}
}}}
{{{#!td style="padding: 2em;"
|| 1 || 2 || 3 ||
|||| 1-2 || 3 ||
|| 1 |||| 2-3 ||
|||||| 1-2-3 ||
}}}

Note that if the content of a cell "sticks" to one side of the cell and only one, then the text will be aligned on that side. Example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||=Text =||= Numbers =||
  ||left align    ||        1.0||
  ||  center      ||        4.5||
  ||      right align||     4.5||
  || default alignment ||   2.5||
  ||default||         2.5||
  ||  default ||      2.5||
  || default ||       2.5||
  }}}
}}}
{{{#!td style="padding: 2em;"
||=Text =||= Numbers =||
||left align    ||        1.0||
||  center      ||        4.5||
||      right align||     4.5||
|| default alignment ||   2.5||
||default||         2.5||
||  default ||      2.5||
|| default ||       2.5||
}}}

If contrary to the example above, the cells in your table contain more text, it might be convenient to spread a table row over multiple lines of markup. The `\` character placed at the end of a line after a cell separator tells Trac to not start a new row for the cells on the next line.

||= Wiki Markup =||
{{{#!td
  {{{
  || this is column 1 [http://trac.edgewall.org/newticket new ticket] || \
  || this is column 2 [http://trac.edgewall.org/roadmap the road ahead] || \
  || that''s column 3 and last one ||
  }}}
}}}
|-------------
||= Display =||
{{{#!td style="padding: 2em;"
|| this is column 1 [http://trac.edgewall.org/newticket new ticket] || \
|| this is column 2 [http://trac.edgewall.org/roadmap the road ahead] || \
|| that''s column 3 and last one ||
}}}

=== Complex Tables ===

If the possibilities offered by the simple "pipe"-based markup for tables described above are not enough for your needs, you can create more elaborated tables by using [#Processors-example-tables WikiProcessor based tables].


== Links ==

Hyperlinks are automatically created for WikiPageNames and URLs. !WikiPageLinks can be disabled by prepending an exclamation mark "!" character, such as {{{!WikiPageLink}}}.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  TitleIndex, http://www.edgewall.com/, !NotAlink
  }}}
}}}
{{{#!td
TitleIndex, http://www.edgewall.com/, !NotAlink
}}}

Links can be given a more descriptive title by writing the link followed by a space and a title and all this inside square brackets. 
If the descriptive title is omitted, then the explicit prefix is discarded, unless the link is an external link. This can be useful for wiki pages not adhering to the WikiPageNames convention.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * [http://www.edgewall.com Edgewall Software]
   * [wiki:TitleIndex Title Index] 
   * [wiki:TitleIndex] 
   * [wiki:ISO9000]
  }}}
}}}
{{{#!td
   * [http://www.edgewall.com Edgewall Software]
   * [wiki:TitleIndex Title Index] 
   * [wiki:TitleIndex] 
   * [wiki:ISO9000]
}}}

Following the [trac:WikiCreole] trend, the descriptive title can also be specified by writing the link followed by a pipe (''|'') and a title and all this inside //double// square brackets. 

{{{#!td
  {{{
   * [[http://www.edgewall.com|Edgewall Software]]
   * [[wiki:TitleIndex|Title Index]]
     or even [[TitleIndex|Title Index]]
   * [[wiki:TitleIndex]]
     '''''' but not ![[TitleIndex]]! ''''''
   * [[ISO9000]]
  }}}
}}}
{{{#!td
   * [[http://www.edgewall.com|Edgewall Software]]
   * [[wiki:TitleIndex|Title Index]]
     or even [[TitleIndex|Title Index]]
   * [[wiki:TitleIndex]]
     '''''' but not ![[TitleIndex]]! ''''''
   * [[ISO9000]]
}}}

''''''Note'''''': the [trac:WikiCreole] style for links is quick to type and
certainly looks familiar as it''s the one used on Wikipedia and in many
other wikis. Unfortunately it conflicts with the syntax for [#Macros macros].
So in the rare case when you need to refer to a page which is named after
a macro (typical examples being TitleIndex, InterTrac and InterWiki), 
by writing `[[TitleIndex]]` you will actually call the macro instead of linking
to the page.

== Trac Links ==

Wiki pages can link directly to other parts of the Trac system. Pages can refer to tickets, reports, changesets, milestones, source files and other Wiki pages using the following notations:

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * Tickets: #1 or ticket:1
   * Reports: {1} or report:1
   * Changesets: r1, [1] or changeset:1
   * ...
   * targeting other Trac instances, 
     so called InterTrac links:
     - Tickets: #Trac1 or Trac:ticket:1
     - Changesets: [Trac1] or Trac:changeset:1
  }}}
}}}
{{{#!td
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * ... 
 * targeting other Trac instances, 
   so called InterTrac links:
   - Tickets: #Trac1 or Trac:ticket:1
   - Changesets: [Trac1] or Trac:changeset:1
}}}

There are many more flavors of Trac links, see TracLinks for more in-depth information and a reference for all the default link resolvers.


== Setting Anchors ==

An anchor, or more correctly speaking, an [http://www.w3.org/TR/REC-html40/struct/links.html#h-12.2.1 anchor name] can be added explicitly at any place in the Wiki page, in order to uniquely identify a position in the document:

{{{
[=#point1]
}}}

This syntax was chosen to match the format for explicitly naming the header id [#Headings documented above]. For example:
{{{
== Long title == #title
}}}

It''s also very close to the syntax for the corresponding link to that anchor:
{{{
[#point1]
}}}

Optionally, a label can be given to the anchor:
{{{
[[=#point1 ''''''Point 1'''''']]
}}}

||= Wiki Markup =||= Display =||
|----------------------------------
{{{#!td
  {{{
  [#point2 jump to the second point]

  ...

  Point2:  [=#point2] Jump here
  }}}
}}}
{{{#!td
  [#point2 jump to the second point]

  ...

  Point2:  [=#point2] Jump here
}}}

For more complex anchors (e.g. when a custom title is wanted), one can use the Span macro, e.g. `[[span(id=point2, class=wikianchor, title=Point 2, ^(2)^)]]`.


== Escaping Links, WikiPageNames and other Markup == #Escaping

You may avoid making hyperlinks out of TracLinks by preceding an expression with a single "!" (exclamation mark).

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   !NoHyperLink
   !#42 is not a link
  }}}
  {{{
Various forms of escaping for list markup:
 `-` escaped minus sign \\
 ``1. escaped number  \\
 {{{*}}} escaped asterisk sign
  }}}
}}}
{{{#!td
 !NoHyperLink
 !#42 is not a link

Various forms of escaping for list markup:
 `-` escaped minus sign \\
 ``1. escaped number  \\
 {{{*}}} escaped asterisk sign
}}}

== Images ==

Urls ending with `.png`, `.gif` or `.jpg` are no longer automatically interpreted as image links, and converted to `<img>` tags.

You now have to use the ![[Image]] macro. The simplest way to include an image is to upload it as attachment to the current page, and put the filename in a macro call like `[[Image(picture.gif)]]`.

In addition to the current page, it is possible to refer to other resources:
 * `[[Image(wiki:WikiFormatting:picture.gif)]]` (referring to attachment on another page)
 * `[[Image(ticket:1:picture.gif)]]` (file attached to a ticket)
 * `[[Image(htdocs:picture.gif)]]` (referring to a file inside the [TracEnvironment environment] `htdocs` directory)
 * `[[Image(source:/trunk/trac/htdocs/trac_logo_mini.png)]]` (a file in repository)

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[Image(htdocs:../common/trac_logo_mini.png)]]
  }}}
}}}
{{{#!td
[[Image(htdocs:../common/trac_logo_mini.png)]]
}}}

See WikiMacros for further documentation on the `[[Image()]]` macro, which has several useful options (`title=`, `link=`, etc.)


== Macros ==

Macros are ''''custom functions'''' to insert dynamic content in a page.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[RecentChanges(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
[[RecentChanges(Trac,3)]]
}}}

See WikiMacros for more information, and a list of installed macros.

The detailed help for a specific macro can also be obtained more directly by appending a "?" to the macro name.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[MacroList?]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
[[MacroList?]]
}}}


== Processors ==

Trac supports alternative markup formats using WikiProcessors. For example, processors are used to write pages in 
[wiki:WikiRestructuredText reStructuredText] or [wiki:WikiHtml HTML]. 

||= Wiki Markup =||= Display =||
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

   [=#Processors-example-html Example 1:] HTML

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{
  #!html
  <h1 style="text-align: right; color: blue">
   HTML Test
  </h1>
  }}}
  }}}
}}}
{{{#!td valign="top"  style="border: 0px"

{{{
#!html
<h1 style="text-align: right; color: blue">HTML Test</h1>
}}}

}}}
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

   [=#Processors-example-highlight Example 2:] Code Highlighting

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{
  #!python
  class Test:
  
      def __init__(self):
          print "Hello World"
  if __name__ == ''__main__'':
     Test()
  }}}
  }}}
}}}
{{{
#!td valign="top"  style="border: 0px"

{{{
#!python
class Test:
    def __init__(self):
        print "Hello World"
if __name__ == ''__main__'':
   Test()
}}}

}}}
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

       [=#Processors-example-tables Example 3:] Complex Tables

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{#!th rowspan=4 align=justify
  With the `#td` and `#th` processors,
  table cells can contain any content:
  }}}
  |----------------
  {{{#!td
    - lists
    - embedded tables
    - simple multiline content
  }}}
  |----------------
  {{{#!td
  As processors can be easily nested, 
  so can be tables:
    {{{#!th
    Example:
    }}}
    {{{#!td style="background: #eef"
    || must be at the third level now... ||
    }}}
  }}}
  |----------------
  {{{#!td
  Even when you don''t have complex markup,
  this form of table cells can be convenient
  to write content on multiple lines.
  }}}
  }}}
}}}
{{{
#!td  valign="top"  style="border: 0px"

  {{{#!th rowspan=4 align=justify
  With the `#td` and `#th` processors,
  table cells can contain any content:
  }}}
  |----------------
  {{{#!td
    - lists
    - embedded tables
    - simple multiline content
  }}}
  |----------------
  {{{#!td
  As processors can be easily nested, 
  so can be tables:
    {{{#!th
    Example:
    }}}
    {{{#!td style="background: #eef"
    || must be at the third level now... ||
    }}}
  }}}
  |----------------
  {{{#!td
  Even when you don''t have complex markup,
  this form of table cells can be convenient
  to write content on multiple lines.
  }}}

}}}

See WikiProcessors for more information.


== Comments ==

Comments can be added to the plain text. These will not be rendered and will not display in any other format than plain text.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Nothing to
  {{{
  #!comment
  Your comment for editors here
  }}}
  see ;-)
  }}}
}}}
{{{#!td
  Nothing to
  {{{
  #!comment
  Your comment for editors here
  }}}
  see ;-)
}}}

== Miscellaneous ==

An horizontal line can be used to separated different parts of your page:

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Four or more dashes will be replaced 
  by an horizontal line (<HR>)
  ----
  See?
  }}}
}}}
{{{#!td
Four or more dashes will be replaced
by an horizontal line (<HR>)
----
See?
}}}
|----------------------------------
{{{#!td
  {{{
  "macro" style [[br]] line break
  }}}
}}}
{{{#!td
"macro" style [[br]] line break
}}}
|----------------------------------
{{{#!td
  {{{
  !WikiCreole style \\ line\\break
  }}}
}}}
{{{#!td
!WikiCreole style \\ line\\break
}}}

',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiMacros',2,1309617955962000,'trac','127.0.0.1','= Trac Macros =

[[PageOutline]]

Trac macros are plugins to extend the Trac engine with custom ''functions'' written in Python. A macro inserts dynamic HTML data in any context supporting WikiFormatting.

Another kind of macros are WikiProcessors. They typically deal with alternate markup formats and representation of larger blocks of information (like source code highlighting).

== Using Macros ==

Macro calls are enclosed in two ''''square brackets''''. Like Python functions, macros can also have arguments, a comma separated list within parentheses.

=== Getting Detailed Help ===
The list of available macros and the full help can be obtained using the !MacroList macro, as seen [#AvailableMacros below].

A brief list can be obtained via ![[MacroList(*)]] or ![[?]].

Detailed help on a specific macro can be obtained by passing it as an argument to !MacroList, e.g. ![[MacroList(MacroList)]], or, more conveniently, by appending a question mark (?) to the macro''s name, like in ![[MacroList?]].



=== Example ===

A list of 3 most recently changed wiki pages starting with ''Trac'':

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[RecentChanges(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em;"
[[RecentChanges(Trac,3)]]
}}}
|-----------------------------------
{{{#!td
  {{{
  [[RecentChanges?(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em;"
[[RecentChanges?(Trac,3)]]
}}}
|-----------------------------------
{{{#!td
  {{{
  [[?]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
{{{#!html 
<div style="font-size: 80%" class="trac-macrolist">
<h3><code>[[Image]]</code></h3>Embed an image in wiki-formatted text.

The first argument is the file …
<h3><code>[[InterTrac]]</code></h3>Provide a list of known <a class="wiki" href="/wiki/InterTrac">InterTrac</a> prefixes.
<h3><code>[[InterWiki]]</code></h3>Provide a description list for the known <a class="wiki" href="/wiki/InterWiki">InterWiki</a> prefixes.
<h3><code>[[KnownMimeTypes]]</code></h3>List all known mime-types which can be used as <a class="wiki" href="/wiki/WikiProcessors">WikiProcessors</a>.
Can be …</div>
}}}
etc.
}}}

== Available Macros ==

''''Note that the following list will only contain the macro documentation if you''ve not enabled `-OO` optimizations, or not set the `PythonOptimize` option for [wiki:TracModPython mod_python].''''

[[MacroList]]

== Macros from around the world ==

The [http://trac-hacks.org/ Trac Hacks] site provides a wide collection of macros and other Trac [TracPlugins plugins] contributed by the Trac community. If you''re looking for new macros, or have written one that you''d like to share with the world, please don''t hesitate to visit that site.

== Developing Custom Macros ==
Macros, like Trac itself, are written in the [http://python.org/ Python programming language] and are developed as part of TracPlugins.

For more information about developing macros, see the [trac:TracDev development resources] on the main project site.


Here are 2 simple examples showing how to create a Macro with Trac 0.11. 

Also, have a look at [trac:source:tags/trac-0.11/sample-plugins/Timestamp.py Timestamp.py] for an example that shows the difference between old style and new style macros and at the [trac:source:tags/trac-0.11/wiki-macros/README macros/README] which provides a little more insight about the transition.

=== Macro without arguments ===
To test the following code, you should saved it in a `timestamp_sample.py` file located in the TracEnvironment''s `plugins/` directory.
{{{
#!python
from datetime import datetime
# Note: since Trac 0.11, datetime objects are used internally

from genshi.builder import tag

from trac.util.datefmt import format_datetime, utc
from trac.wiki.macros import WikiMacroBase

class TimeStampMacro(WikiMacroBase):
    """Inserts the current time (in seconds) into the wiki page."""

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, text):
        t = datetime.now(utc)
        return tag.b(format_datetime(t, ''%c''))
}}}

=== Macro with arguments ===
To test the following code, you should saved it in a `helloworld_sample.py` file located in the TracEnvironment''s `plugins/` directory.
{{{
#!python
from genshi.core import Markup

from trac.wiki.macros import WikiMacroBase

class HelloWorldMacro(WikiMacroBase):
    """Simple HelloWorld macro.

    Note that the name of the class is meaningful:
     - it must end with "Macro"
     - what comes before "Macro" ends up being the macro name

    The documentation of the class (i.e. what you''re reading)
    will become the documentation of the macro, as shown by
    the !MacroList macro (usually used in the WikiMacros page).
    """

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, text, args):
        """Return some output that will be displayed in the Wiki content.

        `name` is the actual name of the macro (no surprise, here it''ll be
        `''HelloWorld''`),
        `text` is the text enclosed in parenthesis at the call of the macro.
          Note that if there are ''''no'''' parenthesis (like in, e.g.
          [[HelloWorld]]), then `text` is `None`.
        `args` are the arguments passed when HelloWorld is called using a
        `#!HelloWorld` code block.
        """
        return ''Hello World, text = %s, args = %s'' % \
            (Markup.escape(text), Markup.escape(repr(args)))

}}}

Note that `expand_macro` optionally takes a 4^th^ parameter ''''`args`''''. When the macro is called as a [WikiProcessors WikiProcessor], it''s also possible to pass `key=value` [WikiProcessors#UsingProcessors processor parameters]. If given, those are stored in a dictionary and passed in this extra `args` parameter. On the contrary, when called as a macro, `args` is  `None`. (''''since 0.12'''').

For example, when writing:
{{{
{{{#!HelloWorld style="polite"
<Hello World!>
}}}

{{{#!HelloWorld
<Hello World!>
}}}

[[HelloWorld(<Hello World!>)]]
}}}
One should get:
{{{
Hello World, text = <Hello World!> , args = {''style'': u''polite''}
Hello World, text = <Hello World!> , args = {}
Hello World, text = <Hello World!> , args = None
}}}

Note that the return value of `expand_macro` is ''''''not'''''' HTML escaped. Depending on the expected result, you should escape it by yourself (using `return Markup.escape(result)`) or, if this is indeed HTML, wrap it in a Markup object (`return Markup(result)`) with `Markup` coming from Genshi, (`from genshi.core import Markup`).  

You can also recursively use a wiki Formatter (`from trac.wiki import Formatter`) to process the `text` as wiki markup, for example by doing:

{{{
#!python
from genshi.core import Markup
from trac.wiki.macros import WikiMacroBase
from trac.wiki import Formatter
import StringIO

class HelloWorldMacro(WikiMacroBase):
	def expand_macro(self, formatter, name, text, args):
		text = "whatever ''''''wiki'''''' markup you want, even containing other macros"
		# Convert Wiki markup to HTML, new style
		out = StringIO.StringIO()
		Formatter(self.env, formatter.context).format(text, out)
		return Markup(out.getvalue())
}}}
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiProcessors',2,1309617955982000,'trac','127.0.0.1','= Wiki Processors =

Processors are WikiMacros designed to provide alternative markup formats for the [TracWiki Wiki engine]. Processors can be thought of as ''''macro functions to process user-edited text''''. 

Wiki processors can be used in any Wiki text throughout Trac,
for various different purposes, like:
 - [#CodeHighlightingSupport syntax highlighting] or for rendering text verbatim,
 - rendering [#HTMLrelated Wiki markup inside a context], 
   like inside <div> blocks or <span> or within <td> or <th> table cells,
 - using an alternative markup syntax, like [wiki:WikiHtml raw HTML] and
   [wiki:WikiRestructuredText Restructured Text],
   or [http://www.textism.com/tools/textile/ textile]


== Using Processors ==

To use a processor on a block of text, first delimit the lines using
a Wiki ''''code block'''':
{{{
{{{
The lines
that should be processed...
}}}
}}}

Immediately after the `{{{` or on the line just below, 
add `#!` followed by the ''''processor name''''.

{{{
{{{
#!processorname
The lines
that should be processed...
}}}
}}}

This is the "shebang" notation, familiar to most UNIX users.

Besides their content, some Wiki processors can also accept ''''parameters'''',
which are then given as `key=value` pairs after the processor name, 
on the same line. If `value` has to contain space, as it''s often the case for
the style parameter, a quoted string can be used (`key="value with space"`).

As some processors are meant to process Wiki markup, it''s quite possible to
''''nest'''' processor blocks.
You may want to indent the content of nested blocks for increased clarity,
this extra indentation will be ignored when processing the content.


== Examples ==

||= Wiki Markup =||= Display =||
{{{#!td colspan=2 align=center style="border: none"

                __Example 1__: Inserting raw HTML
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
{{{
{{{
<h1 style="color: grey">This is raw HTML</h1>
}}}
}}}
}}}
{{{#!td valign=top style="border: none; padding-left: 2em"
{{{
#!html
<h1 style="color: grey">This is raw HTML</h1>
}}}
}}}
|-----------------------------------------------------------------
{{{#!td colspan=2 align=center style="border: none"

     __Example 2__: Highlighted Python code in a <div> block with custom style
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
  {{{
  {{{#!div style="background: #ffd; border: 3px ridge"

  This is an example of embedded "code" block:

    {{{
    #!python
    def hello():
        return "world"
    }}}

  }}}
  }}}
}}}
{{{#!td valign=top style="border: none; padding: 1em"
  {{{#!div style="background: #ffd; border: 3px ridge"

  This is an example of embedded "code" block:

    {{{
    #!python
    def hello():
        return "world"
    }}}

  }}}
}}}
|-----------------------------------------------------------------
{{{#!td colspan=2 align=center style="border: none"

     __Example 3__: Searching tickets from a wiki page, by keywords.
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
  {{{
  {{{
  #!html
  <form action="/query" method="get"><div>
  <input type="text" name="keywords" value="~" size="30"/>
  <input type="submit" value="Search by Keywords"/>
  <!-- To control what fields show up use hidden fields
  <input type="hidden" name="col" value="id"/>
  <input type="hidden" name="col" value="summary"/>
  <input type="hidden" name="col" value="status"/>
  <input type="hidden" name="col" value="milestone"/>
  <input type="hidden" name="col" value="version"/>
  <input type="hidden" name="col" value="owner"/>
  <input type="hidden" name="col" value="priority"/>
  <input type="hidden" name="col" value="component"/>
  -->
  </div></form>
  }}}
  }}}
}}}
{{{#!td valign=top style="border: none; padding: 1em"
  {{{
  #!html
  <form action="/query" method="get"><div>
  <input type="text" name="keywords" value="~" size="30"/>
  <input type="submit" value="Search by Keywords"/>
  <!-- To control what fields show up use hidden fields
  <input type="hidden" name="col" value="id"/>
  <input type="hidden" name="col" value="summary"/>
  <input type="hidden" name="col" value="status"/>
  <input type="hidden" name="col" value="milestone"/>
  <input type="hidden" name="col" value="version"/>
  <input type="hidden" name="col" value="owner"/>
  <input type="hidden" name="col" value="priority"/>
  <input type="hidden" name="col" value="component"/>
  -->
  </div></form>
  }}}
}}}
== Available Processors ==

The following processors are included in the Trac distribution:

 `#!default` :: Present the text verbatim in a preformatted text block. 
                This is the same as specifying ''''no'''' processor name
                (and no `#!`)
 `#!comment` :: Do not process the text in this section (i.e. contents exist
                only in the plain text - not in the rendered page).

=== HTML related ===

 `#!html`        :: Insert custom HTML in a wiki page.
 `#!htmlcomment` :: Insert an HTML comment in a wiki page (''''since 0.12'''').

Note that `#!html` blocks have to be ''''self-contained'''',
i.e. you can''t start an HTML element in one block and close it later in a second block. Use the following processors for achieving a similar effect. 

  `#!div` :: Wrap an arbitrary Wiki content inside a <div> element
             (''''since 0.11'''').
 `#!span` :: Wrap an arbitrary Wiki content inside a <span> element 
             (''''since 0.11''''). 

 `#!td` :: Wrap an arbitrary Wiki content inside a <td> element (''''since 0.12'''')
 `#!th` :: Wrap an arbitrary Wiki content inside a <th> element (''''since 0.12'''') 
 `#!tr` :: Can optionally be used for wrapping `#!td` and `#!th` blocks,
       either for specifying row attributes of better visual grouping
       (''''since 0.12'''')

See WikiHtml for example usage and more details about these processors.

=== Other Markups ===

     `#!rst` :: Trac support for Restructured Text. See WikiRestructuredText.
 `#!textile` :: Supported if [http://cheeseshop.python.org/pypi/textile Textile] 
                is installed. 
                See [http://www.textism.com/tools/textile/ a Textile reference].


=== Code Highlighting Support ===

Trac includes processors to provide inline syntax highlighting:
 `#!c` (C), `#!cpp` (C++), `#!python` (Python), `#!perl` (Perl), 
 `#!ruby` (Ruby), `#!php` (PHP), `#!asp` (ASP), `#!java` (Java), 
 `#!js` (Javascript), `#!sql (SQL)`, `#!xml` (XML or HTML),
 `#!sh` (!Bourne/Bash shell), etc.

Trac relies on external software packages for syntax coloring,
like [http://pygments.org Pygments]. 

See TracSyntaxColoring for information about which languages
are supported and how to enable support for more languages.

Note also that by using the MIME type as processor, it is possible to syntax-highlight the same languages that are supported when browsing source code. For example, you can write:
{{{
{{{
#!text/html
<h1>text</h1>
}}}
}}}

The result will be syntax highlighted HTML code:
{{{
#!text/html
<h1>text</h1>
}}}

The same is valid for all other [TracSyntaxColoring#SyntaxColoringSupport mime types supported].


For more processor macros developed and/or contributed by users, visit: 
 * [trac:ProcessorBazaar]
 * [trac:MacroBazaar]
 * [th:WikiStart Trac Hacks] community site

Developing processors is no different from Wiki macros. 
In fact they work the same way, only the usage syntax differs. 
See WikiMacros#DevelopingCustomMacros for more information.


----
See also: WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiRestructuredText',2,1309617955992000,'trac','127.0.0.1','= reStructuredText Support in Trac =

Trac supports using ''''reStructuredText'''' (RST) as an alternative to wiki markup in any context WikiFormatting is used.

From the reStucturedText webpage:
 "''''reStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser   system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating  simple web pages, and for standalone documents. reStructuredText is designed for extensibility for  specific application domains. ''''"

If you want a file from your Subversion repository be displayed as reStructuredText in Trac''s source browser, set `text/x-rst` as value for the Subversion property `svn:mime-type`. See [trac:source:/trunk/INSTALL this example].

=== Requirements ===
Note that to activate RST support in Trac, the python docutils package must be installed. 
If not already available on your operating system, you can download it at the [http://docutils.sourceforge.net/rst.html RST Website].

Install docutils using `easy_install docutils`. Do not use the package manager of your OS (e.g. `apt-get install python-docutils`), because Trac will not find docutils then.

=== More information on RST ===

 * reStructuredText Website -- http://docutils.sourceforge.net/rst.html
 * RST Quick Reference -- http://docutils.sourceforge.net/docs/rst/quickref.html

----

== Using RST in Trac ==
To specify that a block of text should be parsed using RST, use the ''''rst'''' processor. 

=== TracLinks in reStructuredText ===

 * Trac provides a custom RST directive `trac::` to allow TracLinks from within RST text.
   ||= Wiki Markup ||= Display ||
   {{{#!td
     {{{
     {{{
     #!rst
     This is a reference to |a ticket|

     .. |a ticket| trac:: #42
     }}}
     }}}
   }}}
   {{{#!td
     {{{
     #!rst
     This is a reference to |a ticket|

     .. |a ticket| trac:: #42
     }}}
   }}}

 * Trac allows an even easier way of creating TracLinks in RST, using the custom `:trac:` role.
   ||= Wiki Markup ||= Display ||
   {{{#!td
     {{{
     {{{
     #!rst
     This is a reference to ticket `#12`:trac:

     To learn how to use Trac, see `TracGuide`:trac:
     }}}
     }}}
   }}}
   {{{#!td
     {{{
     #!rst
     This is a reference to ticket `#12`:trac:

     To learn how to use Trac, see `TracGuide`:trac:
     }}}
   }}}

 For a complete example of all uses of the `:trac:` role, please see WikiRestructuredTextLinks. 


=== Syntax highlighting in reStructuredText ===

There is a directive for doing TracSyntaxColoring in RST as well. The directive is called
code-block

||= Wiki Markup ||= Display ||
{{{#!td
  {{{
  {{{
  #!rst

  .. code-block:: python

     class Test:

         def TestFunction(self):
             pass
  
  }}}
  }}}
}}}
{{{#!td
  {{{
  #!rst

  .. code-block:: python

     class Test:

         def TestFunction(self):
             pass

  }}}
}}}
Note the need to indent the code at least one character after the `.. code-block` directive.

=== Wiki Macros in reStructuredText ===

For doing [WikiMacros Wiki Macros] in RST you use the same directive as for syntax highlighting i.e code-block.

||= Wiki Markup ||= Display ||
{{{#!td
  {{{
  {{{
  #!rst

  .. code-block:: RecentChanges

     Trac,3

  }}}
  }}}
}}}
{{{#!td
  {{{
  #!rst

  .. code-block:: RecentChanges

     Trac,3

  }}}
}}}

Or a more concise Wiki Macro like syntax is also available, using the `:code-block:` role:

||= Wiki Markup ||= Display ||
{{{#!td
  {{{
  {{{
  #!rst

  :code-block:`RecentChanges:Trac,3`
  }}}
  }}}
}}}
{{{#!td
  {{{
  #!rst

  :code-block:`RecentChanges:Trac,3`
  }}}
}}}

=== Bigger RST Example ===
The example below should be mostly self-explanatory:

||= Wiki Markup ||= Display ||
{{{#!td
{{{
#!html
<pre class="wiki">{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket `#42`:trac:.

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}</pre>
}}}
}}}
{{{#!td
{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket `#42`:trac:.

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}
}}}

----
See also: WikiRestructuredTextLinks, WikiProcessors, WikiFormatting
',NULL,NULL);
INSERT INTO "wiki" VALUES('CamelCase',2,1352317659894000,'trac','127.0.0.1','= !CamelCase =
New words created by smashing together capitalized words.

CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter; hence “AlabamA” and “ABc” will not be links.

== Customizing the Wiki behavior ==

Some people dislike linking by CamelCase.  While Trac remains faithful to the original Wiki style, it provides a number of ways to accomodate users with different preferences:
 * There''s an option (`ignore_missing_pages` in the [wiki:TracIni#wiki-section "[wiki]"] section of TracIni) to simply ignore links to missing pages when the link is written using the CamelCase style, instead of that word being replaced by a gray link followed by a question mark.[[BR]]
   That can be useful when CamelCase style is used to name code artifacts like class names and there''s no corresponding page for them.
 * There''s an option (`split_page_names` in the  [wiki:TracIni#wiki-section "[wiki]"] section of TracIni) to automatically insert space characters between the words of a CamelCase link when rendering the link.
 * Creation of explicit Wiki links is also easy, see WikiPageNames for details.
 * In addition, Wiki formatting can be disabled completely in some places (e.g. when rendering commit log messages). See `wiki_format_messages` in the [wiki:TracIni#changeset-section "[changeset]"] section of TracIni.

See TracIni for more information on the available options.

== More information on !CamelCase ==

 * http://c2.com/cgi/wiki?WikiCase
 * http://en.wikipedia.org/wiki/CamelCase

----
See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki
',NULL,NULL);
INSERT INTO "wiki" VALUES('InterTrac',2,1352317659905000,'trac','127.0.0.1','= InterTrac Links  =

Trac supports a convenient way to refer to resources of other Trac servers, from within the Wiki markup, since version 0.10.

== Definitions ==

An InterTrac link can be seen as a scoped TracLinks.
It is used for referring to a Trac resource 
(Wiki page, changeset, ticket, ...) located in another
Trac environment.

== List of Active InterTrac Prefixes ==

[[InterTrac]]

== Link Syntax ==

Simply use the name of the other Trac environment as a prefix, 
followed by a colon, ending with the resource located in the other environment.

{{{
<target_environment>:<TracLinks>
}}}

The other resource is specified using a regular TracLinks, of any flavor.

That target environment name is either the real name of the 
environment, or an alias for it. 
The aliases are defined in `trac.ini` (see below).
The prefix is case insensitive.

If the InterTrac link is enclosed in square brackets (like `[th:WikiExtrasPlugin]`), the InterTrac prefix is removed in the displayed link, like a normal link resolver would be (i.e. the above would be displayed as `WikiExtrasPlugin`).

For convenience, there''s also some alternative short-hand form, 
where one can use an alias as an immediate prefix 
for the identifier of a ticket, changeset or report:
(e.g. `#T234`, `[T1508]`, `[trac 1508]`, ...)

== Examples ==

It is necessary to setup a configuration for the InterTrac facility.
This configuration has to be done in the TracIni file, `[intertrac]` section.

Example configuration:
{{{
...
[intertrac]
# -- Example of setting up an alias:
t = trac

# -- Link to an external Trac:
trac.title = Edgewall''s Trac for Trac
trac.url = http://trac.edgewall.org
}}}

The `.url` is mandatory and is used for locating the other Trac.
This can be a relative URL in case that Trac environment is located 
on the same server.

The `.title` information will be used for providing an useful tooltip
when moving the cursor over an InterTrac links.

Finally, the `.compat` option can be used to activate or disable
a ''''compatibility'''' mode:
 * If the targeted Trac is running a version below [trac:milestone:0.10 0.10] 
   ([trac:r3526 r3526] to be precise), then it doesn''t know how to dispatch an InterTrac 
   link, and it''s up to the local Trac to prepare the correct link. 
   Not all links will work that way, but the most common do. 
   This is called the compatibility mode, and is `true` by default. 
 * If you know that the remote Trac knows how to dispatch InterTrac links, 
   you can explicitly disable this compatibility mode and then ''''any'''' 
   TracLinks can become an InterTrac link.

Now, given the above configuration, one could create the following links:
 * to this InterTrac page:
   * `trac:wiki:InterTrac` trac:wiki:InterTrac
   * `t:wiki:InterTrac` t:wiki:InterTrac
   * Keys are case insensitive: `T:wiki:InterTrac` T:wiki:InterTrac
 * to the ticket #234:
   * `trac:ticket:234` trac:ticket:234
   * `trac:#234` trac:#234 
   * `#T234` #T234
 * to the changeset [1912]:
   * `trac:changeset:1912` trac:changeset:1912
   * `[T1912]` [T1912]
 * to the log range [3300:3330]: ''''''(Note: the following ones need `trac.compat=false`)''''''
   * `trac:log:@3300:3330` trac:log:@3300:3330  
   * `[trac 3300:3330]` [trac 3300:3330] 
 * finally, to link to the start page of a remote trac, simply use its prefix followed by '':'', inside an explicit link. Example: `[th: Trac Hacks]` (''''since 0.11; note that the ''''remote'''' Trac has to run 0.11 for this to work'''')

The generic form `intertrac_prefix:module:id` is translated
to the corresponding URL `<remote>/module/id`, shorthand links
are specific to some modules (e.g. !#T234 is processed by the
ticket module) and for the rest (`intertrac_prefix:something`),
we rely on the TracSearch#quickjump facility of the remote Trac.

----
See also: TracLinks, InterWiki
',NULL,NULL);
INSERT INTO "wiki" VALUES('InterWiki',2,1352317659916000,'trac','127.0.0.1','= Support for InterWiki links =

''''(since [trac:milestone:0.10 0.10])''''

== Definition ==

An InterWiki link can be used for referring to a Wiki page
located in another Wiki system, and by extension, to any object
located in any other Web application, provided a simple URL 
mapping can be done.

At the extreme, InterWiki prefixes can even be used to simply introduce
links to new protocols, such as `tsvn:` used by [trac:TortoiseSvn TortoiseSvn].

== Link Syntax ==

{{{
<target_wiki>(:<identifier>)+
}}}

The link is composed by the targeted Wiki (or system) name,
followed by a colon (e.g. `MeatBall:`),
followed by a page specification in the target.
Note that, as for InterTrac prefixes, ''''''InterWiki prefixes are case insensitive''''''.

The target Wiki URL is looked up in the `[interwiki]` section of TracIni or in the InterMapTxt wiki page, modeled after MeatBall:InterMapTxt. If a prefix is defined in both the `[interwiki]` section and InterMapTxt, the `[interwiki]` section takes precedence.

In addition to traditional InterWiki links, where the target
is simply ''''appended'''' to the URL, 
Trac supports parametric InterWiki URLs:
identifiers `$1`, `$2`, ... in the URL
will be replaced by corresponding arguments.
The argument list is formed by splitting the page identifier
using the ":" separator.

=== [interwiki] ===
Every option in the `[interwiki]` section in TracIni defines one InterWiki prefix. The option name defines the prefix. The option value defines the URL, optionally followed by a description separated from the URL by whitespace. Parametric URLs are supported as well.

''''''Example:''''''
{{{
[interwiki]
MeatBall = http://www.usemod.com/cgi-bin/mb.pl?
PEP = http://www.python.org/peps/pep-$1.html Python Enhancement Proposal $1
tsvn = tsvn: Interact with TortoiseSvn
}}}

== Examples ==

If the following is an excerpt of the InterMapTxt page:

{{{
= InterMapTxt =
== This is the place for defining InterWiki prefixes ==

Currently active prefixes: [[InterWiki]]

This page is modelled after the MeatBall:InterMapTxt page.
In addition, an optional comment is allowed after the mapping.
----
{{{
PEP      http://www.python.org/peps/pep-$1.html           # Python Enhancement Proposal $1 
Trac-ML  http://thread.gmane.org/gmane.comp.version-control.subversion.trac.general/$1  # Message $1 in Trac Mailing List

tsvn     tsvn:                                            # Interact with TortoiseSvn
...
MeatBall http://www.usemod.com/cgi-bin/mb.pl?
MetaWiki http://sunir.org/apps/meta.pl?
MetaWikiPedia http://meta.wikipedia.org/wiki/
MoinMoin http://moinmoin.wikiwikiweb.de/
...
}}}
}}}

Then, 
 * `MoinMoin:InterWikiMap` should be rendered as MoinMoin:InterWikiMap
   and the ''''title'''' for that link would be "!InterWikiMap in !MoinMoin"
 * `Trac-ML:4346` should be rendered as Trac-ML:4346
   and the ''''title'''' for that link would be "Message 4346 in Trac Mailing List"

----
See also: InterTrac, InterMapTxt
',NULL,NULL);
INSERT INTO "wiki" VALUES('PageTemplates',2,1352317659938000,'trac','127.0.0.1','= Wiki Page Templates = 

  ''''(since [http://trac.edgewall.org/milestone/0.11 0.11])''''

The default content for a new wiki page can be chosen from a list of page templates. 

That list is made up from all the existing wiki pages having a name starting with ''''PageTemplates/''''.
The initial content of a new page will simply be the content of the chosen template page, or a blank page if the special ''''(blank page)'''' entry is selected. When there''s actually no wiki pages matching that prefix, the initial content will always be the blank page and the list selector will not be shown (i.e. this matches the behavior we had up to now).

To create a new template, simply create a new page having a name starting with ''''PageTemplates/''''.

(Hint: one could even create a ''''!PageTemplates/Template'''' for facilitating the creation of new templates!)

After you have created your new template, a drop-down selection box will automatically appear on any new wiki pages that are created.  By default it is located on the right side of the ''Create this page'' button.

Available templates: 
[[TitleIndex(PageTemplates/)]]
----
See also: TracWiki
',NULL,NULL);
INSERT INTO "wiki" VALUES('SandBox',3,1352317659960000,'trac','127.0.0.1','= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracAccessibility',2,1352317659982000,'trac','127.0.0.1','= Accessibility Support in Trac =

Not every user has a graphic environment with a mouse or other pointing device. Some users rely on keyboard, alternative keyboard or voice input to navigate links, activate form controls, etc. In Trac, we work to assure users may interact with devices other than a pointing device.

The keyboard shortcuts must be enabled for a session through the [/prefs/keybindings Keyboard Shortcuts] preferences panel.

Trac supports accessibility keys for the most common operations.
 - on Linux platforms, press any of the keys listed below in combination with the `<Alt>` key 
 - on a Mac, use the `<ctrl>` key instead
 - on Windows, you need to hit `<Shift> + <Alt> + <Key>`. This works for most browsers (Firefox, Chrome, Safari and Internet Explorer)

== Global Access Keys ==

 * `1` - WikiStart
 * `2` - [wiki:TracTimeline Timeline]
 * `3` - [wiki:TracRoadmap Roadmap]
 * `4` - [wiki:TracSearch Search]
 * `6` - [wiki:TracGuide Trac Guide / Documentation]
 * `7` - [wiki:TracTickets New Ticket]
 * `9` - [/about About Trac]
 * `0` - This page
 * `e` - Edit this page
 * `f` - Search


----
See also: TracGuide',NULL,NULL);
INSERT INTO "wiki" VALUES('TracBackup',2,1352317659993000,'trac','127.0.0.1','= Trac Backup =
[[TracGuideToc]]

Since Trac uses a database backend, some extra care is required to safely create a backup of a [wiki:TracEnvironment project environment]. Luckily, [wiki:TracAdmin trac-admin] has a command to make backups easier: `hotcopy`.

  ''''Note: Trac uses the `hotcopy` nomenclature to match that of [http://subversion.tigris.org/ Subversion], to make it easier to remember when managing both Trac and Subversion servers.''''

== Creating a Backup ==

To create a backup of a live TracEnvironment, simply run:
{{{

  $ trac-admin /path/to/projenv hotcopy /path/to/backupdir

}}}

[wiki:TracAdmin trac-admin] will lock the database while copying.''''

The resulting backup directory is safe to handle using standard file-based backup tools like `tar` or `dump`/`restore`.

Please, note, that hotcopy command does not overwrite target directory and when such exists, hotcopy ends with error: `Command failed: [Errno 17] File exists:` This is discussed in [trac:ticket:3198 #3198].

=== Restoring a Backup ===

Backups are simply a copied snapshot of the entire [wiki:TracEnvironment project environment] directory, including the SQLite database. 

To restore an environment from a backup, stop the process running Trac (i.e. the Web server or [wiki:TracStandalone tracd]), restore the contents of your backup (path/to/backupdir) to your [wiki:TracEnvironment project environment] directory and restart the service.

----
See also: TracAdmin, TracEnvironment, TracGuide, [trac:TracMigrate TracMigrate]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracBatchModify',1,1352317660004000,'trac','127.0.0.1','= Trac Ticket Batch Modification =
[[TracGuideToc]]

From [wiki:TracQuery custom query] results Trac provides support for modifying a batch of tickets in one request.

To perform a batch modification select the tickets you wish to modify and set the new field values using the section underneath the query results. 

== List fields

The `Keywords` and `Cc` fields are treated as lists, where list items can be added and/or removed in addition of replacing the entire list value. All list field controls accept multiple items (i.e. multiple keywords or cc addresses).
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracBrowser',2,1352317660026000,'trac','127.0.0.1','= The Trac Repository Browser =
[[TracGuideToc]]

The Trac repository browser can be used to browse specific revisions of directories 
and files stored in the repositories associated with the Trac environment.

''''(since 0.12)'''': 
At the top-level of the repository browser is the ''''''Repository Index'''''', 
listing all the configured repositories. 
Each repository has a name which is used as a path prefix in a 
"virtual" file hierarchy encompassing all the available repositories.
One of the repositories can be configured with an empty name; this is the default repository.  When such a default repository is present, its top-level files and directories 
are also listed, in a ''''''Default Repository'''''' section placed before the 
repository index. If the default repository is the only repository associated 
with the Trac environment the ''''''Repository Index'''''' will be omitted ^[#note-multirepos (1)]^.

Directory entries are displayed in a list with sortable columns. The list 
entries can be sorted by ''''Name'''', ''''Size'''', ''''Age'''' or ''''Author'''' by clicking on the column
headers. The sort order can be reversed by clicking on a given column
header again.

The browser can be used to navigate through the directory structure 
by clicking on the directory names. 
Clicking on a file name will show the contents of the file. 
Clicking on the revision number of a file or directory will take 
you to the TracRevisionLog for that file.
Note that there''s also a ''''Revision Log'''' navigation link that will do the 
same for the path currently being examined.
Clicking on the ''''diff'''' icon after revision number will display the changes made 
to the files modified in that revision.
Clicking on the ''''Age'''' of the file - will take you to that changeset in the timeline.

It''s also possible to browse directories or files as they were in history,
at any given repository revision. The default behavior is to display the
latest revision but another revision number can easily be selected using
the ''''View revision'''' input field at the top of the page.

The color bar next to the ''''Age'''' column gives a visual indication of the age
of the last change to a file or directory, following the convention that
''''''[[span(style=color:#88f,blue)]]'''''' is oldest and ''''''[[span(style=color:#f88,red)]]''''''
is newest, but this can be [TracIni#browser-section configured].

At the top of the browser page, there''s a ''''Visit'''' drop-down menu which you can use 
to select some interesting places in the repository, for example branches or tags. 
This is sometimes referred to as the ''''browser quickjump'''' facility.
The precise meaning and content of this menu depends on your repository backend.
For Subversion, this list contains by default the top-level trunk directory 
and sub-directories of the top-level branches and tags directories 
(`/trunk`, `/branches/*`, and `/tags/*`).  This can be [TracIni#svn-section configured] 
for more advanced cases.

If you''re using a Javascript enabled browser, you''ll be able to expand and 
collapse directories in-place by clicking on the arrow head at the right side of a 
directory. Alternatively, the [trac:TracKeys keyboard] can also be used for this: 
 - use `''j''` and `''k''` to select the next or previous entry, starting with the first
 - `''o''` (open) to toggle between expanded and collapsed state of the selected 
   directory or for visiting the selected file 
 - `''v''` (view, visit) and `''<Enter>''`, same as above
 - `''r''` can be used to force the reload of an already expanded directory
 - `''A''` can be used to directly visit a file in annotate (blame) mode
 - `''L''` to view the log for the selected entry
If no row has been selected using `''j''` or `''k''` these keys will operate on the entry under the mouse.

{{{#!comment
MMM: I guess that some keys are upper case and some lower to avoid conflicts with browser defined keys.
I find for example in Firefox and IE on windows that ''a'' works as well as ''A'' but ''l'' does not work for ''L''.
 cboos: ''l'' is reserved for Vim like behavior, see #7867
}}}

For the Subversion backend, some advanced additional features are available:
 - The `svn:needs-lock` property will be displayed
 - Support for the `svn:mergeinfo` property showing the merged and eligible information
 - Support for browsing the `svn:externals` property 
   (which can be [TracIni#svn:externals-section configured])
 - The `svn:mime-type` property is used to select the syntax highlighter for rendering 
   the file. For example, setting `svn:mime-type` to `text/html` will ensure the file is 
   highlighted as HTML, regardless of the file extension. It also allows selecting the character 
   encoding used in the file content. For example, if the file content is encoded in UTF-8, 
   set `svn:mime-type` to `text/html;charset=utf-8`. The `charset=` specification overrides the 
   default encoding defined in the `default_charset` option of the `[trac]` section 
   of [TracIni#trac-section trac.ini].
{{{#!comment
MMM: I found this section a bit hard to understand. I changed the first item as I understood that well.
but I think the other items could be changed also
 cboos: in the meantime, I''ve added the ''''advanced'''' word as a hint this can be a bit complex...
}}}


----
{{{#!div style="font-size:85%"
[=#note-multirepos (1)] This means that after upgrading a single-repository Trac of version 
0.11 (or below) to a multi-repository Trac (0.12), the repository browser will look and feel 
the same, that single repository becoming automatically the "default" repository.
}}}

See also: TracGuide, TracChangeset, TracFineGrainedPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracCgi',2,1352317660037000,'trac','127.0.0.1','= Installing Trac as CGI =

{{{
#!div class=important
  ''''Please note that using Trac via CGI is the slowest deployment method available. It is slower than [TracModPython mod_python], [TracFastCgi FastCGI] and even [trac:TracOnWindowsIisAjp IIS/AJP] on Windows.''''
}}}

CGI script is the entrypoint that web-server calls when a web-request to an application is made. To generate the `trac.cgi` script run:
{{{
trac-admin /path/to/env deploy /path/to/www/trac
}}}
`trac.cgi` will be in the `cgi-bin` folder inside the given path. ''''Make sure it is executable by your web server''''. This command also copies `static resource` files to a `htdocs` directory of a given destination.

== Apache web-server configuration ==

In [http://httpd.apache.org/ Apache] there are two ways to run Trac as CGI:

 1. Use a `ScriptAlias` directive that maps an URL to the `trac.cgi` script (recommended)
 2. Copy the `trac.cgi` file into the directory for CGI executables used by your web server (commonly named `cgi-bin`). You can also create a symbolic link, but in that case make sure that the `FollowSymLinks` option is enabled for the `cgi-bin` directory.

To make Trac available at `http://yourhost.example.org/trac` add `ScriptAlias` directive to Apache configuration file, changing `trac.cgi` path to match your installation:
{{{
ScriptAlias /trac /path/to/www/trac/cgi-bin/trac.cgi
}}}

 ''''Note that this directive requires enabled `mod_alias` module.''''

If you''re using Trac with a single project you need to set its location using the `TRAC_ENV` environment variable:
{{{
<Location "/trac">
  SetEnv TRAC_ENV "/path/to/projectenv"
</Location>
}}}

Or to use multiple projects you can specify their common parent directory using the `TRAC_ENV_PARENT_DIR` variable:
{{{
<Location "/trac">
  SetEnv TRAC_ENV_PARENT_DIR "/path/to/project/parent/dir"
</Location>
}}}

 ''''Note that the `SetEnv` directive requires enabled `mod_env` module. It is also possible to set TRAC_ENV in trac.cgi. Just add the following code between "try:" and "from trac.web ...":''''

{{{
    import os
    os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}

 '''' Or for TRAC_ENV_PARENT_DIR: ''''

{{{
    import os
    os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

If you are using the [http://httpd.apache.org/docs/suexec.html Apache suEXEC] feature please see [http://trac.edgewall.org/wiki/ApacheSuexec].

On some systems, you ''''may'''' need to edit the shebang line in the `trac.cgi` file to point to your real Python installation path. On a Windows system you may need to configure Windows to know how to execute a .cgi file (Explorer -> Tools -> Folder Options -> File Types -> CGI).

=== Using WSGI ===

You can run a [http://henry.precheur.org/python/how_to_serve_cgi WSGI handler] [http://pythonweb.org/projects/webmodules/doc/0.5.3/html_multipage/lib/example-webserver-web-wsgi-simple-cgi.html under CGI].  You can [wiki:TracModWSGI#Thetrac.wsgiscript write your own application function], or use the deployed trac.wsgi''s application.

== Mapping Static Resources ==

See TracInstall#MappingStaticResources.

== Adding Authentication ==

See TracInstall#ConfiguringAuthentication.

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI], TracFastCgi, TracModPython',NULL,NULL);
INSERT INTO "wiki" VALUES('TracChangeset',2,1352317660047000,'trac','127.0.0.1','= Trac Changeset Module =
[[TracGuideToc]]

Trac has a built-in functionality for visualizing “diffs” - changes to files.

There are different kinds of ''''change sets''''. 
Some can correspond to revisions made in the repositories,
others can aggregate changes made in several revisions, 
but in the end, any kind of differences can be shown.

The changeset view consists of two parts, the ''''header'''' 
and the ''''diff views''''.

== Changeset Header ==

The header shows an overview of the whole changeset.
Here you will find information such as:

 * Timestamp — When the changeset was commited
 * Author — Who commited the changeset
 * Message — A brief description from the author (the commit log message)
 * Location — Parent directory of all files affected by this changeset
 * Files — A list of files affected by this changeset

If more than one revision is involved in the set of changes being
displayed, the ''''Timestamp'''', ''''Author'''' and ''''Message'''' fields 
won''t be shown.

In front of each listed file, you''ll find  a colored rectangle. The color
indicates how the file is affected by the changeset.
 
 [[span(style=background:#bfb;border:1px solid #999;font-size:80%;margin-right:.5em,''''  '''')]] Green: Added \\
 [[span(style=background:#f88;border:1px solid #999;font-size:80%;margin-right:.5em,''''  '''')]] Red: Removed \\
 [[span(style=background:#fd8;border:1px solid #999;font-size:80%;margin-right:.5em,''''  '''')]] Yellow: Modified \\
 [[span(style=background:#88f;border:1px solid #999;font-size:80%;margin-right:.5em,''''  '''')]] Blue: Copied \\
 [[span(style=background:#ccc;border:1px solid #999;font-size:80%;margin-right:.5em,''''  '''')]] Gray: Moved \\
The color legend is located below the header as a reminder.

== Diff Views ==

Below the header is the main part of the changeset, the diff view. Each file is shown in a separate section, each of which will contain only the regions of the file that are affected by the changeset. There are two different styles of displaying the diffs: ''''inline'''' or ''''side-by-side'''' (you can switch between those styles using the preferences form):

 * The ''''inline'''' style shows the changed regions of a file underneath each other. A region removed from the file will be colored red, an added region will be colored green. If a region was modified, the old version is displayed above the new version. Line numbers on the left side indicate the exact position of the change in both the old and the new version of the file.
 * The ''''side-by-side'''' style shows the old version on the left and the new version on the right (this will typically require more screen width than the inline style.) Added and removed regions will be colored in the same way as with the inline style (green and red, respectively), but modified regions will have a yellow background.

In addition, various advanced options are available in the preferences form for adjusting the display of the diffs:
 * You can set how many lines are displayed before and after every change
   (if the value ''''all'''' is used, then the full file will be shown)
 * You can toggle whether blank lines, case changes and white space changes are ignored, thereby letting you find the functional changes more quickly


== The Different Ways to Get a Diff ==

=== Examining a Changeset ===

When viewing a repository check-in, such as when following a
changeset [wiki:TracLinks link] or a changeset event in the 
[wiki:TracTimeline timeline], Trac will display the exact changes
made by the check-in.

There will be also navigation links to the ''''Previous Changeset''''
to and ''''Next Changeset''''.

=== Examining Differences Between Revisions ===

Often you''ll want to look at changes made on a file 
or on a directory spanning multiple revisions. The easiest way
to get there is from the TracRevisionLog, where you can select
the ''''old'''' and the ''''new'''' revisions of the file or directory, and
then click the ''''View changes'''' button.

=== Examining Differences Between Branches ===

One of the core features of version control systems is the possibility
to work simultaneously on different ''''Lines of Developments'''', commonly
called “branches”. Trac enables you to examine the exact differences
between such branches.

Using the ''''''View changes ...'''''' button in the TracBrowser allows you to enter
''''From:'''' and ''''To:'''' path/revision pairs. The resulting set of differences consist
of the changes that should be applied to the ''''From:'''' content in order
to get to the ''''To:'''' content.

For convenience, it is possible to invert the roles of the ''''old'''' and the ''''new''''
path/revision pairs by clicking the ''''Reverse Diff'''' link on the changeset page.

=== Checking the Last Change ===

The last possibility for examining changes is to use the ''''Last Change''''
link provided by the TracBrowser.

This link will take you to the last change that was made on that path.
From there, you can use the ''''Previous Change'''' and ''''Next Change'''' links
to traverse the change history of the file or directory.

----
See also: TracGuide, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracEnvironment',2,1352317660058000,'trac','127.0.0.1','= The Trac Environment =

Trac uses a directory structure and a database for storing project data. The directory is referred to as the “environment”.

== Creating an Environment ==

A new Trac environment is created using  [TracAdmin#initenv trac-admin''s initenv]:
{{{
$ trac-admin /path/to/myproject initenv
}}}

`trac-admin` will ask you for the name of the project and the
database connection string (explained below).

=== Some Useful Tips
 - The user under which the web server runs will require file system write permission to 
 the environment directory and all the files inside. Please remember to set
 the appropriate permissions. The same applies to the source code repository, 
 although the user under which Trac runs will only require write access to a Subversion repository created with the BDB file system; for other repository types, check the corresponding plugin''s documentation. 
 
 - `initenv`, when using an svn repository, does not imply that trac-admin will perform `svnadmin create` for the specified repository path. You need to perform the `svnadmin create` prior to `trac-admin initenv` if you''re creating a new svn repository altogether with a new trac environment, otherwise you will see a message "Warning: couldn''t index the repository" when initializing the environment.

 - Non-ascii environment paths are not supported
 
 - Also, it seems that project names with spaces can be problematic for authentication (see [trac:#7163]).

 - TracPlugins located in a [TracIni#inherit-section shared plugins folder] that is defined in an [TracIni#GlobalConfiguration inherited configuration] are currently not loaded during creation, and hence, if they need to create extra tables for example, you''ll need to [TracUpgrade#UpgradetheTracEnvironment upgrade the environment] before being able to use it.

== Database Connection Strings ==

Since version 0.9, Trac supports both [http://sqlite.org/ SQLite] and
[http://www.postgresql.org/ PostgreSQL] database backends.  Preliminary
support for [http://mysql.com/ MySQL] was added in 0.10.  The default is
to use SQLite, which is probably sufficient for most projects. The database
file is then stored in the environment directory, and can easily be 
[wiki:TracBackup backed up] together with the rest of the environment.

=== SQLite Connection String ===
The connection string for an SQLite database is:
{{{
sqlite:db/trac.db
}}}
where `db/trac.db` is the path to the database file within the Trac environment.

=== PostgreSQL Connection String ===
If you want to use PostgreSQL or MySQL instead, you''ll have to use a
different connection string. For example, to connect to a PostgreSQL
database on the same machine called `trac`, that allows access to the
user `johndoe` with the password `letmein`, use:
{{{
postgres://johndoe:letmein@localhost/trac
}}}
''''Note that due to the way the above string is parsed, the "/" and "@" characters cannot be part of the password.''''

If PostgreSQL is running on a non-standard port (for example 9342), use:
{{{
postgres://johndoe:letmein@localhost:9342/trac
}}}

On UNIX, you might want to select a UNIX socket for the transport,
either the default socket as defined by the PGHOST environment variable:
{{{
postgres://user:password@/database
}}}
or a specific one:
{{{
postgres://user:password@/database?host=/path/to/socket/dir
}}}

Note that with PostgreSQL you will have to create the database before running
`trac-admin initenv`.

See the [http://www.postgresql.org/docs/ PostgreSQL documentation] for detailed instructions on how to administer [http://postgresql.org PostgreSQL].
Generally, the following is sufficient to create a database user named `tracuser`, and a database named `trac`.
{{{
createuser -U postgres -E -P tracuser
createdb -U postgres -O tracuser -E UTF8 trac
}}}
When running `createuser` you will be prompted for the password for the user ''tracuser''. This new user will not be a superuser, will not be allowed to create other databases and will not be allowed to create other roles. These privileges are not needed to run a trac instance. If no password is desired for the user, simply remove the `-P` and `-E` options from the `createuser` command.  Also note that the database should be created as UTF8. LATIN1 encoding causes errors trac''s use of unicode in trac.  SQL_ASCII also seems to work.

Under some default configurations (debian) one will have run the `createuser` and `createdb` scripts as the `postgres` user.  For example:
{{{
sudo su - postgres -c ''createuser -U postgres -S -D -R -E -P tracuser''
sudo su - postgres -c ''createdb -U postgres -O tracuser -E UTF8 trac''
}}}

Trac uses the `public` schema by default but you can specify a different schema in the connection string:
{{{
postgres://user:pass@server/database?schema=yourschemaname
}}}

=== MySQL Connection String ===

If you want to use MySQL instead, you''ll have to use a
different connection string. For example, to connect to a MySQL
database on the same machine called `trac`, that allows access to the
user `johndoe` with the password `letmein`, the mysql connection string is:
{{{
mysql://johndoe:letmein@localhost:3306/trac
}}}

== Source Code Repository ==

Since version 0.12, a single Trac environment can be connected to more than one repository. There are many different ways to connect repositories to an environment, see TracRepositoryAdmin. This page also details the various attributes that can be set for a repository (like `type`, `url`, `description`).

In Trac 0.12 `trac-admin` no longer asks questions related to repositories. Therefore, by default Trac is not connected to any source code repository, and the ''''Browse Source'''' toolbar item will not be displayed.
You can also explicitly disable the `trac.versioncontrol.*` components (which are otherwise still loaded)
{{{
[components]
trac.versioncontrol.* = disabled
}}}

For some version control systems, it is possible to specify not only the path to the repository,
but also a ''''scope'''' within the repository. Trac will then only show information
related to the files and changesets below that scope. The Subversion backend for
Trac supports this; for other types, check the corresponding plugin''s documentation.

Example of a configuration for a Subversion repository used as the default repository:
{{{
[trac]
repository_type = svn
repository_dir = /path/to/your/repository
}}}

The configuration for a scoped Subversion repository would be:
{{{
[trac]
repository_type = svn
repository_dir = /path/to/your/repository/scope/within/repos
}}}

== Directory Structure ==

An environment directory will usually consist of the following files and directories:

 * `README` - Brief description of the environment.
 * `VERSION` - Contains the environment version identifier.
 * `attachments` - Attachments to wiki pages and tickets are stored here.
 * `conf`
   * `trac.ini` - Main configuration file. See TracIni.
 * `db`
   * `trac.db` - The SQLite database (if you''re using SQLite).
 * `htdocs` - directory containing web resources, which can be referenced in Genshi templates using `/htdocs/site/...` URLs. ''''(since 0.11)''''
 * `log` - default directory for log files, if logging is turned on and a relative path is given.
 * `plugins` - Environment-specific [wiki:TracPlugins plugins] (Python eggs or single file plugins, since [trac:milestone:0.10 0.10])
 * `templates` - Custom Genshi environment-specific templates. ''''(since 0.11)''''
   * `site.html` - method to customize header, footer, and style, described in TracInterfaceCustomization#SiteAppearance

=== Caveat: don''t confuse a ''''Trac environment directory'''' with the ''''source code repository directory'''' #Caveat

This is a common beginners'' mistake.
It happens that the structure for a Trac environment is loosely modelled after the Subversion repository directory 
structure, but those are two disjoint entities and they are not and ''''must not'''' be located at the same place.

----
See also: TracAdmin, TracBackup, TracIni, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracFastCgi',3,1352317660091000,'trac','127.0.0.1','[[PageOutline]]

= Trac with FastCGI =

[http://www.fastcgi.com/ FastCGI] interface allows Trac to remain resident much like with [wiki:TracModPython mod_python] or [wiki:TracModWSGI mod_wsgi]. It is faster than external CGI interfaces which must start a new process for each request.  Additionally, it is supported by much wider variety of web servers.

Note that unlike mod_python, FastCGI supports [http://httpd.apache.org/docs/suexec.html Apache SuEXEC], i.e. run with different permissions than web server running with (`mod_wsgi` supports the `WSGIDaemonProcess` with user / group parameters to achieve the same effect).

''''''Note for Windows:'''''' Trac''s FastCGI does not run under Windows, as Windows does not implement `Socket.fromfd`, which is used by `_fcgi.py`. If you want to connect to IIS, you may want to try [trac:TracOnWindowsIisAjp AJP]/[trac:TracOnWindowsIisAjp ISAPI].

[[PageOutline(2-3,Overview,inline)]]


== Simple Apache configuration ==

There are two FastCGI modules commonly available for Apache: `mod_fastcgi` and
`mod_fcgid` (preferred). The latter is more up-to-date.

The following sections focus on the FCGI specific setup, see also [wiki:TracModWSGI#ConfiguringAuthentication] for configuring the authentication in Apache.

Regardless of which cgi module is used, be sure the web server has executable permissions on the cgi-bin folder. While FastCGI will throw specific permissions errors, mod_fcgid will throw an ambiguous error if this has not been done. (Connection reset by peer: mod_fcgid: error reading data from FastCGI server) 

=== Set up with `mod_fastcgi` ===
`mod_fastcgi` uses `FastCgiIpcDir` and `FastCgiConfig` directives that should be added to an appropriate Apache configuration file:
{{{
# Enable fastcgi for .fcgi files
# (If you''re using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}
Setting `FastCgiIpcDir` is optional if the default is suitable. Note that the `LoadModule` line must be after the `IfModule` group.

Configure `ScriptAlias` or similar options as described in TracCgi, but
calling `trac.fcgi` instead of `trac.cgi`.

Add the following to the Apache configuration file (below the `FastCgiIpcDir` line) if you intend to set up the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Alternatively, you can serve multiple Trac projects in a directory by adding this:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

=== Set up with `mod_fcgid` ===
Configure `ScriptAlias` (see TracCgi for details), but call `trac.fcgi`
instead of `trac.cgi`. Note that slash at the end - it is important.
{{{
ScriptAlias /trac /path/to/www/trac/cgi-bin/trac.fcgi/
}}}

To set up Trac environment for `mod_fcgid` it is necessary to use
`DefaultInitEnv` directive. It cannot be used in `Directory` or
`Location` context, so if you need to support multiple projects, try
alternative environment setup below.

{{{
DefaultInitEnv TRAC_ENV /path/to/env/trac/
}}}

=== alternative environment setup ===
A better method to specify path to Trac environment is to embed the path
into `trac.fcgi` script itself. That doesn''t require configuration of server
environment variables, works for both FastCgi modules
(and for [http://www.lighttpd.net/ lighttpd] and CGI as well):
{{{
import os
os.environ[''TRAC_ENV''] = "/path/to/projectenv"
}}}
or
{{{
import os
os.environ[''TRAC_ENV_PARENT_DIR''] = "/path/to/project/parent/dir"
}}}

With this method different projects can be supported by using different
`.fcgi` scripts with different `ScriptAliases`.

See [https://coderanger.net/~coderanger/httpd/fcgi_example.conf this fcgid example config] which uses a !ScriptAlias directive with trac.fcgi with a trailing / like this:
{{{
ScriptAlias / /srv/tracsite/cgi-bin/trac.fcgi/
}}}

== Simple Cherokee Configuration ==

The configuration on Cherokee''s side is quite simple. You will only need to know that you can spawn Trac as an SCGI process.
You can either start it manually, or better yet, automatically by letting Cherokee spawn the server whenever it is down.
First set up an information source in cherokee-admin with a local interpreter.

{{{
Host:
localhost:4433

Interpreter:
/usr/bin/tracd —single-env —daemonize —protocol=scgi —hostname=localhost —port=4433 /path/to/project/
}}}

If the port was not reachable, the interpreter command would be launched. Note that, in the definition of the information source, you will have to manually launch the spawner if you use a ''''Remote host'''' as ''''Information source'''' instead of a ''''Local interpreter''''.

After doing this, we will just have to create a new rule managed by the SCGI handler to access Trac. It can be created in a new virtual server, trac.example.net for instance, and will only need two rules. The ''''''default'''''' one will use the SCGI handler associated to the previously created information source.
The second rule will be there to serve the few static files needed to correctly display the Trac interface. Create it as ''''Directory rule'''' for ''''/common'''' and just set it to the ''''Static files'''' handler and with a ''''Document root'''' that points to the appropriate files: ''''$TRAC_LOCAL/htdocs/'''' (where $TRAC_LOCAL is a directory defined by the user or the system administrator to place local trac resources).

Note:\\
If the tracd process fails to start up, and cherokee displays a 503 error page, you might be missing the [http://trac.saddi.com/flup python-flup] package.\\
Python-flup is a dependency which provides trac with SCGI capability. You can install it on debian based systems with:
{{{
sudo apt-get install python-flup
}}}


== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd is a secure, fast, compliant and very flexible web-server that has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi`(prior to 0.11) / fcgi_frontend.py (0.11) with lighttpd add the following to your lighttpd.conf:
{{{
#var.fcgi_binary="/usr/bin/python /path/to/fcgi_frontend.py" # 0.11 if installed with easy_setup, it is inside the egg directory
var.fcgi_binary="/path/to/cgi-bin/trac.fcgi" # 0.10 name of prior fcgi executable
fastcgi.server = ("/trac" =>
   
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described above,
and you may set one of the two in `trac.fcgi` instead of in `lighttpd.conf`
using `bin-environment` (as in the section above on Apache configuration).

Note that lighttpd has a bug related to ''SCRIPT_NAME'' and ''PATH_INFO'' when the uri of fastcgi.server is ''/'' instead of ''/trac'' in this example (see [trac:#2418]). This should be fixed since lighttpd 1.4.23, and you may need to add `"fix-root-scriptname" => "enable"` as parameter of fastcgi.server.

For using two projects with lighttpd add the following to your `lighttpd.conf`:
{{{
fastcgi.server = ("/first" =>
                   ("first" =>
                    ("socket" => "/tmp/trac-fastcgi-first.sock",
                     "bin-path" => fcgi_binary,
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-first")
                    )
                  ),
                  "/second" =>
                    ("second" =>
                    ("socket" => "/tmp/trac-fastcgi-second.sock",
                     "bin-path" => fcgi_binary,
                     "check-local" => "disable",
                     "bin-environment" =>
                       ("TRAC_ENV" => "/path/to/projenv-second")
                    )
                  )
                )
}}}
Note that field values are different.  If you prefer setting the environment
variables in the `.fcgi` scripts, then copy/rename `trac.fcgi`, e.g., to
`first.fcgi` and `second.fcgi`, and reference them in the above settings.
Note that the above will result in different processes in any event, even
if both are running from the same `trac.fcgi` script.

{{{
#!div class=important
''''''Note'''''' It''s very important the order on which server.modules are loaded, if mod_auth is not loaded ''''''BEFORE'''''' mod_fastcgi, then the server will fail to authenticate the user.
}}}

For authentication you should enable mod_auth in lighttpd.conf ''server.modules'', select auth.backend and auth rules:
{{{
server.modules              = (
...
  "mod_auth",
...
)

auth.backend               = "htpasswd"

# Separated password files for each project
# See "Conditional Configuration" in
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/configuration.txt

$HTTP["url"] =~ "^/first/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-first/htpasswd.htaccess"
}
$HTTP["url"] =~ "^/second/" {
  auth.backend.htpasswd.userfile = "/path/to/projenv-second/htpasswd.htaccess"
}

# Enable auth on trac URLs, see
# http://trac.lighttpd.net/trac/file/branches/lighttpd-merge-1.4.x/doc/authentication.txt

auth.require = ("/first/login" =>
                ("method"  => "basic",
                 "realm"   => "First project",
                 "require" => "valid-user"
                ),
                "/second/login" =>
                ("method"  => "basic",
                 "realm"   => "Second project",
                 "require" => "valid-user"
                )
               )


}}}
Note that lighttpd (I use version 1.4.3) stopped if password file doesn''t exist.

Note that lighttpd doesn''t support ''valid-user'' in versions prior to 1.3.16.

Conditional configuration is also useful for mapping static resources, i.e. serving out images and CSS directly instead of through FastCGI:
{{{
# Aliasing functionality is needed
server.modules += ("mod_alias")

# Set up an alias for the static resources
alias.url = ("/trac/chrome/common" => "/usr/share/trac/htdocs")

# Use negative lookahead, matching all requests that ask for any resource under /trac, EXCEPT in
# /trac/chrome/common, and use FastCGI for those
$HTTP["url"] =~ "^/trac(?!/chrome/common)" {
# Even if you have other fastcgi.server declarations for applications other than Trac, do NOT use += here
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv")
                     )
                   )
                 )
}
}}}
The technique can be easily adapted for use with multiple projects by creating aliases for each of them, and wrapping the fastcgi.server declarations inside conditional configuration blocks.
Also there is another way to handle multiple projects and it''s to use TRAC_ENV_PARENT_DIR instead of TRAC_ENV and use global auth, let''s see an example:
{{{
#  This is for handling multiple projects
  alias.url       = ( "/trac/" => "/path/to/trac/htdocs/" )

  fastcgi.server += ("/projects"  =>
                      ("trac" =>
                        (
                          "socket" => "/tmp/trac.sock",
                          "bin-path" => fcgi_binary,
                          "check-local" => "disable",
                          "bin-environment" =>
                            ("TRAC_ENV_PARENT_DIR" => "/path/to/parent/dir/of/projects/" )
                        )
                      )
                    )
#And here starts the global auth configuration
  auth.backend = "htpasswd"
  auth.backend.htpasswd.userfile = "/path/to/unique/htpassword/file/trac.htpasswd"
  $HTTP["url"] =~ "^/projects/.*/login$" {
    auth.require = ("/" =>
                     (
                       "method"  => "basic",
                       "realm"   => "trac",
                       "require" => "valid-user"
                     )
                   )
  }
}}}

Changing date/time format also supported by lighttpd over environment variable LC_TIME
{{{
fastcgi.server = ("/trac" =>
                   ("trac" =>
                     ("socket" => "/tmp/trac-fastcgi.sock",
                      "bin-path" => fcgi_binary,
                      "check-local" => "disable",
                      "bin-environment" =>
                        ("TRAC_ENV" => "/path/to/projenv",
                        "LC_TIME" => "ru_RU")
                     )
                   )
                 )
}}}
For details about languages specification see [trac:TracFaq TracFaq] question 2.13.

Other important information like the [wiki:TracInstall#MappingStaticResources mapping static resources advices] are useful for non-fastcgi specific installation aspects.
]

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

Note about running lighttpd with reduced permissions:

If nothing else helps and trac.fcgi doesn''t start with lighttpd settings `server.username = "www-data"`, `server.groupname = "www-data"`, then in the `bin-environment` section set `PYTHON_EGG_CACHE` to the home directory of `www-data` or some other directory accessible to this account for writing.


== Simple !LiteSpeed Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.litespeedtech.com/ LiteSpeed].

!LiteSpeed web server is an event-driven asynchronous Apache replacement designed from the ground-up to be secure, scalable, and operate with minimal resources. !LiteSpeed can operate directly from an Apache config file and is targeted for business-critical environments.

 1. Please make sure you have first have a working install of a Trac project. Test install with “tracd” first.

 2. Create a Virtual Host for this setup. From now on we will refer to this vhost as !TracVhost. For this tutorial we will be assuming that your trac project will be accessible via:

{{{
http://yourdomain.com/trac/
}}}

 3. Go “!TracVhost → External Apps” tab and create a new “External Application”.

{{{
Name: MyTracFCGI	
Address: uds://tmp/lshttpd/mytracfcgi.sock
Max Connections: 10
Environment: TRAC_ENV=/fullpathto/mytracproject/ <--- path to root folder of trac project
Initial Request Timeout (secs): 30
Retry Timeout (secs): 0
Persistent Connection	Yes
Connection Keepalive Timeout: 30
Response Bufferring: No	
Auto Start: Yes
Command: /usr/share/trac/cgi-bin/trac.fcgi  <--- path to trac.fcgi
Back Log: 50
Instances: 10
}}}

 4. Optional. If you need to use htpasswd based authentication. Go to “!TracVhost → Security” tab and create a new security “Realm”.

{{{
DB Type: Password File
Realm Name: MyTracUserDB               <--- any name you wish and referenced later
User DB Location: /fullpathto/htpasswd <--- path to your htpasswd file
}}}

If you don’t have a htpasswd file or don’t know how to create the entries within one, go to http://sherylcanter.com/encrypt.php, to generate the user:password combos.

 5. Go to “!PythonVhost → Contexts” and create a new “FCGI Context”.

{{{
URI: /trac/                              <--- URI path to bind to python fcgi app we created	
Fast CGI App: [VHost Level] MyTractFCGI  <--- select the trac fcgi extapp we just created
Realm: TracUserDB                        <--- only if (4) is set. select realm created in (4)
}}}

 6. Modify `/fullpathto/mytracproject/conf/trac.ini`

{{{
#find/set base_rul, url, and link variables
base_url = http://yourdomain.com/trac/ <--- base url to generate correct links to
url = http://yourdomain.com/trac/      <--- link of project
link = http://yourdomain.com/trac/     <--- link of graphic logo
}}}

 7. Restart !LiteSpeed, “lswsctrl restart”, and access your new Trac project at: 

{{{
http://yourdomain.com/trac/
}}}


== Simple Nginx Configuration ==

Nginx is able to communicate with FastCGI processes, but can not spawn them. So you need to start FastCGI server for Trac separately.

 1. Nginx configuration with basic authentication handled by Nginx - confirmed to work on 0.6.32
{{{
    server {
        listen       10.9.8.7:443;
        server_name  trac.example;

        ssl                  on;
        ssl_certificate      /etc/ssl/trac.example.crt;
        ssl_certificate_key  /etc/ssl/trac.example.key;

        ssl_session_timeout  5m;

        ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers   on;

        # (Or ``^/some/prefix/(.*)``.
        if ($uri ~ ^/(.*)) {
             set $path_info /$1;
        }

        # it makes sense to serve static resources through Nginx
        location /chrome/ {
             alias /home/trac/instance/static/htdocs/;
        }

        # You can copy this whole location to ``location [/some/prefix]/login``
        # and remove the auth entries below if you want Trac to enforce
        # authorization where appropriate instead of needing to authenticate
        # for accessing the whole site.
        # (Or ``location /some/prefix``.)
        location / {
            auth_basic            "trac realm";
            auth_basic_user_file /home/trac/htpasswd;

            # socket address
            fastcgi_pass   unix:/home/trac/run/instance.sock;

            # python - wsgi specific
            fastcgi_param HTTPS on;

            ## WSGI REQUIRED VARIABLES
            # WSGI application name - trac instance prefix.
	    # (Or ``fastcgi_param  SCRIPT_NAME  /some/prefix``.)
            fastcgi_param  SCRIPT_NAME        "";
            fastcgi_param  PATH_INFO          $path_info;

            ## WSGI NEEDED VARIABLES - trac warns about them
            fastcgi_param  REQUEST_METHOD     $request_method;
            fastcgi_param  SERVER_NAME        $server_name;
            fastcgi_param  SERVER_PORT        $server_port;
            fastcgi_param  SERVER_PROTOCOL    $server_protocol;
            fastcgi_param  QUERY_STRING       $query_string;

            # For Nginx authentication to work - do not forget to comment these
            # lines if not using Nginx for authentication
            fastcgi_param  AUTH_USER          $remote_user;
            fastcgi_param  REMOTE_USER        $remote_user;

            # for ip to work
            fastcgi_param REMOTE_ADDR         $remote_addr;

            # For attchments to work
            fastcgi_param    CONTENT_TYPE     $content_type;
            fastcgi_param    CONTENT_LENGTH   $content_length;
        }
    }
}}}

 2. Modified trac.fcgi:

{{{
#!/usr/bin/env python
import os
sockaddr = ''/home/trac/run/instance.sock''
os.environ[''TRAC_ENV''] = ''/home/trac/instance''

try:
     from trac.web.main import dispatch_request
     import trac.web._fcgi

     fcgiserv = trac.web._fcgi.WSGIServer(dispatch_request, 
          bindAddress = sockaddr, umask = 7)
     fcgiserv.run()

except SystemExit:
    raise
except Exception, e:
    print ''Content-Type: text/plain\r\n\r\n'',
    print ''Oops...''
    print
    print ''Trac detected an internal error:''
    print
    print e
    print
    import traceback
    import StringIO
    tb = StringIO.StringIO()
    traceback.print_exc(file=tb)
    print tb.getvalue()

}}}

 3. reload nginx and launch trac.fcgi like that:

{{{
trac@trac.example ~ $ ./trac-standalone-fcgi.py 
}}}

The above assumes that:
 * There is a user named ''trac'' for running trac instances and keeping trac environments in its home directory.
 * `/home/trac/instance` contains a trac environment
 * `/home/trac/htpasswd` contains authentication information
 * `/home/trac/run` is owned by the same group the nginx runs under
  * and if your system is Linux the `/home/trac/run` has setgid bit set (`chmod g+s run`)
  * and patch from ticket #T7239 is applied, or you''ll have to fix the socket file permissions every time

Unfortunately nginx does not support variable expansion in fastcgi_pass directive. 
Thus it is not possible to serve multiple trac instances from one server block. 

If you worry enough about security, run trac instances under separate users. 

Another way to run trac as a FCGI external application is offered in ticket #T6224

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI ModWSGI], [wiki:TracCgi CGI], [wiki:TracModPython ModPython], [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracFineGrainedPermissions',2,1352317660113000,'trac','127.0.0.1','[[PageOutline(2-5, Contents, floated)]]
= Fine grained permissions =

Before Trac 0.11, it was only possible to define fine-grained permissions checks on the repository browser sub-system.

Since 0.11, there''s a general mechanism in place that allows custom **permission policy plugins** to grant or deny any action on any kind of Trac resources, even at the level of specific versions of such resources.

Note that for Trac 0.12, `authz_policy` has been integrated as an optional module (in `tracopt.perm.authz_policy.*`), so it''s installed by default and can simply be activated via the //Plugins// panel in the Trac administration module.


== Permission Policies ==

A great diversity of permission policies can be implemented, and Trac comes with a few examples. 

Which policies are currently active is determined by a configuration setting in TracIni:
e.g.
{{{
[trac]
permission_policies = AuthzSourcePolicy, DefaultPermissionPolicy, LegacyAttachmentPolicy
}}}
This lists the [#AuthzSourcePolicy] described below as the first policy, followed by the !DefaultPermissionPolicy which checks for the traditional coarse grained style permissions described in TracPermissions, and the !LegacyAttachmentPolicy which knows how to use the coarse grained permissions for checking the permissions available on attachments.

Among the possible optional choices, there is [#AuthzPolicy], a very generic permission policy, based on an Authz-style system. See
[trac:source:branches/0.12-stable/tracopt/perm/authz_policy.py authz_policy.py] for details. 

Another popular permission policy [#AuthzSourcePolicy], re-implements the pre-0.12 support for checking fine-grained permissions limited to Subversion repositories in terms of the new system.

See also [trac:source:branches/0.12-stable/sample-plugins/permissions sample-plugins/permissions] for more examples.


=== !AuthzPolicy === 
==== Configuration ====
* Install [http://www.voidspace.org.uk/python/configobj.html ConfigObj] (still needed for 0.12).
* Copy authz_policy.py into your plugins directory (only for Trac 0.11).
* Put a [http://swapoff.org/files/authzpolicy.conf authzpolicy.conf] file somewhere, preferably on a secured location on the server, not readable for others than the webuser. If the  file contains non-ASCII characters, the UTF-8 encoding should be used.
* Update your `trac.ini`:
  1. modify the [TracIni#trac-section permission_policies] entry in the `[trac]` section
{{{
[trac]
...
permission_policies = AuthzPolicy, DefaultPermissionPolicy, LegacyAttachmentPolicy
}}}
  1. add a new `[authz_policy]` section
{{{
[authz_policy]
authz_file = /some/trac/env/conf/authzpolicy.conf
}}}
  1. enable the plugin through [/admin/general/plugin WebAdmin] or by editing the `[components]` section
{{{
[components]
...
# Trac 0.12
tracopt.perm.authz_policy.* = enabled
# for Trac 0.11 use this
#authz_policy.* = enabled 
}}}


==== Usage Notes ====
Note that the order in which permission policies are specified is quite critical, 
as policies will be examined in the sequence provided.

A policy will return either `True`, `False` or `None` for a given permission check. `True` is returned if the policy explicitly grants the permission. `False` is returned if the policy explicitly denies the permission. `None` is returned if the policy is unable to either grant or deny the permission.

NOTE: Only if the return value is `None` will the ''''next'''' permission policy be consulted.
If none of the policies explicitly grants the permission, the final result will be `False` 
(i.e. permission denied).

The `authzpolicy.conf` file is a `.ini` style configuration file:
{{{
[wiki:PrivatePage@*]
john = WIKI_VIEW, !WIKI_MODIFY
jack = WIKI_VIEW
* =
}}}
* Each section of the config is a glob pattern used to match against a Trac resource
  descriptor. These descriptors are in the form:
{{{
<realm>:<id>@<version>[/<realm>:<id>@<version> ...]
}}}
  Resources are ordered left to right, from parent to child. If any
  component is inapplicable, `*` is substituted. If the version pattern is
  not specified explicitely, all versions (`@*`) is added implicitly

  Example: Match the WikiStart page
{{{
[wiki:*]
[wiki:WikiStart*]
[wiki:WikiStart@*]
[wiki:WikiStart]
}}}

  Example: Match the attachment `wiki:WikiStart@117/attachment/FOO.JPG@*`
  on WikiStart
{{{
[wiki:*]
[wiki:WikiStart*]
[wiki:WikiStart@*]
[wiki:WikiStart@*/attachment/*]
[wiki:WikiStart@117/attachment/FOO.JPG]
}}}

* Sections are checked against the current Trac resource descriptor ''''''IN ORDER'''''' of
  appearance in the configuration file. ''''''ORDER IS CRITICAL''''''.

* Once a section matches, the current username is matched against the keys 
  (usernames) of the section, ''''''IN ORDER''''''. 
  * If a key (username) is prefixed with a `@`, it is treated as a group. 
  * If a value (permission) is prefixed with a `!`, the permission is
    denied rather than granted.

  The username will match any of ''anonymous'', ''authenticated'', <username> or ''*'', using normal Trac permission rules. || ''''''Note:'''''' Other groups which are created by user (e.g. by ''adding subjects to groups'' on web interface page //Admin / Permissions//) cannot be used. See [trac:ticket:5648 #5648] for details about this missing feature ||

For example, if the `authz_file` contains:
{{{
[wiki:WikiStart@*]
* = WIKI_VIEW

[wiki:PrivatePage@*]
john = WIKI_VIEW
* = !WIKI_VIEW
}}}
and the default permissions are set like this:
{{{
john           WIKI_VIEW
jack           WIKI_VIEW
# anonymous has no WIKI_VIEW
}}}

Then: 
  * All versions of WikiStart will be viewable by everybody (including anonymous)
  * !PrivatePage will be viewable only by john
  * other pages will be viewable only by john and jack

Groups:
{{{
[groups]
admins = john, jack
devs = alice, bob

[wiki:Dev@*]
@admins = TRAC_ADMIN
@devs = WIKI_VIEW
* =

[*]
@admins = TRAC_ADMIN
* =
}}}

Then:
- everything is blocked (whitelist approach), but
- admins get all TRAC_ADMIN everywhere and
- devs can view wiki pages.

Some repository examples (Browse Source specific):
{{{
# A single repository:
[repository:test_repo@*]
john = BROWSER_VIEW, FILE_VIEW
# John has BROWSER_VIEW and FILE_VIEW for the entire test_repo

# All repositories:
[repository:*@*]
jack = BROWSER_VIEW, FILE_VIEW
# John has BROWSER_VIEW and FILE_VIEW for all repositories
}}}

Very fine grain repository access:
{{{
# John has BROWSER_VIEW and FILE_VIEW access to trunk/src/some/location/ only
[repository:test_repo@*/source:trunk/src/some/location/*@*]
john = BROWSER_VIEW, FILE_VIEW


# John has BROWSER_VIEW and FILE_VIEW access to only revision 1 of all files at trunk/src/some/location only
[repository:test_repo@*/source:trunk/src/some/location/*@1]
john = BROWSER_VIEW, FILE_VIEW


# John has BROWSER_VIEW and FILE_VIEW access to all revisions of ''somefile'' at trunk/src/some/location only 
[repository:test_repo@*/source:trunk/src/some/location/somefile@*]
john = BROWSER_VIEW, FILE_VIEW


# John has BROWSER_VIEW and FILE_VIEW access to only revision 1 of ''somefile'' at trunk/src/some/location only
[repository:test_repo@*/source:trunk/src/some/location/somefile@1]
john = BROWSER_VIEW, FILE_VIEW
}}}

Note: In order for Timeline to work/visible for John, we must add CHANGESET_VIEW to the above permission list.


==== Missing Features ====
Although possible with the !DefaultPermissionPolicy handling (see Admin panel), fine-grained permissions still miss those grouping features (see [trac:ticket:9573 #9573], [trac:ticket:5648 #5648]). Patches are partially available, see forgotten authz_policy.2.patch  part of [trac:ticket:6680 #6680]).

You cannot do the following:
{{{
[groups]
team1 = a, b, c
team2 = d, e, f
team3 = g, h, i
departmentA = team1, team2
}}}

Permission groups are not supported either. You cannot do the following:
{{{
[groups]
permission_level_1 = WIKI_VIEW, TICKET_VIEW
permission_level_2  = permission_level_1, WIKI_MODIFY, TICKET_MODIFY
[*]
@team1 = permission_level_1
@team2 = permission_level_2
@team3 = permission_level_2, TICKET_CREATE
}}}

=== !AuthzSourcePolicy  (mod_authz_svn-like permission policy) === #AuthzSourcePolicy

At the time of this writing, the old fine grained permissions system from Trac 0.11 and before used for restricting access to the repository has  been converted to a permission policy component, but from the user point of view, this makes little if no difference.

That kind of fine-grained permission control needs a definition file, which is the one used by Subversion''s mod_authz_svn. 
More information about this file format and about its usage in Subversion is available in the  [http://svnbook.red-bean.com/en/1.5/svn.serverconfig.pathbasedauthz.html Path-Based Authorization] section in the Server Configuration chapter of the svn book.

Example:
{{{
[/]
* = r

[/branches/calc/bug-142]
harry = rw
sally = r

[/branches/calc/bug-142/secret]
harry =
}}}

 * ''''''/'''''' = ''''Everyone has read access by default''''
 * ''''''/branches/calc/bug-142'''''' = ''''harry has read/write access, sally read only''''
 * ''''''/branches/calc/bug-142/secret'''''' = ''''harry has no access, sally has read access (inherited as a sub folder permission)''''

==== Trac Configuration ====

To activate fine grained permissions you __must__ specify the {{{authz_file}}} option in the {{{[trac]}}} section of trac.ini. If this option is set to null or not specified the permissions will not be used.

{{{
[trac]
authz_file = /path/to/svnaccessfile
}}}

If you want to support the use of the `[`''''modulename''''`:/`''''some''''`/`''''path''''`]` syntax within the `authz_file`, add 

{{{
authz_module_name = modulename
}}}

where ''''modulename'''' refers to the same repository indicated by the `repository_dir` entry in the `[trac]` section. As an example, if the `repository_dir` entry in the `[trac]` section is {{{/srv/active/svn/blahblah}}}, that would yield the following:

{{{ 
[trac]
authz_file = /path/to/svnaccessfile
authz_module_name = blahblah
...
repository_dir = /srv/active/svn/blahblah 
}}}

where the svn access file, {{{/path/to/svnaccessfile}}}, contains entries such as {{{[blahblah:/some/path]}}}.

''''''Note:'''''' Usernames inside the Authz file __must__ be the same as those used inside trac. 

As of version 0.12, make sure you have ''''!AuthzSourcePolicy'''' included in the permission_policies list in trac.ini, otherwise the authz permissions file will be ignored.

{{{ 
[trac]
permission_policies = AuthzSourcePolicy, DefaultPermissionPolicy, LegacyAttachmentPolicy
}}}

==== Subversion Configuration ====

The same access file is typically applied to the corresponding Subversion repository using an Apache directive like this:
{{{
<Location /repos>
  DAV svn
  SVNParentPath /usr/local/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/svnaccessfile
</Location>
}}}

For information about how to restrict access to entire projects in a multiple project environment see [trac:wiki:TracMultipleProjectsSVNAccess]

== Debugging permissions
In trac.ini set:
{{{
[logging]
log_file = trac.log
log_level = DEBUG
log_type = file
}}}

And watch:
{{{
tail -n 0 -f log/trac.log | egrep ''\[perm\]|\[authz_policy\]''
}}}

to understand what checks are being performed. See the sourced documentation of the plugin for more info.


----
See also: TracPermissions,
[http://trac-hacks.org/wiki/FineGrainedPageAuthzEditorPlugin TracHacks:FineGrainedPageAuthzEditorPlugin] for a simple editor plugin.',NULL,NULL);
INSERT INTO "wiki" VALUES('TracGuide',3,1352317660124000,'trac','127.0.0.1','= The Trac User and Administration Guide =
[[TracGuideToc]]
{{{#!span style="font-size:90%"
//The TracGuide is meant to serve as a starting point for all documentation regarding Trac usage and development. The guide is a free document, a collaborative effort, and a part of the [http://trac.edgewall.org Trac Project] itself.//
}}}

== Introduction

Trac is an enhanced wiki and issue tracking system for software development projects. Trac uses a minimalistic approach to web-based software project management. It strives to help developers write great software while staying out of the way. Trac should impose as little as possible on a team''s established development process and policies.

It provides an interface to Subversion (and other version control systems), an integrated Wiki and convenient reporting facilities.

Trac allows wiki markup in issue descriptions and commit messages, creating links and seamless references between bugs, tasks, changesets, files and wiki pages. A timeline shows all current and past project events in order, making the acquisition of an overview of the project and tracking progress very easy. The roadmap shows the road ahead, listing the upcoming milestones.
== User Guide
   * Using the Wiki subsystem
     * TracWiki — How to use the built-in Wiki.
     * WikiFormatting — Reference to the wiki syntax used throughout.
   * Using the Version Control subsystem
     * TracBrowser — Browsing source code with Trac.
     * TracChangeset — Viewing changes to source code.
     * TracRevisionLog — Viewing change history.
   * Using the Ticket subsystem
     * TracTickets — Using the issue tracker.
     * TracRoadmap — The roadmap helps tracking project progress.
     * TracReports — Writing and using reports.
     * TracQuery — Executing custom ticket queries.
     * TracBatchModify - Modifying a batch of tickets in one request.
   * Other modules and general topics
     * TracSearch — Full text search in all content.
     * TracTimeline — The timeline provides a historic perspective on a project.
     * TracRss — RSS content syndication in Trac.
     * TracAccessibility — Accessibility keys support


== Administrator Guide
   * Installation and upgrade
     * TracInstall — How to install and run Trac.
     * TracUpgrade — How to upgrade existing installations.
     * TracImport — Importing tickets from other bug databases.
     * TracPlugins — Installing and managing Trac extensions.
   * Configuration and customization
     * TracIni — Trac configuration file reference. 
     * TracPermissions — Access control and permissions.
     * TracNavigation — Customize main navigation menus.
     * TracInterfaceCustomization — Customizing the Trac interface.
     * TracLogging — The Trac logging facility.
   * Administering the Version Control subsystem
     * TracRepositoryAdmin — Management of Source Code Repositories.
   * Administering the Ticket subsystem
     * TracTicketsCustomFields — Expanding tickets with customized fields.
     * TracNotification — Email notification.
     * TracWorkflow — Configurable Ticket Workflow.
   * Reference
     * TracEnvironment — All you need to know about Trac environments
     * TracAdmin — Administering a Trac project via the command-line.

== Support and Other Sources of Information ==

 * [trac:TracFaq Trac FAQ] — A collection of Frequently Asked Questions (on the project website).
 * [trac:TracDev] and [trac:TracDev/ApiDocs API docs] — Trac Developer documentation
 * TracSupport — How to get more information

If you are looking for a good place to ask a question about Trac, look no further than the [http://trac.edgewall.org/wiki/MailingList MailingList]. It provides a friendly environment to discuss openly among Trac users and developers.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracImport',2,1352317660135000,'trac','127.0.0.1','= Importing ticket data =
[[PageOutline]]

By means of migrating from other issue-tracking systems, perform some external actions over tickets or simply synchronize different data bases, there are some available tools, plug-ins or scripts which lets you import or up-date tickets into Trac.

Below, follows a collection of some of those.

== !TicketImportPlugin ==

 [http://trac-hacks.org/wiki/TicketImportPlugin TicketImportPlugin] :: mainly, but not only, this plug-in lets you import or up-date into Trac a series of tickets from a ''''''CSV file'''''' or (if the [http://pypi.python.org/pypi/xlrd xlrd library] is installed) from an ''''''Excel file''''''. 

== !ExportImportXlsPlugin ==

 [http://trac-hacks.org/wiki/ExportImportXlsPlugin ExportImportXlsPlugin] :: this plug-in add an admin panel for export and import tickets via ''''''XLS file''''''.
  * It depends on the python packages xlwt/rxld.

== Bugzilla ==

 [http://trac-hacks.org/wiki/BugzillaIssueTrackingPlugin BugzillaIssueTrackingPlugin] :: integrates Bugzilla into Trac keeping TracLinks

Ticket data can be imported from Bugzilla using the [http://trac.edgewall.org/browser/trunk/contrib/bugzilla2trac.py bugzilla2trac.py] script, available in the contrib/ directory of the Trac distribution.

{{{
$ bugzilla2trac.py
bugzilla2trac - Imports a bug database from Bugzilla into Trac.

Usage: bugzilla2trac.py [options]

Available Options:
  --db <MySQL dbname>              - Bugzilla''s database
  --tracenv /path/to/trac/env      - full path to Trac db environment
  -h | --host <MySQL hostname>     - Bugzilla''s DNS host name
  -u | --user <MySQL username>     - effective Bugzilla''s database user
  -p | --passwd <MySQL password>   - Bugzilla''s user password
  -c | --clean                     - remove current Trac tickets before importing
  --help | help                    - this help info

Additional configuration options can be defined directly in the script.
}}}

Currently, the following data is imported from Bugzilla:

  * bugs
  * bug activity (field changes)
  * bug attachments
  * user names and passwords (put into a htpasswd file)

The script provides a number of features to ease the conversion, such as:

  * PRODUCT_KEYWORDS:  Trac doesn''t have the concept of products, so the script provides the ability to attach a ticket keyword instead.

  * IGNORE_COMMENTS:  Don''t import Bugzilla comments that match a certain regexp.

  * STATUS_KEYWORDS:  Attach ticket keywords for the Bugzilla statuses not available in Trac.  By default, the ''VERIFIED'' and ''RELEASED'' Bugzilla statuses are translated into Trac keywords.

For more details on the available options, see the configuration section at the top of the script.

== Jira ==

 [http://trac-hacks.org/wiki/JiraToTracIntegration JiraToTracIntegration] :: provides tools to import Atlassian Jira backup files into Trac. The plug-in consists of a Python 3.1 commandline tool that:
   - Parses the Jira backup XML file
   - Sends the imported Jira data and attachments to Trac using the [http://trac-hacks.org/wiki/XmlRpcPlugin XmlRpcPlugin]
   - Generates a htpasswd file containing the imported Jira users and their SHA-512 base64 encoded passwords

== Mantis ==

 [http://trac-hacks.org/wiki/MantisImportScript MantisImportScript] :: script to import from Mantis into Trac the following data:
  * bugs
  * bug comments
  * bug activity (field changes)
  * attachments (as long as the files live in the mantis db, not on the filesystem) .

== !PlanetForge ==

 [http://trac-hacks.org/wiki/PlanetForgeImportExportPlugin PlanetForgeImportExportPlugin] :: this plugin exports Trac data (wiki, tickets, compoments, permissions, repositories, etc.) using the open format designed by the COCLICO project. It extends the webadmin panel and the ''trac admin ...'' command. Still has no ''import'' feature. 

== Scarab ==

 [http://trac-hacks.org/wiki/ScarabToTracScript ScarabToTracScript] :: script that migrates Scarab issues to Trac tickets
    * Requires [http://trac-hacks.org/wiki/XmlRpcPlugin XmlRpcPlugin]

== Sourceforge ==

 [http://trac-hacks.org/wiki/SfnToTracScript SfnToTracScript] :: importer of !SourceForge''s new backup file (originated from #Trac3521)

Also, ticket data can be imported from Sourceforge using the [http://trac.edgewall.org/browser/trunk/contrib/sourceforge2trac.py sourceforge2trac.py] script, available in the contrib/ directory of the Trac distribution.

== Other ==

Since trac uses a SQL database to store the data, you can import from other systems by examining the database tables. Just go into [http://www.sqlite.org/sqlite.html sqlite] command line to look at the tables and import into them from your application.

=== Comma delimited file - CSV ===
See [http://trac.edgewall.org/attachment/wiki/TracSynchronize/csv2trac.2.py csv2trac.2.py] for details.  This approach is particularly useful if one needs to enter a large number of tickets by hand. (note that the ticket type type field, (task etc...) is also needed for this script to work with more recent Trac releases)
Comments on script: The script has an error on line 168, (''Ticket'' needs to be ''ticket'').  Also, the listed values for severity and priority are swapped. 

----
See also: 
 * to import/export wiki pages: TracAdmin, 
 * to export tickets: TracTickets, TracQuery',NULL,NULL);
INSERT INTO "wiki" VALUES('TracIni',3,1352317660146000,'trac','127.0.0.1','= The Trac Configuration File =

 ''''[Note To Editors] Please discuss documentation changes in the [#Discussion] section. Even better, send us [TracDev/SubmittingPatches documentation patches] against the ''''code'''' (i.e. where the configuration entries are documented), either on Trac-dev or on new tickets. ''''

[[TracGuideToc]]
[[PageOutline]]

Trac configuration is done by editing the ''''''`trac.ini`'''''' config file, located in `<projectenv>/conf/trac.ini`.  Changes to the configuration are usually reflected immediately, though changes to the `[components]` or `[logging]` sections will require restarting the web server. You may also need to restart the web server after creating a global configuration file when none was previously present.

The `trac.ini` configuration file and its parent directory should be writable by the web server, as Trac currently relies on the possibility to trigger a complete environment reload to flush its caches.

== Global Configuration ==

In versions prior to 0.11, the global configuration was by default located in `$prefix/share/trac/conf/trac.ini` or /etc/trac/trac.ini, depending on the distribution. If you''re upgrading, you may want to specify that file to inherit from.  Literally, when you''re upgrading to 0.11, you have to add an `[inherit]` section to your project''s `trac.ini` file. Additionally, you have to move your customized templates and common images from `$prefix/share/trac/...` to the new location.

Global options will be merged with the environment-specific options, where local options override global options. The options file is specified as follows:
{{{
[inherit]
file = /path/to/global/trac.ini
}}}
Multiple files can be specified using a comma-separated list.

Note that you can also specify a global option file when creating a new project,  by adding the option `--inherit=/path/to/global/trac.ini` to [TracAdmin#initenv trac-admin]''s `initenv` command.  If you do not do this but nevertheless intend to use a global option file with your new environment, you will have to go through the newly generated `conf/trac.ini` file and delete the entries that will otherwise override those set in the global file.

There are two more entries in the [[#inherit-section| [inherit] ]] section, `templates_dir` for sharing global templates and `plugins_dir`, for sharing plugins. Those entries can themselves be specified in the shared configuration file, and in fact, configuration files can even be chained if you specify another `[inherit] file` there.

Note that the templates found in the `templates/` directory of the TracEnvironment have precedence over those found in `[inherit] templates_dir`. In turn, the latter have precedence over the installed templates, so be careful about what you put there, notably if you override a default template be sure to refresh your modifications when you upgrade to a new version of Trac (the preferred way to perform TracInterfaceCustomization being still to write a custom plugin doing an appropriate `ITemplateStreamFilter` transformation).

== Reference for settings

This is a brief reference of available configuration options, and their default settings.

[[TracIni]]

----
See also: TracGuide, TracAdmin, TracEnvironment
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracInstall',3,1352317660157000,'trac','127.0.0.1','= Trac Installation Guide for 1.0 = 
[[TracGuideToc]]

Trac is written in the Python programming language and needs a database, [http://sqlite.org/ SQLite], [http://www.postgresql.org/ PostgreSQL], or [http://mysql.com/ MySQL]. For HTML rendering, Trac uses the [http://genshi.edgewall.org Genshi] templating system.

Since version 0.12, Trac can also be localized, and there''s probably a translation available for your language. If you want to be able to use the Trac interface in other languages, then make sure you have installed the optional package [#OtherPythonPackages Babel]. Pay attention to the extra steps for localization support in the [#InstallingTrac Installing Trac] section below. Lacking Babel, you will only get the default english version, as usual.

If you''re interested in contributing new translations for other languages or enhance the existing translations, then please have a look at [[trac:TracL10N]].

What follows are generic instructions for installing and setting up Trac and its requirements. While you may find instructions for installing Trac on specific systems at [trac:TracInstallPlatforms TracInstallPlatforms] on the main Trac site, please be sure to ''''''first read through these general instructions'''''' to get a good understanding of the tasks involved.

[[PageOutline(2-3,Installation Steps,inline)]]

== Dependencies ==
=== Mandatory Dependencies
To install Trac, the following software packages must be installed:

 * [http://www.python.org/ Python], version >= 2.5 and < 3.0
   (note that we dropped the support for Python 2.4 in this release)
 * [http://peak.telecommunity.com/DevCenter/setuptools setuptools], version >= 0.6, or better yet, [http://pypi.python.org/pypi/distribute distribute]
 * [http://genshi.edgewall.org/wiki/Download Genshi], version >= 0.6 (unreleased version 0.7dev should work as well)

You also need a database system and the corresponding python bindings.
The database can be either SQLite, PostgreSQL or MySQL.

==== For the SQLite database #ForSQLite

As you must be using Python 2.5, 2.6 or 2.7, you already have the SQLite database bindings bundled with the standard distribution of Python (the `sqlite3` module).

However, if you''d like, you can download the latest and greatest version of [[trac:Pysqlite]] from 
[http://code.google.com/p/pysqlite/downloads/list google code], where you''ll find the Windows
installers or the `tar.gz` archive for building from source: 
{{{
$ tar xvfz <version>.tar.gz 
$ cd <version> 
$ python setup.py build_static install 
}}}
 
This will download the latest SQLite code and build the bindings. 

SQLite 2.x is no longer supported.

A known bug PySqlite versions 2.5.2-4 prohibits upgrade of trac databases
from 0.11.x to 0.12. Please use versions 2.5.5 and newer or 2.5.1 and
older. See #9434 for more detail.

See additional information in [trac:PySqlite PySqlite].

==== For the PostgreSQL database #ForPostgreSQL

You need to install the database and its Python bindings:
 * [http://www.postgresql.org/ PostgreSQL], version 8.0 or later
 * [http://pypi.python.org/pypi/psycopg2 psycopg2]

See [trac:DatabaseBackend#Postgresql DatabaseBackend] for details.


==== For the MySQL database #ForMySQL

Trac can now work quite well with MySQL, provided you follow the guidelines.

 * [http://mysql.com/ MySQL], version 5.0 or later
 * [http://sf.net/projects/mysql-python MySQLdb], version 1.2.2 or later

It is ''''''very'''''' important to read carefully the  [trac:MySqlDb] page before creating the database.

=== Optional Dependencies

==== Version Control System ====

===== Subversion =====
 * [http://subversion.apache.org/ Subversion], 1.5.x or 1.6.x and the ''''''''''corresponding'''''''''' Python bindings. Older versions starting from 1.0, like 1.2.4, 1.3.2 or 1.4.2, etc. should still work. For troubleshooting information, check the [trac:TracSubversion#Troubleshooting TracSubversion] page.

There are [http://subversion.apache.org/packages.html pre-compiled SWIG bindings] available for various platforms. (Good luck finding precompiled SWIG bindings for any Windows package at that listing. TracSubversion points you to [http://alagazam.net Algazam], which works for me under Python 2.6.)

Note that Trac ''''''doesn''t'''''' use [http://pysvn.tigris.org/ PySVN], neither does it work yet with the newer `ctype`-style bindings. 


''''''Please note:'''''' if using Subversion, Trac must be installed on the ''''''same machine''''''. Remote repositories are currently [trac:ticket:493 not supported].


===== Others =====

Support for other version control systems is provided via third-parties. See [trac:PluginList] and [trac:VersionControlSystem].

==== Web Server ====
A web server is optional because Trac is shipped with a server included, see the [#RunningtheStandaloneServer Running the Standalone Server ] section below.

Alternatively you configure Trac to run in any of the following environments.
 * [http://httpd.apache.org/ Apache] with 
   - [http://code.google.com/p/modwsgi/ mod_wsgi], see [wiki:TracModWSGI] and 
     http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac
   - [http://modpython.org/ mod_python 3.3.1], deprecated: see TracModPython)
 * a [http://www.fastcgi.com/ FastCGI]-capable web server (see TracFastCgi)
 * an [http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html AJP]-capable web
   server (see [trac:TracOnWindowsIisAjp TracOnWindowsIisAjp])
 * a CGI-capable web server (see TracCgi), ''''''but usage of Trac as a cgi script 
   is highly discouraged'''''', better use one of the previous options. 
   

==== Other Python Packages ====

 * [http://babel.edgewall.org Babel], version >= 0.9.5, 
   needed for localization support (unreleased version 1.0dev should work as well)
 * [http://docutils.sourceforge.net/ docutils], version >= 0.3.9 
   for WikiRestructuredText.
 * [http://pygments.pocoo.org Pygments] for 
   [wiki:TracSyntaxColoring syntax highlighting].
   [http://silvercity.sourceforge.net/ SilverCity] and/or 
   [http://gnu.org/software/enscript/enscript.html Enscript] may still be used
   but are deprecated and you really should be using Pygments.
 * [http://pytz.sf.net pytz] to get a complete list of time zones,
   otherwise Trac will fall back on a shorter list from 
   an internal time zone implementation.

''''''Attention'''''': The various available versions of these dependencies are not necessarily interchangable, so please pay attention to the version numbers above. If you are having trouble getting Trac to work please double-check all the dependencies before asking for help on the [trac:MailingList] or [trac:IrcChannel].

Please refer to the documentation of these packages to find out how they are best installed. In addition, most of the [trac:TracInstallPlatforms platform-specific instructions] also describe the installation of the dependencies. Keep in mind however that the information there ''''probably concern older versions of Trac than the one you''re installing'''' (there are even some pages that are still talking about Trac 0.8!).


== Installing Trac ==
=== Using `easy_install`
One way to install Trac is using [http://pypi.python.org/pypi/setuptools setuptools].
With setuptools you can install Trac from the subversion repository; 

A few examples:

 - install Trac 1.0:
   {{{
   easy_install Trac==1.0
   }}}
   (NOT YET ENABLED)
 - install latest development version 1.0dev:
   {{{
   easy_install Trac==dev
   }}}
   Note that in this case you won''t have the possibility to run a localized version of Trac;
   either use a released version or install from source 

=== Using `pip`
''pip'' is an easy_install replacement that is very useful to quickly install python packages.
To get a trac installation up and running in less than 5 minutes:

Assuming you want to have your entire pip installation in `/opt/user/trac`

 - 
{{{
pip -E /opt/user/trac install trac psycopg2 
}}}
or
 - 
{{{
pip -E /opt/user/trac install trac mysql-python 
}}}

Make sure your OS specific headers are available for pip to automatically build PostgreSQL (libpq-dev) or MySQL (libmysqlclient-dev) bindings.

pip will automatically resolve all dependencies (like Genshi, pygments, etc.) and download the latest packages on pypi.python.org and create a self contained installation in `/opt/user/trac`.

All commands (`tracd`, `trac-admin`) are available in `/opt/user/trac/bin`. This can also be leveraged for `mod_python` (using `PythonHandler` directive) and `mod_wsgi` (using `WSGIDaemonProcess` directive)

Additionally, you can install several trac plugins (listed [http://pypi.python.org/pypi?:action=search&term=trac&submit=search here]) through pip.



=== From source
Of course, using the python-typical setup at the top of the source directory also works.

You can obtain the source for a .tar.gz or .zip file corresponding to a release (e.g. Trac-1.0.tar.gz), or you can get the source directly from the repository (see Trac:SubversionRepository for details).

{{{
$ python ./setup.py install
}}}

''''You''ll need root permissions or equivalent for this step.''''

This will byte-compile the python source code and install it as an .egg file or folder in the `site-packages` directory
of your Python installation. The .egg will also contain all other resources needed by standard Trac, such as htdocs and templates.

The script will also install the [wiki:TracAdmin trac-admin] command-line tool, used to create and maintain [wiki:TracEnvironment project environments], as well as the [wiki:TracStandalone tracd] standalone server.

If you install from source and want to make Trac available in other languages, make sure  Babel is installed. Only then, perform the `install` (or simply redo the `install` once again afterwards if you realize Babel was not yet installed):
{{{
$ python ./setup.py install
}}}
Alternatively, you can do a `bdist_egg` and copy the .egg from dist/ to the place of your choice, or you can create a Windows installer (`bdist_wininst`).

=== Advanced Options ===

To install Trac to a custom location, or find out about other advanced installation options, run:
{{{
easy_install --help
}}}

Also see [http://docs.python.org/inst/inst.html Installing Python Modules] for detailed information.

Specifically, you might be interested in:
{{{
easy_install --prefix=/path/to/installdir
}}}
or, if installing Trac to a Mac OS X system:
{{{
easy_install --prefix=/usr/local --install-dir=/Library/Python/2.5/site-packages
}}}
Note: If installing on Mac OS X 10.6 running {{{ easy_install http://svn.edgewall.org/repos/trac/trunk }}} will install into {{{ /usr/local }}} and {{{ /Library/Python/2.6/site-packages }}} by default

The above will place your `tracd` and `trac-admin` commands into `/usr/local/bin` and will install the Trac libraries and dependencies into `/Library/Python/2.5/site-packages`, which is Apple''s preferred location for third-party Python application installations.


== Creating a Project Environment ==

A [TracEnvironment Trac environment] is the backend storage where Trac stores information like wiki pages, tickets, reports, settings, etc. An environment is basically a directory that contains a human-readable [TracIni configuration file], and various other files and directories.

A new environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ trac-admin /path/to/myproject initenv
}}}

[TracAdmin trac-admin] will prompt you for the information it needs to create the environment, such as the name of the project and the [TracEnvironment#DatabaseConnectionStrings database connection string]. If you''re not sure what to specify for one of these options, just press `<Enter>` to use the default value. 

Using the default database connection string in particular will always work as long as you have SQLite installed.
For the other [DatabaseBackend database backends] you should plan ahead and already have a database ready to use at this point.

Since 0.12, Trac doesn''t ask for a [TracEnvironment#SourceCodeRepository source code repository] anymore when creating an environment. Repositories can be [TracRepositoryAdmin added] afterward, or the version control support can be disabled completely if you don''t need it.

Also note that the values you specify here can be changed later by directly editing the [TracIni conf/trac.ini] configuration file.

Finally, make sure the user account under which the web front-end runs will have ''''''write permissions'''''' to the environment directory and all the files inside. This will be the case if you run `trac-admin ... initenv` as this user. If not, you should set the correct user afterwards. For example on Linux, with the web server running as user `apache` and group `apache`, enter:
{{{
# chown -R apache.apache /path/to/myproject
}}}

{{{#!div class=important
''''''Warning:'''''' Please only use ASCII-characters for account name and project path, unicode characters are not supported there.
}}}


== Deploying Trac

=== Running the Standalone Server ===

After having created a Trac environment, you can easily try the web interface by running the standalone server [wiki:TracStandalone tracd]:
{{{
$ tracd --port 8000 /path/to/myproject
}}}

Then, fire up a browser and visit `http://localhost:8000/`. You should get a simple listing of all environments that `tracd` knows about. Follow the link to the environment you just created, and you should see Trac in action. If you only plan on managing a single project with Trac you can have the standalone server skip the environment list by starting it like this:
{{{
$ tracd -s --port 8000 /path/to/myproject
}}}

=== Running Trac on a Web Server ===

Trac provides various options for connecting to a "real" web server: 
 - [wiki:TracFastCgi FastCGI]
 - [wiki:TracModWSGI mod_wsgi] 
 - //[wiki:TracModPython mod_python] (no longer recommended, as mod_python is not actively maintained anymore)//
 - //[wiki:TracCgi CGI] (should not be used, as the performance is far from optimal)//

Trac also supports [trac:TracOnWindowsIisAjp AJP] which may be your choice if you want to connect to IIS. Other deployment scenarios are possible: [trac:TracNginxRecipe nginx], [http://projects.unbit.it/uwsgi/wiki/Example#Traconapacheinasub-uri uwsgi], [trac:TracOnWindowsIisIsapi Isapi-wsgi] etc.

==== Generating the Trac cgi-bin directory ==== #cgi-bin

In order for Trac to function properly with FastCGI you need to have a `trac.fcgi` file and for mod_wsgi a `trac.wsgi` file. These are Python scripts which load the appropriate Python code. They can be generated using the `deploy` option of [wiki:TracAdmin trac-admin].

There is, however, a bit of a chicken-and-egg problem. The [wiki:TracAdmin trac-admin] command requires an existing environment to function, but complains if the deploy directory already exists. This is a problem, because environments are often stored in a subdirectory of the deploy. The solution is to do something like this:
{{{
mkdir -p /usr/share/trac/projects/my-project
trac-admin /usr/share/trac/projects/my-project initenv
trac-admin /usr/share/trac/projects/my-project deploy /tmp/deploy
mv /tmp/deploy/* /usr/share/trac
}}}


==== Mapping Static Resources ====

Out of the box, Trac will pass static resources such as style sheets or images through itself. For anything but a tracd only based deployment, this is far from optimal as the web server could be set up to directly serve those static resources (for CGI setup, this is ''''''highly undesirable'''''' and will cause abysmal performance).

Web servers such as [http://httpd.apache.org/ Apache] allow you to create “Aliases” to resources, giving them a virtual URL that doesn''t necessarily reflect the layout of the servers file system. We also can map requests for static resources directly to the directory on the file system, avoiding processing these requests by Trac itself.

There are two primary URL paths for static resources - `/chrome/common` and `/chrome/site`. Plugins can add their own resources, usually accessible by `/chrome/<plugin>` path, so its important to override only known paths and not try to make universal `/chrome` alias for everything.

Note that in order to get those static resources on the filesystem, you need first to extract the relevant resources from Trac using the [TracAdmin trac-admin]` <environment> deploy` command:
[[TracAdminHelp(deploy)]]

The target `<directory>` will then contain an `htdocs` directory with:
 - `site/` - a copy of the environment''s directory `htdocs/` 
 - `common/` - the static resources of Trac itself
 - `<plugins>/` - one directory for each resource directory managed by the plugins enabled for this environment

===== Example: Apache and `ScriptAlias` ===== #ScriptAlias-example

Assuming the deployment has been done this way:
{{{
$ trac-admin /var/trac/env deploy /path/to/trac/htdocs/common
}}}

Add the following snippet to Apache configuration ''''before'''' the `ScriptAlias` or `WSGIScriptAlias` (which map all the other requests to the Trac application), changing paths to match your deployment:
{{{
Alias /trac/chrome/common /path/to/trac/htdocs/common
Alias /trac/chrome/site /path/to/trac/htdocs/site

<Directory "/path/to/www/trac/htdocs">
  Order allow,deny
  Allow from all
</Directory>
}}}

If using mod_python, you might want to add this too (otherwise, the alias will be ignored):
{{{
<Location "/trac/chrome/common/">
  SetHandler None
</Location>
}}}

Note that we mapped `/trac` part of the URL to the `trac.*cgi` script, and the path `/trac/chrome/common` is the path you have to append to that location to intercept requests to the static resources. 

Similarly, if you have static resources in a project''s `htdocs` directory (which is referenced by `/trac/chrome/site` URL in themes), you can configure Apache to serve those resources (again, put this ''''before'''' the `ScriptAlias` or `WSGIScriptAlias` for the .*cgi scripts, and adjust names and locations to match your installation):
{{{
Alias /trac/chrome/site /path/to/projectenv/htdocs

<Directory "/path/to/projectenv/htdocs">
  Order allow,deny
  Allow from all
</Directory>
}}}

Alternatively to aliasing `/trac/chrome/common`, you can tell Trac to generate direct links for those static resources (and only those), using the [[wiki:TracIni#trac-section| [trac] htdocs_location]] configuration setting:
{{{
[trac]
htdocs_location = http://static.example.org/trac-common/
}}}
Note that this makes it easy to have a dedicated domain serve those static resources (preferentially [http://code.google.com/speed/page-speed/docs/request.html#ServeFromCookielessDomain cookie-less]).

Of course, you still need to make the Trac `htdocs/common` directory available through the web server at the specified URL, for example by copying (or linking) the directory into the document root of the web server:
{{{
$ ln -s /path/to/trac/htdocs/common /var/www/static.example.org/trac-common
}}}


==== Setting up the Plugin Cache ====

Some Python plugins need to be extracted to a cache directory. By default the cache resides in the home directory of the current user. When running Trac on a Web Server as a dedicated user (which is highly recommended) who has no home directory, this might prevent the plugins from starting. To override the cache location you can set the PYTHON_EGG_CACHE environment variable. Refer to your server documentation for detailed instructions on how to set environment variables.

== Configuring Authentication ==

Trac uses HTTP authentication. You''ll need to configure your webserver to request authentication when the `.../login` URL is hit (the virtual path of the "login" button). Trac will automatically pick the REMOTE_USER variable up after you provide your credentials. Therefore, all user management goes through your web server configuration. Please consult the documentation of your web server for more info.

The process of adding, removing, and configuring user accounts for authentication depends on the specific way you run Trac. 

Please refer to one of the following sections:
 * TracStandalone#UsingAuthentication if you use the standalone server, `tracd`.
 * [wiki:TracModWSGI#ConfiguringAuthentication TracModWSGI#ConfiguringAuthentication] if you use the Apache web server, with any of its front end: `mod_wsgi` of course, but the same instructions applies also for `mod_python`, `mod_fcgi` or `mod_fastcgi`.
 * TracFastCgi if you''re using another web server with FCGI support (Cherokee, Lighttpd, !LiteSpeed, nginx)

== Granting admin rights to the admin user
Grant admin rights to user admin:
{{{
$ trac-admin /path/to/myproject permission add admin TRAC_ADMIN
}}}
This user will have an "Admin" entry menu that will allow you to admin your trac project.

== Finishing the install

=== Automatic reference to the SVN changesets in Trac tickets ===

You can configure SVN to automatically add a reference to the changeset into the ticket comments, whenever changes are committed to the repository. The description of the commit needs to contain one of the following formulas:
 * ''''''`Refs #123`'''''' - to reference this changeset in `#123` ticket
 * ''''''`Fixes #123`'''''' - to reference this changeset and close `#123` ticket with the default status ''''fixed''''

This functionality requires a post-commit hook to be installed as described in [wiki:TracRepositoryAdmin#ExplicitSync TracRepositoryAdmin], and enabling the optional commit updater components by adding the following line to the `[components]` section of your [wiki:TracIni#components-section trac.ini], or enabling the components in the "Plugins" admin panel.
{{{
tracopt.ticket.commit_updater.* = enabled
}}}
For more information, see the documentation of the `CommitTicketUpdater` component in the "Plugins" admin panel.

=== Using Trac ===

Once you have your Trac site up and running, you should be able to create tickets, view the timeline, browse your version control repository if configured, etc.

Keep in mind that //anonymous// (not logged in) users can by default access only a few of the features, in particular they will have a read-only access to the resources. You will need to configure authentication and grant additional [wiki:TracPermissions permissions] to authenticated users to see the full set of features.

'''' Enjoy! ''''

[trac:TracTeam The Trac Team]

----
See also: [trac:TracInstallPlatforms TracInstallPlatforms], TracGuide, TracUpgrade, TracPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracInterfaceCustomization',3,1352317660179000,'trac','127.0.0.1','= Customizing the Trac Interface =
[[TracGuideToc]]
[[PageOutline]]

== Introduction ==
This page is meant to give users suggestions on how they can customize the look of Trac.  Topics on this page cover editing the HTML templates and CSS files, but not the program code itself.  The topics are intended to show users how they can modify the look of Trac to meet their specific needs.  Suggestions for changes to Trac''s interface applicable to all users should be filed as tickets, not listed on this page.

== Project Logo and Icon ==
The easiest parts of the Trac interface to customize are the logo and the site icon.  Both of these can be configured with settings in [wiki:TracIni trac.ini].

The logo or icon image should be put in a folder named "htdocs" in your project''s environment folder.  (''''Note: in projects created with a Trac version prior to 0.9 you will need to create this folder'''')

 ''''Note: you can actually put the logo and icon anywhere on your server (as long as it''s accessible through the web server), and use their absolute or server-relative URLs in the configuration.''''

Now configure the appropriate section of your [wiki:TracIni trac.ini]:

=== Logo ===
Change the `src` setting to `site/` followed by the name of your image file.  The `width` and `height` settings should be modified to match your image''s dimensions (the Trac chrome handler uses "`site/`" for files within the project directory `htdocs`, and "`common/`" for the common `htdocs` directory belonging to a Trac installation). Note that ''site/'' is not a placeholder for your project name, it is the actual prefix that should be used (literally). For example, if your project is named ''sandbox'', and the image file is ''red_logo.gif'' then the ''src'' setting would be ''site/red_logo.gif'', not ''sandbox/red_logo.gif''.

{{{
[header_logo]
src = site/my_logo.gif
alt = My Project
width = 300
height = 100
}}}

=== Icon ===
Icons should be a 32x32 image in `.gif` or `.ico` format.  Change the `icon` setting to `site/` followed by the name of your icon file.  Icons will typically be displayed by your web browser next to the site''s URL and in the `Bookmarks` menu.

{{{
[project]
icon = site/my_icon.ico
}}}

Note though that this icon is ignored by Internet Explorer, which only accepts a file named ``favicon.ico`` at the root of the host. To make the project icon work in both IE and other browsers, you can store the icon in the document root of the host, and reference it from ``trac.ini`` as follows:

{{{
[project]
icon = /favicon.ico
}}}

Should your browser have issues with your favicon showing up in the address bar, you may put a "?" (less the quotation marks) after your favicon file extension. 

{{{
[project]
icon = /favicon.ico?
}}}

== Custom Navigation Entries ==
The new [mainnav] and [metanav] can now be used to customize the text and link used for the navigation items, or even to disable them (but not for adding new ones).

In the following example, we rename the link to the Wiki start "Home", and hide the "!Help/Guide". We also make the "View Tickets" entry link to a specific report .
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24

[metanav]
help = disabled
}}}

See also TracNavigation for a more detailed explanation of the mainnav and metanav terms.

== Site Appearance == #SiteAppearance

Trac is using [http://genshi.edgewall.org Genshi] as the templating engine. Documentation is yet to be written, in the meantime the following tip should work.

Say you want to add a link to a custom stylesheet, and then your own
header and footer. Save the following content as `site.html` inside your projects `templates/` directory (each Trac project can have their own `site.html`), e.g. {{{/path/to/env/templates/site.html}}}:

{{{
#!xml
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      py:strip="">

  <!--! Add site-specific style sheet -->
  <head py:match="head" py:attrs="select(''@*'')">
    ${select(''*|comment()|text()'')}
    <link rel="stylesheet" type="text/css"
          href="${href.chrome(''site/style.css'')}" />
  </head>

  <body py:match="body" py:attrs="select(''@*'')">
    <!--! Add site-specific header -->
    <div id="siteheader">
      <!--! Place your header content here... -->
    </div>

    ${select(''*|text()'')}

    <!--! Add site-specific footer -->
    <div id="sitefooter">
      <!--! Place your footer content here... -->
    </div>
  </body>
</html>
}}}

Those who are familiar with XSLT may notice that Genshi templates bear some similarities. However, there are some Trac specific features - for example `${href.chrome(''site/style.css'')}` attribute references a CSS file placed into environment''s `htdocs/` directory. In a similar fashion `${chrome.htdocs_location}` is used to specify the common `htdocs/` directory belonging to a Trac installation. That latter location can however be overriden using the [[TracIni#trac-config|[trac] htdocs_location]] configuration setting.

`site.html` is one file to contain all your modifications. It usually works using the `py:match` directive (element or attribute), and it allows you to modify the page as it renders - the matches hook onto specific sections depending on what it tries to find
and modify them.
See [http://groups.google.com/group/trac-users/browse_thread/thread/70487fb2c406c937/ this thread] for a detailed explanation of the above example `site.html`.
A `site.html` can contain any number of such `py:match` sections for whatever you need to modify. This is all Genshi, so the [http://genshi.edgewall.org/wiki/Documentation/xml-templates.html docs on the exact syntax] can be found there.


Example snippet of adding introduction text to the new ticket form (but not shown during preview):

{{{#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)">
    <p>Please make sure to search for existing tickets before reporting a new one!</p>
  </py:if>
  ${select(''*'')} 
</form>
}}}

This example illustrates a technique of using `req.environ[''PATH_INFO'']` to limit scope of changes to one view only. For instance, to make changes in `site.html` only for timeline and avoid modifying other sections - use  `req.environ[''PATH_INFO''] == ''/timeline''` condition in `<py:if>` test.

More examples snippets for `site.html` can be found at [trac:wiki:CookBook/SiteHtml CookBook/SiteHtml].

Example snippets for `style.css` can be found at [trac:wiki:CookBook/SiteStyleCss CookBook/SiteStyleCss].

If the environment is upgraded from 0.10 and a `site_newticket.cs` file already exists, it can actually be loaded by using a workaround - providing it contains no ClearSilver processing. In addition, as only one element can be imported, the content needs some sort of wrapper such as a `<div>` block or other similar parent container. The XInclude namespace must be specified to allow includes, but that can be moved to document root along with the others:
{{{
#!xml
<form py:match="div[@id=''content'' and @class=''ticket'']/form" py:attrs="select(''@*'')"
        xmlns:xi="http://www.w3.org/2001/XInclude">
  <py:if test="req.environ[''PATH_INFO''] == ''/newticket'' and (not ''preview'' in req.args)"> 
    <xi:include href="site_newticket.cs"><xi:fallback /></xi:include>
  </py:if>
  ${select(''*'')} 
</form>
}}}

Also note that the `site.html` (despite its name) can be put in a common templates directory - see the [[TracIni#inherit-section|[inherit] templates_dir]] option. This could provide easier maintainence (and a migration path from 0.10 for larger installations) as one new global `site.html` file can be made to include any existing header, footer and newticket snippets.

== Project List == #ProjectList

You can use a custom Genshi template to display the list of projects if you are using Trac with multiple projects.  

The following is the basic template used by Trac to display a list of links to the projects.  For projects that could not be loaded it displays an error message. You can use this as a starting point for your own index template.

{{{
#!text/html
<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:py="http://genshi.edgewall.org/"
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <head>
    <title>Available Projects</title>
  </head>
  <body>
    <h1>Available Projects</h1>
    <ul>
      <li py:for="project in projects" py:choose="">
        <a py:when="project.href" href="$project.href"
           title="$project.description">$project.name</a>
        <py:otherwise>
          <small>$project.name: <em>Error</em> <br /> ($project.description)</small>
        </py:otherwise>
      </li>
    </ul>
  </body>
</html>
}}}

Once you''ve created your custom template you will need to configure the webserver to tell Trac where the template is located (pls verify ... not yet changed to 0.11):

For [wiki:TracModWSGI mod_wsgi]:
{{{
os.environ[''TRAC_ENV_INDEX_TEMPLATE''] = ''/path/to/template''
}}}

For [wiki:TracFastCgi FastCGI]:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects \
              -initial-env TRAC_ENV_INDEX_TEMPLATE=/path/to/template
}}}

For [wiki:TracModPython mod_python]:
{{{
PythonOption TracEnvParentDir /parent/dir/of/projects
PythonOption TracEnvIndexTemplate /path/to/template
}}}

For [wiki:TracCgi CGI]:
{{{
SetEnv TRAC_ENV_INDEX_TEMPLATE /path/to/template
}}}

For [wiki:TracStandalone], you''ll need to set up the `TRAC_ENV_INDEX_TEMPLATE` environment variable in the shell used to launch tracd:
 - Unix
   {{{
#!sh
$ export TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}
 - Windows
   {{{
#!sh
$ set TRAC_ENV_INDEX_TEMPLATE=/path/to/template
   }}}

== Project Templates ==

The appearance of each individual Trac environment (that is, instance of a project) can be customized independently of other projects, even those hosted by the same server. The recommended way is to use a `site.html` template (see [#SiteAppearance]) whenever possible. Using `site.html` means changes are made to the original templates as they are rendered, and you should not normally need to redo modifications whenever Trac is upgraded. If you do make a copy of `theme.html` or any other Trac template, you need to migrate your modifiations to the newer version - if not, new Trac features or bug fixes may not work as expected.

With that word of caution, any Trac template may be copied and customized. The default Trac templates are located inside the installed Trac egg (`/usr/lib/pythonVERSION/site-packages/Trac-VERSION.egg/trac/templates, .../trac/ticket/templates, .../trac/wiki/templates, ++`). The [#ProjectList] template file is called `index.html`, while the template responsible for main layout is called `theme.html`. Page assets such as images and CSS style sheets are located in the egg''s `trac/htdocs` directory.

However, do not edit templates or site resources inside the Trac egg - installing Trac again can completely delete your modifications. Instead use one of two alternatives:
 * For a modification to one project only, copy the template to project `templates` directory.
 * For a modification shared by several projects, copy the template to a shared location and have each project point to this location using the `[inherit] templates_dir =` trac.ini option.

Trac resolves requests for a template by first looking inside the project, then in any inherited templates location, and finally inside the Trac egg.

Trac caches templates in memory by default to improve performance. To apply a template you need to restart the server.

----
See also TracGuide, TracIni
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracLinks',3,1352317660190000,'trac','127.0.0.1','= Trac Links =
[[TracGuideToc]]

TracLinks are a fundamental feature of Trac, because they allow easy hyperlinking between the various entities in the system—such as tickets, reports, changesets, Wiki pages, milestones, and source files—from anywhere WikiFormatting is used.

TracLinks are generally of the form ''''''type:id'''''' (where ''''id'''' represents the
number, name or path of the item) though some frequently used kinds of items
also have short-hand notations.

== Where to use TracLinks ==
You can use TracLinks in:

 * Source code (Subversion) commit messages
 * Wiki pages
 * Full descriptions for tickets, reports and milestones

and any other text fields explicitly marked as supporting WikiFormatting.

== Overview ==

||= Wiki Markup =||= Display =||
{{{#!td
 Wiki pages :: `CamelCase` or `wiki:CamelCase`
 Parent page :: `[..]`
 Tickets :: `#1` or `ticket:1`
 Ticket comments :: `comment:1:ticket:2`
 Reports :: `{1}` or `report:1`
 Milestones :: `milestone:1.0`
 Attachment :: `attachment:example.tgz` (for current page attachment), `attachment:attachment.1073.diff:ticket:944` (absolute path)
 Changesets :: `r1`, `[1]`, `changeset:1` or (restricted) `[1/trunk]`, `changeset:1/trunk`
 Revision log :: `r1:3`, `[1:3]` or `log:@1:3`, `log:trunk@1:3`, `[2:5/trunk]`
 Diffs :: `diff:@1:3`, `diff:plugins/0.12/mercurial-plugin@9128:9953`,
          `diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default` 
          or `diff:trunk/trac@3538//sandbox/vc-refactoring@3539`
 Files :: `source:trunk/COPYING`, `source:/trunk/COPYING@200` (at version 200), `source:/trunk/COPYING@200#L25` (at version 200, line 25)
}}}
{{{#!td
 Wiki pages :: CamelCase or wiki:CamelCase
 Parent page :: [..]
 Tickets :: #1 or ticket:1
 Ticket comments :: comment:1:ticket:2 
 Reports :: {1} or report:1
 Milestones :: milestone:1.0
 Attachment :: attachment:example.tgz (for current page attachment), attachment:attachment.1073.diff:ticket:944 (absolute path)
 Changesets :: r1, [1], changeset:1 or (restricted) [1/trunk], changeset:1/trunk
 Revision log :: r1:3, [1:3] or log:@1:3, log:trunk@1:3, [2:5/trunk]
 Diffs :: diff:@1:3, diff:plugins/0.12/mercurial-plugin@9128:9953,
          diff:tags/trac-0.9.2/wiki-default//tags/trac-0.9.3/wiki-default 
          or diff:trunk/trac@3538//sandbox/vc-refactoring@3539
 Files :: source:trunk/COPYING, source:/trunk/COPYING@200 (at version 200), source:/trunk/COPYING@200#L25 (at version 200, line 25)
}}}

''''''Note:'''''' The wiki:CamelCase form is rarely used, but it can be convenient to refer to
pages whose names do not follow WikiPageNames rules, i.e., single words,
non-alphabetic characters, etc. See WikiPageNames for more about features specific
to links to Wiki page names.


{{{#!table class=""
|||| Trac links using the full (non-shorthand) notation can also be given a custom link title like this: ||
{{{#!td
{{{
[ticket:1 This is a link to ticket number one] or
[[ticket:1|This is another link to ticket number one]].
}}}
}}}
{{{#!td
[ticket:1 This is a link to ticket number one] or
[[ticket:1|This is another link to ticket number one]].
}}}
|--------------------------------------------------------------------------------------
|||| If the title is omitted, only the id (the part after the colon) is displayed:  ||
{{{#!td
{{{
[ticket:1] or [[ticket:2]]
}}}
}}}
{{{#!td
[ticket:1] or [[ticket:2]]
}}}
|--------------------------------------------------------------------------------------
|||| `wiki` is the default if the namespace part of a full link is omitted:  || 
{{{#!td
{{{
[SandBox the sandbox] or
[[SandBox|the sandbox]]
}}}
}}}
{{{#!td
[SandBox the sandbox] or
[[SandBox|the sandbox]]
}}}
|--------------------------------------------------------------------------------------
|||| The short form ''''realm:target'''' can also be wrapped within a <...> pair, [[br]] which allow for arbitrary characters (i.e. anything but >)  ||
{{{#!td
{{{
<wiki:Strange(page@!)>
}}}
}}}
{{{#!td
<wiki:Strange(page@!)>
}}}
}}}

TracLinks are a very simple idea, but actually allow quite a complex network of information. In practice, it''s very intuitive and simple to use, and we''ve found the "link trail" extremely helpful to better understand what''s happening in a project or why a particular change was made.


== Advanced use of TracLinks ==

=== Relative links ===

To create a link to a [trac:SubWiki SubWiki]-page just use a ''/'':
{{{
 WikiPage/SubWikiPage or ./SubWikiPage
}}}

To link from a [trac:SubWiki SubWiki] page to a parent, simply use a ''..'':
{{{
  [..] or [[..]]
}}}
  [..] or [[..]]

To link from a [trac:SubWiki SubWiki] page to a [=#sibling sibling] page, use a ''../'':
{{{
  [../Sibling see next sibling] or [[../Sibling|see next sibling]]
}}}
  [../Sibling see next sibling] or [[../Sibling|see next sibling]]

But in practice you often won''t need to add the `../` prefix to link to a sibling page.
For resolving the location of a wiki link, it''s the target page closest in the hierarchy
to the page where the link is written which will be selected. So for example, within 
a sub-hierarchy, a sibling page will be targeted in preference to a toplevel page.
This makes it easy to copy or move pages to a sub-hierarchy by [[WikiNewPage#renaming|renaming]] without having to adapt the links.

In order to link explicitly to a [=#toplevel toplevel] Wiki page,
use the `wiki:/` prefix.
Be careful **not** to use the `/` prefix alone, as this corresponds to the
[#Server-relativelinks] syntax and with such a link you will lack the `/wiki/` 
part in the resulting URL.

''''(Changed in 0.11)'''' Note that in Trac 0.10, using e.g. `[../newticket]`  may have worked for linking to the `/newticket` top-level URL, but since 0.11, such a link will stay in the wiki namespace and therefore link to a sibling page. 
See [#Server-relativelinks] for the new syntax.

=== Link anchors ===

To create a link to a specific anchor in a page, use ''#'':
{{{
 [#Linkanchors Link anchors] or [[#Linkanchors|Link anchors]]
}}}
  [#Linkanchors Link anchors] or [[#Linkanchors|Link anchors]]

Hint: when you move your mouse over the title of a section, a ''¶'' character will be displayed. This is a link to that specific section and you can use this to copy the `#...` part inside a relative link to an anchor.

To create a link to the first or last occurrence of a term on a page, use a ''''pseudo anchor'''' starting with ''#/'' or ''#?'':
{{{
 [#/Milestone first occurrence of Milestone] or
 [#?Milestone last occurrence of Milestone]
}}}
 [#/Milestone first occurrence of Milestone] or
 [#?Milestone last occurrence of Milestone]
This will also highlight all other matches on the linked page. By default only case sensitive matches are considered. To include case insensitive matches append ''/i'':
{{{
 [#/Milestone/i first occurrence of Milestone or milestone] or
 [#?Milestone/i last occurrence of Milestone or milestone]
}}}
 [#/Milestone/i first occurrence of Milestone or milestone] or
 [#?Milestone/i last occurrence of Milestone or milestone]

''''(since Trac 1.0)''''

Such anchors can be very useful for linking to specific lines in a file in the source browser:
{{{
 [trac:source:tags/trac-0.12/trac/wiki/api.py#L127 Line 127] or
 [trac:source:tags/trac-0.12/trac/ticket/roadmap.py#L47 Line 47]
}}}
 [trac:source:tags/trac-0.12/trac/wiki/api.py#L127 Line 127] or
 [trac:source:tags/trac-0.12/trac/ticket/roadmap.py#L47 Line 47]
(Hint: The line numbers displayed in the source browser are links to anchors on the respective lines.)

Since such links become outdated when the file changes, it can be useful to link using a ''#/'' pseudo anchor instead:
{{{
 [trac:source:trunk/trac/wiki/api.py#/IWikiSyntaxProvider IWikiSyntaxProvider] or
 [trac:source:trunk/trac/env.py#/ISystemInfoProvider ISystemInfoProvider]
}}}
 [trac:source:trunk/trac/wiki/api.py#/IWikiSyntaxProvider IWikiSyntaxProvider] or
 [trac:source:trunk/trac/env.py#/ISystemInfoProvider ISystemInfoProvider]

=== InterWiki links ===

Other prefixes can be defined freely and made to point to resources in other Web applications. The definition of those prefixes as well as the URLs of the corresponding Web applications is defined in a special Wiki page, the InterMapTxt page. Note that while this could be used to create links to other Trac environments, there''s a more specialized way to register other Trac environments which offers greater flexibility.

=== InterTrac links ===

This can be seen as a kind of InterWiki link specialized for targeting other Trac projects.

Any type of Trac link can be written in one Trac environment and actually refer to resources in another Trac environment. All that is required is to prefix the Trac link with the name of the other Trac environment followed by a colon. The other Trac environment must be registered on the InterTrac page. 

A distinctive advantage of InterTrac links over InterWiki links is that the shorthand form of Trac links (e.g. `{}`, `r`, `#`) can also be used. For example if T was set as an alias for Trac, links to Trac tickets can be written #T234, links to Trac changesets can be written [trac 1508].
See InterTrac for the complete details. 

=== Server-relative links ===

It is often useful to be able to link to objects in your project that
have no built-in Trac linking mechanism, such as static resources, `newticket`,
a shared `/register` page on the server, etc.

To link to resources inside the project, use either an absolute path from the project root, 
or a relative link from the URL of the current page (''''Changed in 0.11''''):

{{{
[/newticket Create a new ticket] or [[//newticket|Create a new ticket]]
[/ home] or [[/|home]]
}}}

Display: [/newticket Create a new ticket] or [[//newticket|Create a new ticket]]
[/ home] or [[/|home]]

To link to another location on the server (possibly outside the project but on the same host), use the `//` prefix (''''Changed in 0.11''''):

{{{
[//register Register Here] or [[//register|Register Here]]
}}}

Display: [//register Register Here] or [[//register|Register Here]]

=== Quoting space in TracLinks ===

Immediately after a TracLinks prefix, targets containing space characters should
be enclosed in a pair of quotes or double quotes.
Examples:
 * !wiki:"The whitespace convention"
 * !attachment:''the file.txt'' or
 * !attachment:"the file.txt" 
 * !attachment:"the file.txt:ticket:123" 

Note that by using [trac:WikiCreole] style links, it''s quite natural to write links containing spaces:
 * ![[The whitespace convention]]
 * ![[attachment:the file.txt]]

=== Escaping Links ===

To prevent parsing of a !TracLink, you can escape it by preceding it with a ''!'' (exclamation mark).
{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

Display:
 !NoLinkHere.
 ![42] is not a link either.


=== Parameterized Trac links ===

Many Trac resources have more than one way to be rendered, depending on some extra parameters. For example, a Wiki page can accept a `version` or a `format` parameter, a report can make use of dynamic variables, etc.

Trac links can support an arbitrary set of parameters, written in the same way as they would be for the corresponding URL. Some examples:
 - `wiki:WikiStart?format=txt`
 - `ticket:1?version=1`
 - `[/newticket?component=module1 create a ticket for module1]`
 - `[/newticket?summary=Add+short+description+here create a ticket with URL with spaces]`


== TracLinks Reference ==
The following sections describe the individual link types in detail, as well as notes on advanced usage of links.

=== attachment: links ===

The link syntax for attachments is as follows:
 * !attachment:the_file.txt creates a link to the attachment the_file.txt of the current object
 * !attachment:the_file.txt:wiki:MyPage creates a link to the attachment the_file.txt of the !MyPage wiki page
 * !attachment:the_file.txt:ticket:753 creates a link to the attachment the_file.txt of the ticket 753

Note that the older way, putting the filename at the end, is still supported: !attachment:ticket:753:the_file.txt.

If you''d like to create a direct link to the content of the attached file instead of a link to the attachment page, simply use `raw-attachment:` instead of `attachment:`.

This can be useful for pointing directly to an HTML document, for example. Note that for this use case, you''d have to allow the web browser to render the content by setting `[attachment] render_unsafe_content = yes` (see TracIni#attachment-section). Caveat: only do that in environments for which you''re 100% confident you can trust the people who are able to attach files, as otherwise this would open up your site to [wikipedia:Cross-site_scripting cross-site scripting] attacks.

See also [#export:links].

=== comment: links ===

When you''re inside a given ticket, you can simply write e.g. !comment:3 to link to the third change comment.
It is possible to link to a comment of a specific ticket from anywhere using one of the following syntax:
 - `comment:3:ticket:123` 
 - `ticket:123#comment:3` (note that you can''t write `#123#!comment:3`!)
It is also possible to link to the ticket''s description using one of the following syntax:
 - `comment:description` (within the ticket)
 - `comment:description:ticket:123`
 - `ticket:123#comment:description`

=== htdocs: links ===

Use `htdocs:path/to/file` to reference files in the `htdocs` directory of the Trac environment, the [TracEnvironment#DirectoryStructure web resource directory].

=== query: links ===

See TracQuery#UsingTracLinks and [#ticket:links].

=== search: links ===

See TracSearch#SearchLinks 

=== ticket: links ===
 ''''alias:'''' `bug:`

Besides the obvious `ticket:id` form, it is also possible to specify a list of tickets or even a range of tickets instead of the `id`. This generates a link to a custom query view containing this fixed set of tickets.

Example: 
 - `ticket:5000-6000`
 - `ticket:1,150`

''''(since Trac 0.11)''''

=== timeline: links ===

Links to the timeline can be created by specifying a date in the ISO:8601 format. The date can be optionally followed by a time specification. The time is interpreted as being UTC time, but alternatively you can specify your local time, followed by your timezone if you don''t want to compute the UTC time.

Examples:
 - `timeline:2008-01-29`
 - `timeline:2008-01-29T15:48`
 - `timeline:2008-01-29T15:48Z`
 - `timeline:2008-01-29T16:48+01`

''''(since Trac 0.11)''''

=== wiki: links ===

See WikiPageNames and [#QuotingspaceinTracLinks quoting space in TracLinks] above. It is possible to create a link to a specific page revision using the syntax WikiStart@1.

=== Version Control related links ===

It should be noted that multiple repository support works by creating a kind of virtual namespace for versioned files in which the toplevel folders correspond to the repository names. Therefore, in presence of multiple repositories, a ''''/path'''' specification in the syntax of links detailed below should start with the name of the repository. If omitted, the default repository is used. In case a toplevel folder of the default repository has the same name as a repository, the latter "wins". One can always access such folder by fully qualifying it (the default repository can be an alias of a named repository, or conversely, it is always possible to create an alias for the default repository, ask your Trac administrator).

For example, `source:/trunk/COPYING` targets the path `/trunk/COPYING` in the default repository, whereas `source:/projectA/trunk/COPYING` targets the path `/trunk/COPYING` in the repository named `projectA`. This can be the same file if `''projectA''` is an alias to the default repository or if `''''` (the default repository) is an alias to `''projectA''`.

==== source: links ====
 ''''aliases:'''' `browser:`, `repos:`

The default behavior for a source:/some/path link is to open the browser in that directory directory 
if the path points to a directory or to show the latest content of the file.

It''s also possible to link directly to a specific revision of a file like this:
 - `source:/some/file@123` - link to the file''s revision 123
 - `source:/some/file@head` - link explicitly to the latest revision of the file

If the revision is specified, one can even link to a specific line number:
 - `source:/some/file@123#L10`
 - `source:/tag/0.10@head#L10`

Finally, one can also highlight an arbitrary set of lines:
 - `source:/some/file@123:10-20,100,103#L99` - highlight lines 10 to 20, and lines 100 and 103.
   ''''(since 0.11)''''

Note that in presence of multiple repositories, the name of the repository is simply integrated in the path you specify for `source:` (e.g. `source:reponame/trunk/README`). ''''(since 0.12)''''

==== export: links ====

To force the download of a file in the repository, as opposed to displaying it in the browser, use the `export` link.  Several forms are available:
 * `export:/some/file` - get the HEAD revision of the specified file
 * `export:123:/some/file` - get revision 123 of the specified file
 * `export:/some/file@123` - get revision 123 of the specified file

This can be very useful for displaying XML or HTML documentation with correct stylesheets and images, in case that has been checked in into the repository. Note that for this use case, you''d have to allow the web browser to render the content by setting `[browser] render_unsafe_content = yes` (see TracIni#browser-section), otherwise Trac will force the files to be downloaded as attachments for security concerns. 

If the path is to a directory in the repository instead of a specific file, the source browser will be used to display the directory (identical to the result of `source:/some/dir`).

==== log: links ====

The `log:` links are used to display revision ranges. In its simplest form, it can link to the latest revisions of the specified path, but it can also support displaying an arbitrary set of revisions.
 - `log:/` - the latest revisions starting at the root of the repository
 - `log:/trunk/tools` - the latest revisions in `trunk/tools`
 - `log:/trunk/tools@10000` - the revisions in `trunk/tools` starting from  revision 10000
 - `log:@20788,20791:20795` - list revision 20788 and the revisions from 20791 to 20795 
 - `log:/trunk/tools@20788,20791:20795` - list revision 20788 and the revisions from 20791 to 20795 which affect the given path

There are short forms for revision ranges as well:
 - `[20788,20791:20795]`
 - `[20788,20791:20795/trunk/tools]`
 - `r20791:20795` (but not `r20788,20791:20795` nor `r20791:20795/trunk`)

Finally, note that in all of the above, a revision range can be written either as `x:y` or `x-y`.

In the presence of multiple repositories, the name of the repository should be specified as the first part of the path, e.g. `log:repos/branches` or `[20-40/repos]`.

----
See also: WikiFormatting, TracWiki, WikiPageNames, InterTrac, InterWiki
 
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracLogging',2,1352317660201000,'trac','127.0.0.1','= Trac Logging =
[[TracGuideToc]]

Trac supports logging of system messages using the standard [http://docs.python.org/library/logging.html logging module] that comes with Python.

Logging is configured in the `[logging]` section in [wiki:TracIni#logging-section trac.ini].

== Supported Logging Methods ==

The log method is set using the `log_type` option in [wiki:TracIni#logging-section trac.ini], which takes any of the following values:

 ''''''none'''':: Suppress all log messages.
 ''''''file'''''':: Log messages to a file, specified with the `log_file` option in [wiki:TracIni#logging-section trac.ini]. Relative paths in `log_file` are resolved relative to the `log` directory of the environment.
 ''''''stderr'''''':: Output all log entries to console ([wiki:TracStandalone tracd] only).
 ''''''syslog'''''':: (UNIX) Send all log messages to the local syslogd via named pipe `/dev/log`. By default, syslog will write them to the file /var/log/messages.
 ''''''eventlog'''''':: (Windows) Use the system''s NT Event Log for Trac logging.

== Log Levels ==

The verbosity level of logged messages can be set using the `log_level` option in [wiki:TracIni#logging-section trac.ini]. The log level defines the minimum level of urgency required for a message to be logged, and those levels are:

 ''''''CRITICAL'''''':: Log only the most critical (typically fatal) errors.
 ''''''ERROR'''''':: Log failures, bugs and errors. 
 ''''''WARN'''''':: Log warnings, non-interrupting events.
 ''''''INFO'''''':: Diagnostic information, log information about all processing.
 ''''''DEBUG'''''':: Trace messages, profiling, etc.

Note that starting with Trac 0.11.5 you can in addition enable logging of SQL statements, at debug level. This is turned off by default, as it''s very verbose (set `[trac] debug_sql = yes` in TracIni to activate).

== Log Format ==

Starting with Trac 0.10.4 (see [trac:#2844 #2844]), it is possible to set the output format for log entries. This can be done through the `log_format` option in [wiki:TracIni#logging-section trac.ini]. The format is a string which can contain any of the [http://docs.python.org/library/logging.html#logrecord-attributes Python logging Formatter variables]. Additonally, the following Trac-specific variables can be used:
 ''''''$(basename)s'''''':: The last path component of the current environment.
 ''''''$(path)s'''''':: The absolute path for the current environment.
 ''''''$(project)s'''''':: The originating project''s name.

Note that variables are identified using a dollar sign (`$(...)s`) instead of percent sign (`%(...)s`).

The default format is:
{{{
log_format = Trac[$(module)s] $(levelname)s: $(message)s
}}}

In a multi-project environment where all logs are sent to the same place (e.g. `syslog`), it makes sense to add the project name. In this example we use `basename` since that can generally be used to identify a project:
{{{
log_format = Trac[$(basename)s:$(module)s] $(levelname)s: $(message)s
}}}

----
See also: TracIni, TracGuide, TracEnvironment',NULL,NULL);
INSERT INTO "wiki" VALUES('TracModPython',3,1352317660223000,'trac','127.0.0.1','= Trac and mod_python =
[[TracGuideToc]]

Trac supports [http://www.modpython.org/ mod_python], which speeds up Trac''s response times considerably, especially compared to [TracCgi CGI], and permits use of many Apache features not possible with [wiki:TracStandalone tracd]/mod_proxy.

{{{#!div class="important"
** A Word of Warning **

As of 16^th^ June 2010, the mod_python project is officially dead.  If you are considering using mod_python for a new installation, ''''''please don''t''''''!  There are known issues which will not be fixed and there are now better alternatives.  Check out the main TracInstall pages for your target version for more information.
}}}


These instructions are for Apache 2; if you are still using Apache 1.3, you may have some luck with [trac:wiki:TracModPython2.7 TracModPython2.7], but you''ll be totally on your own.

[[PageOutline(2-3,Overview,inline)]]

== Simple configuration: single project == #Simpleconfiguration

If you just installed mod_python, you may have to add a line to load the module in the Apache configuration:
{{{
LoadModule python_module modules/mod_python.so
}}}

''''Note: The exact path to the module depends on how the HTTPD installation is laid out.''''

On Debian using apt-get
{{{
apt-get install libapache2-mod-python libapache2-mod-python-doc
}}}
(Still on Debian) after you have installed mod_python, you must enable the modules in apache2 (equivalent of the above Load Module directive):
{{{
a2enmod python
}}}
On Fedora use, using yum:
{{{
yum install mod_python
}}}
You can test your mod_python installation by adding the following to your httpd.conf.  You should remove this when you are done testing for security reasons. Note: mod_python.testhandler is only available in mod_python 3.2+.
{{{
#!xml
<Location /mpinfo>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler mod_python.testhandler
   Order allow,deny
   Allow from all
</Location>
}}}

A simple setup of Trac on mod_python looks like this:
{{{
#!xml
<Location /projects/myproject>
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler trac.web.modpython_frontend 
   PythonOption TracEnv /var/trac/myproject
   PythonOption TracUriRoot /projects/myproject
   Order allow,deny
   Allow from all
</Location>
}}}

The option ''''''`TracUriRoot`'''''' may or may not be necessary in your setup. Try your configuration without it; if the URLs produced by Trac look wrong, if Trac does not seem to recognize URLs correctly, or you get an odd "No handler matched request to..." error, add the ''''''`TracUriRoot`'''''' option.  You will notice that the `Location` and ''''''`TracUriRoot`'''''' have the same path.

The options available are
{{{
    # For a single project
    PythonOption TracEnv /var/trac/myproject

    # For multiple projects
    PythonOption TracEnvParentDir /var/trac/myprojects

    # For the index of multiple projects
    PythonOption TracEnvIndexTemplate /srv/www/htdocs/trac/project_list_template.html

    # A space delimitted list, with a "," between key and value pairs.
    PythonOption TracTemplateVars key1,val1 key2,val2

    # Useful to get the date in the wanted order
    PythonOption TracLocale en_GB.UTF8

    # See description above        
    PythonOption TracUriRoot /projects/myproject
}}}

=== Python Egg Cache ===

Compressed python eggs like Genshi are normally extracted into a directory named `.python-eggs` in the users home directory. Since apache''s home usually is not writable an alternate egg cache directory can be specified like this:
{{{
PythonOption PYTHON_EGG_CACHE /var/trac/myprojects/egg-cache
}}}

or you can uncompress the Genshi egg to resolve problems extracting from it.

=== Configuring Authentication ===

See corresponding section in the [wiki:TracModWSGI#ConfiguringAuthentication] page.


== Advanced Configuration

=== Setting the Python Egg Cache ===

If the Egg Cache isn''t writeable by your Web server, you''ll either have to change the permissions, or point Python to a location where Apache can write. This can manifest itself as a ''''500 internal server error'''' and/or a complaint in the syslog. 

{{{
#!xml
<Location /projects/myproject>
  ...
  PythonOption PYTHON_EGG_CACHE /tmp 
  ...
</Location>
}}}


=== Setting the !PythonPath ===

If the Trac installation isn''t installed in your Python path, you''ll have to tell Apache where to find the Trac mod_python handler  using the `PythonPath` directive:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonPath "sys.path + [''/path/to/trac'']"
  ...
</Location>
}}}

Be careful about using the !PythonPath directive, and ''''not'''' `SetEnv PYTHONPATH`, as the latter won''t work.

=== Setting up multiple projects ===

The Trac mod_python handler supports a configuration option similar to Subversion''s `SvnParentPath`, called `TracEnvParentDir`:
{{{
#!xml
<Location /projects>
  SetHandler mod_python
  PythonInterpreter main_interpreter
  PythonHandler trac.web.modpython_frontend 
  PythonOption TracEnvParentDir /var/trac
  PythonOption TracUriRoot /projects
</Location>
}}}

When you request the `/projects` URL, you will get a listing of all subdirectories of the directory you set as `TracEnvParentDir` that look like Trac environment directories. Selecting any project in the list will bring you to the corresponding Trac environment.

If you don''t want to have the subdirectory listing as your projects home page you can use a
{{{
#!xml
<LocationMatch "/.+/">
}}}

This will instruct Apache to use mod_python for all locations different from root while having the possibility of placing a custom home page for root in your !DocumentRoot folder.

You can also use the same authentication realm for all of the projects using a `<LocationMatch>` directive:
{{{
#!xml
<LocationMatch "/projects/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /var/trac/.htpasswd
  Require valid-user
</LocationMatch>
}}}

=== Virtual Host Configuration ===

Below is the sample configuration required to set up your trac as a virtual server (i.e. when you access it at the URLs like
!http://trac.mycompany.com):

{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    <Location />
        SetHandler mod_python
        PythonInterpreter main_interpreter
        PythonHandler trac.web.modpython_frontend
        PythonOption TracEnv /var/trac/myproject
        PythonOption TracUriRoot /
    </Location>
    <Location /login>
        AuthType Basic
        AuthName "MyCompany Trac Server"
        AuthUserFile /var/trac/myproject/.htpasswd
        Require valid-user
    </Location>
</VirtualHost>
}}}

This does not seem to work in all cases. What you can do if it does not:
 * Try using `<LocationMatch>` instead of `<Location>`
 * <Location /> may, in your server setup, refer to the complete host instead of simple the root of the server. This means that everything (including the login directory referenced below) will be sent to python and authentication does not work (i.e. you get the infamous Authentication information missing error). If this applies to you, try using a sub-directory for trac instead of the root (i.e. /web/ and /web/login instead of / and /login).
 * Depending on apache''s `NameVirtualHost` configuration, you may need to use `<VirtualHost *:80>` instead of `<VirtualHost *>`.

For a virtual host that supports multiple projects replace "`TracEnv`" /var/trac/myproject with "`TracEnvParentDir`" /var/trac/

Note: !DocumentRoot should not point to your Trac project env. As Asmodai wrote on #trac: "suppose there''s a webserver bug that allows disclosure of !DocumentRoot they could then leech the entire Trac environment".

== Troubleshooting ==

In general, if you get server error pages, you can either check the Apache error log, or enable the `PythonDebug` option:
{{{
#!xml
<Location /projects/myproject>
  ...
  PythonDebug on
</Location>
}}}

For multiple projects, try restarting the server as well.

=== Login Not Working ===
If you''ve used `<Location />` directive, it will override any other directives, as well as `<Location /login>`.
The workaround is to use negation expression as follows (for multi project setups):
{{{
#!xml
#this one for other pages
<Location ~ "/*(?!login)">
   SetHandler mod_python
   PythonHandler trac.web.modpython_frontend
   PythonOption TracEnvParentDir /projects
   PythonOption TracUriRoot /

</Location>
#this one for login page
<Location ~ "/[^/]+/login">
   SetHandler mod_python
   PythonHandler trac.web.modpython_frontend
   PythonOption TracEnvParentDir /projects
   PythonOption TracUriRoot /

   #remove these if you don''t want to force SSL
   RewriteEngine On 
   RewriteCond %{HTTPS} off
   RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}

   AuthType Basic
   AuthName "Trac"
   AuthUserFile /projects/.htpasswd
   Require valid-user
</Location>
}}}

=== Expat-related segmentation faults === #expat

This problem will most certainly hit you on Unix when using Python 2.4.
In Python 2.4, some version of Expat (an XML parser library written in C) is used, 
and if Apache is using another version, this results in segmentation faults.
As Trac 0.11 is using Genshi, which will indirectly use Expat, that problem
can now hit you even if everything was working fine before with Trac 0.10.

See Graham Dumpleton''s detailed [http://www.dscpl.com.au/wiki/ModPython/Articles/ExpatCausingApacheCrash explanation and workarounds] for the issue.

=== Form submission problems ===

If you''re experiencing problems submitting some of the forms in Trac (a common problem is that you get redirected to the start page after submission), check whether your {{{DocumentRoot}}} contains a folder or file with the same path that you mapped the mod_python handler to. For some reason, mod_python gets confused when it is mapped to a location that also matches a static resource.

=== Problem with virtual host configuration ===

If the <Location /> directive is used, setting the `DocumentRoot` may result in a ''''403 (Forbidden)'''' error. Either remove the `DocumentRoot` directive, or make sure that accessing the directory it points is allowed (in a corresponding `<Directory>` block).

Using <Location /> together with `SetHandler` resulted in having everything handled by mod_python, which leads to not being able download any CSS or images/icons. I used <Location /trac> `SetHandler None` </Location> to circumvent the problem, though I do not know if this is the most elegant solution.

=== Problem with zipped egg ===

It''s possible that your version of mod_python will not import modules from zipped eggs. If you encounter an `ImportError: No module named trac` in your Apache logs but you think everything is where it should be, this might be your problem. Look in your site-packages directory; if the Trac module appears as a ''''file'''' rather than a ''''directory'''', then this might be your problem. To rectify, try installing Trac using the `--always-unzip` option, like this:

{{{
easy_install --always-unzip Trac-0.12b1.zip
}}}

=== Using .htaccess ===

Although it may seem trivial to rewrite the above configuration as a directory in your document root with a `.htaccess` file, this does not work. Apache will append a "/" to any Trac URLs, which interferes with its correct operation.

It may be possible to work around this with mod_rewrite, but I failed to get this working. In all, it is more hassle than it is worth. Stick to the provided instructions. :)

A success story: For me it worked out-of-box, with following trivial config:
{{{#!xml
SetHandler mod_python
PythonInterpreter main_interpreter
PythonHandler trac.web.modpython_frontend 
PythonOption TracEnv /system/path/to/this/directory
PythonOption TracUriRoot /path/on/apache

AuthType Basic
AuthName "ProjectName"
AuthUserFile /path/to/.htpasswd
Require valid-user
}}}

The `TracUriRoot` is obviously the path you need to enter to the browser to get to the trac (e.g. domain.tld/projects/trac)

=== Additional .htaccess help ===

If you are using the .htaccess method you may have additional problems if your trac directory is inheriting .htaccess directives from another.  This may also help to add to your .htaccess file:

{{{
<IfModule mod_rewrite.c>
  RewriteEngine Off
</IfModule>
}}}

=== Platform specific issues
==== Win32 Issues ====
If you run trac with mod_python < 3.2 on Windows, uploading attachments will ''''''not'''''' work. This problem is resolved in mod_python 3.1.4 or later, so please upgrade mod_python to fix this.


==== OS X issues ====

When using mod_python on OS X you will not be able to restart Apache using `apachectl restart`. This is apparently fixed in mod_python 3.2, but there''s also a patch available for earlier versions [http://www.dscpl.com.au/projects/vampire/patches.html here].

==== SELinux issues ====

If Trac reports something like: ''''Cannot get shared lock on db.lock''''
The security context on the repository may need to be set:

{{{
chcon -R -h -t httpd_sys_content_t PATH_TO_REPOSITORY
}}}

See also [http://subversion.tigris.org/faq.html#reposperms]

==== FreeBSD issues ====
Pay attention to the version of the installed mod_python and sqlite packages. Ports have both the new and old ones, but earlier versions of pysqlite and mod_python won''t integrate as the former requires threaded support in python, and the latter requires a threadless install.

If you compiled and installed apache2, apache wouldn´t support threads (cause it doesn´t work very well on FreeBSD). You could force thread support when running ./configure for apache, using --enable-threads, but this isn´t recommendable.
The best option [http://modpython.org/pipermail/mod_python/2006-September/021983.html seems to be] adding to /usr/local/apache2/bin/ennvars the line 

{{{
export LD_PRELOAD=/usr/lib/libc_r.so
}}}


==== Fedora 7 Issues ====
Make sure you install the ''python-sqlite2'' package as it seems to be required for TracModPython but not for tracd


=== Subversion issues ===

If you get the following Trac Error `Unsupported version control system "svn"` only under mod_python, though it works well on the command-line and even with TracStandalone, chances are that you forgot to add the path to the Python bindings with the [TracModPython#ConfiguringPythonPath PythonPath] directive. (The better way is to add a link to the bindings in the Python `site-packages` directory, or create a `.pth` file in that directory.)

If this is not the case, it''s possible that you''re using Subversion libraries that are binary incompatible with the apache ones (an incompatibility of the `apr` libraries is usually the cause). In that case, you also won''t be able to use the svn modules for Apache (`mod_dav_svn`).

You also need a recent version of `mod_python` in order to avoid a runtime error ({{{argument number 2: a ''apr_pool_t *'' is expected}}}) due to the default usage of multiple sub-interpreters. 3.2.8 ''''should'''' work, though it''s probably better to use the workaround described in [trac:#3371 #3371], in order to force the use of the main interpreter:
{{{
PythonInterpreter main_interpreter
}}}
This is anyway the recommended workaround for other well-known issues seen when using the Python bindings for Subversion within mod_python ([trac:#2611 #2611], [trac:#3455 #3455]). See in particular Graham Dumpleton''s comment in [trac:comment:9:ticket:3455 #3455] explaining the issue.

=== Page layout issues ===

If the formatting of the Trac pages look weird chances are that the style sheets governing the page layout are not handled properly by the web server. Try adding the following lines to your apache configuration:
{{{
#!xml
Alias /myproject/css "/usr/share/trac/htdocs/css"
<Location /myproject/css>
    SetHandler None
</Location>
}}}

Note: For the above configuration to have any effect it must be put after the configuration of your project root location, i.e. {{{<Location /myproject />}}}.

Also, setting `PythonOptimize On` seems to mess up the page headers and footers, in addition to hiding the documentation for macros and plugins (see #Trac8956). Considering how little effect the option has, it is probably a good idea to leave it `Off`.

=== HTTPS issues ===

If you want to run Trac fully under https you might find that it tries to redirect to plain http. In this case just add the following line to your apache configuration:
{{{
#!xml
<VirtualHost * >
    DocumentRoot /var/www/myproject
    ServerName trac.mycompany.com
    SetEnv HTTPS 1
    ....
</VirtualHost>
}}}


=== Segmentation fault with php5-mhash or other php5 modules ===
You may encounter segfaults (reported on debian etch) if php5-mhash module is installed. Try to remove it to see if this solves the problem. See debian bug report [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=411487]

Some people also have troubles when using php5 compiled with its own 3rd party libraries instead of system libraries. Check here [http://www.djangoproject.com/documentation/modpython/#if-you-get-a-segmentation-fault]

----
See also:  TracGuide, TracInstall, [wiki:TracModWSGI ModWSGI], [wiki:TracFastCgi FastCGI],  [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracModWSGI',2,1352317660234000,'trac','127.0.0.1','= Trac and mod_wsgi =


[http://code.google.com/p/modwsgi/ mod_wsgi] is an Apache module for running WSGI-compatible Python applications directly on top of the Apache webserver. The mod_wsgi adapter is written completely in C and provides very good performances.

[[PageOutline(2-3,Overview,inline)]]

== The `trac.wsgi` script

Trac can be run on top of mod_wsgi with the help of the following application script, which is just a Python file, though usually saved with a `.wsgi` extension). 

=== A very basic script
In its simplest form, the script could be:

{{{#!python
import os

os.environ[''TRAC_ENV''] = ''/usr/local/trac/mysite''
os.environ[''PYTHON_EGG_CACHE''] = ''/usr/local/trac/mysite/eggs''

import trac.web.main
application = trac.web.main.dispatch_request
}}}

The `TRAC_ENV` variable should naturally be the directory for your Trac environment (if you have several Trac environments in a directory, you can also use `TRAC_ENV_PARENT_DIR` instead), while the `PYTHON_EGG_CACHE` should be a directory where Python can temporarily extract Python eggs.

=== A more elaborate script

If you''re using multiple `.wsgi` files (for example one per Trac environment) you must ''''not'''' use `os.environ[''TRAC_ENV'']` to set the path to the Trac environment. Using this method may lead to Trac delivering the content of another Trac environment, as the variable may be filled with the path of a previously viewed Trac environment. 

To solve this problem, use the following `.wsgi` file instead:
{{{#!python
import os

os.environ[''PYTHON_EGG_CACHE''] = ''/usr/local/trac/mysite/eggs''

import trac.web.main
def application(environ, start_response):
  environ[''trac.env_path''] = ''/usr/local/trac/mysite'' 
  return trac.web.main.dispatch_request(environ, start_response)
}}}

For clarity, you should give this file a `.wsgi` extension. You should probably put the file in its own directory, since you will expose it to Apache. 

If you have installed Trac and eggs in a path different from the standard one you should add that path by adding the following code at the top of the wsgi script:

{{{#!python
import site
site.addsitedir(''/usr/local/trac/lib/python2.4/site-packages'')
}}}

Change it according to the path you installed the Trac libs at.

=== Recommended `trac.wsgi` script

A somewhat robust and generic version of this file can be created using the `trac-admin <env> deploy <dir>` command which automatically substitutes the required paths (see TracInstall#cgi-bin).


== Mapping requests to the script

After you''ve done preparing your .wsgi script, add the following to your Apache configuration file (`httpd.conf` for example).

{{{
WSGIScriptAlias /trac /usr/local/trac/mysite/apache/mysite.wsgi

<Directory /usr/local/trac/mysite/apache>
    WSGIApplicationGroup %{GLOBAL}
    Order deny,allow
    Allow from all
</Directory>
}}}

Here, the script is in a subdirectory of the Trac environment.

If you followed the directions [http://trac.edgewall.org/wiki/TracInstall#cgi-bin Generating the Trac cgi-bin directory], your Apache configuration file should look like following:

{{{
WSGIScriptAlias /trac /usr/share/trac/cgi-bin/trac.wsgi

<Directory /usr/share/trac/cgi-bin>
    WSGIApplicationGroup %{GLOBAL}
    Order deny,allow
    Allow from all
</Directory>
}}}

In order to let Apache run the script, access to the directory in which the script resides is opened up to all of Apache. Additionally, the `WSGIApplicationGroup` directive ensures that Trac is always run in the first Python interpreter created by mod_wsgi; this is necessary because the Subversion Python bindings, which are used by Trac, don''t always work in other sub-interpreters and may cause requests to hang or cause Apache to crash as a result. After adding this configuration, restart Apache, and then it should work.

To test the setup of Apache, mod_wsgi and Python itself (ie. without involving Trac and dependencies), this simple wsgi application can be used to make sure that requests gets served (use as only content in your `.wsgi` script):

{{{#!python
def application(environ, start_response):
        start_response(''200 OK'',[(''Content-type'',''text/html'')])
        return [''<html><body>Hello World!</body></html>'']
}}}

For more information about using the mod_wsgi specific directives, see the [http://code.google.com/p/modwsgi/wiki/ mod_wsgi''s wiki] and more specifically the [http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac IntegrationWithTrac] page.


== Configuring Authentication

We describe in the the following sections different methods for setting up authentication.

See also [http://httpd.apache.org/docs/2.2/howto/auth.html Authentication, Authorization and Access Control] in the Apache guide.

=== Using Basic Authentication ===

The simplest way to enable authentication with Apache is to create a password file. Use the `htpasswd` program to create the password file:
{{{
$ htpasswd -c /somewhere/trac.htpasswd admin
New password: <type password>
Re-type new password: <type password again>
Adding password for user admin
}}}

After the first user, you dont need the "-c" option anymore:
{{{
$ htpasswd /somewhere/trac.htpasswd john
New password: <type password>
Re-type new password: <type password again>
Adding password for user john
}}}

  ''''See the man page for `htpasswd` for full documentation.''''

After you''ve created the users, you can set their permissions using TracPermissions.

Now, you''ll need to enable authentication against the password file in the Apache configuration:
{{{
<Location "/trac/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</Location>
}}}

If you''re hosting multiple projects you can use the same password file for all of them:
{{{
<LocationMatch "/trac/[^/]+/login">
  AuthType Basic
  AuthName "Trac"
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</LocationMatch>
}}}
Note that neither a file nor a directory named ''login'' needs to exist.[[BR]]
See also the [http://httpd.apache.org/docs/2.2/mod/mod_auth_basic.html mod_auth_basic] documentation.

=== Using Digest Authentication ===

For better security, it is recommended that you either enable SSL or at least use the “digest” authentication scheme instead of “Basic”. 

You''ll have to create your `.htpasswd` file with the `htdigest` command instead of `htpasswd`, as follows:
{{{
# htdigest -c /somewhere/trac.htpasswd trac admin
}}}

The "trac" parameter above is the "realm", and will have to be reused in the Apache configuration in the !AuthName directive:

{{{
<Location "/trac/login">

    AuthType Digest
    AuthName "trac"
    AuthDigestDomain /trac
    AuthUserFile /somewhere/trac.htpasswd
    Require valid-user
</Location>
}}}

For multiple environments, you can use the same `LocationMatch` as described with the previous method.

Don''t forget to activate the mod_auth_digest. For example, on a Debian 4.0r1 (etch) system:
{{{
    LoadModule auth_digest_module /usr/lib/apache2/modules/mod_auth_digest.so
}}}


See also the [http://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html mod_auth_digest] documentation.

=== Using LDAP Authentication 

Configuration for [http://httpd.apache.org/docs/2.2/mod/mod_ldap.html mod_ldap] authentication in Apache is a bit tricky (httpd 2.2.x and OpenLDAP: slapd 2.3.19)

1. You need to load the following modules in Apache httpd.conf
{{{
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
}}}

2. Your httpd.conf also needs to look something like:

{{{
<Location /trac/>
  # (if you''re using it, mod_python specific settings go here)
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://127.0.0.1/dc=example,dc=co,dc=ke?uid?sub?(objectClass=inetOrgPerson)"
  authzldapauthoritative Off
  Require valid-user
</Location>
}}}


3. You can use the LDAP interface as a way to authenticate to a Microsoft Active Directory:


Use the following as your LDAP URL:
{{{
    AuthLDAPURL "ldap://directory.example.com:3268/DC=example,DC=com?sAMAccountName?sub?(objectClass=user)"
}}}

You will also need to provide an account for Apache to use when checking
credentials. As this password will be listed in plaintext in the
config, you should be sure to use an account specifically for this task:
{{{
    AuthLDAPBindDN ldap-auth-user@example.com
    AuthLDAPBindPassword "password"
}}}

The whole section looks like:
{{{
<Location /trac/>
  # (if you''re using it, mod_python specific settings go here)
  Order deny,allow
  Deny from all
  Allow from 192.168.11.0/24
  AuthType Basic
  AuthName "Trac"
  AuthBasicProvider "ldap"
  AuthLDAPURL "ldap://adserver.company.com:3268/DC=company,DC=com?sAMAccountName?sub?(objectClass=user)"
  AuthLDAPBindDN       ldap-auth-user@company.com
  AuthLDAPBindPassword "the_password"
  authzldapauthoritative Off
  # require valid-user
  require ldap-group CN=Trac Users,CN=Users,DC=company,DC=com
</Location>
}}}

Note 1: This is the case where the LDAP search will get around the multiple OUs, conecting to Global Catalog Server portion of AD (Notice the port is 3268, not the normal LDAP 389). The GCS is basically a "flattened" tree which allows searching for a user without knowing to which OU they belong.

Note 2: You can also require the user be a member of a certain LDAP group, instead of
just having a valid login:
{{{
    Require ldap-group CN=Trac Users,CN=Users,DC=example,DC=com
}}}

See also:
  - [http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html mod_authnz_ldap], documentation for mod_authnz_ldap
    
 - [http://httpd.apache.org/docs/2.2/mod/mod_ldap.html mod_ldap], documentation for mod_ldap, which provides connection pooling and a shared cache.
 - [http://trac-hacks.org/wiki/LdapPlugin TracHacks:LdapPlugin] for storing TracPermissions in LDAP.

=== Using SSPI Authentication

If you are using Apache on Windows, you can use mod_auth_sspi to provide
single-sign-on. Download the module from the !SourceForge [http://sourceforge.net/projects/mod-auth-sspi/ mod-auth-sspi project] and then add the
following to your !VirtualHost:
{{{
    <Location /trac/login>
        AuthType SSPI
        AuthName "Trac Login"
        SSPIAuth On
        SSPIAuthoritative On
        SSPIDomain MyLocalDomain
        SSPIOfferBasic On
        SSPIOmitDomain Off
        SSPIBasicPreferred On
        Require valid-user
    </Location>
}}}

Using the above, usernames in Trac will be of the form `DOMAIN\username`, so
you may have to re-add permissions and such. If you do not want the domain to
be part of the username, set `SSPIOmitDomain On` instead.

Some common problems with SSPI authentication: [trac:#1055], [trac:#1168] and [trac:#3338].

See also [trac:TracOnWindows/Advanced].

=== Using Apache authentication with the Account Manager plugin''s Login form ===

To begin with, see the basic instructions for using the Account Manager plugin''s [http://trac-hacks.org/wiki/AccountManagerPlugin/Modules#LoginModule Login module] and its [http://trac-hacks.org/wiki/AccountManagerPlugin/AuthStores#HttpAuthStore HttpAuthStore authentication module].

''''''Note:'''''' If is difficult to get !HttpAuthStore to work with WSGI when using any Account Manager version prior to acct_mgr-0.4. Upgrading is recommended.

Here is an example (from the !HttpAuthStore link) using acct_mgr-0.4 for hosting a single project:
{{{
[components]
; be sure to enable the component
acct_mgr.http.HttpAuthStore = enabled

[account-manager]
; configure the plugin to use a page that is secured with http authentication
authentication_url = /authFile
password_store = HttpAuthStore
}}}
This will generally be matched with an Apache config like:
{{{
<Location /authFile>
   …HTTP authentication configuration…
   Require valid-user
</Location>
}}}
Note that ''''''authFile'''''' need not exist. See the !HttpAuthStore link above for examples where multiple Trac projects are hosted on a server.

=== Example: Apache/mod_wsgi with Basic Authentication, Trac being at the root of a virtual host

Per the mod_wsgi documentation linked to above, here is an example Apache configuration that a) serves the Trac instance from a virtualhost subdomain and b) uses Apache basic authentication for Trac authentication.


If you want your Trac to be served from e.g. !http://trac.my-proj.my-site.org, then from the folder e.g. `/home/trac-for-my-proj`, if you used the command `trac-admin the-env initenv` to create a folder `the-env`, and you used `trac-admin the-env deploy the-deploy` to create a folder `the-deploy`, then first:

Create the htpasswd file:
{{{
cd /home/trac-for-my-proj/the-env
htpasswd -c htpasswd firstuser
### and add more users to it as needed:
htpasswd htpasswd seconduser
}}}
(keep the file above your document root for security reasons)

Create this file e.g. (ubuntu) `/etc/apache2/sites-enabled/trac.my-proj.my-site.org.conf` with the following contents:

{{{
<Directory /home/trac-for-my-proj/the-deploy/cgi-bin/trac.wsgi>
  WSGIApplicationGroup %{GLOBAL}
  Order deny,allow
  Allow from all
</Directory>

<VirtualHost *:80>
  ServerName trac.my-proj.my-site.org
  DocumentRoot /home/trac-for-my-proj/the-env/htdocs/
  WSGIScriptAlias / /home/trac-for-my-proj/the-deploy/cgi-bin/trac.wsgi
  <Location ''/''>
    AuthType Basic
    AuthName "Trac"
    AuthUserFile /home/trac-for-my-proj/the-env/htpasswd
    Require valid-user
  </Location>
</VirtualHost>

}}}

Note: for subdomains to work you would probably also need to alter `/etc/hosts` and add A-Records to your host''s DNS.


== Troubleshooting

=== Use a recent version

Please use either version 1.6, 2.4 or later of `mod_wsgi`. Versions prior to 2.4 in the 2.X branch have problems with some Apache configurations that use WSGI file wrapper extension. This extension is used in Trac to serve up attachments and static media files such as style sheets. If you are affected by this problem attachments will appear to be empty and formatting of HTML pages will appear not to work due to style sheet files not loading properly. Another frequent symptom is that binary attachment downloads are truncated. See mod_wsgi tickets [http://code.google.com/p/modwsgi/issues/detail?id=100 #100] and [http://code.google.com/p/modwsgi/issues/detail?id=132 #132].

''''Note: using mod_wsgi 2.5 and Python 2.6.1 gave an Internal Server Error on my system (Apache 2.2.11 and Trac 0.11.2.1). Upgrading to Python 2.6.2 (as suggested [http://www.mail-archive.com/modwsgi@googlegroups.com/msg01917.html here]) solved this for me[[BR]]-- Graham Shanks''''

If you plan to use `mod_wsgi` in embedded mode on Windows or with the MPM worker on Linux, then you''ll even need version 0.3.4 or greater (see [trac:#10675] for details).

=== Getting Trac to work nicely with SSPI and ''Require Group'' ===
If like me you''ve set Trac up on Apache, Win32 and configured SSPI, but added a ''Require group'' option to your apache configuration, then the SSPIOmitDomain option is probably not working.  If its not working your usernames in trac are probably looking like ''DOMAIN\user'' rather than ''user''.

This WSGI script ''fixes'' things, hope it helps:
{{{#!python
import os
import trac.web.main

os.environ[''TRAC_ENV''] = ''/usr/local/trac/mysite''
os.environ[''PYTHON_EGG_CACHE''] = ''/usr/local/trac/mysite/eggs''

def application(environ, start_response):
    if "\\" in environ[''REMOTE_USER'']:
        environ[''REMOTE_USER''] = environ[''REMOTE_USER''].split("\\", 1)[1]
    return trac.web.main.dispatch_request(environ, start_response)
}}}


=== Trac with PostgreSQL ===

When using the mod_wsgi adapter with multiple Trac instances and PostgreSQL (or MySQL?) as a database back-end, the server ''''may'''' create a lot of open database connections and thus PostgreSQL processes.

A somewhat brutal workaround is to disabled connection pooling in Trac. This is done by setting `poolable = False` in `trac.db.postgres_backend` on the `PostgreSQLConnection` class.

But it''s not necessary to edit the source of Trac, the following lines in `trac.wsgi` will also work:

{{{
import trac.db.postgres_backend
trac.db.postgres_backend.PostgreSQLConnection.poolable = False
}}}

or

{{{
import trac.db.mysql_backend
trac.db.mysql_backend.MySQLConnection.poolable = False
}}}

Now Trac drops the connection after serving a page and the connection count on the database will be kept minimal.

//This is not a recommended approach though. See also the notes at the bottom of the [http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac mod_wsgi''s IntegrationWithTrac] wiki page.//

=== Other resources

For more troubleshooting tips, see also the [TracModPython#Troubleshooting mod_python troubleshooting] section, as most Apache-related issues are quite similar, plus discussion of potential [http://code.google.com/p/modwsgi/wiki/ApplicationIssues application issues] when using mod_wsgi. The wsgi page also has a [http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac Integration With Trac] document.


----
See also:  TracGuide, TracInstall, [wiki:TracFastCgi FastCGI], [wiki:TracModPython ModPython], [trac:TracNginxRecipe TracNginxRecipe]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracNavigation',3,1352317660245000,'trac','127.0.0.1','= Trac Navigation =

Starting with Trac 0.11, it is now possible to customize the main and meta navigation entries in some basic ways.

The new `[mainnav]` and `[metanav]` configuration sections can now be used to customize the text and link used for the navigation items, or even to disable them.  The `mainnav` and `metanav` options in the `[trac]` configuration section can also be used to change the order.

=== `[mainnav]` #mainnav-bar
`[mainnav]` corresponds to the ''''''main navigation bar'''''', the one containing entries such as ''''Wiki'''', ''''Timeline'''', ''''Roadmap'''', ''''Browse Source'''' and so on. This navigation bar is meant to access the default page of the main modules enabled in Trac that are accessible for the current user.


** [=#Example Example] ** 

In the following example, we rename the link to the Wiki start "Home", and make the "View Tickets" entry link to a specific report.  The second example (below) also hides the "!Help/Guide" link.

Relevant excerpt from the TracIni:
{{{
[mainnav]
wiki.label = Home
tickets.href = /report/24
}}}

=== `[metanav]` #metanav-bar
`[metanav]` corresponds to the ''''''meta navigation bar'''''', by default positioned above the main navigation bar and below the ''''Search'''' box. It contains the ''''Log in'''', ''''Logout'''', ''''!Help/Guide'''' etc. entries. This navigation bar is meant to access some global information about the Trac project and the current user.

There is one special entry in the  `[metanav]` section: `logout.redirect` is the page the user sees after hitting the logout button. 
[[comment(see also #Trac3808)]]

** Example ** 

{{{
[metanav]
help = disabled
logout.redirect = wiki/Logout
}}}


=== Notes
Possible URL formats (for `.href` or `.redirect`):
|| ''''''config'''''' || ''''''redirect to'''''' ||
|| `wiki/Logout` || `/projects/env/wiki/Logout` ||
|| `http://hostname/` || `http://hostname/` ||
|| `/projects` || `/projects` ||


=== `[trac]` #nav-order
The `mainnav` and `metanav` options in the `[trac]` configuration section control the order in which the navigation items are displayed (left to right).  This can be useful with plugins that add navigation items.

** Example ** 

In the following example, we change the order to prioritise the ticket related items further left.

Relevant excerpt from the TracIni:
{{{
[trac]
mainnav = wiki,tickets,newticket,timeline,roadmap,browser,search,admin
}}}

The default order and item names can be found in the source, which at the time of writing [source:trunk/trac/web/chrome.py@10883:397,402-403#L396 is here]

=== Context Navigation #ctxtnav-bar

Note that it is still not possible to customize the ''''''contextual navigation bar'''''', i.e. the one usually placed below the main navigation bar.


----
See also: TracInterfaceCustomization, and the [http://trac-hacks.org/wiki/NavAddPlugin TracHacks:NavAddPlugin] or [http://trac-hacks.org/wiki/MenusPlugin TracHacks:MenusPlugin] (still needed for adding entries)
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracNotification',2,1352317660267000,'trac','127.0.0.1','= Email Notification of Ticket Changes =
[[TracGuideToc]]

Trac supports notification of ticket changes via email. 

Email notification is useful to keep users up-to-date on tickets/issues of interest, and also provides a convenient way to post all ticket changes to a dedicated mailing list. For example, this is how the [http://lists.edgewall.com/archive/trac-tickets/ Trac-tickets] mailing list is set up.

Disabled by default, notification can be activated and configured in [wiki:TracIni trac.ini].

== Receiving Notification Mails ==
When reporting a new ticket or adding a comment, enter a valid email address or your username in the ''''reporter'''', ''''assigned to/owner'''' or ''''cc'''' field. Trac will automatically send you an email when changes are made to the ticket (depending on how notification is configured).

This is useful to keep up-to-date on an issue or enhancement request that interests you.

=== How to use your username to receive notification mails ===

To receive notification mails, you can either enter a full email address or your username. To get notified with a simple username or login, you need to specify a valid email address in the ''''Preferences'''' page. 

Alternatively, a default domain name (''''''`smtp_default_domain`'''''') can be set in the TracIni file (see [#ConfigurationOptions Configuration Options] below). In this case, the default domain will be appended to the username, which can be useful for an "Intranet" kind of installation.

When using apache and mod_kerb for authentication against Kerberos / Active Directory, usernames take the form (''''''`username@EXAMPLE.LOCAL`''''''). To avoid this being interpreted as an email address, add the Kerberos domain to  (''''''`ignore_domains`'''''').

== Configuring SMTP Notification ==

''''''Important:'''''' For TracNotification to work correctly, the `[trac] base_url` option must be set in [wiki:TracIni trac.ini]. 

=== Configuration Options ===
These are the available options for the `[notification]` section in trac.ini.

 * ''''''`smtp_enabled`'''''': Enable email notification.
 * ''''''`smtp_from`'''''': Email address to use for ''''Sender''''-headers in notification emails.
 * ''''''`smtp_from_name`'''''': Sender name to use for ''''Sender''''-headers in notification emails.
 * ''''''`smtp_from_author`'''''': (''''since 1.0'''') Use the author of a change (the reporter of a new ticket, or the author of a comment) as the `From:` header value in notification e-mails (default: false). If the author hasn''t set an e-mail address, `smtp_from` and `smtp_from_name` are used instead.
 * ''''''`smtp_replyto`'''''': Email address to use for ''''Reply-To''''-headers in notification emails.
 * ''''''`smtp_default_domain`'''''': (''''since 0.10'''') Append the specified domain to addresses that do not contain one. Fully qualified addresses are not modified. The default domain is appended to all username/login for which an email address cannot be found from the user settings.
 * ''''''`smtp_always_cc`'''''': List of email addresses to always send notifications to. ''''Typically used to post ticket changes to a dedicated mailing list.''''
 * ''''''`smtp_always_bcc`'''''': (''''since 0.10'''') List of email addresses to always send notifications to, but keeps addresses not visible from other recipients of the notification email 
 * ''''''`smtp_subject_prefix`'''''': (''''since 0.10.1'''') Text that is inserted before the subject of the email. Set to "!__default!__" by default.
 * ''''''`always_notify_reporter`'''''':  Always send notifications to any address in the reporter field (default: false).
 * ''''''`always_notify_owner`'''''': (''''since 0.9'''') Always send notifications to the address in the owner field (default: false).
 * ''''''`always_notify_updater`'''''': (''''since 0.10'''') Always send a notification to the updater of a ticket (default: true).
 * ''''''`use_public_cc`'''''': (''''since 0.10'''') Addresses in To: (owner, reporter) and Cc: lists are visible by all recipients (default is ''''Bcc:'''' - hidden copy).
 * ''''''`use_short_addr`'''''': (''''since 0.10'''') Enable delivery of notifications to addresses that do not contain a domain (i.e. do not end with ''''@<domain.com>'''').This option is useful for intranets, where the SMTP server can handle local addresses and map the username/login to a local mailbox. See also `smtp_default_domain`. Do not use this option with a public SMTP server. 
 * ''''''`ignore_domains`'''''': Comma-separated list of domains that should not be considered part of email addresses (for usernames with Kerberos domains).
 * ''''''`mime_encoding`'''''': (''''since 0.10'''') This option allows selecting the MIME encoding scheme. Supported values:
   * `none`: default value, uses 7bit encoding if the text is plain ASCII, or 8bit otherwise. 
   * `base64`: works with any kind of content. May cause some issues with touchy anti-spam/anti-virus engines.
   * `qp` or `quoted-printable`: best for european languages (more compact than base64) if 8bit encoding cannot be used.
 * ''''''`ticket_subject_template`'''''': (''''since 0.11'''') A [http://genshi.edgewall.org/wiki/Documentation/text-templates.html Genshi text template] snippet used to get the notification subject.
 * ''''''`email_sender`'''''': (''''since 0.12'''') Name of the component implementing `IEmailSender`. This component is used by the notification system to send emails. Trac currently provides the following components:
   * `SmtpEmailSender`: connects to an SMTP server (default).
   * `SendmailEmailSender`: runs a `sendmail`-compatible executable.

Either ''''''`smtp_from`'''''' or ''''''`smtp_replyto`'''''' (or both) ''''must'''' be set, otherwise Trac refuses to send notification mails.

The following options are specific to email delivery through SMTP.
 * ''''''`smtp_server`'''''': SMTP server used for notification messages.
 * ''''''`smtp_port`'''''': (''''since 0.9'''') Port used to contact the SMTP server.
 * ''''''`smtp_user`'''''': (''''since 0.9'''') User name for authentication SMTP account.
 * ''''''`smtp_password`'''''': (''''since 0.9'''') Password for authentication SMTP account.
 * ''''''`use_tls`'''''': (''''since 0.10'''') Toggle to send notifications via a SMTP server using [http://en.wikipedia.org/wiki/Transport_Layer_Security TLS], such as GMail.

The following option is specific to email delivery through a `sendmail`-compatible executable.
 * ''''''`sendmail_path`'''''': (''''since 0.12'''') Path to the sendmail executable. The sendmail program must accept the `-i` and `-f` options.

=== Example Configuration (SMTP) ===
{{{
[notification]
smtp_enabled = true
smtp_server = mail.example.com
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

=== Example Configuration (`sendmail`) ===
{{{
[notification]
smtp_enabled = true
email_sender = SendmailEmailSender
sendmail_path = /usr/sbin/sendmail
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

=== Customizing the e-mail subject ===
The e-mail subject can be customized with the `ticket_subject_template` option, which contains a [http://genshi.edgewall.org/wiki/Documentation/text-templates.html Genshi text template] snippet. The default value is:
{{{
$prefix #$ticket.id: $summary
}}}
The following variables are available in the template:

 * `env`: The project environment (see [trac:source:/trunk/trac/env.py env.py]).
 * `prefix`: The prefix defined in `smtp_subject_prefix`.
 * `summary`: The ticket summary, with the old value if the summary was edited.
 * `ticket`: The ticket model object (see [trac:source:/trunk/trac/ticket/model.py model.py]). Individual ticket fields can be addressed by appending the field name separated by a dot, e.g. `$ticket.milestone`.

=== Customizing the e-mail content ===

The notification e-mail content is generated based on `ticket_notify_email.txt` in `trac/templates`.  You can add your own version of this template by adding a `ticket_notify_email.txt` to the templates directory of your environment. The default looks like this:

{{{
$ticket_body_hdr
$ticket_props
{% choose ticket.new %}\
{%   when True %}\
$ticket.description
{%   end %}\
{%   otherwise %}\
{%     if changes_body %}\
${_(''Changes (by %(author)s):'', author=change.author)}

$changes_body
{%     end %}\
{%     if changes_descr %}\
{%       if not changes_body and not change.comment and change.author %}\
${_(''Description changed by %(author)s:'', author=change.author)}
{%       end %}\
$changes_descr
--
{%     end %}\
{%     if change.comment %}\

${changes_body and _(''Comment:'') or _(''Comment (by %(author)s):'', author=change.author)}

$change.comment
{%     end %}\
{%   end %}\
{% end %}\

-- 
${_(''Ticket URL: <%(link)s>'', link=ticket.link)}
$project.name <${project.url or abs_href()}>
$project.descr
}}}
== Sample Email ==
{{{
#42: testing
---------------------------+------------------------------------------------
       Id:  42             |      Status:  assigned                
Component:  report system  |    Modified:  Fri Apr  9 00:04:31 2004
 Severity:  major          |   Milestone:  0.9                     
 Priority:  lowest         |     Version:  0.6                     
    Owner:  anonymous      |    Reporter:  jonas@example.com               
---------------------------+------------------------------------------------
Changes:
  * component:  changset view => search system
  * priority:  low => highest
  * owner:  jonas => anonymous
  * cc:  daniel@example.com =>
         daniel@example.com, jonas@example.com
  * status:  new => assigned

Comment:
I''m interested too!

--
Ticket URL: <http://example.com/trac/ticket/42>
My Project <http://myproj.example.com/>
}}}


== Customizing e-mail content for MS Outlook ==

Out-of-the-box, MS Outlook normally presents plain text e-mails with a variable-width font; the ticket properties table will most certainly look like a mess in MS Outlook. This can be fixed with some customization of the [#Customizingthee-mailcontent e-mail template].

Replace the following second row in the template:
{{{
$ticket_props
}}}

with this instead (''''requires Python 2.6 or later''''):
{{{
--------------------------------------------------------------------------
{% with
   pv = [(a[0].strip(), a[1].strip()) for a in [b.split('':'') for b in
         [c.strip() for c in 
          ticket_props.replace(''|'', ''\n'').splitlines()[1:-1]] if '':'' in b]];
   sel = [''Reporter'', ''Owner'', ''Type'', ''Status'', ''Priority'', ''Milestone'', 
          ''Component'', ''Severity'', ''Resolution'', ''Keywords''] %}\
${''\n''.join(''%s\t%s'' % (format(p[0]+'':'', '' <12''), p[1]) for p in pv if p[0] in sel)}
{% end %}\
--------------------------------------------------------------------------
}}}

The table of ticket properties is replaced with a list of a selection of the properties. A tab character separates the name and value in such a way that most people should find this more pleasing than the default table, when using MS Outlook.
{{{#!div style="margin: 1em 1.75em; border:1px dotted"
{{{#!html
#42: testing<br />
--------------------------------------------------------------------------<br />
<table cellpadding=0>
<tr><td>Reporter:</td><td>jonas@example.com</td></tr>
<tr><td>Owner:</td><td>anonymous</td></tr>
<tr><td>Type:</td><td>defect</td></tr>
<tr><td>Status:</td><td>assigned</td></tr>
<tr><td>Priority:</td><td>lowest</td></tr>
<tr><td>Milestone:</td><td>0.9</td></tr>
<tr><td>Component:</td><td>report system</td></tr>
<tr><td>Severity:</td><td>major</td></tr>
<tr><td>Resolution:</td><td> </td></tr>
<tr><td>Keywords:</td><td> </td></tr>
</table>
--------------------------------------------------------------------------<br />
Changes:<br />
<br />
&nbsp;&nbsp;* component: &nbsp;changset view =&gt; search system<br />
&nbsp;&nbsp;* priority: &nbsp;low =&gt; highest<br />
&nbsp;&nbsp;* owner: &nbsp;jonas =&gt; anonymous<br />
&nbsp;&nbsp;* cc: &nbsp;daniel@example.com =&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daniel@example.com, jonas@example.com<br />
&nbsp;&nbsp;* status: &nbsp;new =&gt; assigned<br />
<br />
Comment:<br />
I''m interested too!<br />
<br />
--<br />
Ticket URL: &lt;http://example.com/trac/ticket/42&gt;<br />
My Project &lt;http://myproj.example.com/&gt;<br />
}}}
}}}

**Important**: Only those ticket fields that are listed in `sel` are part of the HTML mail. If you have defined custom ticket fields which shall be part of the mail they have to be added to `sel`, example:
{{{
   sel = [''Reporter'', ..., ''Keywords'', ''Custom1'', ''Custom2'']
}}}

However, it''s not as perfect as an automatically HTML-formatted e-mail would be, but presented ticket properties are at least readable by default in MS Outlook...


== Using GMail as the SMTP relay host ==

Use the following configuration snippet
{{{
[notification]
smtp_enabled = true
use_tls = true
mime_encoding = base64
smtp_server = smtp.gmail.com
smtp_port = 587
smtp_user = user
smtp_password = password
}}}

where ''''user'''' and ''''password'''' match an existing GMail account, ''''i.e.'''' the ones you use to log in on [http://gmail.com]

Alternatively, you can use `smtp_port = 25`.[[br]]
You should not use `smtp_port = 465`. It will not work and your ticket submission may deadlock. Port 465 is reserved for the SMTPS protocol, which is not supported by Trac. See [comment:ticket:7107:2 #7107] for details.
 
== Filtering notifications for one''s own changes ==
In Gmail, use the filter:

{{{
from:(<smtp_from>) (("Reporter: <username>" -Changes) OR "Changes (by <username>)")
}}}

For Trac .10, use the filter:
{{{
from:(<smtp_from>) (("Reporter: <username>" -Changes -Comment) OR "Changes (by <username>)" OR "Comment (by <username>)")
}}}

to delete these notifications.

In Thunderbird, there is no such solution if you use IMAP
(see http://kb.mozillazine.org/Filters_(Thunderbird)#Filtering_the_message_body).

The best you can do is to set "always_notify_updater" in conf/trac.ini to false.
You will however still get an email if you comment a ticket that you own or have reported.

You can also add this plugin:
http://trac-hacks.org/wiki/NeverNotifyUpdaterPlugin

== Troubleshooting ==

If you cannot get the notification working, first make sure the log is activated and have a look at the log to find if an error message has been logged. See TracLogging for help about the log feature.

Notification errors are not reported through the web interface, so the user who submit a change or a new ticket never gets notified about a notification failure. The Trac administrator needs to look at the log to find the error trace.

=== ''''Permission denied'''' error ===

Typical error message:
{{{
  ...
  File ".../smtplib.py", line 303, in connect
    raise socket.error, msg
  error: (13, ''Permission denied'')
}}}

This error usually comes from a security settings on the server: many Linux distributions do not let the web server (Apache, ...) to post email message to the local SMTP server.

Many users get confused when their manual attempts to contact the SMTP server succeed:
{{{
telnet localhost 25
}}}
The trouble is that a regular user may connect to the SMTP server, but the web server cannot:
{{{
sudo -u www-data telnet localhost 25
}}}

In such a case, you need to configure your server so that the web server is authorized to post to the SMTP server. The actual settings depend on your Linux distribution and current security policy. You may find help browsing the Trac [trac:MailingList MailingList] archive.

Relevant ML threads:
 * SELinux: http://article.gmane.org/gmane.comp.version-control.subversion.trac.general/7518

For SELinux in Fedora 10:
{{{
$ setsebool -P httpd_can_sendmail 1
}}}
=== ''''Suspected spam'''' error ===

Some SMTP servers may reject the notification email sent by Trac.

The default Trac configuration uses Base64 encoding to send emails to the recipients. The whole body of the email is encoded, which sometimes trigger ''''false positive'''' SPAM detection on sensitive email servers. In such an event, it is recommended to change the default encoding to "quoted-printable" using the `mime_encoding` option.

Quoted printable encoding works better with languages that use one of the Latin charsets. For Asian charsets, it is recommended to stick with the Base64 encoding.

=== ''''501, 5.5.4 Invalid Address'''' error ===

On IIS 6.0 you could get a 
{{{
Failure sending notification on change to ticket #1: SMTPHeloError: (501, ''5.5.4 Invalid Address'')
}}}
in the trac log. Have a look [http://support.microsoft.com/kb/291828 here] for instructions on resolving it.


----
See also: TracTickets, TracIni, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracPermissions',3,1352317660289000,'trac','127.0.0.1','= Trac Permissions =
[[TracGuideToc]]

Trac uses a simple, case sensitive, permission system to control what users can and can''t access.

Permission privileges are managed using the [TracAdmin trac-admin] tool or (new in version 0.11) the ''''General / Permissions'''' panel in the ''''Admin'''' tab of the web interface.

In addition to the default permission policy described in this page, it is possible to activate additional permission policies by enabling plugins and listing them in the `[trac] permission_policies` configuration entry in the TracIni. See TracFineGrainedPermissions for more details.

Non-authenticated users accessing the system are assigned the name "anonymous". Assign permissions to the "anonymous" user to set privileges for anonymous/guest users. The parts of Trac that a user does not have the privileges for will not be displayed in the navigation.
In addition to these privileges, users can be granted additional individual rights in effect when authenticated and logged into the system. All logged in users belong to the virtual group "authenticated", which inherits permissions from "anonymous".

== Graphical Admin Tab ==
''''This feature is new in version 0.11.''''

To access this tab, a user must have one of the following permissions: `TRAC_ADMIN`, `PERMISSION_ADMIN`, `PERMISSION_ADD`, `PERMISSION_REMOVE`. The permissions can granted using the `trac-admin` command (more on `trac-admin` below):
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

Then, the user `bob` will be able to see the Admin tab, and can then access the permissions menu. This menu will allow you to perform all the following actions, but from the browser without requiring root access to the server (just the correct permissions for your user account). ''''''Use at least one lowercase character in user names, as all-uppercase names are reserved for permissions.''''''

 1. [[Image(htdocs:../common/guide/admin.png)]]
 1. [[Image(htdocs:../common/guide/admin-permissions.png)]]
 1. [[Image(htdocs:../common/guide/admin-permissions-TICKET_ADMIN.png)]]

An easy way to quickly secure a new Trac install is to run the above command on the anonymous user, install the [http://trac-hacks.org/wiki/AccountManagerPlugin AccountManagerPlugin], create a new admin account graphically and then remove the TRAC_ADMIN permission from the anonymous user.

== Available Privileges ==

To enable all privileges for a user, use the `TRAC_ADMIN` permission. Having `TRAC_ADMIN` is like being `root` on a *NIX system: it will allow you to perform any operation.

Otherwise, individual privileges can be assigned to users for the various different functional areas of Trac (''''''note that the privilege names are case-sensitive''''''):

=== Repository Browser ===

|| `BROWSER_VIEW` || View directory listings in the [wiki:TracBrowser repository browser] ||
|| `LOG_VIEW` || View revision logs of files and directories in the [wiki:TracBrowser repository browser] ||
|| `FILE_VIEW` || View files in the [wiki:TracBrowser repository browser] ||
|| `CHANGESET_VIEW` || View [wiki:TracChangeset repository check-ins] ||

=== Ticket System ===

|| `TICKET_VIEW` || View existing [wiki:TracTickets tickets] and perform [wiki:TracQuery ticket queries] ||
|| `TICKET_CREATE` || Create new [wiki:TracTickets tickets] ||
|| `TICKET_APPEND` || Add comments or attachments to [wiki:TracTickets tickets] ||
|| `TICKET_CHGPROP` || Modify [wiki:TracTickets ticket] properties (priority, assignment, keywords, etc.) with the following exceptions: edit description field, add/remove other users from cc field when logged in, and set email to pref ||
|| `TICKET_MODIFY` || Includes both `TICKET_APPEND` and `TICKET_CHGPROP`, and in addition allows resolving [wiki:TracTickets tickets]. Tickets can be assigned to users through a [TracTickets#Assign-toasDrop-DownList drop-down list] when the list of possible owners has been restricted. ||
|| `TICKET_EDIT_CC` || Full modify cc field ||
|| `TICKET_EDIT_DESCRIPTION` || Modify description field ||
|| `TICKET_EDIT_COMMENT` || Modify comments ||
|| `TICKET_ADMIN` || All `TICKET_*` permissions, plus the deletion of ticket attachments and modification of the reporter and description fields. It also allows managing ticket properties in the WebAdmin panel. ||

Attention: the "view tickets" button appears with the `REPORT_VIEW` permission.

=== Roadmap ===

|| `MILESTONE_VIEW` || View milestones and assign tickets to milestones. ||
|| `MILESTONE_CREATE` || Create a new milestone ||
|| `MILESTONE_MODIFY` || Modify existing milestones ||
|| `MILESTONE_DELETE` || Delete milestones ||
|| `MILESTONE_ADMIN` || All `MILESTONE_*` permissions ||
|| `ROADMAP_VIEW` || View the [wiki:TracRoadmap roadmap] page, is not (yet) the same as MILESTONE_VIEW, see [trac:#4292 #4292] ||
|| `ROADMAP_ADMIN` || to be removed with [trac:#3022 #3022], replaced by MILESTONE_ADMIN ||

=== Reports ===

|| `REPORT_VIEW` || View [wiki:TracReports reports], i.e. the "view tickets" link. ||
|| `REPORT_SQL_VIEW` || View the underlying SQL query of a [wiki:TracReports report] ||
|| `REPORT_CREATE` || Create new [wiki:TracReports reports] ||
|| `REPORT_MODIFY` || Modify existing [wiki:TracReports reports] ||
|| `REPORT_DELETE` || Delete [wiki:TracReports reports] ||
|| `REPORT_ADMIN` || All `REPORT_*` permissions ||

=== Wiki System ===

|| `WIKI_VIEW` || View existing [wiki:TracWiki wiki] pages ||
|| `WIKI_CREATE` || Create new [wiki:TracWiki wiki] pages ||
|| `WIKI_MODIFY` || Change [wiki:TracWiki wiki] pages ||
|| `WIKI_RENAME` || Rename [wiki:TracWiki wiki] pages ||
|| `WIKI_DELETE` || Delete [wiki:TracWiki wiki] pages and attachments ||
|| `WIKI_ADMIN` || All `WIKI_*` permissions, plus the management of ''''readonly'''' pages. ||

=== Permissions ===

|| `PERMISSION_GRANT` || add/grant a permission ||
|| `PERMISSION_REVOKE` || remove/revoke a permission ||
|| `PERMISSION_ADMIN` || All `PERMISSION_*` permissions ||

=== Others ===

|| `TIMELINE_VIEW` || View the [wiki:TracTimeline timeline] page ||
|| `SEARCH_VIEW` || View and execute [wiki:TracSearch search] queries ||
|| `CONFIG_VIEW` || Enables additional pages on ''''About Trac'''' that show the current configuration or the list of installed plugins ||
|| `EMAIL_VIEW` || Shows email addresses even if [wiki:TracIni#trac-section trac show_email_addresses] configuration option is false ||

== Creating New Privileges ==

To create custom permissions, for example to be used in a custom workflow, enable the optional [trac:ExtraPermissionsProvider tracopt.perm.config_perm_provider.ExtraPermissionsProvider] component in the "Plugins" admin panel, and add the desired permissions to the `[extra-permissions]` section in your [wiki:TracIni#extra-permissions-section trac.ini]. For more information, please refer to the documentation of the component in the admin panel.

== Granting Privileges ==

You grant privileges to users using [wiki:TracAdmin trac-admin]. The current set of privileges can be listed with the following command:
{{{
  $ trac-admin /path/to/projenv permission list
}}}

This command will allow the user ''''bob'''' to delete reports:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

The `permission add` command also accepts multiple privilege names:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE WIKI_CREATE
}}}

Or add all privileges:
{{{
  $ trac-admin /path/to/projenv permission add bob TRAC_ADMIN
}}}

== Permission Groups ==

There are two built-in groups, "authenticated" and "anonymous".
Any user who has not logged in is automatically in the "anonymous" group.
Any user who has logged in is also in the "authenticated" group.
The "authenticated" group inherits permissions from the "anonymous" group.
For example, if the "anonymous" group has permission WIKI_MODIFY, 
it is not necessary to add the WIKI_MODIFY permission to the "authenticated" group as well.

Custom groups may be defined that inherit permissions from the two built-in groups.

Permissions can be grouped together to form roles such as ''''developer'''', ''''admin'''', etc.
{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

Group membership can be checked by doing a {{{permission list}}} with no further arguments; the resulting output will include group memberships. ''''''Use at least one lowercase character in group names, as all-uppercase names are reserved for permissions''''''.

== Adding a New Group and Permissions ==
Permission groups can be created by assigning a user to a group you wish to create, then assign permissions to that group.

The following will add ''''bob'''' to the new group called ''''beta_testers'''' and then will assign WIKI_ADMIN permissions to that group. (Thus, ''''bob'''' will inherit the WIKI_ADMIN permission)
{{{ 
   $ trac-admin /path/to/projenv permission add bob beta_testers
   $ trac-admin /path/to/projenv permission add beta_testers WIKI_ADMIN

}}}

== Removing Permissions ==

Permissions can be removed using the ''remove'' command. For example:

This command will prevent the user ''''bob'''' from deleting reports:
{{{
  $ trac-admin /path/to/projenv permission remove bob REPORT_DELETE
}}}

Just like `permission add`, this command accepts multiple privilege names.

You can also remove all privileges for a specific user:
{{{
  $ trac-admin /path/to/projenv permission remove bob ''*''
}}}

Or one privilege for all users:
{{{
  $ trac-admin /path/to/projenv permission remove ''*'' REPORT_ADMIN
}}}

== Default Permissions ==

By default on a new Trac installation, the `anonymous` user will have ''''view'''' access to everything in Trac, but will not be able to create or modify anything.
On the other hand, the `authenticated` users will have the permissions to ''''create and modify tickets and wiki pages''''.

''''''anonymous''''''
{{{
 BROWSER_VIEW 
 CHANGESET_VIEW 
 FILE_VIEW 
 LOG_VIEW 
 MILESTONE_VIEW 
 REPORT_SQL_VIEW 
 REPORT_VIEW 
 ROADMAP_VIEW 
 SEARCH_VIEW 
 TICKET_VIEW 
 TIMELINE_VIEW
 WIKI_VIEW
}}}

''''''authenticated''''''
{{{
 TICKET_CREATE 
 TICKET_MODIFY 
 WIKI_CREATE 
 WIKI_MODIFY  
}}}
----
See also: TracAdmin, TracGuide and TracFineGrainedPermissions
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracPlugins',3,1352317660300000,'trac','127.0.0.1','= Trac plugins =
[[TracGuideToc]]

From version 0.9 onwards, Trac is extensible with [trac:PluginList plugins]. Plugin functionality is based on the [trac:TracDev/ComponentArchitecture component architecture], with peculiarities described in the [TracDev/PluginDevelopment plugin development] page.

== Plugin discovery ==

From the user''s point of view, a plugin is either a standalone .py file or an .egg package. Trac looks for plugins in the global shared plugins directory (see [TracIni#GlobalConfiguration Global Configuration]) and in the `plugins` directory of the local TracEnvironment. Components defined in globally-installed plugins should be explicitly enabled in the [[TracIni#components-section| [components] ]] section of the trac.ini file.

== Requirements for Trac eggs ==

To use egg-based plugins in Trac, you need to have [http://peak.telecommunity.com/DevCenter/setuptools setuptools] (version 0.6) installed.

To install `setuptools`, download the bootstrap module [http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py] and execute it as follows:

{{{
$ python ez_setup.py
}}}

If the `ez_setup.py` script fails to install the setuptools release, you can download it from [http://www.python.org/pypi/setuptools PyPI] and install it manually.

Plugins can also consist of a single `.py` file dropped directly into either the project''s or the shared `plugins` directory.

== Installing a Trac plugin ==

=== For a single project ===

Plugins are typically packaged as [http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. That means they are .zip archives with the file extension `.egg`.

If you have downloaded a source distribution of a plugin, and want to build the `.egg` file:

 * Unpack the source. It should provide `setup.py`.
 * Run:

{{{
$ python setup.py bdist_egg
}}}

You should have a *.egg file. Examine the output of running python to find where this was created.

Once you have the plugin archive, copy it into the `plugins` directory of the [wiki:TracEnvironment project environment]. Also, make sure that the web server has sufficient permissions to read the plugin egg. Then restart the web server. If you are running as a [wiki:TracStandalone "tracd" standalone server], restart tracd (kill and run again).

To uninstall a plugin installed this way, remove the egg from the `plugins` directory and restart the web server.

Note: the Python version that the egg is built with ''''must'''' match the Python version with which Trac is run. For example, if you''re running Trac under Python 2.5, but have upgraded your standalone Python to 2.6, the eggs won''t be recognized.

Note also: in a multi-project setup, a pool of Python interpreter instances will be dynamically allocated to projects based on need; since plugins occupy a place in Python''s module system, the first version of any given plugin to be loaded will be used for all projects. In other words, you cannot use different versions of a single plugin in two projects of a multi-project setup. It may be safer to install plugins for all projects (see below), and then enable them selectively on a project-by-project basis.

=== For all projects ===

==== With an .egg file ====

Some plugins (such as [trac:SpamFilter SpamFilter]) are downloadable as an `.egg` file that can be installed with the `easy_install` program:
{{{
easy_install TracSpamFilter
}}}

If `easy_install` is not on your system, see the Requirements section above to install it. Windows users will need to add the `Scripts` directory of their Python installation (for example, `C:\Python24\Scripts`) to their `PATH` environment variable (see [http://peak.telecommunity.com/DevCenter/EasyInstall#windows-notes easy_install Windows notes] for more information).

If Trac reports permission errors after installing a zipped egg, and you would rather not bother providing a egg cache directory writable by the web server, you can get around it by simply unzipping the egg. Just pass `--always-unzip` to `easy_install`:
{{{
easy_install --always-unzip TracSpamFilter-0.4.1_r10106-py2.6.egg
}}}
You should end up with a directory having the same name as the zipped egg (complete with `.egg` extension) and containing its uncompressed contents.

Trac also searches for plugins installed in the shared plugins directory ''''(since 0.10)''''; see TracIni#GlobalConfiguration. This is a convenient way to share the installation of plugins across several, but not all, environments.

==== From source ====

`easy_install` makes installing from source a snap. Just give it the URL to either a Subversion repository or a tarball/zip of the source:
{{{
easy_install http://svn.edgewall.com/repos/trac/plugins/0.12/spam-filter-captcha
}}}

==== Enabling the plugin ====

Unlike plugins installed per-environment, you''ll have to explicitly enable globally installed plugins via [wiki:TracIni trac.ini]. This also applies to plugins installed in the shared plugins directory, i.e. the path specified in the `[inherit] plugins_dir` configuration option. 

This is done in the `[components]` section of the configuration file. For example:
{{{
[components]
tracspamfilter.* = enabled
}}}

The name of the option is the Python package of the plugin. This should be specified in the documentation of the plugin, but can also be easily discovered by looking at the source (look for a top-level directory that contains a file named `__init__.py`).

Note: After installing the plugin, you must restart your web server.

==== Uninstalling ====

`easy_install` or `python setup.py` does not have an uninstall feature. Hower, it is usually quite trivial to remove a globally-installed egg and reference:

 1. Do `easy_install -m [plugin name]` to remove references from `$PYTHONLIB/site-packages/easy-install.pth` when the plugin installed by setuptools.
 1. Delete executables from `/usr/bin`, `/usr/local/bin`, or `C:\\Python*\Scripts`. To find what executables are involved, refer to the `[console-script]` section of `setup.py`.
 1. Delete the .egg file or folder from where it''s installed (usually inside `$PYTHONLIB/site-packages/`).
 1. Restart the web server.

If you are uncertain about the location of the egg, here''s a small tip to help locate an egg (or any package). Just replace `myplugin` with whatever namespace the plugin uses (as used when enabling the plugin):
{{{
>>> import myplugin
>>> print myplugin.__file__
/opt/local/python24/lib/site-packages/myplugin-0.4.2-py2.4.egg/myplugin/__init__.pyc
}}}

== Setting up the plugin cache ==

Some plugins will need to be extracted by the Python eggs runtime (`pkg_resources`), so that their contents are actual files on the file system. The directory in which they are extracted defaults to `.python-eggs` in the home directory of the current user, which may or may not be a problem. You can, however, override the default location using the `PYTHON_EGG_CACHE` environment variable.

To do this from the Apache configuration, use the `SetEnv` directive:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

This works whether you''re using the [wiki:TracCgi CGI] or the [wiki:TracModPython mod_python] front-end. Put this directive next to where you set the path to the [wiki:TracEnvironment Trac environment], i.e. in the same `<Location>` block.

For example (for CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

Or (for mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

 ''''Note: !SetEnv requires the `mod_env` module which needs to be activated for Apache. In this case the !SetEnv directive can also be used in the `mod_python` Location block.''''

For [wiki:TracFastCgi FastCGI], you''ll need to `-initial-env` option, or whatever is provided by your web server for setting environment variables. 

 ''''Note: that if you already use -initial-env to set the project directory for either a single project or parent you will need to add an additional -initial-env directive to the !FastCgiConfig directive. I.e.

{{{
FastCgiConfig -initial-env TRAC_ENV=/var/lib/trac -initial-env PYTHON_EGG_CACHE=/var/lib/trac/plugin-cache
}}}

=== About hook scripts ===

If you''ve set up some subversion hook scripts that call the Trac engine, such as the post-commit hook script provided in the `/contrib` directory, make sure you define the `PYTHON_EGG_CACHE` environment variable within these scripts as well.

== Troubleshooting ==

=== Is setuptools properly installed? ===

Try this from the command line:
{{{
$ python -c "import pkg_resources"
}}}

If you get ''''''no output'''''', setuptools ''''''is'''''' installed. Otherwise, you''ll need to install it before plugins will work in Trac.

=== Did you get the correct version of the Python egg? ===

Python eggs have the Python version encoded in their filename. For example, `MyPlugin-1.0-py2.5.egg` is an egg for Python 2.5, and will ''''''not'''''' be loaded if you''re running a different Python version (such as 2.4 or 2.6).

Also, verify that the egg file you downloaded is indeed a .zip archive. If you downloaded it from a Trac site, chances are you downloaded the HTML preview page instead.

=== Is the plugin enabled? ===

If you install a plugin globally (i.e., ''''not'''' inside the `plugins` directory of the Trac project environment), you must explicitly enable it in [TracIni trac.ini]. Make sure that:

 * ...you actually added the necessary line(s) to the `[components]` section.
 * ...the package/module names are correct.
 * ...the value is "enabled", not "enable" or "Enable".

=== Check the permissions on the .egg file ===

Trac must be able to read the .egg file. 

=== Check the log files ===

Enable [wiki:TracLogging logging] and set the log level to `DEBUG`, then watch the log file for messages about loading plugins.

=== Verify you have proper permissions ===

Some plugins require you have special permissions in order to use them. [trac:WebAdmin WebAdmin], for example, requires the user to have TRAC_ADMIN permissions for it to show up on the navigation bar.

=== Is the wrong version of the plugin loading? ===

If you put your plugins inside plugins directories, and certainly if you have more than one project, you need to make sure that the correct version of the plugin is loading. Here are some basic rules:

 * Only one version of the plugin can be loaded for each running Trac server (i.e., each Python process). The Python namespaces and module list will be shared, and it cannot handle duplicates. Whether a plugin is `enabled` or `disabled` makes no difference.
 * A globally-installed plugin (typically `setup.py install`) will override any version in the global or project plugins directories. A plugin from the global plugins directory will be located ''''before'''' any project plugins directory.
 * If your Trac server hosts more than one project (as with `TRAC_ENV_PARENT_DIR` setups), having two versions of a plugin in two different projects will give uncertain results. Only one of them will load, and the one loaded will be shared by both projects. Trac will load the first plugin found, usually from the project that receives the first request.
 * Having more than one version listed inside Python site-packages is fine (i.e., installed with `setup.py install`) -- setuptools will make sure you get the version installed most recently. However, don''t store more than one version inside a global or project plugins directory -- neither version number nor installed date will matter at all. There is no way to determine which one will be located first when Trac searches the directory for plugins.

=== If all of the above failed ===

Okay, so the logs don''t mention plugins, the egg is readable, the Python version is correct, ''''and'''' the egg has been installed globally (and is enabled in trac.ini)... and it ''''still'''' doesn''t work or give any error messages or any other indication as to why. Hop on the [trac:IrcChannel IrcChannel] and ask away!

== Web-based plugin administration ==

The WebAdmin plugin (part of the core since 0.11) offers limited support for plugin configuration through the web to users with `TRAC_ADMIN` permission:

* en/disabling installed plugins
* installing plugins by uploading them as eggs

You probably want to disable the second function for security reasons: in `trac.ini`, in the `[components]` section, add the line
{{{
trac.admin.web_ui.PluginAdminPanel = disabled
}}}
This disables the whole panel, so the first function will no longer be available either.

----
See also TracGuide, [trac:PluginList plugin list], [trac:TracDev/ComponentArchitecture component architecture].',NULL,NULL);
INSERT INTO "wiki" VALUES('TracQuery',3,1352317660311000,'trac','127.0.0.1','= Trac Ticket Queries =
[[TracGuideToc]]

In addition to [wiki:TracReports reports], Trac provides support for ''''custom ticket queries'''', used to display lists of tickets meeting a specified set of criteria. 

To configure and execute a custom query, switch to the ''''View Tickets'''' module from the navigation bar, and select the ''''Custom Query'''' link.

== Filters ==

When you first go to the query page the default filter will display tickets relevant to you:
 * If logged in then all open tickets it will display open tickets assigned to you.
 * If not logged in but you have specified a name or email address in the preferences then it will display all open tickets where your email (or name if email not defined) is in the CC list.
 * If not logged and no name/email defined in the preferences then all open issues are displayed.

Current filters can be removed by clicking the button to the left with the minus sign on the label.  New filters are added from the pulldown lists at the bottom corners of the filters box (''And'' conditions on the left, ''Or'' conditions on the right).  Filters with either a text box or a pulldown menu of options can be added multiple times to perform an ''''or'''' of the criteria.

You can use the fields just below the filters box to group the results based on a field, or display the full description for each ticket.

Once you''ve edited your filters click the ''''Update'''' button to refresh your results.

== Navigating Tickets ==
Clicking on one of the query results will take you to that ticket.  You can navigate through the results by clicking the ''''Next Ticket'''' or ''''Previous Ticket'''' links just below the main menu bar, or click the ''''Back to Query'''' link to return to the query page.  

You can safely edit any of the tickets and continue to navigate through the results using the ''''!Next/Previous/Back to Query'''' links after saving your results.  When you return to the query ''''any tickets which were edited'''' will be displayed with italicized text.  If one of the tickets was edited such that [[html(<span style="color: grey">it no longer matches the query criteria </span>)]] the text will also be greyed. Lastly, if ''''''a new ticket matching the query criteria has been created'''''', it will be shown in bold. 

The query results can be refreshed and cleared of these status indicators by clicking the ''''Update'''' button again.

== Saving Queries ==

Trac allows you to save the query as a named query accessible from the reports module. To save a query ensure that you have ''''Updated'''' the view and then click the ''''Save query'''' button displayed beneath the results.
You can also save references to queries in Wiki content, as described below.

''''Note:'''' one way to easily build queries like the ones below, you can build and test the queries in the Custom report module and when ready - click ''''Save query''''. This will build the query string for you. All you need to do is remove the extra line breaks.

''''Note:'''' you must have the ''''''REPORT_CREATE'''''' permission in order to save queries to the list of default reports. The ''''Save query'''' button will only appear if you are logged in as a user that has been granted this permission. If your account does not have permission to create reports, you can still use the methods below to save a query.


=== Using TracLinks ===

You may want to save some queries so that you can come back to them later.  You can do this by making a link to the query from any Wiki page.
{{{
[query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]
}}}

Which is displayed as:
  [query:status=new|assigned|reopened&version=1.0 Active tickets against 1.0]

This uses a very simple query language to specify the criteria (see [wiki:TracQuery#QueryLanguage Query Language]).

Alternatively, you can copy the query string of a query and paste that into the Wiki link, including the leading `?` character:
{{{
[query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]
}}}

Which is displayed as:
  [query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]

=== Using the `[[TicketQuery]]` Macro ===

The [trac:TicketQuery TicketQuery] macro lets you display lists of tickets matching certain criteria anywhere you can use WikiFormatting.

Example:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate)]]

Just like the [wiki:TracQuery#UsingTracLinks query: wiki links], the parameter of this macro expects a query string formatted according to the rules of the simple [wiki:TracQuery#QueryLanguage ticket query language]. This also allows displaying the link and description of a single ticket:
{{{
[[TicketQuery(id=123)]]
}}}

This is displayed as:
  [[TicketQuery(id=123)]]

A more compact representation without the ticket summaries is also available:
{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, compact)]]

Finally, if you wish to receive only the number of defects that match the query, use the ``count`` parameter.

{{{
[[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.6|0.7&resolution=duplicate, count)]]

=== Customizing the ''''table'''' format ===
You can also customize the columns displayed in the table format (''''format=table'''') by using ''''col=<field>'''' - you can specify multiple fields and what order they are displayed by placing pipes (`|`) between the columns like below:

{{{
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter)]]
}}}

This is displayed as:
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter)]]

==== Full rows ====
In ''''table'''' format you can also have full rows by using ''''rows=<field>'''' like below:

{{{
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter,rows=description)]]
}}}

This is displayed as:
[[TicketQuery(max=3,status=closed,order=id,desc=1,format=table,col=resolution|summary|owner|reporter,rows=description)]]


=== Query Language ===

`query:` TracLinks and the `[[TicketQuery]]` macro both use a mini “query language” for specifying query filters. Basically, the filters are separated by ampersands (`&`). Each filter then consists of the ticket field name, an operator, and one or more values. More than one value are separated by a pipe (`|`), meaning that the filter matches any of the values. To include a literal `&` or `|` in a value, escape the character with a backslash (`\`).

The available operators are:
|| ''''''`=`'''''' || the field content exactly matches one of the values ||
|| ''''''`~=`'''''' || the field content contains one or more of the values ||
|| ''''''`^=`'''''' || the field content starts with one of the values ||
|| ''''''`$=`'''''' || the field content ends with one of the values ||

All of these operators can also be negated:
|| ''''''`!=`'''''' || the field content matches none of the values ||
|| ''''''`!~=`'''''' || the field content does not contain any of the values ||
|| ''''''`!^=`'''''' || the field content does not start with any of the values ||
|| ''''''`!$=`'''''' || the field content does not end with any of the values ||

The date fields `created` and `modified` can be constrained by using the `=` operator and specifying a value containing two dates separated by two dots (`..`). Either end of the date range can be left empty, meaning that the corresponding end of the range is open. The date parser understands a few natural date specifications like "3 weeks ago", "last month" and "now", as well as Bugzilla-style date specifications like "1d", "2w", "3m" or "4y" for 1 day, 2 weeks, 3 months and 4 years, respectively. Spaces in date specifications can be left out to avoid having to quote the query string. 
|| ''''''`created=2007-01-01..2008-01-01`'''''' || query tickets created in 2007 ||
|| ''''''`created=lastmonth..thismonth`'''''' || query tickets created during the previous month ||
|| ''''''`modified=1weekago..`'''''' || query tickets that have been modified in the last week ||
|| ''''''`modified=..30daysago`'''''' || query tickets that have been inactive for the last 30 days ||

----
See also: TracTickets, TracReports, TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracReports',3,1352317660321000,'trac','127.0.0.1','** Note: this page documents the version 1.0 of Trac, see [[0.12/TracReports]] if you need the previous version **
= Trac Reports =
[[TracGuideToc]]

The Trac reports module provides a simple, yet powerful reporting facility
to present information about tickets in the Trac database.

Rather than have its own report definition format, TracReports relies on standard SQL
`SELECT` statements for custom report definition. 

  ''''''Note:'''''' ''''The report module is being phased out in its current form because it seriously limits the ability of the Trac team to make adjustments to the underlying database schema. We believe that the [wiki:TracQuery query module] is a good replacement that provides more flexibility and better usability. While there are certain reports that cannot yet be handled by the query module, we intend to further enhance it so that at some point the reports module can be completely removed. This also means that there will be no major enhancements to the report module anymore.''''

  ''''You can already completely replace the reports module by the query module simply by disabling the former in [wiki:TracIni trac.ini]:''''
  {{{
  [components]
  trac.ticket.report.* = disabled
  }}}
  ''''This will make the query module the default handler for the “View Tickets” navigation item. We encourage you to try this configuration and report back what kind of features of reports you are missing, if any.''''

A report consists of these basic parts:
 * ''''''ID'''''' — Unique (sequential) identifier 
 * ''''''Title'''''' — Descriptive title
 * ''''''Description'''''' — A brief description of the report, in WikiFormatting text.
 * ''''''Report Body'''''' — List of results from report query, formatted according to the methods described below.
 * ''''''Footer'''''' — Links to alternative download formats for this report.

== Changing Sort Order ==
Simple reports - ungrouped reports to be specific - can be changed to be sorted by any column simply by clicking the column header. 

If a column header is a hyperlink (red), click the column you would like to sort by. Clicking the same header again reverses the order.

== Changing Report Numbering ==
There may be instances where you need to change the ID of the report, perhaps to organize the reports better. At present this requires changes to the trac database. The ''''report'''' table has the following schema ''''(since 0.10)'''':
 * id integer PRIMARY KEY
 * author text
 * title text
 * query text
 * description text
Changing the ID changes the shown order and number in the ''''Available Reports'''' list and the report''s perma-link. This is done by running something like:
{{{
update report set id=5 where id=3;
}}}
Keep in mind that the integrity has to be maintained (i.e., ID has to be unique, and you don''t want to exceed the max, since that''s managed by SQLite someplace).

You may also need to update or remove the report number stored in the report or query.

== Navigating Tickets ==
Clicking on one of the report results will take you to that ticket. You can navigate through the results by clicking the ''''Next Ticket'''' or ''''Previous Ticket'''' links just below the main menu bar, or click the ''''Back to Report'''' link to return to the report page.

You can safely edit any of the tickets and continue to navigate through the results using the ''''!Next/Previous/Back to Report'''' links after saving your results, but when you return to the report, there will be no hint about what has changed, as would happen if you were navigating a list of tickets obtained from a query (see TracQuery#NavigatingTickets). ''''(since 0.11)''''

== Alternative Download Formats ==
Aside from the default HTML view, reports can also be exported in a number of alternative formats.
At the bottom of the report page, you will find a list of available data formats. Click the desired link to 
download the alternative report format.

=== Comma-delimited - CSV (Comma Separated Values) ===
Export the report as plain text, each row on its own line, columns separated by a single comma ('','').
''''''Note:'''''' The output is fully escaped so carriage returns, line feeds, and commas will be preserved in the output.

=== Tab-delimited ===
Like above, but uses tabs (\t) instead of comma.

=== RSS - XML Content Syndication ===
All reports support syndication using XML/RSS 2.0. To subscribe to an RSS feed, click the orange ''XML'' icon at the bottom of the page. See TracRss for general information on RSS support in Trac.

----

== Creating Custom Reports ==

''''Creating a custom report requires a comfortable knowledge of SQL.''''

''''''Note that you need to set up [TracPermissions#Reports permissions] in order to see the buttons for adding or editing reports.''''''

A report is basically a single named SQL query, executed and presented by
Trac.  Reports can be viewed and created from a custom SQL expression directly
in the web interface.

Typically, a report consists of a SELECT-expression from the ''ticket'' table,
using the available columns and sorting the way you want it.

== Ticket columns ==
The ''''ticket'''' table has the following columns:
 * id
 * type
 * time
 * changetime
 * component
 * severity  
 * priority 
 * owner
 * reporter
 * cc
 * version
 * milestone
 * status
 * resolution
 * summary
 * description
 * keywords

See TracTickets for a detailed description of the column fields.

Example: ''''''All active tickets, sorted by priority and time''''''
{{{
SELECT id AS ticket, status, severity, priority, owner, 
       time AS created, summary FROM ticket 
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY priority, time
}}}


== Advanced Reports: Dynamic Variables ==
For more flexible reports, Trac supports the use of ''''dynamic variables'''' in report SQL statements. 
In short, dynamic variables are ''''special'''' strings that are replaced by custom data before query execution.

=== Using Variables in a Query ===
The syntax for dynamic variables is simple, any upper case word beginning with ''$'' is considered a variable.

Example:
{{{
SELECT id AS ticket,summary FROM ticket WHERE priority=$PRIORITY
}}}

To assign a value to $PRIORITY when viewing the report, you must define it as an argument in the report URL, leaving out the leading ''$''.

Example:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high
}}}

To use multiple variables, separate them with an ''&''.

Example:
{{{
 http://trac.edgewall.org/reports/14?PRIORITY=high&SEVERITY=critical
}}}


=== !Special/Constant Variables ===
There is one dynamic variable whose value is set automatically (the URL does not have to be changed) to allow practical reports. 

 * $USER — Username of logged in user.

Example (''''List all tickets assigned to me''''):
{{{
SELECT id AS ticket,summary FROM ticket WHERE owner=$USER
}}}



== Advanced Reports: Custom Formatting ==
Trac is also capable of more advanced reports, including custom layouts,
result grouping and user-defined CSS styles. To create such reports, we''ll use
specialized SQL statements to control the output of the Trac report engine.

=== Special Columns ===
To format reports, TracReports looks for ''magic'' column names in the query
result. These ''magic'' names are processed and affect the layout and style of the 
final report.

=== Automatically formatted columns ===
 * ''''''ticket'''''' — Ticket ID number. Becomes a hyperlink to that ticket. 
 * ''''''id'''''' — same as ''''''ticket'''''' above when ''''''realm'''''' is not set
 * ''''''realm'''''' — together with ''''''id'''''', can be used to create links to other resources than tickets (e.g. a realm of ''''wiki'''' and an ''''id'''' to a page name will create a link to that wiki page)
 * ''''''created, modified, date, time'''''' — Format cell as a date and/or time.
 * ''''''description'''''' — Ticket description field, parsed through the wiki engine.

''''''Example:''''''
{{{
SELECT id AS ticket, created, status, summary FROM ticket 
}}}

Those columns can also be defined but marked as hidden, see [#column-syntax below].

See trac:wiki/CookBook/Configuration/Reports for some example of creating reports for realms other than ''''ticket''''.

=== Custom formatting columns ===
Columns whose names begin and end with 2 underscores (Example: ''''''`__color__`'''''') are
assumed to be ''''formatting hints'''', affecting the appearance of the row.
 
 * ''''''`__group__`'''''' — Group results based on values in this column. Each group will have its own header and table.
 * ''''''`__grouplink__`'''''' — Make the header of each group a link to the specified URL. The URL is taken from the first row of each group.
 * ''''''`__color__`'''''' — Should be a numeric value ranging from 1 to 5 to select a pre-defined row color. Typically used to color rows by issue priority.
{{{
#!html
<div style="margin-left:7.5em">Defaults: 
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fdc; border-color: #e88; color: #a22">Color 1</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #ffb; border-color: #eea; color: #880">Color 2</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #fbfbfb; border-color: #ddd; color: #444">Color 3</span>
<span style="border: none; color: #333; background: transparent; font-size: 85%; background: #e7ffff; border-color: #cee; color: #099">Color 4</span>
<span style="border: none; color: #333; background: transparent;  font-size: 85%; background: #e7eeff; border-color: #cde; color: #469">Color 5</span>
</div>
}}}
 * ''''''`__style__`'''''' — A custom CSS style expression to use on the `<tr>` element of the current row.
 * ''''''`__class__`'''''' — Zero or more space-separated CSS class names to be set on the `<tr>` element of the current row. These classes are added to the class name derived from `__color__` and the odd / even indicator.

''''''Example:'''''' ''''List active tickets, grouped by milestone, group header linked to milestone page, colored by priority''''
{{{
SELECT p.value AS __color__,
     t.milestone AS __group__,
     ''../milestone/'' || t.milestone AS __grouplink__,
     (CASE owner WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' ELSE '''' END) AS __style__,
       t.id AS ticket, summary
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

''''''Note:'''''' A table join is used to match ''''ticket'''' priorities with their
numeric representation from the ''''enum'''' table.

=== Changing layout of report rows === #column-syntax
By default, all columns on each row are display on a single row in the HTML
report, possibly formatted according to the descriptions above. However, it''s
also possible to create multi-line report entries.

 * ''''''`column_`'''''' — ''''Break row after this''''. By appending an underscore (''_'') to the column name, the remaining columns will be continued on a second line.

 * ''''''`_column_`'''''' — ''''Full row''''. By adding an underscore (''_'') both at the beginning and the end of a column name, the data will be shown on a separate row.

 * ''''''`_column`'''''' — ''''Hide data''''. Prepending an underscore (''_'') to a column name instructs Trac to hide the contents from the HTML output. This is useful for information to be visible only if downloaded in other formats (like CSV or RSS/XML).
   This can be used to hide any kind of column, even important ones required for identifying the resource, e.g. `id as _id` will hide the ''''''Id'''''' column but the link to the ticket will be present.

''''''Example:'''''' ''''List active tickets, grouped by milestone, colored by priority, with  description and multi-line layout''''

{{{
SELECT p.value AS __color__,
       t.milestone AS __group__,
       (CASE owner 
          WHEN ''daniel'' THEN ''font-weight: bold; background: red;'' 
          ELSE '''' END) AS __style__,
       t.id AS ticket, summary AS summary_,             -- ## Break line here
       component,version, severity, milestone, status, owner,
       time AS created, changetime AS modified,         -- ## Dates are formatted
       description AS _description_,                    -- ## Uses a full row
       changetime AS _changetime, reporter AS _reporter -- ## Hidden from HTML output
  FROM ticket t,enum p
  WHERE t.status IN (''new'', ''assigned'', ''reopened'') 
    AND p.name=t.priority AND p.type=''priority''
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

=== Reporting on custom fields ===

If you have added custom fields to your tickets (a feature since v0.8, see TracTicketsCustomFields), you can write a SQL query to cover them. You''ll need to make a join on the ticket_custom table, but this isn''t especially easy.

If you have tickets in the database ''''before'''' you declare the extra fields in trac.ini, there will be no associated data in the ticket_custom table. To get around this, use SQL''s "LEFT OUTER JOIN" clauses. See [trac:TracIniReportCustomFieldSample TracIniReportCustomFieldSample] for some examples.

=== A note about SQL rewriting #rewriting

Beyond the relatively trivial replacement of dynamic variables, the SQL query is also altered in order to support two features of the reports:
 1. [#sort-order changing the sort order]
 2. pagination support (limitation of the number of result rows displayed on each page)
In order to support the first feature, the sort column is inserted in the `ORDER BY` clause in the first position or in the second position if a `__group__` column is specified (an `ORDER BY` clause is created if needed). In order to support pagination, a `LIMIT ... OFFSET ...` clause is appended.
The query might be too complex for the automatic rewrite to work correctly, resulting in an erroneous query. In this case you still have the possibility to control exactly how the rewrite is done by manually inserting the following tokens:
 - `@SORT_COLUMN@`, the place where the name of the selected sort column will be inserted,
 - `@LIMIT_OFFSET@`, the place where the pagination support clause will be added
Note that if you write them after an SQL comment, `--`, you''ll effectively disable rewriting if this is what you want!

Let''s take an example, consider the following SQL query:
{{{
-- ## 4: Assigned, Active Tickets by Owner ## --

-- 
-- List assigned tickets, group by ticket owner, sorted by priority.
-- 

SELECT p.value AS __color__,
   owner AS __group__,
   id AS ticket, summary, component, milestone, t.type AS type, severity, time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t,enum p
  WHERE status = ''assigned''
AND p.name=t.priority AND p.type=''priority''
  ORDER BY __group__, p.value, severity, time
}}}

The automatic rewrite will be the following (4 rows per page, page 2, sorted by `component`):
{{{
SELECT p.value AS __color__,
   owner AS __group__,
   id AS ticket, summary, component, milestone, t.type AS type, severity, time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t,enum p
  WHERE status = ''assigned''
AND p.name=t.priority AND p.type=''priority''
  ORDER BY __group__ ASC, `component` ASC,  __group__, p.value, severity, time
 LIMIT 4 OFFSET 4
}}}

The equivalent SQL query with the rewrite tokens would have been:
{{{
SELECT p.value AS __color__,
   owner AS __group__,
   id AS ticket, summary, component, milestone, t.type AS type, severity, time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t,enum p
  WHERE status = ''assigned''
AND p.name=t.priority AND p.type=''priority''
  ORDER BY __group__, @SORT_COLUMN@, p.value, severity, time
@LIMIT_OFFSET@
}}}

If you want to always sort first by priority and only then by the user selected sort column, simply use the following `ORDER BY` clause:
{{{
  ORDER BY __group__, p.value, @SORT_COLUMN@, severity, time
}}}

----
See also: TracTickets, TracQuery, TracGuide, [http://www.sqlite.org/lang_expr.html Query Language Understood by SQLite]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRepositoryAdmin',3,1352317660343000,'trac','127.0.0.1','= Repository Administration =
[[PageOutline(2-3)]]

== Quick start == #QuickStart

 * Manage repositories in the "Repository" admin panel, with `trac-admin` or in the `[repositories]` section of [wiki:TracIni#repositories-section trac.ini].
 * Set up a call to `trac-admin $ENV changeset added $REPO $REV` in the post-commit hook of each repository. Additionally, add a call to `trac-admin $ENV changeset modified $REPO $REV` in the post-revprop-change hook of repositories allowing revision property changes.
 * Set the `[trac] repository_sync_per_request` option to an empty value to disable per-request syncing.
 * Make sure the user under which your Subversion hooks are run has write access to the Trac environment, or use a tool like `sudo` to temporarily elevate privileges.

== Specifying repositories == #Repositories
Starting with 0.12, Trac can handle more than one repository per environment. The pre-0.12 way of specifying the repository with the `repository_dir` and `repository_type` options in the `[trac]` section of [wiki:TracIni trac.ini] is still supported, but two new mechanisms allow including additional repositories into an environment.

It is also possible to define aliases of repositories, that act as "pointers" to real repositories. This can be useful when renaming a repository, to avoid breaking all the links to the old name.

A number of attributes can be associated with each repository, which define the repository''s location, type, name and how it is displayed in the source browser. The following attributes are supported:

||=''''''Attribute'''''' =||=''''''Description'''''' =||
||`alias` ||\
||A repository having an `alias` attribute is an alias to a real repository. All TracLinks referencing the alias resolve to the aliased repository. Note that multiple indirection is not supported, so an alias must always point to a real repository. The `alias` and `dir` attributes are mutually exclusive. ||
||`description` ||\
||The text specified in the `description` attribute is displayed below the top-level entry for the repository in the source browser. It supports WikiFormatting. ||
||`dir` ||\
||The `dir` attribute specifies the location of the repository in the filesystem. It corresponds to the value previously specified in the option `[trac] repository_dir`. The `alias` and `dir` attributes are mutually exclusive. ||
||`hidden` ||When set to `true`, the repository is hidden from the repository index page in the source browser. Browsing the repository is still possible, and links referencing the repository remain valid. ||
||`type` ||The `type` attribute sets the type of version control system used by the repository. Trac supports Subversion out-of-the-box, and plugins add support for many other systems. If `type` is not specified, it defaults to the value of the `[trac] repository_type` option. ||
||`url` ||The `url` attribute specifies the root URL to be used for checking out from the repository. When specified, a "Repository URL" link is added to the context navigation links in the source browser, that can be copied into the tool used for creating the working copy. ||

A repository `name` and one of `alias` or `dir` attributes are mandatory. All others are optional.

After adding a repository, the cache for that repository must be re-synchronized once with the `trac-admin $ENV repository resync` command.

 `repository resync <repos>`::
   Re-synchronize Trac with a repository.


=== In `trac.ini` === #ReposTracIni
Repositories and repository attributes can be specified in the `[repositories]` section of [wiki:TracIni#repositories-section trac.ini]. Every attribute consists of a key structured as `{name}.{attribute}` and the corresponding value separated with an equal sign (`=`). The name of the default repository is empty.

The main advantage of specifying repositories in `trac.ini` is that they can be inherited from a global configuration (see the [wiki:TracIni#GlobalConfiguration global configuration] section of TracIni). One drawback is that, due to limitations in the `ConfigParser` class used to parse `trac.ini`, the repository name is always all-lowercase.

The following example defines two Subversion repositories named `project` and `lib`, and an alias to `project` as the default repository. This is a typical use case where a Trac environment previously had a single repository (the `project` repository), and was converted to multiple repositories. The alias ensures that links predating the change continue to resolve to the `project` repository.
{{{
#!ini
[repositories]
project.dir = /var/repos/project
project.description = This is the ''''main'''' project repository.
project.type = svn
project.url = http://example.com/svn/project
project.hidden = true

lib.dir = /var/repos/lib
lib.description = This is the secondary library code.
lib.type = svn
lib.url = http://example.com/svn/lib

.alias = project
}}}
Note that `name.alias = target` makes `name` an alias for the `target` repo, not the other way around.

=== In the database === #ReposDatabase
Repositories can also be specified in the database, using either the "Repositories" admin panel under "Version Control", or the `trac-admin $ENV repository` commands.

The admin panel shows the list of all repositories defined in the Trac environment. It allows adding repositories and aliases, editing repository attributes and removing repositories. Note that repositories defined in `trac.ini` are displayed but cannot be edited.

The following [wiki:TracAdmin trac-admin] commands can be used to perform repository operations from the command line.

 `repository add <repos> <dir> [type]`::
   Add a repository `<repos>` located at `<dir>`, and optionally specify its type.

 `repository alias <name> <target>`::
   Create an alias `<name>` for the repository `<target>`.

 `repository remove <repos>`::
   Remove the repository `<repos>`.

 `repository set <repos> <key> <value>`::
   Set the attribute `<key>` to `<value>` for the repository `<repos>`. 

Note that the default repository has an empty name, so it will likely need to be quoted when running `trac-admin` from a shell. Alternatively, the name "`(default)`" can be used instead, for example when running `trac-admin` in interactive mode.


== Repository synchronization == #Synchronization
Prior to 0.12, Trac synchronized its cache with the repository on every HTTP request. This approach is not very efficient and not practical anymore with multiple repositories. For this reason, explicit synchronization through post-commit hooks was added. 

There is also new functionality in the form of a repository listener extension point ''''(IRepositoryChangeListener)'''' that is triggered by the post-commit hook when a changeset is added or modified, and can be used by plugins to perform actions on commit.

=== Mercurial Repositories ===
Please note that at the time of writing, no initial resynchronization or any hooks are necessary for Mercurial repositories - see [trac:#9485] for more information. 

=== Explicit synchronization === #ExplicitSync
This is the preferred method of repository synchronization. It requires setting the `[trac]  repository_sync_per_request` option in [wiki:TracIni#trac-section trac.ini] to an empty value, and adding a call to `trac-admin` in the post-commit hook of each repository. Additionally, if a repository allows changing revision metadata, a call to `trac-admin` must be added to the post-revprop-change hook as well.

 `changeset added <repos> <rev> [...]`::
   Notify Trac that one or more changesets have been added to a repository.

 `changeset modified <repos> <rev> [...]`::
   Notify Trac that metadata on one or more changesets in a repository has been modified.

The `<repos>` argument can be either a repository name (use "`(default)`" for the default repository) or the path to the repository.

Note that you may have to set the environment variable PYTHON_EGG_CACHE to the same value as was used for the web server configuration before calling trac-admin, if you changed it from its default location. See [wiki:TracPlugins Trac Plugins] for more information.

The following examples are complete post-commit and post-revprop-change scripts for Subversion. They should be edited for the specific environment, marked executable (where applicable) and placed in the `hooks` directory of each repository. On Unix (`post-commit`):
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
/usr/bin/trac-admin /path/to/env changeset added "$1" "$2"
}}}
Note: Ubuntu doesn''t seem to like /usr/bin/trac-admin, so just use:
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
trac-admin /path/to/env/ changeset added "$1" "$2"
}}}
On Windows (`post-commit.cmd`):
{{{#!application/x-dos-batch
@C:\Python26\Scripts\trac-admin.exe C:\path\to\env changeset added "%1" "%2"
}}}

The post-revprop-change hook for Subversion is very similar. On Unix (`post-revprop-change`):
{{{#!sh
#!/bin/sh
export PYTHON_EGG_CACHE="/path/to/dir"
/usr/bin/trac-admin /path/to/env changeset modified "$1" "$2"
}}}
On Windows (`post-revprop-change.cmd`):
{{{#!application/x-dos-batch
@C:\Python26\Scripts\trac-admin.exe C:\path\to\env changeset modified "%1" "%2"
}}}

The Unix variants above assume that the user running the Subversion commit has write access to the Trac environment, which is the case in the standard configuration where both the repository and Trac are served by the web server. If you access the repository through another means, for example `svn+ssh://`, you may have to run `trac-admin` with different privileges, for example by using `sudo`.

Note that calling `trac-admin` in your Subversion hooks can slow down the commit and log editing operations on the client side. You might want to use the [trac:source:trunk/contrib/trac-svn-hook contrib/trac-svn-hook] script which starts `trac-admin` in an asynchronous way. The script also comes with a number of safety checks and usage advices which should make it easier to set up and test your hooks. There''s no equivalent `trac-svn-hook.bat` for Windows yet, but the script can be run by Cygwin''s bash.

See the [http://svnbook.red-bean.com/en/1.5/svn.reposadmin.create.html#svn.reposadmin.create.hooks section about hooks] in the Subversion book for more information. Other repository types will require different hook setups.

Git hooks can be used in the same way for explicit syncing of git repositories. Add the following to `.git/hooks/post-commit`:
{{{#!sh
REV=$(git rev-parse HEAD)
trac-admin /path/to/env changeset added <my-repository> $REV
}}}

For Mercurial, add the following entries to the `.hgrc` file of each repository accessed by Trac (if [trac:TracMercurial] is installed in a Trac `plugins` directory, download [trac:source:mercurial-plugin/tracext/hg/hooks.py hooks.py] and place it somewhere accessible):
{{{#!ini
[hooks]
; If mercurial-plugin is installed globally
commit = python:tracext.hg.hooks.add_changesets
changegroup = python:tracext.hg.hooks.add_changesets

; If mercurial-plugin is installed in a Trac plugins directory
commit = python:/path/to/hooks.py:add_changesets
changegroup = python:/path/to/hooks.py:add_changesets

[trac]
env = /path/to/env
trac-admin = /path/to/trac-admin
}}}

=== Per-request synchronization === #PerRequestSync
If the post-commit hooks are not available, the environment can be set up for per-request synchronization. In that case, the `[trac] repository_sync_per_request` option in [wiki:TracIni#trac-section trac.ini] must be set to a comma-separated list of repository names to be synchronized.

Note that in this case, the changeset listener extension point is not called, and therefore plugins using it will not work correctly.


== Migration from a single-repository setup (Subversion) == #Migration
The following procedure illustrates a typical migration from a Subversion single-repository setup to multiple repositories.

 1. Remove the default repository specification from the `[trac] repository_dir` option.
 1. Add the main repository as a named repository.
 1. Re-synchronize the main repository.
 1. Set up post-commit and post-revprop-change hooks on the "main" repository, and set `[trac] repository_sync_per_request` to an empty value.
 1. Add an alias to the main repository as the default repository (by leaving out the the `name`, e.g. `.alias = main`). This ensures that all links predating the migration still resolve to the main repository.
 1. Repeat steps 2, 3 and 4 to add other "named" repositories as needed.

== Migration from a single-repository setup (Mercurial) == #MigrationMercurial
The following procedure illustrates a typical migration from a Mercurial single-repository setup to multiple repositories. Please note that at the time of writing, no initial resynchronization or any hooks are necessary for Mercurial repositories - see [trac:ticket:9485 #9485] for more information.

 1. Upgrade to the latest version of the TracMercurial plugin.
 1. Remove the default repository specification from the `[trac] repository_dir` option.
 1. Add the main repository as a named repository.
 1. Add an alias to the main repository as the default repository (by leaving out the the `name`, e.g. `.alias = main`). This ensures that all links predating the migration still resolve to the main repository.
 1. Repeat step 3 to add other "named" repositories as needed.

== Troubleshooting ==

=== My trac-post-commit-hook doesn''t work anymore === #trac-post-commit-hook

You must now use the optional components from `tracopt.ticket.commit_updater.*`, which you can activate through the Plugins panel in the Administrative part of the web interface, or by directly modifying the [TracIni#components-section "[components]"] section in the trac.ini. Be sure to use [#ExplicitSync explicit synchronization] as explained above.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRoadmap',2,1352317660365000,'trac','127.0.0.1','= The Trac Roadmap =
[[TracGuideToc]]

The roadmap provides a view on the [wiki:TracTickets ticket system] that helps planning and managing the future development of a project.

== The Roadmap View ==

Basically, the roadmap is just a list of future milestones. You can add a description to milestones (using WikiFormatting) describing main objectives, for example. In addition, tickets targeted for a milestone are aggregated, and the ratio between active and resolved tickets is displayed as a milestone progress bar.  It is possible to further [trac:TracRoadmapCustomGroups customise the ticket grouping] and have multiple ticket statuses shown on the progress bar.

The roadmap can be filtered to show or hide ''''completed milestones'''' and ''''milestones with no due date''''. In the case that both ''''show completed milestones'''' and ''''hide milestones with no due date'''' are selected, ''''completed'''' milestones with no due date __will__ be shown.

== The Milestone View ==

You can add a description for each milestone (using WikiFormatting) describing main objectives, for example. In addition, tickets targeted for a milestone are aggregated, and the ratio between active and resolved tickets is displayed as a milestone progress bar.  It is possible to further [trac:TracRoadmapCustomGroups customise the ticket grouping] and have multiple ticket statuses shown on the progress bar.

It is possible to drill down into this simple statistic by viewing the individual milestone pages. By default, the active/resolved ratio will be grouped and displayed by component. You can also regroup the status by other criteria, such as ticket owner or severity. Ticket numbers are linked to [wiki:TracQuery custom queries] listing corresponding tickets.

== Roadmap Administration ==

With appropriate permissions it is possible to add, modify and remove milestones using either the web interface (roadmap and milestone pages), web administration interface or by using `trac-admin`. 

''''''Note:'''''' Milestone descriptions can not currently be edited using ''trac-admin''.

== iCalendar Support ==

The Roadmap supports the [http://www.ietf.org/rfc/rfc2445.txt iCalendar] format to keep track of planned milestones and related tickets from your favorite calendar software. Many calendar applications support the iCalendar specification including
 * [http://www.apple.com/ical/ Apple iCal] for Mac OS X
 * the cross-platform [http://www.mozilla.org/projects/calendar/ Mozilla Calendar]
 * [http://chandlerproject.org Chandler]
 * [http://kontact.kde.org/korganizer/ Korganizer] (the calendar application of the [http://www.kde.org/ KDE] project)
 * [http://www.novell.com/de-de/products/desktop/features/evolution.html Evolution] also support iCalendar
 * [http://office.microsoft.com/en-us/outlook/ Microsoft Outlook] can also read iCalendar files (it appears as a new static calendar in Outlook)
 * [https://www.google.com/calendar/ Google Calendar] 

To subscribe to the roadmap, copy the iCalendar link from the roadmap (found at the bottom of the page) and choose the "Subscribe to remote calendar" action (or similar) of your calendar application, and insert the URL just copied.

''''''Note:'''''' For tickets to be included in the calendar as tasks, you need to be logged in when copying the link. You will only see tickets assigned to yourself, and associated with a milestone.

''''''Note:'''''' To include the milestones in Google Calendar you might need to rewrite the URL.
{{{
RewriteEngine on
RewriteRule ([^/.]+)/roadmap/([^/.]+)/ics /$1/roadmap?user=$2&format=ics
}}}

More information about iCalendar can be found at [http://en.wikipedia.org/wiki/ICalendar Wikipedia].
----
See also: TracTickets, TracReports, TracQuery, [trac:TracRoadmapCustomGroups]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracRss',2,1352317660387000,'trac','127.0.0.1','= Using RSS with Trac =
[[TracGuideToc]]

Several of the Trac modules support content syndication using the RSS (Really Simple Syndication) XML format.
Using the RSS subscription feature in Trac, you can easily monitor progress of the project, a set of issues or even changes to a single file.

Trac supports RSS feeds in:

 * TracTimeline —  Use the RSS feed to ''''''subscribe to project events''''''.[[br]]Monitor overall project progress in your favorite RSS reader.
 * TracTickets, TracReports, and TracQuery — Allows syndication of report and ticket query results.[[br]]Be notified about important and relevant issue tickets.
 * TracBrowser and TracRevisionLog — Syndication of file changes.[[br]]Stay up to date with changes to a specific file or directory.

== How to access RSS data ==
Anywhere in Trac where RSS is available, you should find a small orange ''''''XML'''''' icon, typically placed at the bottom of the page. Clicking the icon will access the RSS feed for that specific resource.

''''''Note:'''''' Different modules provide different data in their RSS feeds. Usually, the syndicated information corresponds to the current view. For example, if you click the RSS link on a report page, the feed will be based on that report. It might be explained by thinking of the RSS feeds as an ''''alternate view of the data currently displayed''''.

== Links ==
 * ''''Specifications:''''
   * http://blogs.law.harvard.edu/tech/rss — RSS 2.0 Specification

 * ''''Multi-platform RSS readers:''''
   * http://www.rssowl.org/ — Open source, Eclipse-based, RSS reader for Linux, Mac and Windows systems that supports https and authenticated feeds.

 * ''''Linux/BSD/*n*x systems:''''
   * http://liferea.sourceforge.net/ — Open source GTK2 RSS Reader for Linux
   * [http://akregator.sourceforge.net/ Akregator] — Open source KDE RSS Reader (part of KDE-PIM)

 * ''''Mac OS X systems:''''
   * http://ranchero.com/netnewswire/ — An excellent RSS reader for Mac OS X (has both free and pay versions)
   * http://www.utsire.com/shrook/ — An RSS reader for Max OS X that supports https (even with self signed certificates) and authenticated feeds.
   * http://vienna-rss.sourceforge.net/ — Open source Feed Reader for Mac OS X with smart folders support
   * http://www.mesadynamics.com/Tickershock.html — Non-intrusive "news ticker" style RSS reader for Mac OS X

 * ''''Windows systems:''''
   * http://www.rssreader.com/ — Free and powerful RSS Reader for Windows
   * http://www.sharpreader.net/ — A free RSS Reader written in .NET for Windows

 * ''''Firefox:''''
   * http://www.mozilla.org/products/firefox/ — Mozilla Firefox features plenty [https://addons.mozilla.org/en-US/firefox/search/?q=rss&appver=&platform= add-ons] for supporting RSS

----
See also: TracGuide, TracTimeline, TracReports, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSearch',2,1352317660398000,'trac','127.0.0.1','= Using Search =

Trac has a built-in search engine to allow finding occurrences of keywords and substrings in wiki pages, tickets and changeset properties (author, revision and log message).

Using the Trac search facility is straightforward and its interface should be familiar to most users.

Apart from the [search: Search module], you will also find a small search field above the navigation bar at all time. It provides convenient access to the search module from all pages.

The search results show the most recent modifications ranked first in the results rather than the most relevant result.

== "Quickjump" searches ==
For quick access to various project resources, the quick-search field at the top of every page can be used to enter a [TracLinks wiki link], which will take you directly to the resource identified by that link.

For example:

 * ![42] -- Opens change set 42
 * !#42 -- Opens ticket number 42
 * !{1} -- Opens report 1
 * /trunk -- Opens the browser for the `trunk` directory

== Advanced ==

=== Disabling Quickjumps ===
To disable the quickjump feature for a search keyword - for example when searching for occurences of the literal word !TracGuide - begin the query with an exclamation mark (`!`).

=== Search Links ===
From the Wiki, it is possible to link to a specific search, using
`search:` links:
 * `search:?q=crash` will search for the string "crash" 
 * `search:?q=trac+link&wiki=on` will search for "trac" and "link" 
   in wiki pages only

----
See also: TracGuide, TracLinks, TracQuery',NULL,NULL);
INSERT INTO "wiki" VALUES('TracStandalone',3,1352317660409000,'trac','127.0.0.1','** Note: this page documents the version 1.0 of Trac, see [[0.12/TracStandalone]] if you need the previous version **
= Tracd =

Tracd is a lightweight standalone Trac web server.
It can be used in a variety of situations, from a test or development server to a multiprocess setup behind another web server used as a load balancer.

== Pros ==

 * Fewer dependencies: You don''t need to install apache or any other web-server.
 * Fast: Should be almost as fast as the [wiki:TracModPython mod_python] version (and much faster than the [wiki:TracCgi CGI]), even more so since version 0.12 where the HTTP/1.1 version of the protocol is enabled by default
 * Automatic reloading: For development, Tracd can be used in ''''auto_reload'''' mode, which will automatically restart the server whenever you make a change to the code (in Trac itself or in a plugin).

== Cons ==

 * Fewer features: Tracd implements a very simple web-server and is not as configurable or as scalable as Apache httpd.
 * No native HTTPS support: [http://www.rickk.com/sslwrap/ sslwrap] can be used instead,
   or [http://trac.edgewall.org/wiki/STunnelTracd stunnel -- a tutorial on how to use stunnel with tracd] or Apache with mod_proxy.

== Usage examples ==

A single project on port 8080. (http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
Stricly speaking this will make your Trac accessible to everybody from your network rather than ''''localhost only''''. To truly limit it use ''''--hostname'''' option.
{{{
 $ tracd --hostname=localhost -p 8080 /path/to/project
}}}
With more than one project. (http://localhost:8080/project1/ and http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}

You can''t have the last portion of the path identical between the projects since Trac uses that name to keep the URLs of the
different projects unique. So if you use `/project1/path/to` and `/project2/path/to`, you will only see the second project.

An alternative way to serve multiple projects is to specify a parent directory in which each subdirectory is a Trac project, using the `-e` option. The example above could be rewritten:
{{{
 $ tracd -p 8080 -e /path/to
}}}

To exit the server on Windows, be sure to use {{{CTRL-BREAK}}} -- using {{{CTRL-C}}} will leave a Python process running in the background.

== Installing as a Windows Service ==

=== Option 1 ===
To install as a Windows service, get the [http://www.google.com/search?q=srvany.exe SRVANY] utility and run:
{{{
 C:\path\to\instsrv.exe tracd C:\path\to\srvany.exe
 reg add HKLM\SYSTEM\CurrentControlSet\Services\tracd\Parameters /v Application /d "\"C:\path\to\python.exe\" \"C:\path\to\python\scripts\tracd-script.py\" <your tracd parameters>"
 net start tracd
}}}

''''''DO NOT'''''' use {{{tracd.exe}}}.  Instead register {{{python.exe}}} directly with {{{tracd-script.py}}} as a parameter.  If you use {{{tracd.exe}}}, it will spawn the python process without SRVANY''s knowledge.  This python process will survive a {{{net stop tracd}}}.

If you want tracd to start automatically when you boot Windows, do:
{{{
 sc config tracd start= auto
}}}

The spacing here is important.

{{{#!div
Once the service is installed, it might be simpler to run the Registry Editor rather than use the `reg add` command documented above.  Navigate to:[[BR]]
`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\tracd\Parameters`

Three (string) parameters are provided:
||!AppDirectory ||C:\Python26\ ||
||Application ||python.exe ||
||!AppParameters ||scripts\tracd-script.py -p 8080 ... ||

Note that, if the !AppDirectory is set as above, the paths of the executable ''''and'''' of the script name and parameter values are relative to the directory.  This makes updating Python a little simpler because the change can be limited, here, to a single point.
(This is true for the path to the .htpasswd file, as well, despite the documentation calling out the /full/path/to/htpasswd; however, you may not wish to store that file under the Python directory.)
}}}

For Windows 7 User, srvany.exe may not be an option, so you can use [http://www.google.com/search?q=winserv.exe WINSERV] utility and run:
{{{
"C:\path\to\winserv.exe" install tracd -displayname "tracd" -start auto "C:\path\to\python.exe" c:\path\to\python\scripts\tracd-script.py <your tracd parameters>"

net start tracd
}}}

=== Option 2 ===

Use [http://trac-hacks.org/wiki/WindowsServiceScript WindowsServiceScript], available at [http://trac-hacks.org/ Trac Hacks]. Installs, removes, starts, stops, etc. your Trac service.

=== Option 3 ===

also cygwin''s cygrunsrv.exe can be used:
{{{
$ cygrunsrv --install tracd --path /cygdrive/c/Python27/Scripts/tracd.exe --args ''--port 8000 --env-parent-dir E:\IssueTrackers\Trac\Projects''
$ net start tracd
}}}

== Using Authentication ==

Tracd provides support for both Basic and Digest authentication. Digest is considered more secure. The examples below use Digest; to use Basic authentication, replace `--auth` with `--basic-auth` in the command line.

The general format for using authentication is:
{{{
 $ tracd -p port --auth="base_project_dir,password_file_path,realm" project_path
}}}
where:
 * ''''''base_project_dir'''''': the base directory of the project specified as follows:
   * when serving multiple projects: ''''relative'''' to the `project_path`
   * when serving only a single project (`-s`): the name of the project directory
 Don''t use an absolute path here as this won''t work. ''''Note:'''' This parameter is case-sensitive even for environments on Windows.
 * ''''''password_file_path'''''': path to the password file
 * ''''''realm'''''': the realm name (can be anything)
 * ''''''project_path'''''': path of the project

 * **`--auth`** in the above means use Digest authentication, replace `--auth` with `--basic-auth` if you want to use Basic auth.  Although Basic authentication does not require a "realm", the command parser does, so the second comma is required, followed directly by the closing quote for an empty realm name.

Examples:

{{{
 $ tracd -p 8080 \
   --auth="project1,/path/to/passwordfile,mycompany.com" /path/to/project1
}}}

Of course, the password file can be be shared so that it is used for more than one project:
{{{
 $ tracd -p 8080 \
   --auth="project1,/path/to/passwordfile,mycompany.com" \
   --auth="project2,/path/to/passwordfile,mycompany.com" \
   /path/to/project1 /path/to/project2
}}}

Another way to share the password file is to specify "*" for the project name:
{{{
 $ tracd -p 8080 \
   --auth="*,/path/to/users.htdigest,mycompany.com" \
   /path/to/project1 /path/to/project2
}}}

=== Basic Authorization: Using a htpasswd password file ===
This section describes how to use `tracd` with Apache .htpasswd files.

  Note: It is necessary (at least with Python 2.6) to install the fcrypt package in order to
  decode some htpasswd formats.  Trac source code attempt an `import crypt` first, but there
  is no such package for Python 2.6. Only `SHA-1` passwords (since Trac 1.0) work without this module.

To create a .htpasswd file use Apache''s `htpasswd` command (see [#GeneratingPasswordsWithoutApache below] for a method to create these files without using Apache):
{{{
 $ sudo htpasswd -c /path/to/env/.htpasswd username
}}}
then for additional users:
{{{
 $ sudo htpasswd /path/to/env/.htpasswd username2
}}}

Then to start `tracd` run something like this:
{{{
 $ tracd -p 8080 --basic-auth="projectdirname,/fullpath/environmentname/.htpasswd,realmname" /fullpath/environmentname
}}}

For example:
{{{
 $ tracd -p 8080 --basic-auth="testenv,/srv/tracenv/testenv/.htpasswd,My Test Env" /srv/tracenv/testenv
}}}
''''Note:'''' You might need to pass "-m" as a parameter to htpasswd on some platforms (OpenBSD).

=== Digest authentication: Using a htdigest password file ===

If you have Apache available, you can use the htdigest command to generate the password file. Type ''htdigest'' to get some usage instructions, or read [http://httpd.apache.org/docs/2.0/programs/htdigest.html this page] from the Apache manual to get precise instructions.  You''ll be prompted for a password to enter for each user that you create.  For the name of the password file, you can use whatever you like, but if you use something like `users.htdigest` it will remind you what the file contains. As a suggestion, put it in your <projectname>/conf folder along with the [TracIni trac.ini] file.

Note that you can start tracd without the `--auth` argument, but if you click on the ''''Login'''' link you will get an error.

=== Generating Passwords Without Apache ===

Basic Authorization can be accomplished via this [http://aspirine.org/htpasswd_en.html online HTTP Password generator] which also supports `SHA-1`.  Copy the generated password-hash line to the .htpasswd file on your system. Note that Windows Python lacks the "crypt" module that is the default hash type for htpasswd ; Windows Python can grok MD5 password hashes just fine and you should use MD5.

You can use this simple Python script to generate a ''''''digest'''''' password file:

{{{
#!python
from optparse import OptionParser
# The md5 module is deprecated in Python 2.5
try:
    from hashlib import md5
except ImportError:
    from md5 import md5
realm = ''trac''

# build the options
usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-u", "--username",action="store", dest="username", type = "string",
                  help="the username for whom to generate a password")
parser.add_option("-p", "--password",action="store", dest="password", type = "string",
                  help="the password to use")
parser.add_option("-r", "--realm",action="store", dest="realm", type = "string",
                  help="the realm in which to create the digest")
(options, args) = parser.parse_args()

# check options
if (options.username is None) or (options.password is None):
   parser.error("You must supply both the username and password")
if (options.realm is not None):
   realm = options.realm
   
# Generate the string to enter into the htdigest file
kd = lambda x: md5('':''.join(x)).hexdigest()
print '':''.join((options.username, realm, kd([options.username, realm, options.password])))
}}}

Note: If you use the above script you must set the realm in the `--auth` argument to ''''''`trac`''''''. Example usage (assuming you saved the script as trac-digest.py):

{{{
 $ python trac-digest.py -u username -p password >> c:\digest.txt
 $ tracd --port 8000 --auth=proj_name,c:\digest.txt,trac c:\path\to\proj_name
}}}

==== Using `md5sum`
It is possible to use `md5sum` utility to generate digest-password file:
{{{
user=
realm=
password=
path_to_file=
echo ${user}:${realm}:$(printf "${user}:${realm}:${password}" | md5sum - | sed -e ''s/\s\+-//'') > ${path_to_file}
}}}

== Reference ==

Here''s the online help, as a reminder (`tracd --help`):
{{{
Usage: tracd [options] [projenv] ...

Options:
  --version             show program''s version number and exit
  -h, --help            show this help message and exit
  -a DIGESTAUTH, --auth=DIGESTAUTH
                        [projectdir],[htdigest_file],[realm]
  --basic-auth=BASICAUTH
                        [projectdir],[htpasswd_file],[realm]
  -p PORT, --port=PORT  the port number to bind to
  -b HOSTNAME, --hostname=HOSTNAME
                        the host name or IP address to bind to
  --protocol=PROTOCOL   http|scgi|ajp|fcgi
  -q, --unquote         unquote PATH_INFO (may be needed when using ajp)
  --http10              use HTTP/1.0 protocol version instead of HTTP/1.1
  --http11              use HTTP/1.1 protocol version (default)
  -e PARENTDIR, --env-parent-dir=PARENTDIR
                        parent directory of the project environments
  --base-path=BASE_PATH
                        the initial portion of the request URL''s "path"
  -r, --auto-reload     restart automatically when sources are modified
  -s, --single-env      only serve a single project without the project list
  -d, --daemonize       run in the background as a daemon
  --pidfile=PIDFILE     when daemonizing, file to which to write pid
  --umask=MASK          when daemonizing, file mode creation mask to use, in
                        octal notation (default 022)
  --group=GROUP         the group to run as
  --user=USER           the user to run as
}}}

Use the -d option so that tracd doesn''t hang if you close the terminal window where tracd was started.

== Tips ==

=== Serving static content ===

If `tracd` is the only web server used for the project, 
it can also be used to distribute static content 
(tarballs, Doxygen documentation, etc.)

This static content should be put in the `$TRAC_ENV/htdocs` folder,
and is accessed by URLs like `<project_URL>/chrome/site/...`.

Example: given a `$TRAC_ENV/htdocs/software-0.1.tar.gz` file,
the corresponding relative URL would be `/<project_name>/chrome/site/software-0.1.tar.gz`, 
which in turn can be written as `htdocs:software-0.1.tar.gz` (TracLinks syntax) or `[/<project_name>/chrome/site/software-0.1.tar.gz]` (relative link syntax). 

 ''''Support for `htdocs:` TracLinks syntax was added in version 0.10''''

=== Using tracd behind a proxy

In some situations when you choose to use tracd behind Apache or another web server.

In this situation, you might experience issues with redirects, like being redirected to URLs with the wrong host or protocol. In this case (and only in this case), setting the `[trac] use_base_url_for_redirect` to `true` can help, as this will force Trac to use the value of `[trac] base_url` for doing the redirects.

If you''re using the AJP protocol to connect with `tracd` (which is possible if you have flup installed), then you might experience problems with double quoting. Consider adding the `--unquote` parameter.

See also [trac:TracOnWindowsIisAjp], [trac:TracNginxRecipe].

=== Authentication for tracd behind a proxy
It is convenient to provide central external authentication to your tracd instances, instead of using {{{--basic-auth}}}. There is some discussion about this in #9206.

Below is example configuration based on Apache 2.2, mod_proxy, mod_authnz_ldap.

First we bring tracd into Apache''s location namespace.

{{{
<Location /project/proxified>
        Require ldap-group cn=somegroup, ou=Groups,dc=domain.com
        Require ldap-user somespecificusertoo
        ProxyPass http://localhost:8101/project/proxified/
        # Turns out we don''t really need complicated RewriteRules here at all
        RequestHeader set REMOTE_USER %{REMOTE_USER}s
</Location>
}}}

Then we need a single file plugin to recognize HTTP_REMOTE_USER header as valid authentication source. HTTP headers like ''''''HTTP_FOO_BAR'''''' will get converted to ''''''Foo-Bar'''''' during processing. Name it something like ''''''remote-user-auth.py'''''' and drop it into ''''''proxified/plugins'''''' directory:
{{{
#!python
from trac.core import *
from trac.config import BoolOption
from trac.web.api import IAuthenticator

class MyRemoteUserAuthenticator(Component):

    implements(IAuthenticator)

    obey_remote_user_header = BoolOption(''trac'', ''obey_remote_user_header'', ''false'', 
               """Whether the ''Remote-User:'' HTTP header is to be trusted for user logins 
                (''''since ??.??'').""") 

    def authenticate(self, req):
        if self.obey_remote_user_header and req.get_header(''Remote-User''): 
            return req.get_header(''Remote-User'') 
        return None

}}}

Add this new parameter to your TracIni:
{{{
...
[trac]
...
obey_remote_user_header = true
...
}}}

Run tracd:
{{{
tracd -p 8101 -r -s proxified --base-path=/project/proxified
}}}

Note that if you want to install this plugin for all projects, you have to put it in your [TracPlugins#Plugindiscovery global plugins_dir] and enable it in your global trac.ini.

Global config (e.g. `/srv/trac/conf/trac.ini`):
{{{
[components]
remote-user-auth.* = enabled
[inherit]
plugins_dir = /srv/trac/plugins
[trac]
obey_remote_user_header = true
}}}

Environment config (e.g. `/srv/trac/envs/myenv`):
{{{
[inherit]
file = /srv/trac/conf/trac.ini
}}}

=== Serving a different base path than / ===
Tracd supports serving projects with different base urls than /<project>. The parameter name to change this is
{{{
 $ tracd --base-path=/some/path
}}}

----
See also: TracInstall, TracCgi, TracModPython, TracGuide, [trac:TracOnWindowsStandalone#RunningTracdasservice Running tracd.exe as a Windows service]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSupport',3,1352317660420000,'trac','127.0.0.1','= Trac Support =

Like in most [http://www.opensource.org/ open source projects], "free" Trac support is available primarily through the community itself, mainly through the [trac:MailingList mailing list] and the [trac: project wiki]. The latter is the authoritative source for the TracGuide (administrator and user guides for Trac).

There is also an [trac:IrcChannel IRC channel], where people might be able to help out. Much of the ''live'' development discussions also happen there.

Before you start a new support query, make sure you''ve done the appropriate searching:
 * in the project''s [trac:TracFaq FAQ]
 * in past messages to the [http://groups.google.com/group/trac-users Trac Users Mailing List]
 * in the Trac ticket system, using either a [trac:search:?q=&ticket=on&wiki=on full search] or a [trac:query: ticket query].

Please ''''''don''t'''''' create a ticket in trac.egdewall.org for asking a support question about Trac. Only use it when you face a ''''real'''' and ''''new'''' bug in Trac, and do so only after having read the [trac:NewTicketGuidelines NewTicketGuidelines]. The more a bug report or enhancement request complies with those guidelines, the higher the chances are that it will be fixed or implemented promptly!

----
See also: [trac:MailingList], [trac:TracTroubleshooting], [trac:CommercialServices]
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracSyntaxColoring',2,1352317660431000,'trac','127.0.0.1','= Syntax Coloring of Source Code =
Trac supports language-specific syntax highlighting of source code within wiki formatted text in [WikiProcessors#CodeHighlightingSupport wiki processors] blocks and in the [TracBrowser repository browser].

To do this, Trac uses external libraries with support for a great number of programming languages.

Currently Trac supports syntax coloring using one or more of the following packages:

 * [http://pygments.pocoo.org/ Pygments], by far the preferred system, as it covers a wide range of programming languages and other structured texts and is actively supported
 * [http://www.codento.com/people/mtr/genscript/ GNU Enscript], commonly available on Unix but somewhat unsupported on Windows
 * [http://silvercity.sourceforge.net/ SilverCity], legacy system, some versions can be [http://trac.edgewall.org/wiki/TracFaq#why-is-my-css-code-not-being-highlighted-even-though-i-have-silvercity-installed problematic]


To activate syntax coloring, simply install either one (or more) of these packages (see [#ExtraSoftware] section below).
If none of these packages is available, Trac will display the data as plain text. 


=== About Pygments ===

Starting with trac 0.11 [http://pygments.org/ pygments] will be the new default highlighter. It''s a highlighting library implemented in pure python, very fast, easy to extend and [http://pygments.org/docs/ well documented].

The Pygments default style can specified in the [TracIni#mimeviewer-section mime-viewer] section of trac.ini. The default style can be overridden by setting a Style preference on the [/prefs/pygments preferences page]. 

It''s very likely that the list below is outdated because the list of supported pygments lexers is growing weekly. Just have a look at the page of [http://pygments.org/docs/lexers/ supported lexers] on the pygments webpage.


== Syntax Coloring Support ==

=== Known MIME Types

[[KnownMimeTypes]]

Note that the rich content may be directly //rendered// instead of syntax highlighted. This usually depends on which auxiliary packages are installed and on which components are activated in your setup. For example a `text/x-rst` document will be rendered via `docutils` if it is installed and the `trac.mimeview.rst.ReStructuredTextRenderer` is not disabled, and will be syntax highlighted otherwise.

In a similar way, a document with the mimetype `text/x-trac-wiki` is rendered using the Trac wiki formatter, unless the `trac.mimeview.api.WikiTextRenderer` component is disabled.

HTML documents are directly rendered only if the `render_unsafe_html` settings are enabled in the TracIni (those settings are present in multiple sections, as there are different security concerns depending where the document comes from). If you want to ensure that an HTML document gets syntax highlighted and not rendered, use the `text/xml` mimetype.

If mimetype such as ''svn:mime-type'' is set to ''text/plain'', there is no coloring even if file is known type like ''java''.

=== List of Languages Supported, by Highlighter #language-supported

This list is only indicative.

||                 ||= !SilverCity   =||= Enscript      =||= Pygments =||
|| Ada             ||                 ||  ✓              ||     ||
|| Asm             ||                 ||  ✓              ||     ||
|| Apache Conf     ||                 ||                 ||  ✓  ||
|| ASP             ||  ✓              ||  ✓              ||     ||
|| C               ||  ✓              ||  ✓              ||  ✓  ||
|| C#              ||                 ||  ✓ ^[#a1 (1)]^  ||  ✓  ||
|| C++             ||  ✓              ||  ✓              ||  ✓  ||
|| CMake           ||  ?              ||  ?              ||  ✓  ||
|| Java            ||  ✓ ^[#a2 (2)]^  ||  ✓              ||  ✓  ||
|| Awk             ||                 ||  ✓              ||     ||
|| Boo             ||                 ||                 ||  ✓  ||
|| CSS             ||  ✓              ||                 ||  ✓  ||
|| Python Doctests ||                 ||                 ||  ✓  ||
|| Diff            ||                 ||  ✓              ||  ✓  ||
|| Eiffel          ||                 ||  ✓              ||     ||
|| Elisp           ||                 ||  ✓              ||     ||
|| Fortran         ||                 ||  ✓ ^[#a1 (1)]^  ||  ✓  ||
|| Haskell         ||                 ||  ✓              ||  ✓  ||
|| Genshi          ||                 ||                 ||  ✓  ||
|| HTML            ||  ✓              ||  ✓              ||  ✓  ||
|| IDL             ||                 ||  ✓              ||     ||
|| INI             ||                 ||                 ||  ✓  ||
|| Javascript      ||  ✓              ||  ✓              ||  ✓  ||
|| Lua             ||                 ||                 ||  ✓  ||
|| m4              ||                 ||  ✓              ||     ||
|| Makefile        ||                 ||  ✓              ||  ✓  ||
|| Mako            ||                 ||                 ||  ✓  ||
|| Matlab ^[#a3 (3)]^  ||             ||  ✓              ||  ✓  ||
|| Mygthy          ||                 ||                 ||  ✓  ||
|| Objective-C     ||                 ||  ✓              ||  ✓  ||
|| OCaml           ||                 ||                 ||  ✓  ||
|| Pascal          ||                 ||  ✓              ||  ✓  ||
|| Perl            ||  ✓              ||  ✓              ||  ✓  ||
|| PHP             ||  ✓              ||                 ||  ✓  ||
|| PSP             ||  ✓              ||                 ||     ||
|| Pyrex           ||                 ||  ✓              ||     ||
|| Python          ||  ✓              ||  ✓              ||  ✓  ||
|| Ruby            ||  ✓              ||  ✓ ^[#a1 (1)]^  ||  ✓  ||
|| Scheme          ||                 ||  ✓              ||  ✓  ||
|| Shell           ||                 ||  ✓              ||  ✓  ||
|| Smarty          ||                 ||                 ||  ✓  ||
|| SQL             ||  ✓              ||  ✓              ||  ✓  ||
|| Troff           ||                 ||  ✓              ||  ✓  ||
|| TCL             ||                 ||  ✓              ||     ||
|| Tex             ||                 ||  ✓              ||  ✓  ||
|| Verilog         ||  ✓ ^[#a2 (2)]^  ||  ✓              ||     ||
|| VHDL            ||                 ||  ✓              ||     ||
|| Visual Basic    ||                 ||  ✓              ||  ✓  ||
|| VRML            ||                 ||  ✓              ||     ||
|| XML             ||  ✓              ||                 ||  ✓  ||



''''[=#a1 (1)] Not included in the Enscript distribution.  Additional highlighting rules can be obtained for
[http://neugierig.org/software/ruby/ Ruby],
[http://wiki.hasno.info/index.php/Csharp.st C#],
[http://wiki.hasno.info/index.php/F90.st Fortran 90x/2003]

''''[=#a2 (2)] since Silvercity 0.9.7 released on 2006-11-23

''''[=#a3 (3)] By default `.m` files are considered Objective-C files. In order to treat `.m` files as MATLAB files, add "text/matlab:m" to the "mime_map" setting in the [wiki:TracIni#mimeviewer-section "[mimeviewer] section of trac.ini"].

== Extra Software ==
 * GNU Enscript — http://directory.fsf.org/GNU/enscript.html
 * GNU Enscript for Windows — http://gnuwin32.sourceforge.net/packages/enscript.htm
 * !SilverCity — http://silvercity.sf.net/
 * **Pygments — http://pygments.org/**

----
See also: WikiProcessors, WikiFormatting, TracWiki, TracBrowser
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracTickets',3,1352317660453000,'trac','127.0.0.1','= The Trac Ticket System =
[[TracGuideToc]]

The Trac ticket database provides simple but effective tracking of issues and bugs within a project.

As the central project management element of Trac, tickets can be used for ''''''project tasks'''''', ''''''feature requests'''''', ''''''bug reports'''''', ''''''software support issues'''''' among others. 

As with the TracWiki, this subsystem has been designed with the goal of making user contribution and participation as simple as possible. It should be as easy as possible to report bugs, ask questions, suggest improvements and discuss resolutions.

An issue is assigned to a person who must resolve it or reassign the ticket to someone else.
All tickets can be edited, annotated, assigned, prioritized and discussed at any time.

[=#edit-permissions]
However, some Trac installations may put restrictions in place about who can change what. For example, the default installation doesn''t permit to non-authenticated users ("anonymous" users) to change anything, even to comment on an issue, for obvious spam prevention reasons. Check the local contributing policy, which you can usually find on the front page WikiStart, or contact your local Trac administrator.

== Ticket Fields ==

A  ticket contains the following information attributes:
 
 * ''''''Reporter'''''' — The author of the ticket.
 * ''''''Type'''''' — The nature of the ticket (for example, defect or enhancement request). See TicketTypes for more details.
 * ''''''Component'''''' — The project module or subsystem this ticket concerns.
 * ''''''Version'''''' — Version of the project that this ticket pertains to.
 * ''''''Keywords'''''' — Keywords that a ticket is marked with. Useful for searching and report generation.
 * ''''''Priority'''''' — The importance of this issue, ranging from ''''trivial'''' to ''''blocker''''. A pull-down if different priorities where defined.
 * ''''''Milestone'''''' — When this issue should be resolved at the latest. A pull-down menu containing a list of milestones.
 * ''''''Assigned to/Owner'''''' — Principal person responsible for handling the issue.
 * ''''''Cc'''''' — A comma-separated list of other users or E-Mail addresses to notify. ''''Note that this does not imply responsiblity or any other policy.''''
 * ''''''Resolution'''''' — Reason for why a ticket was closed. One of {{{fixed}}}, {{{invalid}}}, {{{wontfix}}}, {{{duplicate}}}, {{{worksforme}}}.
 * ''''''Status'''''' — What is the current status? One of {{{new}}}, {{{assigned}}}, {{{closed}}}, {{{reopened}}}.
 * ''''''Summary'''''' — A brief description summarizing the problem or issue. Simple text without WikiFormatting.
 * ''''''Description'''''' — The body of the ticket. A good description should be specific, descriptive and to the point. Accepts WikiFormatting.

''''''Notes:'''''' 
 - Versions of Trac prior to 0.9 did not have the ''''type'''' field, but instead provided a ''''severity'''' field and different default values for the ''''priority'''' field. This change was done to simplify the ticket model by removing the somewhat blurry distinction between ''''priority'''' and ''''severity''''. However, the old model is still available if you prefer it: just add/modify the default values of the ''''priority'''' and ''''severity'''', and optionally hide the ''''type'''' field by removing all the possible values through [wiki:TracAdmin trac-admin].

 - the [trac:TicketTypes type], [trac:TicketComponent component], version, priority and severity fields can be managed with [wiki:TracAdmin trac-admin] or with the [trac:WebAdmin WebAdmin] plugin.

 - Description of the builtin ''''priority'''' values is available at [trac:TicketTypes#Whyistheseverityfieldgone TicketTypes]

== Changing and Commenting Tickets ==

With appropriate permissions, as already mentioned [#edit-permissions above], a ticket entered into Trac can at any time be modified by ''''''annotating''''''.

Then, annotations like changes and comments to the ticket are logged as a part of the ticket itself. When viewing a ticket, the history of changes will appear below the main ticket area.

Comment editing (available since 0.12) is meant to be used to make small corrections to comments, like fixing formatting, forgotten WikiFormatting or spelling errors, not major edits. For longer edits, you should be adding a new comment instead. Editing a comment will not produce a new entry on [/timeline] while entering a new comment or other changes will do.

All edits (field changes, new comments, comment edits) update the "last changed" time of the ticket.


''''''Notes:'''''' 
 - An important feature is being able to use TracLinks and WikiFormatting in ticket descriptions and comments. Use TracLinks to refer to other issues, changesets or files to make your ticket more specific and easier to understand.

 - See TracNotification for how to configure email notifications of ticket changes.

 - See TracWorkflow for information about the state transitions (ticket lifecycle), and how this workflow can be customized.

== Default Values for Drop-Down Fields ==

The option selected by default for the various drop-down fields can be set in [wiki:TracIni trac.ini], in the `[ticket]` section:

 * `default_component`: Name of the component selected by default
 * `default_milestone`: Name of the default milestone
 * `default_priority`: Default priority value
 * `default_severity`: Default severity value
 * `default_type`: Default ticket type
 * `default_version`: Name of the default version
 * `default_owner`: Name of the default owner. If set to the text "< default >" (the default value), the component owner is used.

If any of these options are omitted, the default value will either be the first in the list, or an empty value, depending on whether the field in question is required to be set.  Some of these can be chosen through the [trac:WebAdmin WebAdmin] plugin in the "Ticket System" section (others in the [[wiki:TracIni#ticket-section|"[ticket]"]] section in `trac.ini`).


== Hiding Fields and Adding Custom Fields ==

Many of the default ticket fields can be hidden from the ticket web interface simply by removing all the possible values through [wiki:TracAdmin trac-admin]. This of course only applies to drop-down fields, such as ''''type'''', ''''priority'''', ''''severity'''', ''''component'''', ''''version'''' and ''''milestone''''.

Trac also lets you add your own custom ticket fields. See TracTicketsCustomFields for more information.


== Assign-to as Drop-Down List ==

If the list of possible ticket owners is finite, you can change the ''''assign-to'''' ticket field from a text input to a drop-down list. This is done by setting the `restrict_owner` option of the `[ticket]` section in [wiki:TracIni trac.ini] to “true”. In that case, Trac will use the list of all users who have accessed the project to populate the drop-down field.

To appear in the dropdown list, a user needs be registered with the project, ''''i.e.'''' a user session should exist in the database. Such an entry is automatically created in the database the first time the user submits a change in the project, for example when editing the user''s details in the ''''Settings'''' page, or simply by authenticating if the user has a login. Also, the user must have `TICKET_MODIFY` [TracPermissions permissions].

''''''Notes:'''''' 
 - See [http://pacopablo.com/wiki/pacopablo/blog/set-assign-to-drop-down Populating Assign To Drop Down] on how to add user entries at database level

 - If you need serious flexibility and aren''t afraid of a little plugin coding of your own, see [http://trac-hacks.org/wiki/FlexibleAssignToPlugin FlexibleAssignTo] (disclosure: I''m the author)

 -  Activating this option may cause some performance degradation, read more about this in the [trac:TracPerformance#Configuration Trac performance] page.

== Preset Values for New Tickets ==

To create a link to the new-ticket form filled with preset values, you need to call the `/newticket?` URL with `variable=value` separated by `&`. 

Possible variables are :

 * ''''''type'''''' — The type droplist
 * ''''''reporter'''''' — Name or email of the reporter
 * ''''''summary'''''' — Summary line for the ticket
 * ''''''description'''''' — Long description of the ticket
 * ''''''component'''''' — The component droplist
 * ''''''version'''''' — The version droplist
 * ''''''severity'''''' — The severity droplist
 * ''''''keywords'''''' — The keywords 
 * ''''''priority'''''' — The priority droplist
 * ''''''milestone'''''' — The milestone droplist
 * ''''''owner'''''' — The person responsible for the ticket
 * ''''''cc'''''' — The list of emails for notifying about the ticket change

Example: ''''`[/newticket?summary=Compile%20Error&version=1.0&component=gui]`''''[[BR]]

----
See also:  TracGuide, TracWiki, TracTicketsCustomFields, TracNotification, TracReports, TracQuery
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracTicketsCustomFields',2,1352317660475000,'trac','127.0.0.1','= Custom Ticket Fields =
Trac supports adding custom, user-defined fields to the ticket module. Using custom fields, you can add typed, site-specific properties to tickets.

== Configuration ==
Configuring custom ticket fields is done in the [wiki:TracIni trac.ini] file. All field definitions should be under a section named `[ticket-custom]`.

The syntax of each field definition is:
{{{
 FIELD_NAME = TYPE
 (FIELD_NAME.OPTION = VALUE)
 ...
}}}
The example below should help to explain the syntax.

=== Available Field Types and Options ===
 * ''''''text'''''': A simple (one line) text field.
   * label: Descriptive label.
   * value: Default value.
   * order: Sort order placement. (Determines relative placement in forms with respect to other custom fields.)
   * format: One of: 
     * `plain` for plain text 
     * `wiki` to interpret the content as WikiFormatting (''''since 0.11.3'''') 
     * `reference` to treat the content as a queryable value (''''since 1.0'''') 
     * `list` to interpret the content as a list of queryable values, separated by whitespace (''''since 1.0'''')
 * ''''''checkbox'''''': A boolean value check box.
   * label: Descriptive label.
   * value: Default value (0 or 1).
   * order: Sort order placement.
 * ''''''select'''''': Drop-down select box. Uses a list of values.
   * label: Descriptive label.
   * options: List of values, separated by ''''''|'''''' (vertical pipe).
   * value: Default value (one of the values from options).
   * order: Sort order placement.
 * ''''''radio'''''': Radio buttons. Essentially the same as ''''''select''''''.
   * label: Descriptive label.
   * options: List of values, separated by ''''''|'''''' (vertical pipe).
   * value: Default value (one of the values from options).
   * order: Sort order placement.
 * ''''''textarea'''''': Multi-line text area.
   * label: Descriptive label.
   * value: Default text.
   * cols: Width in columns.
   * rows: Height in lines.
   * order: Sort order placement.
   * format: Either `plain` for plain text or `wiki` to interpret the content as WikiFormatting. (''''since 0.11.3'''')

=== Sample Config ===
{{{
[ticket-custom]

test_one = text
test_one.label = Just a text box

test_two = text
test_two.label = Another text-box
test_two.value = Default [mailto:joe@nospam.com owner]
test_two.format = wiki

test_three = checkbox
test_three.label = Some checkbox
test_three.value = 1

test_four = select
test_four.label = My selectbox
test_four.options = one|two|third option|four
test_four.value = two

test_five = radio
test_five.label = Radio buttons are fun
test_five.options = uno|dos|tres|cuatro|cinco
test_five.value = dos

test_six = textarea
test_six.label = This is a large textarea
test_six.value = Default text
test_six.cols = 60
test_six.rows = 30
}}}

''''Note: To make entering an option for a `select` type field optional, specify a leading `|` in the `fieldname.options` option.''''

=== Reports Involving Custom Fields ===

Custom ticket fields are stored in the `ticket_custom` table, not in the `ticket` table. So to display the values from custom fields in a report, you will need a join on the 2 tables. Let''s use an example with a custom ticket field called `progress`.

{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, owner, c.value AS progress
  FROM ticket t, enum p, ticket_custom c
  WHERE status IN (''assigned'') AND t.id = c.ticket AND c.name = ''progress''
AND p.name = t.priority AND p.type = ''priority''
  ORDER BY p.value
}}}
''''''Note'''''' that this will only show tickets that have progress set in them, which is ''''''not the same as showing all tickets''''''. If you created this custom ticket field ''''after'''' you have already created some tickets, they will not have that field defined, and thus they will never show up on this ticket query. If you go back and modify those tickets, the field will be defined, and they will appear in the query. If that''s all you want, you''re set.

However, if you want to show all ticket entries (with progress defined and without), you need to use a `JOIN` for every custom field that is in the query.
{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, component, version, milestone, severity,
   (CASE status WHEN ''assigned'' THEN owner||'' *'' ELSE owner END) AS owner,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter,
  (CASE WHEN c.value = ''0'' THEN ''None'' ELSE c.value END) AS progress
  FROM ticket t
     LEFT OUTER JOIN ticket_custom c ON (t.id = c.ticket AND c.name = ''progress'')
     JOIN enum p ON p.name = t.priority AND p.type=''priority''
  WHERE status IN (''new'', ''assigned'', ''reopened'')
  ORDER BY p.value, milestone, severity, time
}}}

Note in particular the `LEFT OUTER JOIN` statement here.

=== Updating the database ===

As noted above, any tickets created before a custom field has been defined will not have a value for that field. Here''s a bit of SQL (tested with SQLite) that you can run directly on the Trac database to set an initial value for custom ticket fields. Inserts the default value of ''None'' into a custom field called ''request_source'' for all tickets that have no existing value:

{{{
#!sql
INSERT INTO ticket_custom
   (ticket, name, value)
   SELECT 
      id AS ticket,
      ''request_source'' AS name,
      ''None'' AS value
   FROM ticket 
   WHERE id NOT IN (
      SELECT ticket FROM ticket_custom
   );
}}}

If you added multiple custom fields at different points in time, you should be more specific in the subquery on table {{{ticket}}} by adding the exact custom field name to the query:

{{{
#!sql
INSERT INTO ticket_custom
   (ticket, name, value)
   SELECT 
      id AS ticket,
      ''request_source'' AS name,
      ''None'' AS value
   FROM ticket 
   WHERE id NOT IN (
      SELECT ticket FROM ticket_custom WHERE name = ''request_source''
   );
}}}

----
See also: TracTickets, TracIni',NULL,NULL);
INSERT INTO "wiki" VALUES('TracUnicode',2,1352317660497000,'trac','127.0.0.1','= Unicode Support in Trac =
[[TracGuideToc]]

Trac stores all text using UTF-8 encoding, including text in tickets and wiki pages. Internal processing of text uses true Unicode representations.

As such, it supports most (all?) commonly used character encodings.

If the default encoding in your source code repository is not UTF-8, you can specify it in the [TracIni#trac-section trac.ini], for example:
{{{
default_charset = gbk
}}}

You also must make sure that your [trac:DatabaseBackend database backend] stores its data in UTF-8; otherwise strange things will happen.

To convert your database to UTF-8, the easiest way is to dump the database, convert the dump into UTF-8 and then import the converted dump back into the database.[[BR]]
You can use [http://www.gnu.org/software/libiconv/documentation/libiconv/iconv.1.html iconv] to convert the dump.


== Examples ==

=== Arabic ===
تراك يقوم بحفظ كل الكلمات باستخدام صيغة UTF-8، بما في ذلك الكلمات المستخدمة في صفحات  التيكت والويكي.

=== Bulgarian ===
Българският език работи ли?

=== Česky ===
Čeština v kódování UTF-8, žádný problém.

=== Chinese ===
Traditional: 繁體中文, 漢字測試; Simplified: 简体中文，汉字测试

=== Croatian ===
Ako podržava srpski i slovenski mora podržavati i Hrvatski - čćžšđ ČĆŽŠĐ 

=== English ===
Yes indeed, Trac supports English. Fully.

=== Français ===
Il est possible d''écrire en Français : à, ç, û, ...

=== German ===
Trac-Wiki muß auch deutsche Umlaute richtig anzeigen: ö, ä, ü, Ä, Ö, Ü; und das scharfe ß

=== Greek ===
Τα Ελληνικά υποστηρίζονται επαρκώς επίσης.

=== Hebrew ===
אני יכול לאכול זכוכית וזה לא מזיק לי

=== Hindi ===
अब हिन्दी में।

=== Hungarian ===
Árvíztűrő tükörfúrógép

=== Icelandic ===
Ævar sagði við ömmu sína: Sjáðu hvað ég er stór!

=== Japanese ===
漢字 ひらがな カタカナ ﾊﾝｶｸｶﾅ 日本語試験

=== Korean ===
이번에는 한글로 써보겠습니다. 잘 보이나요? 한글

=== Latvian ===

Latviešu valoda arī strādā!

=== Lithuanian ===
Sudalyvaukime ir mes. Ar veikia lietuviškos raidės? ąčęėįšųūž ĄČĘĖĮŠŲŪŽ Žinoma, kad veikia :)
Kas tie mes?

=== Persian (Farsi) ===
این یک متن فارسی است ولی امکان نوشتن مستقیم فارسی نیست چون حالت متن از راست به چپ و جود ندارد برای فارسی نوشتن باید از HTML استفاده کنید.
{{{
#!html
<div dir="rtl">
}}}
این نمونه یک متن از راست به چپ فارسی است که در HTML نوشته شده تا اعداد 12345 و حروف لاتین ABCDEF در محل خودشان نمایش داده شوند.
{{{
#!html
</div>
}}}

=== Polish ===
Pchnąć w tę łódź jeża lub osiem skrzyń fig; Nocna gżegżółka zawsze dzienną przekuka.

=== Portuguese ===
É possível guardar caracteres especias da língua portuguesa, incluindo o símbolo da moeda européia ''€'', trema ''ü'', crase ''à'', agudos ''áéíóú'', circunflexos ''âêô'', til ''ãõ'', cedilha ''ç'', ordinais ''ªº'', grau ''°¹²³''.

=== Russian ===
Проверка русского языка: кажется работает... И буква "ё" есть...

=== Serbian ===
Podržan, uprkos činjenici da se za njegovo pisanje koriste чак два алфабета.

=== Slovenian ===
Ta suhi škafec pušča vodo že od nekdaj!

=== Spanish ===
Esto es un pequeño texto en Español, donde el veloz murciélago hindú comía cardlllo y kiwi

=== Swedish ===
Räven raskar över isen med luva på.

=== Thai ===
Trac แสดงภาษาไทยได้อย่างถูกต้อง!

=== Ukrainian ===
Перевірка української мови...

=== Urdu ===
ٹریک اردو بھی سپورٹ کرتا ہے۔

=== Vietnamese ===
Viết tiếng Việt cũng được.
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracUpgrade',3,1352317660508000,'trac','127.0.0.1','= Upgrade Instructions =
[[TracGuideToc]]
[[PageOutline(2-4,,inline,unnumbered)]]

== Instructions ==

Typically, there are seven steps involved in upgrading to a newer version of Trac:

=== 1. Bring your server off-line

It is not a good idea to update a running server: the server processes may have parts of the current packages cached in memory, and updating the code will likely trigger [#ZipImportError internal errors]. 

=== 2. Update the Trac Code === #UpdatetheTracCode

Get the new version as described in TracInstall, or your operating system specific procedure.

If you already have a 0.11 version of Trac installed via `easy_install`, it might be easiest to also use `easy_install` to upgrade your Trac installation:

{{{
# easy_install --upgrade Trac==0.12
}}}

If you do a manual (not operating system-specific) upgrade, you should also stop any running Trac servers before the installation. Doing "hot" upgrades is not advised, especially on Windows ([trac:#7265]).

You may also want to remove the pre-existing Trac code by deleting the `trac` directory from the Python `lib/site-packages` directory, or remove Trac `.egg` files from former versions.
The location of the site-packages directory depends on the operating system and the location in which Python was installed. However, the following locations are typical:
 * on Linux: `/usr/lib/python2.X/site-packages`
 * on Windows: `C:\Python2.X\lib\site-packages`
 * on MacOSX: `/Library/Python/2.X/site-packages`

You may also want to remove the Trac `cgi-bin`, `htdocs`, `templates` and `wiki-default` directories that are commonly found in a directory called `share/trac`. (The exact location depends on your platform.)

This cleanup is not mandatory, but makes it easier to troubleshoot issues later on, as you won''t waste your time looking at code or templates from a previous release that are not being used anymore... As usual, make a backup before actually deleting things.

=== 3. Upgrade the Trac Environment === #UpgradetheTracEnvironment

Environment upgrades are not necessary for minor version releases unless otherwise noted. 

After restarting, Trac should show the instances which need a manual upgrade via the automated upgrade scripts to ease the pain. These scripts are run via [TracAdmin trac-admin]:
{{{
trac-admin /path/to/projenv upgrade
}}}

This command will do nothing if the environment is already up-to-date.

Note that a backup of your database will be performed automatically prior to the upgrade. 
This feature is relatively new for the PostgreSQL or MySQL database backends, so if it fails, you will have to backup the database manually. Then, to perform the actual upgrade, run:
{{{
trac-admin /path/to/projenv upgrade --no-backup
}}}

=== 4. Update the Trac Documentation === #UpdatetheTracDocumentation

Every [TracEnvironment Trac environment] includes a copy of the Trac documentation for the installed version. As you probably want to keep the included documentation in sync with the installed version of Trac, [TracAdmin trac-admin] provides a command to upgrade the documentation:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

Note that this procedure will leave your `WikiStart` page intact.


=== 5. Refresh static resources ===

If you have set up a web server to give out static resources directly (accessed using the `/chrome/` URL) then you will need to refresh them using the same command:
{{{
trac-admin /path/to/env deploy /deploy/path
}}}
this will extract static resources and CGI scripts (`trac.wsgi`, etc) from new Trac version and its plugins into `/deploy/path`.

Some web browsers (IE, Opera) cache CSS and Javascript files aggressively, so you may need to instruct your users to manually erase the contents of their browser''s cache, a forced refreshed (`<F5>`) should be enough.
{{{#!comment
Remove above note once #9936 is fixed.
}}}

=== 6. Steps specific to a given Trac version  ===
==== Upgrading from Trac 0.12 to Trac 1.0 ==== #to1.0

The Trac components for Subversion support are no longer enabled by default. To enable the svn support, you need to make sure the `tracopt.versioncontrol.svn` components are enabled, for example by setting the following in the TracIni:
{{{
[components]
tracopt.versioncontrol.svn.* = enabled
}}}
The upgrade procedure should take care of this and change the TracIni appropriately, unless you already had the svn components explicitly disabled.

Another step in the automatic upgrade will change the way the attachments are stored. If you''re a bit paranoid, you might want to take a backup of the `attachments` directory before upgrading (but if you are, you already did a full copy of the environment, no?). In case the `attachments` directory contains some files which are //not// attachments, the last step of the migration to the new layout will fail: the deletion of the now unused `attachments` directory can''t be done if there are still files and folders in it. You may ignore this error, but better go have a look to these files, move them elsewhere and remove the `attachments` directory manually to cleanup the environment. The attachments themselves are now all located in your environment below the `files/attachments` directory.


==== Upgrading from Trac 0.11 to Trac 0.12 ====

===== Python 2.3 no longer supported =====
The minimum supported version of python is now 2.4

===== SQLite v3.x required =====
SQLite v2.x is no longer supported. If you still use a Trac database of this format, you''ll need to convert it to SQLite v3.x first. See [trac:PySqlite#UpgradingSQLitefrom2.xto3.x] for details.

===== PySqlite 2 required =====
PySqlite 1.1.x is no longer supported. Please install 2.5.5 or later if possible (see [#Tracdatabaseupgrade Trac database upgrade] below).

===== Multiple Repository Support =====
The latest version includes support for multiple repositories. If you plan to add more repositories to your Trac instance, please refer to TracRepositoryAdmin#Migration.

This may be of interest to users with only one repository, since there''s now a way to avoid the potentially costly resync check at every request.

===== Resynchronize the Trac Environment Against the Source Code Repository =====

Each [TracEnvironment Trac environment] must be resynchronized against the source code repository in order to avoid errors such as "[http://trac.edgewall.org/ticket/6120 No changeset ??? in the repository]" while browsing the source through the Trac interface:

{{{
trac-admin /path/to/projenv repository resync ''*''
}}}

===== Improved repository synchronization =====
In addition to supporting multiple repositories, there is now a more efficient method for synchronizing Trac and your repositories.

While you can keep the same synchronization as in 0.11 adding the post-commit hook as outlined in TracRepositoryAdmin#Synchronization and TracRepositoryAdmin#ExplicitSync will allow more efficient synchronization and is more or less required for multiple repositories.

Note that if you were using the `trac-post-commit-hook`, ''''you''re strongly advised to upgrade it'''' to the new hook documented in the above references, as the old hook will not work with anything else than the default repository and even for this case, it won''t trigger the appropriate notifications.

===== Authz permission checking =====
The authz permission checking has been migrated to a fine-grained permission policy. If you use authz permissions (aka `[trac] authz_file` and `authz_module_name`), you must add `AuthzSourcePolicy` in front of your permission policies in `[trac] permission_policies`. You must also remove `BROWSER_VIEW`, `CHANGESET_VIEW`, `FILE_VIEW` and `LOG_VIEW` from your global permissions (with `trac-admin $ENV permission remove` or the "Permissions" admin panel).

===== Microsecond timestamps =====
All timestamps in database tables (except the `session` table) have been changed from "seconds since epoch" to "microseconds since epoch" values. This change should be transparent to most users, except for custom reports. If any of your reports use date/time columns in calculations (e.g. to pass them to `datetime()`), you must divide the values retrieved from the database by 1''000''000. Similarly, if a report provides a calculated value to be displayed as a date/time (i.e. with a column named "time", "datetime", "changetime", "date", "created" or "modified"), you must provide a microsecond timestamp, that is, multiply your previous calculation with 1''000''000.

==== Upgrading from Trac 0.10 to Trac 0.11 ====
===== Site Templates and Styles =====
The templating engine has changed in 0.11 to Genshi, please look at TracInterfaceCustomization for more information.

If you are using custom CSS styles or modified templates in the `templates` directory of the TracEnvironment, you will need to convert them to the Genshi way of doing things. To continue to use your style sheet, follow the instructions at TracInterfaceCustomization#SiteAppearance.

===== Trac Macros, Plugins =====
The Trac macros will need to be adapted, as the old-style wiki-macros are not supported anymore (due to the drop of [trac:ClearSilver] and the HDF); they need to be converted to the new-style macros, see WikiMacros. When they are converted to the new style, they need to be placed into the plugins directory instead and not wiki-macros, which is no longer scanned for macros or plugins.

===== For FCGI/WSGI/CGI users =====
For those who run Trac under the CGI environment, run this command in order to obtain the trac.*gi file:
{{{
trac-admin /path/to/env deploy /deploy/directory/path
}}}

This will create a deploy directory with the following two subdirectories: `cgi-bin` and `htdocs`. Then update your Apache configuration file `httpd.conf` with this new `trac.cgi` location and `htdocs` location.

===== Web Admin plugin integrated =====
If you had the webadmin plugin installed, you can uninstall it as it is part of the Trac code base since 0.11.

=== 7. Restart the Web Server === #RestarttheWebServer

If you are not running [wiki:TracCgi CGI], reload the new Trac code by restarting your web server.

== Known Issues ==

Things you should pay attention to, while upgrading.

=== Customized Templates

Trac supports customization of its Genshi templates by placing copies of the templates in the `<env>/templates` folder of your [TracEnvironment environment] or in a common location specified in the [[TracIni#GlobalConfiguration| [inherit] templates_dir]] configuration setting. If you choose to do so, be wary that you will need to repeat your changes manually on a copy of the new templates when you upgrade to a new release of Trac (even a minor one), as the templates will likely evolve. So keep a diff around ;-)

The preferred way to perform TracInterfaceCustomization is to write a custom plugin doing an appropriate `ITemplateStreamFilter` transformation, as this is more robust in case of changes: we usually won''t modify element `id`s or change CSS `class`es, and if we have to do so, this will be documented in the TracDev/ApiChanges pages.

=== !ZipImportError ===

Due to internal caching of zipped packages,  whenever the content of the packages change on disk, the in-memory zip index will no longer match and you''ll get irrecoverable !ZipImportError errors. Better anticipate and bring your server down for maintenance before upgrading.
See [trac:#7014] for details.

=== Wiki Upgrade ===
`trac-admin` will not delete or remove default wiki pages that were present in a previous version but are no longer in the new version.

=== Trac database upgrade ===

A known issue in some versions of PySqlite (2.5.2-2.5.4) prevents the trac-admin upgrade script from successfully upgrading the database format. It is advised to use either a newer or older version of the sqlite python bindings to avoid this error. For more details see ticket [trac:#9434].

=== parent dir ===
If you use a trac parent env configuration and one of the plugins in one child does not work, none of the children work.

== Related topics

=== Upgrading Python ===

Upgrading Python to a newer version will require reinstallation of Python packages: Trac of course; also [http://pypi.python.org/pypi/setuptools easy_install], if you''ve been using that.  Assuming you''re using Subversion, you''ll also need to upgrade the Python bindings for svn.

==== Windows and Python 2.6 ====

If you''ve been using !CollabNet''s Subversion package, you may need to uninstall that in favor of [http://alagazam.net/ Alagazam], which has the Python bindings readily available (see TracSubversion).  The good news is, that works with no tweaking.

=== Changing Database Backend ===
==== SQLite to PostgreSQL ====

The [http://trac-hacks.org/wiki/SqliteToPgScript sqlite2pg] script on [http://trac-hacks.org trac-hacks.org] has been written to assist in migrating a SQLite database to a PostgreSQL database

=== Upgrading from older versions of Trac === #OlderVersions

For upgrades from versions older than Trac 0.10, refer first to [trac:wiki:0.10/TracUpgrade#SpecificVersions].

-----
See also: TracGuide, TracInstall
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracWiki',2,1352317660519000,'trac','127.0.0.1','
= The Trac Wiki System =
[[TracGuideToc]]

Trac has a built-in wiki system which you can use for organizing knowledge and information in a very flexible way by [WikiNewPage creating pages] containing an intuitive and easy to learn textual markup. This text markup is also used in all other parts of the system, not only in [wiki:TitleIndex wiki pages], but also in [wiki:TracTickets ticket] description and comments, [wiki:TracChangeset check-in log messages], [wiki:TracRoadmap milestone] descriptions and [wiki:TracReports report] descriptions, even in third-party extensions.
It allows for formatted text and hyperlinks in and between all Trac modules.

Editing wiki text is easy, using any web browser and a simple [WikiFormatting formatting system], rather than more complex markup languages like HTML.  The reasoning behind its design is that HTML, with its large collection of nestable tags, is too complicated to allow fast-paced editing, and distracts from the actual content of the pages. Note though that Trac also supports [WikiHtml HTML], [WikiRestructuredText reStructuredText] and [http://www.textism.com/tools/textile/ Textile] as alternative markup formats, which can eventually be used in parts of a page (so called wiki “blocks”).

The main goal of the wiki is to make editing text easier and ''''encourage'''' people to contribute and annotate text content for a project. Trac also provides a simple toolbar to make formatting text even easier, and supports the [http://universaleditbutton.org/Universal_Edit_Button universal edit button] of your browser.

The wiki itself does not enforce any structure, but rather resembles a stack of empty sheets of paper, where you can organize information and documentation as you see fit, and later reorganize if necessary. 
As contributing to a wiki is essentially building hypertext, 
general advice regarding HTML authoring apply here as well.
For example, the ''''[http://www.w3.org/Provider/Style Style Guide for online hypertext]'''' explains how to think about the
[http://www.w3.org/Provider/Style/Structure.html overall structure of a work] 
and how to organize information [http://www.w3.org/Provider/Style/WithinDocument.html within each document]. One of the most important tip is “make your HTML page such that you can read it even if you don''t follow any links.”

Learn more about:
 * WikiFormatting rules, including advanced topics like WikiMacros and WikiProcessors
 * How to use WikiPageNames and other forms of TracLinks which are used to refer in a precise way to any resource within Trac

If you want to practice editing, please use the SandBox. Note that not all Trac wikis are editable by anyone, this depends on the local policy; check with your Trac administrators.

Before saving your changes, you can ''''Preview'''' the page or ''''Review the Changes'''' you''ve made.
You can get an automatic preview of the formatting as you type when you activate the ''''Edit Side-by-side'''' mode (you have to Preview the page for the setting to take effect). '''' There is a [wiki:/TracIni#trac-section configurable delay] between when you make your edit and when the automatic preview will update.''''

Some more information about wikis on the web:
 * A definition of [http://wikipedia.org/wiki/Wiki Wiki], in a famous wiki encyclopedia
 * The [http://c2.com/cgi/wiki?WikiHistory History] of the original wiki
 * A wiki page explaining [http://www.usemod.com/cgi-bin/mb.pl?WhyWikiWorks why wiki works]

----
See also: TracGuide
',NULL,NULL);
INSERT INTO "wiki" VALUES('TracWorkflow',2,1352317660541000,'trac','127.0.0.1','= The Trac Ticket Workflow System =
[[TracGuideToc]]

The Trac issue database provides a configurable workflow.

== The Default Ticket Workflow ==
=== Environments upgraded from 0.10 ===
When you run `trac-admin <env> upgrade`, your `trac.ini` will be modified to include a `[ticket-workflow]` section.
The workflow configured in this case is the original workflow, so that ticket actions will behave like they did in 0.10.

Graphically, that looks like this:

{{{#!Workflow width=500 height=240
leave = * -> *
leave.operations = leave_status
leave.default = 1
accept = new -> assigned
accept.permissions = TICKET_MODIFY
accept.operations = set_owner_to_self
resolve = new,assigned,reopened -> closed
resolve.permissions = TICKET_MODIFY
resolve.operations = set_resolution
reassign = new,assigned,reopened -> new
reassign.permissions = TICKET_MODIFY
reassign.operations = set_owner
reopen = closed -> reopened
reopen.permissions = TICKET_CREATE
reopen.operations = del_resolution
}}}

There are some significant "warts" in this; such as accepting a ticket sets it to ''assigned'' state, and assigning a ticket sets it to ''new'' state.  Perfectly obvious, right?
So you will probably want to migrate to "basic" workflow; [trac:source:trunk/contrib/workflow/migrate_original_to_basic.py contrib/workflow/migrate_original_to_basic.py] may be helpful.

=== Environments created with 0.11 ===
When a new environment is created, a default workflow is configured in your trac.ini.  This workflow is the basic workflow (described in `basic-workflow.ini`), which is somewhat different from the workflow of the 0.10 releases.

Graphically, it looks like this:

{{{#!Workflow width=700 height=300
leave = * -> *
leave.operations = leave_status
leave.default = 1
accept = new,assigned,accepted,reopened -> accepted
accept.permissions = TICKET_MODIFY
accept.operations = set_owner_to_self
resolve = new,assigned,accepted,reopened -> closed
resolve.permissions = TICKET_MODIFY
resolve.operations = set_resolution
reassign = new,assigned,accepted,reopened -> assigned
reassign.permissions = TICKET_MODIFY
reassign.operations = set_owner
reopen = closed -> reopened
reopen.permissions = TICKET_CREATE
reopen.operations = del_resolution
}}}

== Additional Ticket Workflows ==

There are several example workflows provided in the Trac source tree; look in [trac:source:trunk/contrib/workflow contrib/workflow] for `.ini` config sections.  One of those may be a good match for what you want. They can be pasted into the `[ticket-workflow]` section of your `trac.ini` file. However if you have existing tickets then there may be issues if those tickets have states that are not in the new workflow. 

Here are some [http://trac.edgewall.org/wiki/WorkFlow/Examples diagrams] of the above examples.

== Basic Ticket Workflow Customization ==

Note: Ticket "statuses" or "states" are not separately defined. The states a ticket can be in are automatically generated by the transitions defined in a workflow. Therefore, creating a new ticket state simply requires defining a state transition in the workflow that starts or ends with that state.

Create a `[ticket-workflow]` section in `trac.ini`.
Within this section, each entry is an action that may be taken on a ticket. 
For example, consider the `accept` action from `simple-workflow.ini`:
{{{
accept = new,accepted -> accepted
accept.permissions = TICKET_MODIFY
accept.operations = set_owner_to_self
}}}
The first line in this example defines the `accept` action, along with the states the action is valid in (`new` and `accepted`), and the new state of the ticket when the action is taken (`accepted`).
The `accept.permissions` line specifies what permissions the user must have to use this action.
The `accept.operations` line specifies changes that will be made to the ticket in addition to the status change when this action is taken.  In this case, when a user clicks on `accept`, the ticket owner field is updated to the logged in user.  Multiple operations may be specified in a comma separated list.

The available operations are:
 - del_owner -- Clear the owner field.
 - set_owner -- Sets the owner to the selected or entered owner.
   - ''''actionname''''`.set_owner` may optionally be set to a comma delimited list or a single value.
 - set_owner_to_self -- Sets the owner to the logged in user.
 - del_resolution -- Clears the resolution field
 - set_resolution -- Sets the resolution to the selected value.
   - ''''actionname''''`.set_resolution` may optionally be set to a comma delimited list or a single value. Example:
     {{{
resolve_new = new -> closed
resolve_new.name = resolve
resolve_new.operations = set_resolution
resolve_new.permissions = TICKET_MODIFY
resolve_new.set_resolution = invalid,wontfix
     }}}
 - leave_status -- Displays "leave as <current status>" and makes no change to the ticket.
''''''Note:'''''' Specifying conflicting operations (such as `set_owner` and `del_owner`) has unspecified results.

{{{
resolve_accepted = accepted -> closed
resolve_accepted.name = resolve
resolve_accepted.permissions = TICKET_MODIFY
resolve_accepted.operations = set_resolution
}}}

In this example, we see the `.name` attribute used.  The action here is `resolve_accepted`, but it will be presented to the user as `resolve`.

For actions that should be available in all states, `*` may be used in place of the state.  The obvious example is the `leave` action:
{{{
leave = * -> *
leave.operations = leave_status
leave.default = 1
}}}
This also shows the use of the `.default` attribute.  This value is expected to be an integer, and the order in which the actions are displayed is determined by this value.  The action with the highest `.default` value is listed first, and is selected by default.  The rest of the actions are listed in order of decreasing `.default` values.
If not specified for an action, `.default` is 0.  The value may be negative.

There are a couple of hard-coded constraints to the workflow.  In particular, tickets are created with status `new`, and tickets are expected to have a `closed` state.  Further, the default reports/queries treat any state other than `closed` as an open state.

While creating or modifying a ticket workfow, `contrib/workflow/workflow_parser.py` may be useful.  It can create `.dot` files that [http://www.graphviz.org GraphViz] understands to provide a visual description of the workflow.

This can be done as follows (your install path may be different).
{{{
cd /var/local/trac_devel/contrib/workflow/
sudo ./showworkflow /srv/trac/PlannerSuite/conf/trac.ini
}}}
And then open up the resulting `trac.pdf` file created by the script (it will be in the same directory as the `trac.ini` file).

An online copy of the workflow parser is available at http://foss.wush.net/cgi-bin/visual-workflow.pl

After you have changed a workflow, you need to restart apache for the changes to take effect. This is important, because the changes will still show up when you run your script, but all the old workflow steps will still be there until the server is restarted.

== Example: Adding optional Testing with Workflow ==

By adding the following to your [ticket-workflow] section of trac.ini you get optional testing.  When the ticket is in new, accepted or needs_work status you can choose to submit it for testing.  When it''s in the testing status the user gets the option to reject it and send it back to needs_work, or pass the testing and send it along to closed.  If they accept it then it gets automatically marked as closed and the resolution is set to fixed.  Since all the old work flow remains, a ticket can skip this entire section.

{{{
testing = new,accepted,needs_work,assigned,reopened -> testing
testing.name = Submit to reporter for testing
testing.permissions = TICKET_MODIFY

reject = testing -> needs_work
reject.name = Failed testing, return to developer

pass = testing -> closed
pass.name = Passes Testing
pass.operations = set_resolution
pass.set_resolution = fixed
}}}

=== How to combine the `tracopt.ticket.commit_updater` with the testing workflow ===

The [[trac:source:trunk/tracopt/ticket/commit_updater.py|tracopt.ticket.commit_updater]] is the optional component that [[TracRepositoryAdmin#trac-post-commit-hook|replaces the old trac-post-commit-hook]], in Trac 0.12.

By default it reacts on some keywords found in changeset message logs like ''''close'''', ''''fix'''' etc. and performs the corresponding workflow action.

If you have a more complex workflow, like the testing stage described above and you want the ''''closes'''' keyword to move the ticket to the ''''testing'''' status instead of the ''''closed'''' status, you need to adapt the code a bit. 

Have a look at the [[trac:wiki:0.11/TracWorkflow#How-ToCombineSVNtrac-post-commit-hookWithTestWorkflow|Trac 0.11 recipe]] for the `trac-post-commit-hook`, this will give you some ideas about how to modify the component.

== Example: Add simple optional generic review state ==

Sometimes Trac is used in situations where "testing" can mean different things to different people so you may want to create an optional workflow state that is between the default workflow''s `assigned` and `closed` states, but does not impose implementation-specific details. The only new state you need to add for this is a `reviewing` state. A ticket may then be "submitted for review" from any state that it can be reassigned. If a review passes, you can re-use the `resolve` action to close the ticket, and if it fails you can re-use the `reassign` action to push it back into the normal workflow.

The new `reviewing` state along with its associated `review` action looks like this:

{{{
review = new,assigned,reopened -> reviewing
review.operations = set_owner
review.permissions = TICKET_MODIFY
}}}

Then, to integrate this with the default Trac 0.11 workflow, you also need to add the `reviewing` state to the `accept` and `resolve` actions, like so:

{{{
accept = new,reviewing -> assigned
[…]
resolve = new,assigned,reopened,reviewing -> closed
}}}

Optionally, you can also add a new action that allows you to change the ticket''s owner without moving the ticket out of the `reviewing` state. This enables you to reassign review work without pushing the ticket back to the `new` status.

{{{
reassign_reviewing = reviewing -> *
reassign_reviewing.name = reassign review
reassign_reviewing.operations = set_owner
reassign_reviewing.permissions = TICKET_MODIFY
}}}

The full `[ticket-workflow]` configuration will thus look like this:

{{{
[ticket-workflow]
accept = new,reviewing -> assigned
accept.operations = set_owner_to_self
accept.permissions = TICKET_MODIFY
leave = * -> *
leave.default = 1
leave.operations = leave_status
reassign = new,assigned,accepted,reopened -> assigned
reassign.operations = set_owner
reassign.permissions = TICKET_MODIFY
reopen = closed -> reopened
reopen.operations = del_resolution
reopen.permissions = TICKET_CREATE
resolve = new,assigned,reopened,reviewing -> closed
resolve.operations = set_resolution
resolve.permissions = TICKET_MODIFY
review = new,assigned,reopened -> reviewing
review.operations = set_owner
review.permissions = TICKET_MODIFY
reassign_reviewing = reviewing -> *
reassign_reviewing.operations = set_owner
reassign_reviewing.name = reassign review
reassign_reviewing.permissions = TICKET_MODIFY
}}}

== Example: Limit the resolution options for a new ticket ==

The above resolve_new operation allows you to set the possible resolutions for a new ticket.  By modifying the existing resolve action and removing the new status from before the `->` we then get two resolve actions.  One with limited resolutions for new tickets, and then the regular one once a ticket is accepted.

{{{
resolve_new = new -> closed
resolve_new.name = resolve
resolve_new.operations = set_resolution
resolve_new.permissions = TICKET_MODIFY
resolve_new.set_resolution = invalid,wontfix,duplicate

resolve = assigned,accepted,reopened -> closed
resolve.operations = set_resolution
resolve.permissions = TICKET_MODIFY
}}}

== Advanced Ticket Workflow Customization ==

If the customization above is not extensive enough for your needs, you can extend the workflow using plugins.  These plugins can provide additional operations for the workflow (like code_review), or implement side-effects for an action (such as triggering a build) that may not be merely simple state changes.  Look at [trac:source:trunk/sample-plugins/workflow sample-plugins/workflow] for a few simple examples to get started.

But if even that is not enough, you can disable the !ConfigurableTicketWorkflow component and create a plugin that completely replaces it.

== Adding Workflow States to Milestone Progress Bars ==

If you add additional states to your workflow, you may want to customize your milestone progress bars as well.  See [TracIni#milestone-groups-section TracIni].

== some ideas for next steps ==

New enhancement ideas for the workflow system should be filed as enhancement tickets against the `ticket system` component.  If desired, add a single-line link to that ticket here.  Also look at the [http://trac-hacks.org/wiki/AdvancedTicketWorkflowPlugin AdvancedTicketWorkflowPlugin] as it provides experimental operations.

If you have a response to the comments below, create an enhancement ticket, and replace the description below with a link to the ticket.

 * the "operation" could be on the nodes, possible operations are:
   * ''''''preops'''''': automatic, before entering the state/activity
   * ''''''postops'''''': automatic, when leaving the state/activity
   * ''''''actions'''''': can be chosen by the owner in the list at the bottom, and/or drop-down/pop-up together with the default actions of leaving the node on one of the arrows.
''''This appears to add complexity without adding functionality; please provide a detailed example where these additions allow something currently impossible to implement.''''

 * operations could be anything: sum up the time used for the activity, or just write some statistical fields like 
''''A workflow plugin can add an arbitrary workflow operation, so this is already possible.''''

 * set_actor should be an operation allowing to set the owner, e.g. as a "preop":
   * either to a role, a person
   * entered fix at define time, or at run time, e.g. out of a field, or select.
''''This is either duplicating the existing `set_owner` operation, or needs to be clarified.''''

 * Actions should be selectable based on the ticket type (different Workflows for different tickets)
''''Look into the [http://trac-hacks.org/wiki/AdvancedTicketWorkflowPlugin AdvancedTicketWorkflowPlugin]''s `triage` operation.''''

 * I''d wish to have an option to perform automatic status changes. In my case, I do not want to start with "new", but with "assigned". So tickets in state "new" should automatically go into state "assigned". Or is there already a way to do this and I just missed it?
''''Have a look at [http://trac-hacks.org/wiki/TicketCreationStatusPlugin TicketCreationStatusPlugin] and [http://trac-hacks.org/wiki/TicketConditionalCreationStatusPlugin TicketConditionalCreationStatusPlugin]''''

 * I added a ''testing'' state. A tester can close the ticket or reject it. I''d like the transition from testing to rejected to set the owner to the person that put the ticket in ''testing''. The [http://trac-hacks.org/wiki/AdvancedTicketWorkflowPlugin AdvancedTicketWorkflowPlugin] is close with set_owner_to_field, but we need something like set_field_to_owner.

 * I''d like to track the time a ticket is in each state, adding up ''disjoints'' intervals in the same state.
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiFormatting',3,1352317660563000,'trac','127.0.0.1','= WikiFormatting =
[[TracGuideToc]]

Wiki markup is a core feature in Trac, tightly integrating all the other parts of Trac into a flexible and powerful whole.

Trac has a built in small and powerful wiki rendering engine. This wiki engine implements an ever growing subset of the commands from other popular Wikis,
especially [http://moinmo.in/ MoinMoin] and [trac:WikiCreole].


This page will give you an in-depth explanation of the wiki markup available anywhere WikiFormatting is allowed.

The ''''Cheat sheet'''' below gives you a quick overview for the most common syntax, each link in the ''''Category'''' column will lead you to the more detailed explanation later in this page.

A few other wiki pages present the advanced features of the Trac wiki markup in more depth: 
 - TracLinks covers all the possible ways to refer precisely to any Trac resource or parts thereof,
 - WikiPageNames talks about the various names a wiki page can take, CamelCase or not
 - WikiMacros lists the macros available for generating dynamic content,
 - WikiProcessors and WikiHtml details how parts of the wiki text can be processed in special ways


== Cheat sheet ==

||= ''''''Category'''''' =||= ''''''Wiki Markup'''''' =||= ''''''Display'''''' =||
|-----------------------------------------------------------
{{{#!th rowspan=3
[#FontStyles Font Styles]
}}}
|| `''''''bold''''''`, `''''italic''''`, `''''''''''Wikipedia style''''''''''` || \
|| ''''''bold'''''', ''''italic'''', ''''''''''Wikipedia style'''''''''' ||
|| {{{`monospaced (''''other markup ignored'''')`}}} || \
|| `monospaced (''''other markup ignored'''')` ||
|| `**bold**`, `//italic//`, `**//!WikiCreole style//**` || \
|| **bold**, //italic//, **//!WikiCreole style//** ||
|-----------------------------------------------------------
||= [#Headings Headings] =||\
{{{#!td 
 {{{
 == Level 2 ==
 === Level 3 ^([#hn note])^
 }}}
}}}
{{{#!td style="padding-left: 2em"
== Level 2 ==
=== Level 3 ^([#hn note])^
}}}
|-----------------------------------------------------------
||= [#Paragraphs Paragraphs]  =||\
{{{#!td
 {{{
 First paragraph
 on multiple lines.

 Second paragraph.
 }}}
}}}
{{{#!td
First paragraph
on multiple lines.

Second paragraph.
}}}
|-----------------------------------------------------------
||= [#Lists Lists] =||\
{{{#!td
 {{{
 * bullets list
   on multiple lines
   1. nested list
     a. different numbering 
        styles
 }}}
}}}
{{{#!td
* bullets list
  on multiple lines
  1. nested list
    a. different numbering
       styles
}}}
|-----------------------------------------------------------
{{{#!th
[#DefinitionLists Definition Lists]
}}}
{{{#!td
 {{{
  term:: definition on
         multiple lines
 }}}
}}}
{{{#!td
 term:: definition on
        multiple lines
}}}
|-----------------------------------------------------------
||= [#PreformattedText Preformatted Text] =||\
{{{#!td
 {{{
 {{{
 multiple lines, ''''no wiki''''
       white space respected
 }}}
 }}}
}}}
{{{#!td
 {{{
 multiple lines, ''''no wiki''''
       white space respected
 }}}
}}}
|-----------------------------------------------------------
||= [#Blockquotes Blockquotes] =||\
{{{#!td
 {{{
   if there''s some leading
   space the text is quoted
 }}}
}}}
{{{#!td
 if there''s some leading
 space the text is quoted
}}}
|-----------------------------------------------------------
||= [#DiscussionCitations Discussion Citations] =||\
{{{#!td
 {{{
 >> ... (I said)
 > (he replied)
 }}}
}}}
{{{#!td
>>... (I said)
> (he replied)
}}}
|-----------------------------------------------------------
||= [#Tables Tables] =||\
{{{#!td
 {{{
 ||= Table Header =|| Cell ||
 ||||  (details below)  ||
 }}}
}}}
{{{#!td
||= Table Header =|| Cell ||
||||  (details below)  ||
}}}
|-----------------------------------------------------------
{{{#!th rowspan=2
[#Links Links]
}}}
|| `http://trac.edgewall.org` ||\
|| http://trac.edgewall.org ||
|| `WikiFormatting (CamelCase)` ||\
|| WikiFormatting (CamelCase) ||
|-----------------------------------------------------------
{{{#!th rowspan=5
[#TracLinks TracLinks]
}}}
|| `wiki:WikiFormatting`, `wiki:"WikiFormatting"` ||\
|| wiki:WikiFormatting, wiki:"WikiFormatting" ||
|| `#1 (ticket)`, `[1] (changeset)`, `{1} (report)` ||\
|| #1 (ticket), [1] (changeset), {1} (report) ||
|| `ticket:1, ticket:1#comment:1` ||\
|| ticket:1, ticket:1#comment:1 ||
|| `Ticket [ticket:1]`, `[ticket:1 ticket one]` ||\
|| Ticket [ticket:1], [ticket:1 ticket one] ||
|| `Ticket [[ticket:1]]`, `[[ticket:1|ticket one]]` ||\
|| Ticket [[ticket:1]], [[ticket:1|ticket one]] ||
|-----------------------------------------------------------
{{{#!th rowspan=2 
[#SettingAnchors Setting Anchors]
}}}
|| `[=#point1 (1)] First...` ||\
|| [=#point1 (1)] First... ||
|| `see [#point1 (1)]` ||\
|| see [#point1 (1)] ||
|-----------------------------------------------------------
{{{#!th rowspan=3
[#Escaping Escaping Markup]
}}}
|| `!'''' doubled quotes` ||\
|| !'''' doubled quotes ||
|| `!wiki:WikiFormatting`, `!WikiFormatting` ||\
|| !wiki:WikiFormatting, !WikiFormatting ||
|| {{{`}}}`{{{-}}}`{{{`}}}` triple curly brackets` ||\
|| `{{{-}}}` triple curly brackets ||
|-----------------------------------------------------------
||= [#Images Images] =|| `[[Image(`''''link''''`)]]` || [[Image(htdocs:../common/trac_logo_mini.png)]] ||
|-----------------------------------------------------------
{{{#!th rowspan=2
[#Macros Macros]
}}}
|| `[[MacroList(*)]]` ||  ''''(short list of all available macros)''''  ||
|| `[[Image?]]` ||  ''''(help for the Image macro)''''  ||
|-----------------------------------------------------------
||= [#Processors Processors] =||\
{{{#!td
 {{{
 {{{
 #!div style="font-size: 80%"
 Code highlighting:
   {{{#!python
   hello = lambda: "world"
   }}}
 }}}
 }}}
}}}
{{{#!td style="padding-left: 2em"
 {{{
 #!div style="font-size: 80%"
 Code highlighting:
   {{{#!python 
   hello = lambda: "world"
   }}}
 }}}
}}}
|-----------------------------------------------------------
||= [#Comments Comments] =||\
{{{#!td
 {{{
 {{{#!comment
 Note to Editors: ...
 }}}
 }}}
}}}
{{{#!td style="padding-left: 2em"
 {{{#!comment
 Note to Editors: ...
 }}}
}}}
|-----------------------------------------------------------
||= [#Miscellaneous Miscellaneous] =||\
{{{#!td
 {{{
 Line [[br]] break 
 Line \\ break
 ----
 }}}
}}}
{{{#!td style="padding-left: 2em"
Line [[br]] break
Line \\ break
----
}}}


== Font Styles ==

The Trac wiki supports the following font styles:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * ''''''bold'''''', 
     '''''' triple quotes !'''''' 
     can be bold too if prefixed by ! '''''', 
   * ''''italic''''
   * ''''''''''bold italic'''''''''' or ''''italic and
     '''''' italic bold '''''' ''''
   * __underline__
   * {{{monospace}}} or `monospace`
     (hence `{{{` or {{{`}}} quoting)
   * ~~strike-through~~
   * ^superscript^ 
   * ,,subscript,,
   * **also bold**, //italic as well//, 
     and **'''' bold italic **'''' //(since 0.12)//
  }}}
}}}
{{{#!td
 * ''''''bold'''''', 
   '''''' triple quotes !'''''' 
   can be bold too if prefixed by ! '''''', 
 * ''''italic''''
 * ''''''''''bold italic'''''''''' or ''''italic and
   '''''' italic bold '''''' ''''
 * __underline__
 * {{{monospace}}} or `monospace`
   (hence `{{{` or {{{`}}} quoting)
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,
 * **also bold**, //italic as well//, 
   and **'''' bold italic **'''' //(since 0.12)//
}}}

Notes:
 * `{{{...}}}` and {{{`...`}}} commands not only select a monospace font, but also treat their content as verbatim text, meaning that no further wiki processing is done on this text.
 * {{{ ! }}} tells wiki parser to not take the following characters as wiki format, so pay attention to put a space after !, e.g. when ending bold.
 * all the font styles marks have to be used in opening/closing pairs, 
   and they must nest properly (in particular, an `''''` italic can''t be paired 
   with a `//` one, and `''''''` can''t be paired with `**`)


== Headings ==

You can create heading by starting a line with one up to six ''''equal'''' characters ("=")
followed by a single space and the headline text. 

[=#hn]
The headline text can be followed by the same number of "=" characters, but this is no longer mandatory.

Finally, the heading might optionally be followed by an explicit id. If not, an implicit but nevertheless readable id will be generated.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  = Heading =
  == Subheading
  === About ''''this'''' ===
  === Explicit id === #using-explicit-id-in-heading
  == Subheading #sub2
}}}
}}}
{{{#!td style="padding: 1em;"
  {{{
  #!div
  = Heading =
  == Subheading
  === About ''''this'''' ===
  === Explicit id === #using-explicit-id-in-heading
  == Subheading #sub2
  }}}
}}}

== Paragraphs ==

A new text paragraph is created whenever two blocks of text are separated by one or more empty lines.

A forced line break can also be inserted, using:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Line 1[[BR]]Line 2
  }}}
  {{{
  Paragraph
  one

  Paragraph 
  two
  }}}
}}}
{{{#!td
  Line 1[[BR]]Line 2

  Paragraph 
  one

  Paragraph 
  two
}}}

== Lists ==

The wiki supports both ordered/numbered and unordered lists.

Example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * Item 1
     * Item 1.1
        * Item 1.1.1   
        * Item 1.1.2
        * Item 1.1.3
     * Item 1.2
   * Item 2
  - items can start at the beginning of a line
    and they can span multiple lines
    - be careful though to continue the line 
    with the appropriate indentation, otherwise
  that will start a new paragraph...
  
   1. Item 1
     a. Item 1.a
     a. Item 1.b
        i. Item 1.b.i
        i. Item 1.b.ii
   1. Item 2
  And numbered lists can also be restarted
  with an explicit number:
   3. Item 3
  }}}
}}}
{{{#!td
 * Item 1
   * Item 1.1
      * Item 1.1.1   
      * Item 1.1.2
      * Item 1.1.3
   * Item 1.2
 * Item 2
- items can start at the beginning of a line
  and they can span multiple lines
  - be careful though to continue the line 
  with the appropriate indentation, otherwise
that will start a new paragraph...

 1. Item 1
   a. Item 1.a
   a. Item 1.b
      i. Item 1.b.i
      i. Item 1.b.ii
 1. Item 2
And numbered lists can also be restarted with an explicit number:
 3. Item 3
}}}


== Definition Lists ==

The wiki also supports definition lists.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   llama::
     some kind of mammal, with hair
   ppython::
     some kind of reptile, without hair
     (can you spot the typo?)
  }}}
}}}
{{{#!td
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)
}}}

Note that you need a space in front of the defined term.


== Preformatted Text ==

Block containing preformatted text are suitable for source code snippets, notes and examples. Use three ''''curly braces'''' wrapped around the text to define a block quote. The curly braces need to be on a separate line.
  
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  def HelloWorld():
      print ''''''Hello World''''''
  }}}
  }}}
}}}
{{{#!td
  {{{
  def HelloWorld():
      print ''''''Hello World''''''
  }}}
}}}

Note that this kind of block is also used for selecting lines that should be processed through WikiProcessors.

== Blockquotes ==

In order to mark a paragraph as blockquote, indent that paragraph with two spaces.

||= Wiki Markup =||= Display =||
{{{#!td
{{{
Paragraph
  This text is a quote from someone else.
}}}
}}}
{{{#!td
Paragraph
  This text is a quote from someone else.
}}}

== Discussion Citations ==

To delineate a citation in an ongoing discussion thread, such as the ticket comment area, e-mail-like citation marks (">", ">>", etc.) may be used.  

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  >> Someone''s original text
  > Someone else''s reply text
  >  - which can be any kind of Wiki markup
  My reply text
  }}}
}}}
{{{#!td
>> Someone''s original text
> Someone else''s reply text
>  - which can be any kind of Wiki markup
My reply text
}}}


== Tables ==
=== Simple Tables ===
Simple tables can be created like this:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||Cell 1||Cell 2||Cell 3||
  ||Cell 4||Cell 5||Cell 6||
  }}}
}}}
{{{#!td style="padding: 2em;"
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}

Cell headings can be specified by wrapping the content in a pair of ''='' characters.
Note that the ''='' characters have to stick to the cell separators, like this:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||        ||= stable =||= latest =||
  ||= 0.10 =||  0.10.5  || 0.10.6dev||
  ||= 0.11 =||  0.11.6  || 0.11.7dev||
  }}}
}}}
{{{#!td style="padding: 2em;"
||        ||= stable =||= latest =||
||= 0.10 =||  0.10.5  || 0.10.6dev||
||= 0.11 =||  0.11.6  || 0.11.7dev||
}}}

Finally, specifying an empty cell means that the next non empty cell will span the empty cells. For example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  || 1 || 2 || 3 ||
  |||| 1-2 || 3 ||
  || 1 |||| 2-3 ||
  |||||| 1-2-3 ||
  }}}
}}}
{{{#!td style="padding: 2em;"
|| 1 || 2 || 3 ||
|||| 1-2 || 3 ||
|| 1 |||| 2-3 ||
|||||| 1-2-3 ||
}}}

Note that if the content of a cell "sticks" to one side of the cell and only one, then the text will be aligned on that side. Example:
||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  ||=Text =||= Numbers =||
  ||left align    ||        1.0||
  ||  center      ||        4.5||
  ||      right align||     4.5||
  || default alignment ||   2.5||
  ||default||         2.5||
  ||  default ||      2.5||
  || default ||       2.5||
  }}}
}}}
{{{#!td style="padding: 2em;"
||=Text =||= Numbers =||
||left align    ||        1.0||
||  center      ||        4.5||
||      right align||     4.5||
|| default alignment ||   2.5||
||default||         2.5||
||  default ||      2.5||
|| default ||       2.5||
}}}

If contrary to the example above, the cells in your table contain more text, it might be convenient to spread a table row over multiple lines of markup. The `\` character placed at the end of a line after a cell separator tells Trac to not start a new row for the cells on the next line.

||= Wiki Markup =||
{{{#!td
  {{{
  || this is column 1 [http://trac.edgewall.org/newticket new ticket] || \
  || this is column 2 [http://trac.edgewall.org/roadmap the road ahead] || \
  || that''s column 3 and last one ||
  }}}
}}}
|-------------
||= Display =||
{{{#!td style="padding: 2em;"
|| this is column 1 [http://trac.edgewall.org/newticket new ticket] || \
|| this is column 2 [http://trac.edgewall.org/roadmap the road ahead] || \
|| that''s column 3 and last one ||
}}}

=== Complex Tables ===

If the possibilities offered by the simple "pipe"-based markup for tables described above are not enough for your needs, you can create more elaborated tables by using [#Processors-example-tables WikiProcessor based tables].


== Links ==

Hyperlinks are automatically created for WikiPageNames and URLs. !WikiPageLinks can be disabled by prepending an exclamation mark "!" character, such as {{{!WikiPageLink}}}.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  TitleIndex, http://www.edgewall.com/, !NotAlink
  }}}
}}}
{{{#!td
TitleIndex, http://www.edgewall.com/, !NotAlink
}}}

Links can be given a more descriptive title by writing the link followed by a space and a title and all this inside square brackets. 
If the descriptive title is omitted, then the explicit prefix is discarded, unless the link is an external link. This can be useful for wiki pages not adhering to the WikiPageNames convention.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * [http://www.edgewall.com Edgewall Software]
   * [wiki:TitleIndex Title Index] 
   * [wiki:TitleIndex] 
   * [wiki:ISO9000]
  }}}
}}}
{{{#!td
   * [http://www.edgewall.com Edgewall Software]
   * [wiki:TitleIndex Title Index] 
   * [wiki:TitleIndex] 
   * [wiki:ISO9000]
}}}

Following the [trac:WikiCreole] trend, the descriptive title can also be specified by writing the link followed by a pipe (''|'') and a title and all this inside //double// square brackets. 

{{{#!td
  {{{
   * [[http://www.edgewall.com|Edgewall Software]]
   * [[wiki:TitleIndex|Title Index]]
     or even [[TitleIndex|Title Index]]
   * [[wiki:TitleIndex]]
     '''''' but not ![[TitleIndex]]! ''''''
   * [[ISO9000]]
  }}}
}}}
{{{#!td
   * [[http://www.edgewall.com|Edgewall Software]]
   * [[wiki:TitleIndex|Title Index]]
     or even [[TitleIndex|Title Index]]
   * [[wiki:TitleIndex]]
     '''''' but not ![[TitleIndex]]! ''''''
   * [[ISO9000]]
}}}

''''''Note'''''': the [trac:WikiCreole] style for links is quick to type and
certainly looks familiar as it''s the one used on Wikipedia and in many
other wikis. Unfortunately it conflicts with the syntax for [#Macros macros].
So in the rare case when you need to refer to a page which is named after
a macro (typical examples being TitleIndex, InterTrac and InterWiki), 
by writing `[[TitleIndex]]` you will actually call the macro instead of linking
to the page.

== Trac Links ==

Wiki pages can link directly to other parts of the Trac system. Pages can refer to tickets, reports, changesets, milestones, source files and other Wiki pages using the following notations:

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   * Tickets: #1 or ticket:1
   * Reports: {1} or report:1
   * Changesets: r1, [1] or changeset:1
   * ...
   * targeting other Trac instances, 
     so called InterTrac links:
     - Tickets: #Trac1 or Trac:ticket:1
     - Changesets: [Trac1] or Trac:changeset:1
  }}}
}}}
{{{#!td
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * ... 
 * targeting other Trac instances, 
   so called InterTrac links:
   - Tickets: #Trac1 or Trac:ticket:1
   - Changesets: [Trac1] or Trac:changeset:1
}}}

There are many more flavors of Trac links, see TracLinks for more in-depth information and a reference for all the default link resolvers.


== Setting Anchors ==

An anchor, or more correctly speaking, an [http://www.w3.org/TR/REC-html40/struct/links.html#h-12.2.1 anchor name] can be added explicitly at any place in the Wiki page, in order to uniquely identify a position in the document:

{{{
[=#point1]
}}}

This syntax was chosen to match the format for explicitly naming the header id [#Headings documented above]. For example:
{{{
== Long title == #title
}}}

It''s also very close to the syntax for the corresponding link to that anchor:
{{{
[#point1]
}}}

Optionally, a label can be given to the anchor:
{{{
[[=#point1 ''''''Point 1'''''']]
}}}

||= Wiki Markup =||= Display =||
|----------------------------------
{{{#!td
  {{{
  [#point2 jump to the second point]

  ...

  Point2:  [=#point2] Jump here
  }}}
}}}
{{{#!td
  [#point2 jump to the second point]

  ...

  Point2:  [=#point2] Jump here
}}}

For more complex anchors (e.g. when a custom title is wanted), one can use the Span macro, e.g. `[[span(id=point2, class=wikianchor, title=Point 2, ^(2)^)]]`.


== Escaping Links, WikiPageNames and other Markup == #Escaping

You may avoid making hyperlinks out of TracLinks by preceding an expression with a single "!" (exclamation mark).

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
   !NoHyperLink
   !#42 is not a link
  }}}
  {{{
Various forms of escaping for list markup:
 `-` escaped minus sign \\
 ``1. escaped number  \\
 {{{*}}} escaped asterisk sign
  }}}
}}}
{{{#!td
 !NoHyperLink
 !#42 is not a link

Various forms of escaping for list markup:
 `-` escaped minus sign \\
 ``1. escaped number  \\
 {{{*}}} escaped asterisk sign
}}}

== Images ==

Urls ending with `.png`, `.gif` or `.jpg` are no longer automatically interpreted as image links, and converted to `<img>` tags.

You now have to use the ![[Image]] macro. The simplest way to include an image is to upload it as attachment to the current page, and put the filename in a macro call like `[[Image(picture.gif)]]`.

In addition to the current page, it is possible to refer to other resources:
 * `[[Image(wiki:WikiFormatting:picture.gif)]]` (referring to attachment on another page)
 * `[[Image(ticket:1:picture.gif)]]` (file attached to a ticket)
 * `[[Image(htdocs:picture.gif)]]` (referring to a file inside the [TracEnvironment environment] `htdocs` directory)
 * `[[Image(source:/trunk/trac/htdocs/trac_logo_mini.png)]]` (a file in repository)

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[Image(htdocs:../common/trac_logo_mini.png)]]
  }}}
}}}
{{{#!td
[[Image(htdocs:../common/trac_logo_mini.png)]]
}}}

See WikiMacros for further documentation on the `[[Image()]]` macro, which has several useful options (`title=`, `link=`, etc.)


== Macros ==

Macros are ''''custom functions'''' to insert dynamic content in a page.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[RecentChanges(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
[[RecentChanges(Trac,3)]]
}}}

See WikiMacros for more information, and a list of installed macros.

The detailed help for a specific macro can also be obtained more directly by appending a "?" to the macro name.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[MacroList?]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
[[MacroList?]]
}}}


== Processors ==

Trac supports alternative markup formats using WikiProcessors. For example, processors are used to write pages in 
[wiki:WikiRestructuredText reStructuredText] or [wiki:WikiHtml HTML]. 

||= Wiki Markup =||= Display =||
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

   [=#Processors-example-html Example 1:] HTML

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{
  #!html
  <h1 style="text-align: right; color: blue">
   HTML Test
  </h1>
  }}}
  }}}
}}}
{{{#!td valign="top"  style="border: 0px"

{{{
#!html
<h1 style="text-align: right; color: blue">HTML Test</h1>
}}}

}}}
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

   [=#Processors-example-highlight Example 2:] Code Highlighting

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{
  #!python
  class Test:
  
      def __init__(self):
          print "Hello World"
  if __name__ == ''__main__'':
     Test()
  }}}
  }}}
}}}
{{{
#!td valign="top"  style="border: 0px"

{{{
#!python
class Test:
    def __init__(self):
        print "Hello World"
if __name__ == ''__main__'':
   Test()
}}}

}}}
|--------------------------------------------------------
{{{#!td align="center" colspan=2 style="border: 0px; font-size: 90%"

       [=#Processors-example-tables Example 3:] Complex Tables

}}}
|--------------------------------------------------------
{{{#!td style="border: 0px"
  {{{
  {{{#!th rowspan=4 align=justify
  With the `#td` and `#th` processors,
  table cells can contain any content:
  }}}
  |----------------
  {{{#!td
    - lists
    - embedded tables
    - simple multiline content
  }}}
  |----------------
  {{{#!td
  As processors can be easily nested, 
  so can be tables:
    {{{#!th
    Example:
    }}}
    {{{#!td style="background: #eef"
    || must be at the third level now... ||
    }}}
  }}}
  |----------------
  {{{#!td
  Even when you don''t have complex markup,
  this form of table cells can be convenient
  to write content on multiple lines.
  }}}
  }}}
}}}
{{{
#!td  valign="top"  style="border: 0px"

  {{{#!th rowspan=4 align=justify
  With the `#td` and `#th` processors,
  table cells can contain any content:
  }}}
  |----------------
  {{{#!td
    - lists
    - embedded tables
    - simple multiline content
  }}}
  |----------------
  {{{#!td
  As processors can be easily nested, 
  so can be tables:
    {{{#!th
    Example:
    }}}
    {{{#!td style="background: #eef"
    || must be at the third level now... ||
    }}}
  }}}
  |----------------
  {{{#!td
  Even when you don''t have complex markup,
  this form of table cells can be convenient
  to write content on multiple lines.
  }}}

}}}

See WikiProcessors for more information.


== Comments ==

Comments can be added to the plain text. These will not be rendered and will not display in any other format than plain text.

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Nothing to
  {{{
  #!comment
  Your comment for editors here
  }}}
  see ;-)
  }}}
}}}
{{{#!td
  Nothing to
  {{{
  #!comment
  Your comment for editors here
  }}}
  see ;-)
}}}

== Miscellaneous ==

An horizontal line can be used to separated different parts of your page:

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  Four or more dashes will be replaced 
  by an horizontal line (<HR>)
  ----
  See?
  }}}
}}}
{{{#!td
Four or more dashes will be replaced
by an horizontal line (<HR>)
----
See?
}}}
|----------------------------------
{{{#!td
  {{{
  "macro" style [[br]] line break
  }}}
}}}
{{{#!td
"macro" style [[br]] line break
}}}
|----------------------------------
{{{#!td
  {{{
  !WikiCreole style \\ line\\break
  }}}
}}}
{{{#!td
!WikiCreole style \\ line\\break
}}}

',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiHtml',2,1352317660574000,'trac','127.0.0.1','= Using HTML in Wiki Text =

Trac supports inserting HTML into any wiki context, accomplished using the `#!html` [wiki:WikiProcessors WikiProcessor]. 

However a constraint is that this HTML has to be well-formed.
In particular you can''t insert a start tag in an `#!html` block,
resume normal wiki text and insert the corresponding end tag in a 
second `#!html` block. 

Fortunately, for creating styled <div>s, <span>s  or even complex tables
containing arbitrary Wiki text, there''s a powerful alternative: use of
dedicated `#!div`, `#!span` and `#!table`, `#!tr`, `#!td` and `#!th` blocks.

Those Wiki processors are built-in, and does not require installing any additional packages.

== How to use `#!html` == #HowtoUseHTML
To inform the wiki engine that a block of text should be treated as HTML, use the ''''html'''' processor. 

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  #!html
  <h1 style="text-align: right; color: blue">HTML Test</h1>
  }}}
  }}}
}}}
{{{#!td style="padding-left: 2em"
  {{{
  #!html
  <h1 style="text-align: right; color: blue">HTML Test</h1>
  }}}
}}}

Note that Trac sanitizes your HTML code before displaying it. That means that if you try to use potentially dangerous constructs such as Javascript event handlers, those will be removed from the output. 

Since 0.11, the filtering is done by Genshi, and as such, the produced output will be a well-formed fragment of HTML. As noted above in the introduction, this mean that you can no longer use two HTML blocks, one for opening a <div>, the second for closing it, in order to wrap arbitrary wiki text.
The new way to wrap any wiki content inside a <div> is to use the `#!div` Wiki  processor.

== How to use `#!div` and `#!span` == #HowtoUseDivSpan

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{
  #!div class="important" 
  **important** is a predefined class.
  }}}
  }}}
  {{{
  {{{
  #!div style="border: 1pt dotted; margin: 1em"
  **wikipage** is another predefined class that will 
  be used when no class is specified.
  }}}
  }}}
  {{{
  {{{
  #!div class="compact" style="border: 1pt dotted; margin: 1em"
  **compact** is another predefined class reducing
  the padding within the `<div>` to a minimum.
  }}}
  }}}
  {{{
  {{{
  #!div class="wikipage compact" style="border: 1pt dotted"
  Classes can be combined (here **wikipage** and **compact**)
  which results in this case in reduced //vertical// 
  padding but there''s still some horizontal space for coping
  with headings.
  }}}
  }}}
  {{{
  {{{
  #!div class="" style="border: 1pt dotted; margin: 1em"
  Explicitly specifying no classes is //not// the same
  as specifying no class attribute, as this will remove
  the //wikipage// default class.
  }}}
  }}}
}}}
{{{#!td style="padding-left: 2em"

  {{{
  #!div class="important" 
  **important** is a predefined class.
  }}}

  {{{
  #!div style="border: 1pt dotted; margin: 1em"
  **wikipage** is another predefined class that will 
  be used when no class is specified.
  }}}

  {{{
  #!div class="compact" style="border: 1pt dotted; margin: 1em"
  **compact** is another predefined class reducing
  the padding within the `<div>` to a minimum.
  }}}

  {{{
  #!div class="wikipage compact" style="border: 1pt dotted"
  Classes can be combined (here **wikipage** and **compact**)
  which results in this case in reduced //vertical// 
  padding but there''s still some horizontal space for coping
  with headings.
  }}}

  {{{
  #!div class="" style="border: 1pt dotted; margin: 1em"
  Explicitly specifying no classes is //not// the same
  as specifying no class attribute, as this will remove
  the //wikipage// default class.
  }}}

}}}

Note that the contents of a `#!div` block are contained in one or more paragraphs, which have a non-zero top and bottom margin. This leads to the top and bottom padding in the example above. To remove the top and bottom margin of the contents, add the `compact` class to the `#!div`. Another predefined class besides `wikipage` and `compact` is `important`, which can be used to make a paragraph stand out. Extra CSS classes can be defined via the `site/style.css` file for example, see TracInterfaceCustomization#SiteAppearance.

For spans, you should rather use the Macro call syntax:
||= Wiki Markup =||
{{{#!td
  {{{
  Hello 
  [[span(''''WORLD'''' (click [#anchor here]), style=color: green; font-size: 120%, id=anchor)]]!
  }}}
}}}
|---------------------------------------------------------------------------------
||= Display =||
{{{#!td style="padding-left: 2em"
  Hello
  [[span(''''WORLD'''' (click [#anchor here]), style=color: green; font-size: 120%, id=anchor)]]!
}}}

== How to use `#!td` and other table related processors == #Tables

`#!td` or `#!th` processors are actually the main ones, for creating table data and header cells, respectively. The other processors `#!table` and `#!tr` are not required for introducing a table structure, as `#!td` and `#!th` will do this automatically. The `|-` row separator can be used to start a new row when needed, but some may prefer to use a `#!tr` block for that, as this introduces a more formal grouping and offers the possibility to use an extra level of indentation. The main purpose of the `#!table` and `#!tr` is to give the possibility to specify HTML attributes, like ''''style'''' or ''''valign'''' to these elements.

||= Wiki Markup =||= Display =||
{{{#!td
 {{{
 Simple 2x2 table with rich content:
 {{{#!th align=left
  - Left
  - Header
 }}}
 {{{#!th align=left
  - Right
  - Header
 }}}
 |----------------------------------
 {{{#!td style="background: #ffd"
  - Left
  - Content
 }}}
 {{{#!td style="vertical-align: top"
 !RightContent
 }}}
 |----------------------------------
 || ... and this can be mixed||\
 ||with pipe-based cells ||
 {{{#!td colspan=2
 Pick the style the more appropriate
 to your content
 
 See WikiFormatting#Tables for details
 on the pipe-based table syntax.
 }}}
 
 If one needs to add some 
 attributes to the table itself...
 
 {{{
 #!table style="border:none;text-align:center;margin:auto"
   {{{#!tr ====================================
     {{{#!th style="border: none"
     Left header
     }}}
     {{{#!th style="border: none"
     Right header
     }}}
   }}}
   {{{#!tr ==== style="border: 1px dotted grey"
     {{{#!td style="border: none"
     1.1
     }}}
     {{{#!td style="border: none"
     1.2
     }}}
   }}}
   {{{#!tr ====================================
     {{{#!td style="border: none"
     2.1
     }}}
     {{{#!td
     2.2
     }}}
   }}}
 }}}


 }}}
}}}
{{{#!td valign=top
Simple 2x2 table with rich content:
{{{#!th align=left
 - Left
 - Header
}}}
{{{#!th align=left
 - Right
 - Header
}}}
|----------------------------------
{{{#!td style="background: #ffd"
 - Left
 - Content
}}}
{{{#!td style="vertical-align: top"
!RightContent
}}}
|----------------------------------
|| ... and this can be mixed||\
||with pipe-based cells ||
{{{#!td colspan=2
Pick the style the more appropriate
to your content

See WikiFormatting#Tables for details
on the pipe-based table syntax.
}}}

If one needs to add some 
attributes to the table itself...

{{{
#!table style="border:none;text-align:center;margin:auto"
  {{{#!tr ====================================
    {{{#!th style="border: none"
    Left header
    }}}
    {{{#!th style="border: none"
    Right header
    }}}
  }}}
  {{{#!tr ==== style="border: 1px dotted grey"
    {{{#!td style="border: none"
    1.1
    }}}
    {{{#!td style="border: none"
    1.2
    }}}
  }}}
  {{{#!tr ====================================
    {{{#!td style="border: none"
    2.1
    }}}
    {{{#!td
    2.2
    }}}
  }}}
}}}
}}}

Note that by default tables are assigned the "wiki" CSS class, which gives a distinctive look to the header cells and a default border to the table and cells (as can be seen for the tables on this page). By removing this class (`#!table class=""`), one regains complete control on the table presentation. In particular, neither the table, the rows nor the cells will have a border, so this is a more effective way to get such an effect than having to specify a `style="border: no"` parameter everywhere. 

{{{#!table class=""
||= Wiki Markup =||= Display =||
 {{{#!td
  {{{
  {{{#!table class=""
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
  }}}
 }}}
 {{{#!td
  {{{#!table class=""
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
 }}}
}}}

Other classes can be specified as alternatives (remember that you can define your own in [TracInterfaceCustomization#SiteAppearance site/style.css]).

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  {{{#!table class="listing"
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
  }}}
}}}
{{{#!td
  {{{#!table class="listing"
  ||  0||  1||  2||
  || 10|| 20|| 30||
  || 11|| 22|| 33||
  ||||||=  numbers  =||
  }}}
}}}


== HTML comments ==
HTML comments are stripped from the output of the `html` processor. To add an HTML comment to a wiki page, use the `htmlcomment` processor (available since 0.12). For example, the following code block:
||= Wiki Markup =||
{{{#!td
  {{{
  {{{
  #!htmlcomment
  This block is translated to an HTML comment.
  It can contain <tags> and &entities; that will not be escaped in the output.
  }}}
  }}}
}}}
|---------------------------------------------------------------------------------
||= Display =||
{{{#!td
  {{{
  <!--
  This block is translated to an HTML comment.
  It can contain <tags> and &entities; that will not be escaped in the output.
  -->
  }}}
}}}

Please note that the character sequence "`--`" is not allowed in HTML comments, and will generate a rendering error.


== More Information ==

 * http://www.w3.org/ -- World Wide Web Consortium
 * http://www.w3.org/MarkUp/ -- HTML Markup Home Page

----
See also:  WikiProcessors, WikiFormatting, WikiRestructuredText
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiMacros',3,1352317660584000,'trac','127.0.0.1','= Trac Macros =

[[PageOutline]]

Trac macros are plugins to extend the Trac engine with custom ''functions'' written in Python. A macro inserts dynamic HTML data in any context supporting WikiFormatting.

Another kind of macros are WikiProcessors. They typically deal with alternate markup formats and representation of larger blocks of information (like source code highlighting).

== Using Macros ==

Macro calls are enclosed in two ''''square brackets''''. Like Python functions, macros can also have arguments, a comma separated list within parentheses.

=== Getting Detailed Help ===
The list of available macros and the full help can be obtained using the !MacroList macro, as seen [#AvailableMacros below].

A brief list can be obtained via `[[MacroList(*)]]` or `[[?]]`.

Detailed help on a specific macro can be obtained by passing it as an argument to !MacroList, e.g. `[[MacroList(MacroList)]]`, or, more conveniently, by appending a question mark (`?`) to the macro''s name, like in `[[MacroList?]]`.



=== Example ===

A list of 3 most recently changed wiki pages starting with ''Trac'':

||= Wiki Markup =||= Display =||
{{{#!td
  {{{
  [[RecentChanges(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em;"
[[RecentChanges(Trac,3)]]
}}}
|-----------------------------------
{{{#!td
  {{{
  [[RecentChanges?(Trac,3)]]
  }}}
}}}
{{{#!td style="padding-left: 2em;"
[[RecentChanges?(Trac,3)]]
}}}
|-----------------------------------
{{{#!td
  {{{
  [[?]]
  }}}
}}}
{{{#!td style="padding-left: 2em"
{{{#!html 
<div style="font-size: 80%" class="trac-macrolist">
<h3><code>[[Image]]</code></h3>Embed an image in wiki-formatted text.

The first argument is the file …
<h3><code>[[InterTrac]]</code></h3>Provide a list of known <a class="wiki" href="/wiki/InterTrac">InterTrac</a> prefixes.
<h3><code>[[InterWiki]]</code></h3>Provide a description list for the known <a class="wiki" href="/wiki/InterWiki">InterWiki</a> prefixes.
<h3><code>[[KnownMimeTypes]]</code></h3>List all known mime-types which can be used as <a class="wiki" href="/wiki/WikiProcessors">WikiProcessors</a>.
Can be …</div>
}}}
etc.
}}}

== Available Macros ==

''''Note that the following list will only contain the macro documentation if you''ve not enabled `-OO` optimizations, or not set the `PythonOptimize` option for [wiki:TracModPython mod_python].''''

[[MacroList]]

== Macros from around the world ==

The [http://trac-hacks.org/ Trac Hacks] site provides a wide collection of macros and other Trac [TracPlugins plugins] contributed by the Trac community. If you''re looking for new macros, or have written one that you''d like to share with the world, please don''t hesitate to visit that site.

== Developing Custom Macros ==
Macros, like Trac itself, are written in the [http://python.org/ Python programming language] and are developed as part of TracPlugins.

For more information about developing macros, see the [trac:TracDev development resources] on the main project site.


Here are 2 simple examples showing how to create a Macro with Trac 0.11. 

Also, have a look at [trac:source:tags/trac-0.11/sample-plugins/Timestamp.py Timestamp.py] for an example that shows the difference between old style and new style macros and at the [trac:source:tags/trac-0.11/wiki-macros/README macros/README] which provides a little more insight about the transition.

=== Macro without arguments ===
To test the following code, you should saved it in a `timestamp_sample.py` file located in the TracEnvironment''s `plugins/` directory.
{{{
#!python
from datetime import datetime
# Note: since Trac 0.11, datetime objects are used internally

from genshi.builder import tag

from trac.util.datefmt import format_datetime, utc
from trac.wiki.macros import WikiMacroBase

class TimeStampMacro(WikiMacroBase):
    """Inserts the current time (in seconds) into the wiki page."""

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, text):
        t = datetime.now(utc)
        return tag.b(format_datetime(t, ''%c''))
}}}

=== Macro with arguments ===
To test the following code, you should saved it in a `helloworld_sample.py` file located in the TracEnvironment''s `plugins/` directory.
{{{
#!python
from genshi.core import Markup

from trac.wiki.macros import WikiMacroBase

class HelloWorldMacro(WikiMacroBase):
    """Simple HelloWorld macro.

    Note that the name of the class is meaningful:
     - it must end with "Macro"
     - what comes before "Macro" ends up being the macro name

    The documentation of the class (i.e. what you''re reading)
    will become the documentation of the macro, as shown by
    the !MacroList macro (usually used in the WikiMacros page).
    """

    revision = "$Rev$"
    url = "$URL$"

    def expand_macro(self, formatter, name, text, args):
        """Return some output that will be displayed in the Wiki content.

        `name` is the actual name of the macro (no surprise, here it''ll be
        `''HelloWorld''`),
        `text` is the text enclosed in parenthesis at the call of the macro.
          Note that if there are ''''no'''' parenthesis (like in, e.g.
          [[HelloWorld]]), then `text` is `None`.
        `args` are the arguments passed when HelloWorld is called using a
        `#!HelloWorld` code block.
        """
        return ''Hello World, text = %s, args = %s'' % \
            (Markup.escape(text), Markup.escape(repr(args)))

}}}

Note that `expand_macro` optionally takes a 4^th^ parameter ''''`args`''''. When the macro is called as a [WikiProcessors WikiProcessor], it''s also possible to pass `key=value` [WikiProcessors#UsingProcessors processor parameters]. If given, those are stored in a dictionary and passed in this extra `args` parameter. On the contrary, when called as a macro, `args` is  `None`. (''''since 0.12'''').

For example, when writing:
{{{
{{{#!HelloWorld style="polite" -silent verbose
<Hello World!>
}}}

{{{#!HelloWorld
<Hello World!>
}}}

[[HelloWorld(<Hello World!>)]]
}}}
One should get:
{{{
Hello World, text = <Hello World!> , args = {''style'': u''polite'', ''silent'': False, ''verbose'': True}
Hello World, text = <Hello World!> , args = {}
Hello World, text = <Hello World!> , args = None
}}}

Note that the return value of `expand_macro` is ''''''not'''''' HTML escaped. Depending on the expected result, you should escape it by yourself (using `return Markup.escape(result)`) or, if this is indeed HTML, wrap it in a Markup object (`return Markup(result)`) with `Markup` coming from Genshi, (`from genshi.core import Markup`).  

You can also recursively use a wiki Formatter (`from trac.wiki import Formatter`) to process the `text` as wiki markup, for example by doing:

{{{
#!python
from genshi.core import Markup
from trac.wiki.macros import WikiMacroBase
from trac.wiki import Formatter
import StringIO

class HelloWorldMacro(WikiMacroBase):
	def expand_macro(self, formatter, name, text, args):
		text = "whatever ''''''wiki'''''' markup you want, even containing other macros"
		# Convert Wiki markup to HTML, new style
		out = StringIO.StringIO()
		Formatter(self.env, formatter.context).format(text, out)
		return Markup(out.getvalue())
}}}
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiNewPage',2,1352317660595000,'trac','127.0.0.1','= Steps to Add a New Wiki Page =
[[TracGuideToc]]

Note: make sure you have actually the rights to edit wiki pages. If you don''t see the **Edit this page** button, read the informations relative to the editing policy for your Trac installation (usually on the front page WikiStart), or contact your local Trac administrator.

 1. Choose a name for your new page. See WikiPageNames for naming conventions.
 2. Edit an existing page (or any other resources that support WikiFormatting and add a [TracLinks link] to your new page. Save your changes.
 3. Follow the link you created to take you to the new page. Trac will display a "describe !PageName here" message.
 4. Click the "Edit this page" button to edit and add content to your new page. Save your changes.
 5. All done. Your new page is published.

You can skip the second step by entering the CamelCase name of the page in the quick-search field at the top of the page. But note that the page will effectively be "orphaned" unless you link to it from somewhere else.

== Rename a page #renaming

While picking up good WikiPageNames is important, you can always change your mind
and rename the page later.

You''ll need to ask for the WIKI_RENAME permission in order to be allowed to do this.
When renaming a page, you''ll be offered the possibility to create a redirection page, so that links pointing to the old location will not be left dangling.

----
See also: TracWiki, PageTemplates, WikiFormatting, TracLinks, WikiDeletePage
',NULL,NULL);
INSERT INTO "wiki" VALUES('WikiProcessors',3,1352317660617000,'trac','127.0.0.1','= Wiki Processors =

Processors are WikiMacros designed to provide alternative markup formats for the [TracWiki Wiki engine]. Processors can be thought of as ''''macro functions to process user-edited text''''. 

Wiki processors can be used in any Wiki text throughout Trac,
for various different purposes, like:
 - [#CodeHighlightingSupport syntax highlighting] or for rendering text verbatim,
 - rendering [#HTMLrelated Wiki markup inside a context], 
   like inside <div> blocks or <span> or within <td> or <th> table cells,
 - using an alternative markup syntax, like [wiki:WikiHtml raw HTML] and
   [wiki:WikiRestructuredText Restructured Text],
   or [http://www.textism.com/tools/textile/ textile]


== Using Processors ==

To use a processor on a block of text, first delimit the lines using
a Wiki ''''code block'''':
{{{
{{{
The lines
that should be processed...
}}}
}}}

Immediately after the `{{{` or on the line just below, 
add `#!` followed by the ''''processor name''''.

{{{
{{{
#!processorname
The lines
that should be processed...
}}}
}}}

This is the "shebang" notation, familiar to most UNIX users.

Besides their content, some Wiki processors can also accept ''''parameters'''',
which are then given as `key=value` pairs after the processor name, 
on the same line. If `value` has to contain space, as it''s often the case for
the style parameter, a quoted string can be used (`key="value with space"`).

As some processors are meant to process Wiki markup, it''s quite possible to
''''nest'''' processor blocks.
You may want to indent the content of nested blocks for increased clarity,
this extra indentation will be ignored when processing the content.


== Examples ==

||= Wiki Markup =||= Display =||
{{{#!td colspan=2 align=center style="border: none"

                __Example 1__: Inserting raw HTML
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
{{{
{{{
#!html
<h1 style="color: grey">This is raw HTML</h1>
}}}
}}}
}}}
{{{#!td valign=top style="border: none; padding-left: 2em"
{{{
#!html
<h1 style="color: grey">This is raw HTML</h1>
}}}
}}}
|-----------------------------------------------------------------
{{{#!td colspan=2 align=center style="border: none"

     __Example 2__: Highlighted Python code in a <div> block with custom style
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
  {{{
  {{{#!div style="background: #ffd; border: 3px ridge"

  This is an example of embedded "code" block:

    {{{
    #!python
    def hello():
        return "world"
    }}}

  }}}
  }}}
}}}
{{{#!td valign=top style="border: none; padding: 1em"
  {{{#!div style="background: #ffd; border: 3px ridge"

  This is an example of embedded "code" block:

    {{{
    #!python
    def hello():
        return "world"
    }}}

  }}}
}}}
|-----------------------------------------------------------------
{{{#!td colspan=2 align=center style="border: none"

     __Example 3__: Searching tickets from a wiki page, by keywords.
}}}
|-----------------------------------------------------------------
{{{#!td style="border: none"
  {{{
  {{{
  #!html
  <form action="/query" method="get"><div>
  <input type="text" name="keywords" value="~" size="30"/>
  <input type="submit" value="Search by Keywords"/>
  <!-- To control what fields show up use hidden fields
  <input type="hidden" name="col" value="id"/>
  <input type="hidden" name="col" value="summary"/>
  <input type="hidden" name="col" value="status"/>
  <input type="hidden" name="col" value="milestone"/>
  <input type="hidden" name="col" value="version"/>
  <input type="hidden" name="col" value="owner"/>
  <input type="hidden" name="col" value="priority"/>
  <input type="hidden" name="col" value="component"/>
  -->
  </div></form>
  }}}
  }}}
}}}
{{{#!td valign=top style="border: none; padding: 1em"
  {{{
  #!html
  <form action="/query" method="get"><div>
  <input type="text" name="keywords" value="~" size="30"/>
  <input type="submit" value="Search by Keywords"/>
  <!-- To control what fields show up use hidden fields
  <input type="hidden" name="col" value="id"/>
  <input type="hidden" name="col" value="summary"/>
  <input type="hidden" name="col" value="status"/>
  <input type="hidden" name="col" value="milestone"/>
  <input type="hidden" name="col" value="version"/>
  <input type="hidden" name="col" value="owner"/>
  <input type="hidden" name="col" value="priority"/>
  <input type="hidden" name="col" value="component"/>
  -->
  </div></form>
  }}}
}}}
== Available Processors ==

The following processors are included in the Trac distribution:

|| ''''''`#!default`'''''' || Present the text verbatim in a preformatted text block. This is the same as specifying ''''no'''' processor name (and no `#!`) ||
|| ''''''`#!comment`'''''' || Do not process the text in this section (i.e. contents exist only in the plain text - not in the rendered page). ||
|||| ||
||||= ''''''HTML related'''''' =||
|| ''''''`#!html`'''''' || Insert custom HTML in a wiki page. ||
|| ''''''`#!htmlcomment`'''''' || Insert an HTML comment in a wiki page (''''since 0.12''''). ||
|| || Note that `#!html` blocks have to be ''''self-contained'''', i.e. you can''t start an HTML element in one block and close it later in a second block. Use the following processors for achieving a similar effect.  ||
|| ''''''`#!div`'''''' || Wrap an arbitrary Wiki content inside a <div> element (''''since 0.11''''). ||
|| ''''''`#!span`'''''' || Wrap an arbitrary Wiki content inside a <span> element (''''since 0.11''''). ||
|| ''''''`#!td`'''''' || Wrap an arbitrary Wiki content inside a <td> element (''''since 0.12'''') ||
|| ''''''`#!th`'''''' || Wrap an arbitrary Wiki content inside a <th> element (''''since 0.12'''') ||
|| ''''''`#!tr`'''''' || Can optionally be used for wrapping `#!td` and `#!th` blocks, either for specifying row attributes of better visual grouping (''''since 0.12'''') ||
|| || See WikiHtml for example usage and more details about these processors. ||
|||| ||
||||= ''''''Other Markups'''''' =||
|| ''''''`#!rst`'''''' || Trac support for Restructured Text. See WikiRestructuredText. ||
|| ''''''`#!textile`'''''' || Supported if [http://cheeseshop.python.org/pypi/textile Textile] is installed. See [http://www.textism.com/tools/textile/ a Textile reference]. ||
|||| ||
||||= ''''''Code Highlighting Support'''''' =||
|| ''''''`#!c`'''''' [[BR]] ''''''`#!cpp`'''''' (C++) [[BR]] ''''''`#!python`'''''' [[BR]] ''''''`#!perl`'''''' [[BR]] ''''''`#!ruby`'''''' [[BR]] ''''''`#!php`'''''' [[BR]] ''''''`#!asp`'''''' [[BR]] ''''''`#!java`'''''' [[BR]] ''''''`#!js`'''''' (Javascript) [[BR]] ''''''`#!sql`'''''' [[BR]] ''''''`#!xml`'''''' (XML or HTML) [[BR]] ''''''`#!sh`'''''' (!Bourne/Bash shell) [[BR]] ''''''etc.'''''' [[BR]] || Trac includes processors to provide inline syntax highlighting for source code in various languages. [[BR]] [[BR]] Trac relies on external software packages for syntax coloring, like [http://pygments.org Pygments]. [[BR]] [[BR]] See TracSyntaxColoring for information about which languages are supported and how to enable support for more languages. ||
|||| ||
||||= ''''''MIME Type Processors'''''' =||
|||| Using the MIME type as processor, it is possible to syntax-highlight the same languages that are supported when browsing source code. ||
{{{#!tr
{{{#!td
Some examples:
 {{{
{{{
#!text/html
<h1>text</h1>
}}}
 }}}
}}}
{{{#!td
The result will be syntax highlighted HTML code:
 {{{
#!text/html
<h1>text</h1>
 }}}

The same is valid for all other [TracSyntaxColoring#SyntaxColoringSupport mime types supported].
}}}
}}}
{{{#!td
 {{{
{{{
#!diff
--- Version 55
+++ Version 56
@@ -115,8 +115,9 @@
     name=''TracHelloWorld'', version=''1.0'',
     packages=find_packages(exclude=[''*.tests*'']),
-    entry_points = """
-        [trac.plugins]
-        helloworld = myplugs.helloworld
-    """,
+    entry_points = {
+        ''trac.plugins'': [
+            ''helloworld = myplugs.helloworld'',
+        ],
+    },
 )
}}}
 }}}
}}}
{{{#!td
''''''`#!diff`'''''' has a particularly nice renderer:
 {{{
#!diff
--- Version 55
+++ Version 56
@@ -115,8 +115,9 @@
     name=''TracHelloWorld'', version=''1.0'',
     packages=find_packages(exclude=[''*.tests*'']),
-    entry_points = """
-        [trac.plugins]
-        helloworld = myplugs.helloworld
-    """,
+    entry_points = {
+        ''trac.plugins'': [
+            ''helloworld = myplugs.helloworld'',
+        ],
+    },
 )
 }}}
}}}

For more processor macros developed and/or contributed by users, visit: 
 * [trac:ProcessorBazaar]
 * [trac:MacroBazaar]
 * [http://trac-hacks.org Trac Hacks] community site

Developing processors is no different from Wiki macros. 
In fact they work the same way, only the usage syntax differs. 
See WikiMacros#DevelopingCustomMacros for more information.


----
See also: WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide
',NULL,NULL);
CREATE TABLE repository (
    id integer,
    name text,
    value text,
    UNIQUE (id,name)
);
CREATE TABLE revision (
    repos integer,
    rev text,
    time integer,
    author text,
    message text,
    UNIQUE (repos,rev)
);
CREATE TABLE node_change (
    repos integer,
    rev text,
    path text,
    node_type text,
    change_type text,
    base_path text,
    base_rev text,
    UNIQUE (repos,rev,path,change_type)
);
CREATE TABLE ticket (
    id integer PRIMARY KEY,
    type text,
    time integer,
    changetime integer,
    component text,
    severity text,
    priority text,
    owner text,
    reporter text,
    cc text,
    version text,
    milestone text,
    status text,
    resolution text,
    summary text,
    description text,
    keywords text
);
CREATE TABLE ticket_change (
    ticket integer,
    time integer,
    author text,
    field text,
    oldvalue text,
    newvalue text,
    UNIQUE (ticket,time,field)
);
CREATE TABLE ticket_custom (
    ticket integer,
    name text,
    value text,
    UNIQUE (ticket,name)
);
CREATE TABLE enum (
    type text,
    name text,
    value text,
    UNIQUE (type,name)
);
INSERT INTO "enum" VALUES('resolution','已修改','1');
INSERT INTO "enum" VALUES('resolution','误报','2');
INSERT INTO "enum" VALUES('resolution','暂不修改','3');
INSERT INTO "enum" VALUES('resolution','问题重复','4');
INSERT INTO "enum" VALUES('resolution','不能重现','5');
INSERT INTO "enum" VALUES('priority','紧急','1');
INSERT INTO "enum" VALUES('priority','严重问题','2');
INSERT INTO "enum" VALUES('priority','较高','3');
INSERT INTO "enum" VALUES('priority','较低(小缺陷)','4');
INSERT INTO "enum" VALUES('priority','低(轻微问题)','5');
INSERT INTO "enum" VALUES('ticket_type','缺陷','1');
INSERT INTO "enum" VALUES('ticket_type','功能增强','2');
INSERT INTO "enum" VALUES('ticket_type','任务','3');
CREATE TABLE component (
    name text PRIMARY KEY,
    owner text,
    description text
);
INSERT INTO "component" VALUES('component1','admin','');
INSERT INTO "component" VALUES('component2','admin','');
CREATE TABLE milestone (
    name text PRIMARY KEY,
    due integer,
    completed integer,
    description text
);
INSERT INTO "milestone" VALUES('milestone1',0,0,'');
INSERT INTO "milestone" VALUES('milestone2',0,0,NULL);
INSERT INTO "milestone" VALUES('milestone3',0,0,NULL);
INSERT INTO "milestone" VALUES('milestone4',0,0,NULL);
CREATE TABLE version (
    name text PRIMARY KEY,
    time integer,
    description text
);
CREATE TABLE report (
    id integer PRIMARY KEY,
    author text,
    title text,
    query text,
    description text
);
INSERT INTO "report" VALUES(1,NULL,'Active Tickets','
SELECT p.value AS __color__,
   id AS ticket, summary, component, version, milestone, t.type AS type, 
   owner, status,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE status <> ''closed''
  ORDER BY CAST(p.value AS integer), milestone, t.type, time
','
 * List all active tickets by priority.
 * Color each row based on priority.
');
INSERT INTO "report" VALUES(2,NULL,'Active Tickets by Version','
SELECT p.value AS __color__,
   version AS __group__,
   id AS ticket, summary, component, version, t.type AS type, 
   owner, status,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE status <> ''closed''
  ORDER BY (version IS NULL),version, CAST(p.value AS integer), t.type, time
','
This report shows how to color results by priority,
while grouping results by version.

Last modification time, description and reporter are included as hidden fields
for useful RSS export.
');
INSERT INTO "report" VALUES(3,NULL,'Active Tickets by Milestone','
SELECT p.value AS __color__,
   ''Milestone ''||milestone AS __group__,
   id AS ticket, summary, component, version, t.type AS type, 
   owner, status,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE status <> ''closed'' 
  ORDER BY (milestone IS NULL),milestone, CAST(p.value AS integer), t.type, time
','
This report shows how to color results by priority,
while grouping results by milestone.

Last modification time, description and reporter are included as hidden fields
for useful RSS export.
');
INSERT INTO "report" VALUES(4,NULL,'Accepted, Active Tickets by Owner','

SELECT p.value AS __color__,
   owner AS __group__,
   id AS ticket, summary, component, milestone, t.type AS type, time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE status = ''accepted''
  ORDER BY owner, CAST(p.value AS integer), t.type, time
','
List accepted tickets, group by ticket owner, sorted by priority.
');
INSERT INTO "report" VALUES(5,NULL,'Accepted, Active Tickets by Owner (Full Description)','
SELECT p.value AS __color__,
   owner AS __group__,
   id AS ticket, summary, component, milestone, t.type AS type, time AS created,
   description AS _description_,
   changetime AS _changetime, reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE status = ''accepted''
  ORDER BY owner, CAST(p.value AS integer), t.type, time
','
List tickets accepted, group by ticket owner.
This report demonstrates the use of full-row display.
');
INSERT INTO "report" VALUES(6,NULL,'All Tickets By Milestone  (Including closed)','
SELECT p.value AS __color__,
   t.milestone AS __group__,
   (CASE status 
      WHEN ''closed'' THEN ''color: #777; background: #ddd; border-color: #ccc;''
      ELSE 
        (CASE owner WHEN $USER THEN ''font-weight: bold'' END)
    END) AS __style__,
   id AS ticket, summary, component, status, 
   resolution,version, t.type AS type, priority, owner,
   changetime AS modified,
   time AS _time,reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  ORDER BY (milestone IS NULL), milestone DESC, (status = ''closed''), 
        (CASE status WHEN ''closed'' THEN changetime ELSE (-1) * CAST(p.value AS integer) END) DESC
','
A more complex example to show how to make advanced reports.
');
INSERT INTO "report" VALUES(7,NULL,'My Tickets','
SELECT p.value AS __color__,
   (CASE status WHEN ''accepted'' THEN ''Accepted'' ELSE ''Owned'' END) AS __group__,
   id AS ticket, summary, component, version, milestone,
   t.type AS type, priority, time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE t.status <> ''closed'' AND owner = $USER
  ORDER BY (status = ''accepted'') DESC, CAST(p.value AS integer), milestone, t.type, time
','
This report demonstrates the use of the automatically set 
USER dynamic variable, replaced with the username of the
logged in user when executed.
');
INSERT INTO "report" VALUES(8,NULL,'Active Tickets, Mine first','
SELECT p.value AS __color__,
   (CASE owner 
     WHEN $USER THEN ''My Tickets'' 
     ELSE ''Active Tickets'' 
    END) AS __group__,
   id AS ticket, summary, component, version, milestone, t.type AS type, 
   owner, status,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter
  FROM ticket t
  LEFT JOIN enum p ON p.name = t.priority AND p.type = ''priority''
  WHERE status <> ''closed'' 
  ORDER BY (COALESCE(owner, '''') = $USER) DESC, CAST(p.value AS integer), milestone, t.type, time
','
 * List all active tickets by priority.
 * Show all tickets owned by the logged in user in a group first.
');
INSERT INTO "report" VALUES(9,NULL,'我未完成的工作','query:?owner=$USER
&
status=accepted
&
status=assigned
&
status=new
&
status=reopened
&
col=id
&
col=summary
&
col=status
&
col=due_assign
&
col=due_close
&
col=complete
&
col=parents
&
col=blockedby
&
col=blocking
&
col=type
&
col=priority
&
col=milestone
&
col=component
&
col=version
&
order=priority','显示属于当前用户的所有未关闭的 Ticket');
CREATE TABLE tags (
    tagspace text,
    name text,
    tag text,
    UNIQUE (tagspace,name,tag)
);
CREATE TABLE tractweakui_list (
    id integer PRIMARY KEY,
    time integer,
    path_pattern text,
    filter_name text,
    tweak_script text
);
CREATE TABLE fullblog_posts (
    name text,
    version integer,
    title text,
    body text,
    publish_time integer,
    version_time integer,
    version_comment text,
    version_author text,
    author text,
    categories text,
    UNIQUE (name,version)
);
CREATE TABLE fullblog_comments (
    name text,
    number integer,
    comment text,
    author text,
    time integer,
    UNIQUE (name,number)
);
CREATE TABLE votes (
    resource text,
    username text,
    vote integer,
    UNIQUE (resource,username,vote)
);
CREATE TABLE visit (
  id integer PRIMARY KEY,
  page text,
  count integer
);
INSERT INTO "visit" VALUES(1,'WikiStart',1);
INSERT INTO "visit" VALUES(2,'SandBox',1);
CREATE TABLE bill_date (
            time integer,
            set_when integer,
            str_value text
            );
CREATE TABLE custom_report (id         INTEGER,uuid       VARCHAR(64),maingroup  VARCHAR(255),subgroup   VARCHAR(255),version    INTEGER,ordering   INTEGER);
CREATE TABLE estimate(
                     id integer PRIMARY KEY,
                     rate DECIMAL,
                     variability DECIMAL,
                     communication DECIMAL,
                     tickets VARCHAR(512),
                     comment text
                 , diffcomment text, saveepoch int);
CREATE TABLE estimate_line_item(
                     id integer PRIMARY KEY,
                     estimate_id integer,
                     description VARCHAR(2048),
                     low DECIMAL,
                     high DECIMAL
                );
CREATE TABLE mastertickets (
    source integer,
    dest integer,
    UNIQUE (source,dest)
);
CREATE TABLE cache (
    id integer PRIMARY KEY,
    generation integer,
    key text
);
INSERT INTO "cache" VALUES(901198563,1,'trac.wiki.api.WikiSystem.pages');
CREATE TABLE subtickets (
    parent integer,
    child integer,
    UNIQUE (parent,child)
);
CREATE INDEX session_last_visit_idx ON session (last_visit);
CREATE INDEX session_authenticated_idx ON session (authenticated);
CREATE INDEX wiki_time_idx ON wiki (time);
CREATE INDEX revision_repos_time_idx ON revision (repos,time);
CREATE INDEX node_change_repos_rev_idx ON node_change (repos,rev);
CREATE INDEX ticket_time_idx ON ticket (time);
CREATE INDEX ticket_status_idx ON ticket (status);
CREATE INDEX ticket_change_ticket_idx ON ticket_change (ticket);
CREATE INDEX ticket_change_time_idx ON ticket_change (time);
CREATE INDEX tags_tagspace_name_idx ON tags (tagspace,name);
CREATE INDEX tags_tagspace_tag_idx ON tags (tagspace,tag);
CREATE INDEX fullblog_posts_version_time_idx ON fullblog_posts (version_time);
CREATE INDEX fullblog_comments_time_idx ON fullblog_comments (time);
COMMIT;
